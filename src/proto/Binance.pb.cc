// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Binance.proto

#include "Binance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelTradeOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClaimHTLOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepositHTLTOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HTLTOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefundHTLTOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendOrder_Input_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendOrder_Output_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendOrder_Token_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SideChainDelegate_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SideChainRedelegate_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SideChainUndelegate_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeLockOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeRelockOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeUnlockOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenBurnOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenFreezeOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenIssueOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenMintOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenUnfreezeOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeOrder_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferOut_Binance_2eproto;
namespace TW {
namespace Binance {
namespace Proto {
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class Signature_PubKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signature_PubKey> _instance;
} _Signature_PubKey_default_instance_;
class SignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signature> _instance;
} _Signature_default_instance_;
class TradeOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeOrder> _instance;
} _TradeOrder_default_instance_;
class CancelTradeOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelTradeOrder> _instance;
} _CancelTradeOrder_default_instance_;
class SendOrder_TokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendOrder_Token> _instance;
} _SendOrder_Token_default_instance_;
class SendOrder_InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendOrder_Input> _instance;
} _SendOrder_Input_default_instance_;
class SendOrder_OutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendOrder_Output> _instance;
} _SendOrder_Output_default_instance_;
class SendOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendOrder> _instance;
} _SendOrder_default_instance_;
class TokenIssueOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenIssueOrder> _instance;
} _TokenIssueOrder_default_instance_;
class TokenMintOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenMintOrder> _instance;
} _TokenMintOrder_default_instance_;
class TokenBurnOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenBurnOrder> _instance;
} _TokenBurnOrder_default_instance_;
class TokenFreezeOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenFreezeOrder> _instance;
} _TokenFreezeOrder_default_instance_;
class TokenUnfreezeOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenUnfreezeOrder> _instance;
} _TokenUnfreezeOrder_default_instance_;
class HTLTOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTLTOrder> _instance;
} _HTLTOrder_default_instance_;
class DepositHTLTOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositHTLTOrder> _instance;
} _DepositHTLTOrder_default_instance_;
class ClaimHTLOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClaimHTLOrder> _instance;
} _ClaimHTLOrder_default_instance_;
class RefundHTLTOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefundHTLTOrder> _instance;
} _RefundHTLTOrder_default_instance_;
class TransferOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferOut> _instance;
} _TransferOut_default_instance_;
class SideChainDelegateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SideChainDelegate> _instance;
} _SideChainDelegate_default_instance_;
class SideChainRedelegateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SideChainRedelegate> _instance;
} _SideChainRedelegate_default_instance_;
class SideChainUndelegateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SideChainUndelegate> _instance;
} _SideChainUndelegate_default_instance_;
class TimeLockOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeLockOrder> _instance;
} _TimeLockOrder_default_instance_;
class TimeRelockOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeRelockOrder> _instance;
} _TimeRelockOrder_default_instance_;
class TimeUnlockOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeUnlockOrder> _instance;
} _TimeUnlockOrder_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Binance
}  // namespace TW
static void InitDefaultsscc_info_CancelTradeOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_CancelTradeOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::CancelTradeOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelTradeOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelTradeOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_ClaimHTLOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_ClaimHTLOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::ClaimHTLOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClaimHTLOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClaimHTLOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_DepositHTLTOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_DepositHTLTOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::DepositHTLTOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepositHTLTOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DepositHTLTOrder_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static void InitDefaultsscc_info_HTLTOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_HTLTOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::HTLTOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HTLTOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HTLTOrder_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static void InitDefaultsscc_info_RefundHTLTOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_RefundHTLTOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::RefundHTLTOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefundHTLTOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RefundHTLTOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_SendOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_SendOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::SendOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SendOrder_Binance_2eproto}, {
      &scc_info_SendOrder_Input_Binance_2eproto.base,
      &scc_info_SendOrder_Output_Binance_2eproto.base,}};

static void InitDefaultsscc_info_SendOrder_Input_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_SendOrder_Input_default_instance_;
    new (ptr) ::TW::Binance::Proto::SendOrder_Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendOrder_Input_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendOrder_Input_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static void InitDefaultsscc_info_SendOrder_Output_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_SendOrder_Output_default_instance_;
    new (ptr) ::TW::Binance::Proto::SendOrder_Output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendOrder_Output_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendOrder_Output_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static void InitDefaultsscc_info_SendOrder_Token_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_SendOrder_Token_default_instance_;
    new (ptr) ::TW::Binance::Proto::SendOrder_Token();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendOrder_Token_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendOrder_Token_Binance_2eproto}, {}};

static void InitDefaultsscc_info_SideChainDelegate_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_SideChainDelegate_default_instance_;
    new (ptr) ::TW::Binance::Proto::SideChainDelegate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SideChainDelegate_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SideChainDelegate_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static void InitDefaultsscc_info_SideChainRedelegate_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_SideChainRedelegate_default_instance_;
    new (ptr) ::TW::Binance::Proto::SideChainRedelegate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SideChainRedelegate_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SideChainRedelegate_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static void InitDefaultsscc_info_SideChainUndelegate_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_SideChainUndelegate_default_instance_;
    new (ptr) ::TW::Binance::Proto::SideChainUndelegate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SideChainUndelegate_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SideChainUndelegate_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static void InitDefaultsscc_info_Signature_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_Signature_default_instance_;
    new (ptr) ::TW::Binance::Proto::Signature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signature_Binance_2eproto}, {}};

static void InitDefaultsscc_info_Signature_PubKey_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_Signature_PubKey_default_instance_;
    new (ptr) ::TW::Binance::Proto::Signature_PubKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_PubKey_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signature_PubKey_Binance_2eproto}, {}};

static void InitDefaultsscc_info_SigningInput_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Binance::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_SigningInput_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 19, 0, InitDefaultsscc_info_SigningInput_Binance_2eproto}, {
      &scc_info_TradeOrder_Binance_2eproto.base,
      &scc_info_CancelTradeOrder_Binance_2eproto.base,
      &scc_info_SendOrder_Binance_2eproto.base,
      &scc_info_TokenFreezeOrder_Binance_2eproto.base,
      &scc_info_TokenUnfreezeOrder_Binance_2eproto.base,
      &scc_info_HTLTOrder_Binance_2eproto.base,
      &scc_info_DepositHTLTOrder_Binance_2eproto.base,
      &scc_info_ClaimHTLOrder_Binance_2eproto.base,
      &scc_info_RefundHTLTOrder_Binance_2eproto.base,
      &scc_info_TokenIssueOrder_Binance_2eproto.base,
      &scc_info_TokenMintOrder_Binance_2eproto.base,
      &scc_info_TokenBurnOrder_Binance_2eproto.base,
      &scc_info_TransferOut_Binance_2eproto.base,
      &scc_info_SideChainDelegate_Binance_2eproto.base,
      &scc_info_SideChainRedelegate_Binance_2eproto.base,
      &scc_info_SideChainUndelegate_Binance_2eproto.base,
      &scc_info_TimeLockOrder_Binance_2eproto.base,
      &scc_info_TimeRelockOrder_Binance_2eproto.base,
      &scc_info_TimeUnlockOrder_Binance_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Binance::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Binance_2eproto}, {}};

static void InitDefaultsscc_info_TimeLockOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TimeLockOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::TimeLockOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeLockOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeLockOrder_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static void InitDefaultsscc_info_TimeRelockOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TimeRelockOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::TimeRelockOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeRelockOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeRelockOrder_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static void InitDefaultsscc_info_TimeUnlockOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TimeUnlockOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::TimeUnlockOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeUnlockOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeUnlockOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_TokenBurnOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TokenBurnOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::TokenBurnOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenBurnOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokenBurnOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_TokenFreezeOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TokenFreezeOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::TokenFreezeOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenFreezeOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokenFreezeOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_TokenIssueOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TokenIssueOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::TokenIssueOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenIssueOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokenIssueOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_TokenMintOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TokenMintOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::TokenMintOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenMintOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokenMintOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_TokenUnfreezeOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TokenUnfreezeOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::TokenUnfreezeOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenUnfreezeOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokenUnfreezeOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_TradeOrder_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TradeOrder_default_instance_;
    new (ptr) ::TW::Binance::Proto::TradeOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeOrder_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeOrder_Binance_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_Transaction_default_instance_;
    new (ptr) ::TW::Binance::Proto::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_Binance_2eproto}, {}};

static void InitDefaultsscc_info_TransferOut_Binance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Binance::Proto::_TransferOut_default_instance_;
    new (ptr) ::TW::Binance::Proto::TransferOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferOut_Binance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferOut_Binance_2eproto}, {
      &scc_info_SendOrder_Token_Binance_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Binance_2eproto[27];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Binance_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Binance_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Binance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Transaction, msgs_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Transaction, signatures_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Transaction, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Transaction, source_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Transaction, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Signature_PubKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Signature, pub_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Signature, signature_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Signature, account_number_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::Signature, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TradeOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TradeOrder, sender_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TradeOrder, id_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TradeOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TradeOrder, ordertype_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TradeOrder, side_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TradeOrder, price_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TradeOrder, quantity_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TradeOrder, timeinforce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::CancelTradeOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::CancelTradeOrder, sender_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::CancelTradeOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::CancelTradeOrder, refid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder_Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder_Token, denom_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder_Token, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder_Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder_Input, address_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder_Input, coins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder_Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder_Output, address_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder_Output, coins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder, inputs_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SendOrder, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenIssueOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenIssueOrder, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenIssueOrder, name_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenIssueOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenIssueOrder, total_supply_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenIssueOrder, mintable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenMintOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenMintOrder, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenMintOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenMintOrder, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenBurnOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenBurnOrder, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenBurnOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenBurnOrder, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenFreezeOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenFreezeOrder, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenFreezeOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenFreezeOrder, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenUnfreezeOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenUnfreezeOrder, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenUnfreezeOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TokenUnfreezeOrder, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, recipient_other_chain_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, sender_other_chain_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, random_number_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, expected_income_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, height_span_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::HTLTOrder, cross_chain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::DepositHTLTOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::DepositHTLTOrder, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::DepositHTLTOrder, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::DepositHTLTOrder, swap_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::ClaimHTLOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::ClaimHTLOrder, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::ClaimHTLOrder, swap_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::ClaimHTLOrder, random_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::RefundHTLTOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::RefundHTLTOrder, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::RefundHTLTOrder, swap_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TransferOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TransferOut, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TransferOut, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TransferOut, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TransferOut, expire_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainDelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainDelegate, delegator_addr_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainDelegate, validator_addr_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainDelegate, delegation_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainDelegate, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainRedelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainRedelegate, delegator_addr_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainRedelegate, validator_src_addr_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainRedelegate, validator_dst_addr_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainRedelegate, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainRedelegate, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainUndelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainUndelegate, delegator_addr_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainUndelegate, validator_addr_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainUndelegate, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SideChainUndelegate, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeLockOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeLockOrder, from_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeLockOrder, description_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeLockOrder, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeLockOrder, lock_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeRelockOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeRelockOrder, from_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeRelockOrder, id_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeRelockOrder, description_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeRelockOrder, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeRelockOrder, lock_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeUnlockOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeUnlockOrder, from_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::TimeUnlockOrder, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningInput, chain_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningInput, account_number_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningInput, sequence_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningInput, source_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningInput, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningInput, private_key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningInput, order_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Binance::Proto::SigningOutput, encoded_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Binance::Proto::Transaction)},
  { 10, -1, sizeof(::TW::Binance::Proto::Signature_PubKey)},
  { 15, -1, sizeof(::TW::Binance::Proto::Signature)},
  { 24, -1, sizeof(::TW::Binance::Proto::TradeOrder)},
  { 37, -1, sizeof(::TW::Binance::Proto::CancelTradeOrder)},
  { 45, -1, sizeof(::TW::Binance::Proto::SendOrder_Token)},
  { 52, -1, sizeof(::TW::Binance::Proto::SendOrder_Input)},
  { 59, -1, sizeof(::TW::Binance::Proto::SendOrder_Output)},
  { 66, -1, sizeof(::TW::Binance::Proto::SendOrder)},
  { 73, -1, sizeof(::TW::Binance::Proto::TokenIssueOrder)},
  { 83, -1, sizeof(::TW::Binance::Proto::TokenMintOrder)},
  { 91, -1, sizeof(::TW::Binance::Proto::TokenBurnOrder)},
  { 99, -1, sizeof(::TW::Binance::Proto::TokenFreezeOrder)},
  { 107, -1, sizeof(::TW::Binance::Proto::TokenUnfreezeOrder)},
  { 115, -1, sizeof(::TW::Binance::Proto::HTLTOrder)},
  { 130, -1, sizeof(::TW::Binance::Proto::DepositHTLTOrder)},
  { 138, -1, sizeof(::TW::Binance::Proto::ClaimHTLOrder)},
  { 146, -1, sizeof(::TW::Binance::Proto::RefundHTLTOrder)},
  { 153, -1, sizeof(::TW::Binance::Proto::TransferOut)},
  { 162, -1, sizeof(::TW::Binance::Proto::SideChainDelegate)},
  { 171, -1, sizeof(::TW::Binance::Proto::SideChainRedelegate)},
  { 181, -1, sizeof(::TW::Binance::Proto::SideChainUndelegate)},
  { 190, -1, sizeof(::TW::Binance::Proto::TimeLockOrder)},
  { 199, -1, sizeof(::TW::Binance::Proto::TimeRelockOrder)},
  { 209, -1, sizeof(::TW::Binance::Proto::TimeUnlockOrder)},
  { 216, -1, sizeof(::TW::Binance::Proto::SigningInput)},
  { 247, -1, sizeof(::TW::Binance::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_Signature_PubKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_Signature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TradeOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_CancelTradeOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_SendOrder_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_SendOrder_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_SendOrder_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_SendOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TokenIssueOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TokenMintOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TokenBurnOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TokenFreezeOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TokenUnfreezeOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_HTLTOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_DepositHTLTOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_ClaimHTLOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_RefundHTLTOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TransferOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_SideChainDelegate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_SideChainRedelegate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_SideChainUndelegate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TimeLockOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TimeRelockOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_TimeUnlockOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Binance::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Binance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rBinance.proto\022\020TW.Binance.Proto\"[\n\013Tra"
  "nsaction\022\014\n\004msgs\030\001 \003(\014\022\022\n\nsignatures\030\002 \003"
  "(\014\022\014\n\004memo\030\003 \001(\t\022\016\n\006source\030\004 \001(\003\022\014\n\004data"
  "\030\005 \001(\014\"c\n\tSignature\022\017\n\007pub_key\030\001 \001(\014\022\021\n\t"
  "signature\030\002 \001(\014\022\026\n\016account_number\030\003 \001(\003\022"
  "\020\n\010sequence\030\004 \001(\003\032\010\n\006PubKey\"\217\001\n\nTradeOrd"
  "er\022\016\n\006sender\030\001 \001(\014\022\n\n\002id\030\002 \001(\t\022\016\n\006symbol"
  "\030\003 \001(\t\022\021\n\tordertype\030\004 \001(\003\022\014\n\004side\030\005 \001(\003\022"
  "\r\n\005price\030\006 \001(\003\022\020\n\010quantity\030\007 \001(\003\022\023\n\013time"
  "inforce\030\010 \001(\003\"A\n\020CancelTradeOrder\022\016\n\006sen"
  "der\030\001 \001(\014\022\016\n\006symbol\030\002 \001(\t\022\r\n\005refid\030\003 \001(\t"
  "\"\264\002\n\tSendOrder\0221\n\006inputs\030\001 \003(\0132!.TW.Bina"
  "nce.Proto.SendOrder.Input\0223\n\007outputs\030\002 \003"
  "(\0132\".TW.Binance.Proto.SendOrder.Output\032&"
  "\n\005Token\022\r\n\005denom\030\001 \001(\t\022\016\n\006amount\030\002 \001(\003\032J"
  "\n\005Input\022\017\n\007address\030\001 \001(\014\0220\n\005coins\030\002 \003(\0132"
  "!.TW.Binance.Proto.SendOrder.Token\032K\n\006Ou"
  "tput\022\017\n\007address\030\001 \001(\014\0220\n\005coins\030\002 \003(\0132!.T"
  "W.Binance.Proto.SendOrder.Token\"e\n\017Token"
  "IssueOrder\022\014\n\004from\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\016"
  "\n\006symbol\030\003 \001(\t\022\024\n\014total_supply\030\004 \001(\003\022\020\n\010"
  "mintable\030\005 \001(\010\">\n\016TokenMintOrder\022\014\n\004from"
  "\030\001 \001(\014\022\016\n\006symbol\030\002 \001(\t\022\016\n\006amount\030\003 \001(\003\">"
  "\n\016TokenBurnOrder\022\014\n\004from\030\001 \001(\014\022\016\n\006symbol"
  "\030\002 \001(\t\022\016\n\006amount\030\003 \001(\003\"@\n\020TokenFreezeOrd"
  "er\022\014\n\004from\030\001 \001(\014\022\016\n\006symbol\030\002 \001(\t\022\016\n\006amou"
  "nt\030\003 \001(\003\"B\n\022TokenUnfreezeOrder\022\014\n\004from\030\001"
  " \001(\014\022\016\n\006symbol\030\002 \001(\t\022\016\n\006amount\030\003 \001(\003\"\205\002\n"
  "\tHTLTOrder\022\014\n\004from\030\001 \001(\014\022\n\n\002to\030\002 \001(\014\022\035\n\025"
  "recipient_other_chain\030\003 \001(\t\022\032\n\022sender_ot"
  "her_chain\030\004 \001(\t\022\032\n\022random_number_hash\030\005 "
  "\001(\014\022\021\n\ttimestamp\030\006 \001(\003\0221\n\006amount\030\007 \003(\0132!"
  ".TW.Binance.Proto.SendOrder.Token\022\027\n\017exp"
  "ected_income\030\010 \001(\t\022\023\n\013height_span\030\t \001(\003\022"
  "\023\n\013cross_chain\030\n \001(\010\"d\n\020DepositHTLTOrder"
  "\022\014\n\004from\030\001 \001(\014\0221\n\006amount\030\002 \003(\0132!.TW.Bina"
  "nce.Proto.SendOrder.Token\022\017\n\007swap_id\030\003 \001"
  "(\014\"E\n\rClaimHTLOrder\022\014\n\004from\030\001 \001(\014\022\017\n\007swa"
  "p_id\030\002 \001(\014\022\025\n\rrandom_number\030\003 \001(\014\"0\n\017Ref"
  "undHTLTOrder\022\014\n\004from\030\001 \001(\014\022\017\n\007swap_id\030\002 "
  "\001(\014\"o\n\013TransferOut\022\014\n\004from\030\001 \001(\014\022\n\n\002to\030\002"
  " \001(\014\0221\n\006amount\030\003 \001(\0132!.TW.Binance.Proto."
  "SendOrder.Token\022\023\n\013expire_time\030\004 \001(\003\"\214\001\n"
  "\021SideChainDelegate\022\026\n\016delegator_addr\030\001 \001"
  "(\014\022\026\n\016validator_addr\030\002 \001(\014\0225\n\ndelegation"
  "\030\003 \001(\0132!.TW.Binance.Proto.SendOrder.Toke"
  "n\022\020\n\010chain_id\030\004 \001(\t\"\252\001\n\023SideChainRedeleg"
  "ate\022\026\n\016delegator_addr\030\001 \001(\014\022\032\n\022validator"
  "_src_addr\030\002 \001(\014\022\032\n\022validator_dst_addr\030\003 "
  "\001(\014\0221\n\006amount\030\004 \001(\0132!.TW.Binance.Proto.S"
  "endOrder.Token\022\020\n\010chain_id\030\005 \001(\t\"\212\001\n\023Sid"
  "eChainUndelegate\022\026\n\016delegator_addr\030\001 \001(\014"
  "\022\026\n\016validator_addr\030\002 \001(\014\0221\n\006amount\030\003 \001(\013"
  "2!.TW.Binance.Proto.SendOrder.Token\022\020\n\010c"
  "hain_id\030\004 \001(\t\"\200\001\n\rTimeLockOrder\022\024\n\014from_"
  "address\030\001 \001(\014\022\023\n\013description\030\002 \001(\t\0221\n\006am"
  "ount\030\003 \003(\0132!.TW.Binance.Proto.SendOrder."
  "Token\022\021\n\tlock_time\030\004 \001(\003\"\216\001\n\017TimeRelockO"
  "rder\022\024\n\014from_address\030\001 \001(\014\022\n\n\002id\030\002 \001(\003\022\023"
  "\n\013description\030\003 \001(\t\0221\n\006amount\030\004 \003(\0132!.TW"
  ".Binance.Proto.SendOrder.Token\022\021\n\tlock_t"
  "ime\030\005 \001(\003\"3\n\017TimeUnlockOrder\022\024\n\014from_add"
  "ress\030\001 \001(\014\022\n\n\002id\030\002 \001(\003\"\230\n\n\014SigningInput\022"
  "\020\n\010chain_id\030\001 \001(\t\022\026\n\016account_number\030\002 \001("
  "\003\022\020\n\010sequence\030\003 \001(\003\022\016\n\006source\030\004 \001(\003\022\014\n\004m"
  "emo\030\005 \001(\t\022\023\n\013private_key\030\006 \001(\014\0223\n\013trade_"
  "order\030\010 \001(\0132\034.TW.Binance.Proto.TradeOrde"
  "rH\000\022@\n\022cancel_trade_order\030\t \001(\0132\".TW.Bin"
  "ance.Proto.CancelTradeOrderH\000\0221\n\nsend_or"
  "der\030\n \001(\0132\033.TW.Binance.Proto.SendOrderH\000"
  "\022:\n\014freeze_order\030\013 \001(\0132\".TW.Binance.Prot"
  "o.TokenFreezeOrderH\000\022>\n\016unfreeze_order\030\014"
  " \001(\0132$.TW.Binance.Proto.TokenUnfreezeOrd"
  "erH\000\0221\n\nhtlt_order\030\r \001(\0132\033.TW.Binance.Pr"
  "oto.HTLTOrderH\000\022\?\n\021depositHTLT_order\030\016 \001"
  "(\0132\".TW.Binance.Proto.DepositHTLTOrderH\000"
  "\022:\n\017claimHTLT_order\030\017 \001(\0132\037.TW.Binance.P"
  "roto.ClaimHTLOrderH\000\022=\n\020refundHTLT_order"
  "\030\020 \001(\0132!.TW.Binance.Proto.RefundHTLTOrde"
  "rH\000\0228\n\013issue_order\030\021 \001(\0132!.TW.Binance.Pr"
  "oto.TokenIssueOrderH\000\0226\n\nmint_order\030\022 \001("
  "\0132 .TW.Binance.Proto.TokenMintOrderH\000\0226\n"
  "\nburn_order\030\023 \001(\0132 .TW.Binance.Proto.Tok"
  "enBurnOrderH\000\022;\n\022transfer_out_order\030\024 \001("
  "\0132\035.TW.Binance.Proto.TransferOutH\000\022B\n\023si"
  "de_delegate_order\030\025 \001(\0132#.TW.Binance.Pro"
  "to.SideChainDelegateH\000\022F\n\025side_redelegat"
  "e_order\030\026 \001(\0132%.TW.Binance.Proto.SideCha"
  "inRedelegateH\000\022F\n\025side_undelegate_order\030"
  "\027 \001(\0132%.TW.Binance.Proto.SideChainUndele"
  "gateH\000\022:\n\017time_lock_order\030\030 \001(\0132\037.TW.Bin"
  "ance.Proto.TimeLockOrderH\000\022>\n\021time_reloc"
  "k_order\030\031 \001(\0132!.TW.Binance.Proto.TimeRel"
  "ockOrderH\000\022>\n\021time_unlock_order\030\032 \001(\0132!."
  "TW.Binance.Proto.TimeUnlockOrderH\000B\r\n\013or"
  "der_oneof\" \n\rSigningOutput\022\017\n\007encoded\030\001 "
  "\001(\014B\027\n\025wallet.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Binance_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Binance_2eproto_sccs[27] = {
  &scc_info_CancelTradeOrder_Binance_2eproto.base,
  &scc_info_ClaimHTLOrder_Binance_2eproto.base,
  &scc_info_DepositHTLTOrder_Binance_2eproto.base,
  &scc_info_HTLTOrder_Binance_2eproto.base,
  &scc_info_RefundHTLTOrder_Binance_2eproto.base,
  &scc_info_SendOrder_Binance_2eproto.base,
  &scc_info_SendOrder_Input_Binance_2eproto.base,
  &scc_info_SendOrder_Output_Binance_2eproto.base,
  &scc_info_SendOrder_Token_Binance_2eproto.base,
  &scc_info_SideChainDelegate_Binance_2eproto.base,
  &scc_info_SideChainRedelegate_Binance_2eproto.base,
  &scc_info_SideChainUndelegate_Binance_2eproto.base,
  &scc_info_Signature_Binance_2eproto.base,
  &scc_info_Signature_PubKey_Binance_2eproto.base,
  &scc_info_SigningInput_Binance_2eproto.base,
  &scc_info_SigningOutput_Binance_2eproto.base,
  &scc_info_TimeLockOrder_Binance_2eproto.base,
  &scc_info_TimeRelockOrder_Binance_2eproto.base,
  &scc_info_TimeUnlockOrder_Binance_2eproto.base,
  &scc_info_TokenBurnOrder_Binance_2eproto.base,
  &scc_info_TokenFreezeOrder_Binance_2eproto.base,
  &scc_info_TokenIssueOrder_Binance_2eproto.base,
  &scc_info_TokenMintOrder_Binance_2eproto.base,
  &scc_info_TokenUnfreezeOrder_Binance_2eproto.base,
  &scc_info_TradeOrder_Binance_2eproto.base,
  &scc_info_Transaction_Binance_2eproto.base,
  &scc_info_TransferOut_Binance_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Binance_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Binance_2eproto = {
  false, false, descriptor_table_protodef_Binance_2eproto, "Binance.proto", 3876,
  &descriptor_table_Binance_2eproto_once, descriptor_table_Binance_2eproto_sccs, descriptor_table_Binance_2eproto_deps, 27, 0,
  schemas, file_default_instances, TableStruct_Binance_2eproto::offsets,
  file_level_metadata_Binance_2eproto, 27, file_level_enum_descriptors_Binance_2eproto, file_level_service_descriptors_Binance_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Binance_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Binance_2eproto)), true);
namespace TW {
namespace Binance {
namespace Proto {

// ===================================================================

class Transaction::_Internal {
 public:
};

Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  msgs_(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msgs_(from.msgs_),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Binance_2eproto.base);
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_ = PROTOBUF_LONGLONG(0);
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Binance_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  signatures_.Clear();
  memo_.ClearToEmpty();
  data_.ClearToEmpty();
  source_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes msgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msgs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes signatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string memo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.Transaction.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes msgs = 1;
  for (int i = 0, n = this->_internal_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_msgs(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated bytes signatures = 2;
  for (int i = 0, n = this->_internal_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_signatures(i);
    target = stream->WriteBytes(2, s, target);
  }

  // string memo = 3;
  if (this->memo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.Transaction.memo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memo(), target);
  }

  // int64 source = 4;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_source(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes msgs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msgs_.size());
  for (int i = 0, n = msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      msgs_.Get(i));
  }

  // repeated bytes signatures = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signatures_.size());
  for (int i = 0, n = signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signatures_.Get(i));
  }

  // string memo = 3;
  if (this->memo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 source = 4;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  signatures_.MergeFrom(from.signatures_);
  if (from.memo().size() > 0) {
    _internal_set_memo(from._internal_memo());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
  signatures_.InternalSwap(&other->signatures_);
  memo_.Swap(&other->memo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Signature_PubKey::_Internal {
 public:
};

Signature_PubKey::Signature_PubKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.Signature.PubKey)
}
Signature_PubKey::Signature_PubKey(const Signature_PubKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.Signature.PubKey)
}

void Signature_PubKey::SharedCtor() {
}

Signature_PubKey::~Signature_PubKey() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.Signature.PubKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signature_PubKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Signature_PubKey::ArenaDtor(void* object) {
  Signature_PubKey* _this = reinterpret_cast< Signature_PubKey* >(object);
  (void)_this;
}
void Signature_PubKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signature_PubKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signature_PubKey& Signature_PubKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signature_PubKey_Binance_2eproto.base);
  return *internal_default_instance();
}


void Signature_PubKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.Signature.PubKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signature_PubKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signature_PubKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.Signature.PubKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.Signature.PubKey)
  return target;
}

size_t Signature_PubKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.Signature.PubKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature_PubKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.Signature.PubKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature_PubKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signature_PubKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.Signature.PubKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.Signature.PubKey)
    MergeFrom(*source);
  }
}

void Signature_PubKey::MergeFrom(const Signature_PubKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.Signature.PubKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Signature_PubKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.Signature.PubKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature_PubKey::CopyFrom(const Signature_PubKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.Signature.PubKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature_PubKey::IsInitialized() const {
  return true;
}

void Signature_PubKey::InternalSwap(Signature_PubKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature_PubKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Signature::_Internal {
 public:
};

Signature::Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  ::memcpy(&account_number_, &from.account_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&account_number_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.Signature)
}

void Signature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signature_Binance_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&account_number_)) + sizeof(sequence_));
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.Signature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signature::ArenaDtor(void* object) {
  Signature* _this = reinterpret_cast< Signature* >(object);
  (void)_this;
}
void Signature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signature& Signature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signature_Binance_2eproto.base);
  return *internal_default_instance();
}


void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  signature_.ClearToEmpty();
  ::memset(&account_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&account_number_)) + sizeof(sequence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pub_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 account_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          account_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // int64 account_number = 3;
  if (this->account_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_account_number(), target);
  }

  // int64 sequence = 4;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.Signature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pub_key());
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // int64 account_number = 3;
  if (this->account_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_account_number());
  }

  // int64 sequence = 4;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.Signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pub_key().size() > 0) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.account_number() != 0) {
    _internal_set_account_number(from._internal_account_number());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void Signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Signature, sequence_)
      + sizeof(Signature::sequence_)
      - PROTOBUF_FIELD_OFFSET(Signature, account_number_)>(
          reinterpret_cast<char*>(&account_number_),
          reinterpret_cast<char*>(&other->account_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradeOrder::_Internal {
 public:
};

TradeOrder::TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TradeOrder)
}
TradeOrder::TradeOrder(const TradeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  ::memcpy(&ordertype_, &from.ordertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeinforce_) -
    reinterpret_cast<char*>(&ordertype_)) + sizeof(timeinforce_));
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TradeOrder)
}

void TradeOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeOrder_Binance_2eproto.base);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ordertype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timeinforce_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(timeinforce_));
}

TradeOrder::~TradeOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TradeOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradeOrder::ArenaDtor(void* object) {
  TradeOrder* _this = reinterpret_cast< TradeOrder* >(object);
  (void)_this;
}
void TradeOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeOrder& TradeOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void TradeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmpty();
  id_.ClearToEmpty();
  symbol_.ClearToEmpty();
  ::memset(&ordertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeinforce_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(timeinforce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TradeOrder.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TradeOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ordertype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ordertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 side = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 quantity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeinforce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          timeinforce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (this->sender().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TradeOrder.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TradeOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // int64 ordertype = 4;
  if (this->ordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_ordertype(), target);
  }

  // int64 side = 5;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_side(), target);
  }

  // int64 price = 6;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_price(), target);
  }

  // int64 quantity = 7;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_quantity(), target);
  }

  // int64 timeinforce = 8;
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_timeinforce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TradeOrder)
  return target;
}

size_t TradeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TradeOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender = 1;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int64 ordertype = 4;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ordertype());
  }

  // int64 side = 5;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_side());
  }

  // int64 price = 6;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_price());
  }

  // int64 quantity = 7;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_quantity());
  }

  // int64 timeinforce = 8;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeinforce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TradeOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TradeOrder)
    MergeFrom(*source);
  }
}

void TradeOrder::MergeFrom(const TradeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender().size() > 0) {
    _internal_set_sender(from._internal_sender());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.ordertype() != 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
}

void TradeOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeOrder::CopyFrom(const TradeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeOrder::IsInitialized() const {
  return true;
}

void TradeOrder::InternalSwap(TradeOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sender_.Swap(&other->sender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeOrder, timeinforce_)
      + sizeof(TradeOrder::timeinforce_)
      - PROTOBUF_FIELD_OFFSET(TradeOrder, ordertype_)>(
          reinterpret_cast<char*>(&ordertype_),
          reinterpret_cast<char*>(&other->ordertype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelTradeOrder::_Internal {
 public:
};

CancelTradeOrder::CancelTradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.CancelTradeOrder)
}
CancelTradeOrder::CancelTradeOrder(const CancelTradeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  refid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refid().empty()) {
    refid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.CancelTradeOrder)
}

void CancelTradeOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelTradeOrder_Binance_2eproto.base);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelTradeOrder::~CancelTradeOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.CancelTradeOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelTradeOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelTradeOrder::ArenaDtor(void* object) {
  CancelTradeOrder* _this = reinterpret_cast< CancelTradeOrder* >(object);
  (void)_this;
}
void CancelTradeOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelTradeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelTradeOrder& CancelTradeOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelTradeOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void CancelTradeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.CancelTradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmpty();
  symbol_.ClearToEmpty();
  refid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelTradeOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.CancelTradeOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_refid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.CancelTradeOrder.refid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelTradeOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.CancelTradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (this->sender().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.CancelTradeOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string refid = 3;
  if (this->refid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refid().data(), static_cast<int>(this->_internal_refid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.CancelTradeOrder.refid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_refid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.CancelTradeOrder)
  return target;
}

size_t CancelTradeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.CancelTradeOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender = 1;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string refid = 3;
  if (this->refid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelTradeOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.CancelTradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelTradeOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelTradeOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.CancelTradeOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.CancelTradeOrder)
    MergeFrom(*source);
  }
}

void CancelTradeOrder::MergeFrom(const CancelTradeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.CancelTradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender().size() > 0) {
    _internal_set_sender(from._internal_sender());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.refid().size() > 0) {
    _internal_set_refid(from._internal_refid());
  }
}

void CancelTradeOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.CancelTradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelTradeOrder::CopyFrom(const CancelTradeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.CancelTradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelTradeOrder::IsInitialized() const {
  return true;
}

void CancelTradeOrder::InternalSwap(CancelTradeOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sender_.Swap(&other->sender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refid_.Swap(&other->refid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelTradeOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendOrder_Token::_Internal {
 public:
};

SendOrder_Token::SendOrder_Token(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.SendOrder.Token)
}
SendOrder_Token::SendOrder_Token(const SendOrder_Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  denom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_denom().empty()) {
    denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_denom(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.SendOrder.Token)
}

void SendOrder_Token::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendOrder_Token_Binance_2eproto.base);
  denom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

SendOrder_Token::~SendOrder_Token() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.SendOrder.Token)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendOrder_Token::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  denom_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendOrder_Token::ArenaDtor(void* object) {
  SendOrder_Token* _this = reinterpret_cast< SendOrder_Token* >(object);
  (void)_this;
}
void SendOrder_Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendOrder_Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendOrder_Token& SendOrder_Token::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendOrder_Token_Binance_2eproto.base);
  return *internal_default_instance();
}


void SendOrder_Token::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.SendOrder.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  denom_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendOrder_Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string denom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.SendOrder.Token.denom"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendOrder_Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.SendOrder.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1;
  if (this->denom().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_denom().data(), static_cast<int>(this->_internal_denom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.SendOrder.Token.denom");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_denom(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.SendOrder.Token)
  return target;
}

size_t SendOrder_Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.SendOrder.Token)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1;
  if (this->denom().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denom());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendOrder_Token::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.SendOrder.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const SendOrder_Token* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendOrder_Token>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.SendOrder.Token)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.SendOrder.Token)
    MergeFrom(*source);
  }
}

void SendOrder_Token::MergeFrom(const SendOrder_Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.SendOrder.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.denom().size() > 0) {
    _internal_set_denom(from._internal_denom());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void SendOrder_Token::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.SendOrder.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOrder_Token::CopyFrom(const SendOrder_Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.SendOrder.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOrder_Token::IsInitialized() const {
  return true;
}

void SendOrder_Token::InternalSwap(SendOrder_Token* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  denom_.Swap(&other->denom_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendOrder_Token::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendOrder_Input::_Internal {
 public:
};

SendOrder_Input::SendOrder_Input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coins_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.SendOrder.Input)
}
SendOrder_Input::SendOrder_Input(const SendOrder_Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coins_(from.coins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.SendOrder.Input)
}

void SendOrder_Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendOrder_Input_Binance_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendOrder_Input::~SendOrder_Input() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.SendOrder.Input)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendOrder_Input::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendOrder_Input::ArenaDtor(void* object) {
  SendOrder_Input* _this = reinterpret_cast< SendOrder_Input* >(object);
  (void)_this;
}
void SendOrder_Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendOrder_Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendOrder_Input& SendOrder_Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendOrder_Input_Binance_2eproto.base);
  return *internal_default_instance();
}


void SendOrder_Input::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.SendOrder.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coins_.Clear();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendOrder_Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendOrder_Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.SendOrder.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_coins(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.SendOrder.Input)
  return target;
}

size_t SendOrder_Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.SendOrder.Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
  total_size += 1UL * this->_internal_coins_size();
  for (const auto& msg : this->coins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendOrder_Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.SendOrder.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const SendOrder_Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendOrder_Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.SendOrder.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.SendOrder.Input)
    MergeFrom(*source);
  }
}

void SendOrder_Input::MergeFrom(const SendOrder_Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.SendOrder.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coins_.MergeFrom(from.coins_);
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void SendOrder_Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.SendOrder.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOrder_Input::CopyFrom(const SendOrder_Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.SendOrder.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOrder_Input::IsInitialized() const {
  return true;
}

void SendOrder_Input::InternalSwap(SendOrder_Input* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  coins_.InternalSwap(&other->coins_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendOrder_Input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendOrder_Output::_Internal {
 public:
};

SendOrder_Output::SendOrder_Output(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coins_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.SendOrder.Output)
}
SendOrder_Output::SendOrder_Output(const SendOrder_Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coins_(from.coins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.SendOrder.Output)
}

void SendOrder_Output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendOrder_Output_Binance_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendOrder_Output::~SendOrder_Output() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.SendOrder.Output)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendOrder_Output::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendOrder_Output::ArenaDtor(void* object) {
  SendOrder_Output* _this = reinterpret_cast< SendOrder_Output* >(object);
  (void)_this;
}
void SendOrder_Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendOrder_Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendOrder_Output& SendOrder_Output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendOrder_Output_Binance_2eproto.base);
  return *internal_default_instance();
}


void SendOrder_Output::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.SendOrder.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coins_.Clear();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendOrder_Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendOrder_Output::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.SendOrder.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_coins(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.SendOrder.Output)
  return target;
}

size_t SendOrder_Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.SendOrder.Output)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
  total_size += 1UL * this->_internal_coins_size();
  for (const auto& msg : this->coins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendOrder_Output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.SendOrder.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const SendOrder_Output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendOrder_Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.SendOrder.Output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.SendOrder.Output)
    MergeFrom(*source);
  }
}

void SendOrder_Output::MergeFrom(const SendOrder_Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.SendOrder.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coins_.MergeFrom(from.coins_);
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void SendOrder_Output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.SendOrder.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOrder_Output::CopyFrom(const SendOrder_Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.SendOrder.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOrder_Output::IsInitialized() const {
  return true;
}

void SendOrder_Output::InternalSwap(SendOrder_Output* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  coins_.InternalSwap(&other->coins_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendOrder_Output::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendOrder::_Internal {
 public:
};

SendOrder::SendOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.SendOrder)
}
SendOrder::SendOrder(const SendOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.SendOrder)
}

void SendOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendOrder_Binance_2eproto.base);
}

SendOrder::~SendOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.SendOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SendOrder::ArenaDtor(void* object) {
  SendOrder* _this = reinterpret_cast< SendOrder* >(object);
  (void)_this;
}
void SendOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendOrder& SendOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void SendOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.SendOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TW.Binance.Proto.SendOrder.Input inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.Binance.Proto.SendOrder.Output outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.SendOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.Binance.Proto.SendOrder.Input inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inputs(i), target, stream);
  }

  // repeated .TW.Binance.Proto.SendOrder.Output outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.SendOrder)
  return target;
}

size_t SendOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.SendOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Binance.Proto.SendOrder.Input inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.Binance.Proto.SendOrder.Output outputs = 2;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.SendOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SendOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.SendOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.SendOrder)
    MergeFrom(*source);
  }
}

void SendOrder::MergeFrom(const SendOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.SendOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
}

void SendOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.SendOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOrder::CopyFrom(const SendOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.SendOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOrder::IsInitialized() const {
  return true;
}

void SendOrder::InternalSwap(SendOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TokenIssueOrder::_Internal {
 public:
};

TokenIssueOrder::TokenIssueOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TokenIssueOrder)
}
TokenIssueOrder::TokenIssueOrder(const TokenIssueOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  ::memcpy(&total_supply_, &from.total_supply_,
    static_cast<size_t>(reinterpret_cast<char*>(&mintable_) -
    reinterpret_cast<char*>(&total_supply_)) + sizeof(mintable_));
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TokenIssueOrder)
}

void TokenIssueOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenIssueOrder_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_supply_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mintable_) -
      reinterpret_cast<char*>(&total_supply_)) + sizeof(mintable_));
}

TokenIssueOrder::~TokenIssueOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TokenIssueOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenIssueOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenIssueOrder::ArenaDtor(void* object) {
  TokenIssueOrder* _this = reinterpret_cast< TokenIssueOrder* >(object);
  (void)_this;
}
void TokenIssueOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenIssueOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenIssueOrder& TokenIssueOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenIssueOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void TokenIssueOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TokenIssueOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  name_.ClearToEmpty();
  symbol_.ClearToEmpty();
  ::memset(&total_supply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mintable_) -
      reinterpret_cast<char*>(&total_supply_)) + sizeof(mintable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenIssueOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TokenIssueOrder.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TokenIssueOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_supply = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_supply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mintable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mintable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenIssueOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TokenIssueOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TokenIssueOrder.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TokenIssueOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // int64 total_supply = 4;
  if (this->total_supply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_total_supply(), target);
  }

  // bool mintable = 5;
  if (this->mintable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_mintable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TokenIssueOrder)
  return target;
}

size_t TokenIssueOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TokenIssueOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int64 total_supply = 4;
  if (this->total_supply() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_supply());
  }

  // bool mintable = 5;
  if (this->mintable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenIssueOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TokenIssueOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenIssueOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenIssueOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TokenIssueOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TokenIssueOrder)
    MergeFrom(*source);
  }
}

void TokenIssueOrder::MergeFrom(const TokenIssueOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TokenIssueOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.total_supply() != 0) {
    _internal_set_total_supply(from._internal_total_supply());
  }
  if (from.mintable() != 0) {
    _internal_set_mintable(from._internal_mintable());
  }
}

void TokenIssueOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TokenIssueOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenIssueOrder::CopyFrom(const TokenIssueOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TokenIssueOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenIssueOrder::IsInitialized() const {
  return true;
}

void TokenIssueOrder::InternalSwap(TokenIssueOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenIssueOrder, mintable_)
      + sizeof(TokenIssueOrder::mintable_)
      - PROTOBUF_FIELD_OFFSET(TokenIssueOrder, total_supply_)>(
          reinterpret_cast<char*>(&total_supply_),
          reinterpret_cast<char*>(&other->total_supply_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenIssueOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TokenMintOrder::_Internal {
 public:
};

TokenMintOrder::TokenMintOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TokenMintOrder)
}
TokenMintOrder::TokenMintOrder(const TokenMintOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TokenMintOrder)
}

void TokenMintOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenMintOrder_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TokenMintOrder::~TokenMintOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TokenMintOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenMintOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenMintOrder::ArenaDtor(void* object) {
  TokenMintOrder* _this = reinterpret_cast< TokenMintOrder* >(object);
  (void)_this;
}
void TokenMintOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenMintOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenMintOrder& TokenMintOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenMintOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void TokenMintOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TokenMintOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  symbol_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenMintOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TokenMintOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenMintOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TokenMintOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TokenMintOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TokenMintOrder)
  return target;
}

size_t TokenMintOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TokenMintOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenMintOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TokenMintOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenMintOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenMintOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TokenMintOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TokenMintOrder)
    MergeFrom(*source);
  }
}

void TokenMintOrder::MergeFrom(const TokenMintOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TokenMintOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TokenMintOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TokenMintOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenMintOrder::CopyFrom(const TokenMintOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TokenMintOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenMintOrder::IsInitialized() const {
  return true;
}

void TokenMintOrder::InternalSwap(TokenMintOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenMintOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TokenBurnOrder::_Internal {
 public:
};

TokenBurnOrder::TokenBurnOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TokenBurnOrder)
}
TokenBurnOrder::TokenBurnOrder(const TokenBurnOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TokenBurnOrder)
}

void TokenBurnOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenBurnOrder_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TokenBurnOrder::~TokenBurnOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TokenBurnOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenBurnOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenBurnOrder::ArenaDtor(void* object) {
  TokenBurnOrder* _this = reinterpret_cast< TokenBurnOrder* >(object);
  (void)_this;
}
void TokenBurnOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenBurnOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenBurnOrder& TokenBurnOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenBurnOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void TokenBurnOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TokenBurnOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  symbol_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenBurnOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TokenBurnOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenBurnOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TokenBurnOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TokenBurnOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TokenBurnOrder)
  return target;
}

size_t TokenBurnOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TokenBurnOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenBurnOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TokenBurnOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenBurnOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenBurnOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TokenBurnOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TokenBurnOrder)
    MergeFrom(*source);
  }
}

void TokenBurnOrder::MergeFrom(const TokenBurnOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TokenBurnOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TokenBurnOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TokenBurnOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenBurnOrder::CopyFrom(const TokenBurnOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TokenBurnOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenBurnOrder::IsInitialized() const {
  return true;
}

void TokenBurnOrder::InternalSwap(TokenBurnOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenBurnOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TokenFreezeOrder::_Internal {
 public:
};

TokenFreezeOrder::TokenFreezeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TokenFreezeOrder)
}
TokenFreezeOrder::TokenFreezeOrder(const TokenFreezeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TokenFreezeOrder)
}

void TokenFreezeOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenFreezeOrder_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TokenFreezeOrder::~TokenFreezeOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TokenFreezeOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenFreezeOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenFreezeOrder::ArenaDtor(void* object) {
  TokenFreezeOrder* _this = reinterpret_cast< TokenFreezeOrder* >(object);
  (void)_this;
}
void TokenFreezeOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenFreezeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenFreezeOrder& TokenFreezeOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenFreezeOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void TokenFreezeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TokenFreezeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  symbol_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenFreezeOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TokenFreezeOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenFreezeOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TokenFreezeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TokenFreezeOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TokenFreezeOrder)
  return target;
}

size_t TokenFreezeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TokenFreezeOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenFreezeOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TokenFreezeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenFreezeOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenFreezeOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TokenFreezeOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TokenFreezeOrder)
    MergeFrom(*source);
  }
}

void TokenFreezeOrder::MergeFrom(const TokenFreezeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TokenFreezeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TokenFreezeOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TokenFreezeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenFreezeOrder::CopyFrom(const TokenFreezeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TokenFreezeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenFreezeOrder::IsInitialized() const {
  return true;
}

void TokenFreezeOrder::InternalSwap(TokenFreezeOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenFreezeOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TokenUnfreezeOrder::_Internal {
 public:
};

TokenUnfreezeOrder::TokenUnfreezeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TokenUnfreezeOrder)
}
TokenUnfreezeOrder::TokenUnfreezeOrder(const TokenUnfreezeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TokenUnfreezeOrder)
}

void TokenUnfreezeOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenUnfreezeOrder_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TokenUnfreezeOrder::~TokenUnfreezeOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TokenUnfreezeOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenUnfreezeOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenUnfreezeOrder::ArenaDtor(void* object) {
  TokenUnfreezeOrder* _this = reinterpret_cast< TokenUnfreezeOrder* >(object);
  (void)_this;
}
void TokenUnfreezeOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenUnfreezeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenUnfreezeOrder& TokenUnfreezeOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenUnfreezeOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void TokenUnfreezeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TokenUnfreezeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  symbol_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenUnfreezeOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TokenUnfreezeOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenUnfreezeOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TokenUnfreezeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TokenUnfreezeOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TokenUnfreezeOrder)
  return target;
}

size_t TokenUnfreezeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TokenUnfreezeOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenUnfreezeOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TokenUnfreezeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenUnfreezeOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenUnfreezeOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TokenUnfreezeOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TokenUnfreezeOrder)
    MergeFrom(*source);
  }
}

void TokenUnfreezeOrder::MergeFrom(const TokenUnfreezeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TokenUnfreezeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TokenUnfreezeOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TokenUnfreezeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenUnfreezeOrder::CopyFrom(const TokenUnfreezeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TokenUnfreezeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenUnfreezeOrder::IsInitialized() const {
  return true;
}

void TokenUnfreezeOrder::InternalSwap(TokenUnfreezeOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenUnfreezeOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HTLTOrder::_Internal {
 public:
};

HTLTOrder::HTLTOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amount_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.HTLTOrder)
}
HTLTOrder::HTLTOrder(const HTLTOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amount_(from.amount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArena());
  }
  recipient_other_chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_other_chain().empty()) {
    recipient_other_chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient_other_chain(), 
      GetArena());
  }
  sender_other_chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_other_chain().empty()) {
    sender_other_chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_other_chain(), 
      GetArena());
  }
  random_number_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_random_number_hash().empty()) {
    random_number_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_random_number_hash(), 
      GetArena());
  }
  expected_income_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expected_income().empty()) {
    expected_income_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_expected_income(), 
      GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&cross_chain_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(cross_chain_));
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.HTLTOrder)
}

void HTLTOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HTLTOrder_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_other_chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_other_chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  random_number_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expected_income_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cross_chain_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(cross_chain_));
}

HTLTOrder::~HTLTOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.HTLTOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HTLTOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_other_chain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_other_chain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  random_number_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expected_income_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HTLTOrder::ArenaDtor(void* object) {
  HTLTOrder* _this = reinterpret_cast< HTLTOrder* >(object);
  (void)_this;
}
void HTLTOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HTLTOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HTLTOrder& HTLTOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HTLTOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void HTLTOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.HTLTOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.Clear();
  from_.ClearToEmpty();
  to_.ClearToEmpty();
  recipient_other_chain_.ClearToEmpty();
  sender_other_chain_.ClearToEmpty();
  random_number_hash_.ClearToEmpty();
  expected_income_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_chain_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(cross_chain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HTLTOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient_other_chain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recipient_other_chain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.HTLTOrder.recipient_other_chain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_other_chain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sender_other_chain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.HTLTOrder.sender_other_chain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes random_number_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_random_number_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.Binance.Proto.SendOrder.Token amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string expected_income = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_expected_income();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.HTLTOrder.expected_income"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height_span = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          height_span_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cross_chain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cross_chain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HTLTOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.HTLTOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // string recipient_other_chain = 3;
  if (this->recipient_other_chain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_other_chain().data(), static_cast<int>(this->_internal_recipient_other_chain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.HTLTOrder.recipient_other_chain");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recipient_other_chain(), target);
  }

  // string sender_other_chain = 4;
  if (this->sender_other_chain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_other_chain().data(), static_cast<int>(this->_internal_sender_other_chain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.HTLTOrder.sender_other_chain");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_other_chain(), target);
  }

  // bytes random_number_hash = 5;
  if (this->random_number_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_random_number_hash(), target);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  // repeated .TW.Binance.Proto.SendOrder.Token amount = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_amount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_amount(i), target, stream);
  }

  // string expected_income = 8;
  if (this->expected_income().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expected_income().data(), static_cast<int>(this->_internal_expected_income().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.HTLTOrder.expected_income");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_expected_income(), target);
  }

  // int64 height_span = 9;
  if (this->height_span() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_height_span(), target);
  }

  // bool cross_chain = 10;
  if (this->cross_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_cross_chain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.HTLTOrder)
  return target;
}

size_t HTLTOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.HTLTOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Binance.Proto.SendOrder.Token amount = 7;
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->amount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // string recipient_other_chain = 3;
  if (this->recipient_other_chain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_other_chain());
  }

  // string sender_other_chain = 4;
  if (this->sender_other_chain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_other_chain());
  }

  // bytes random_number_hash = 5;
  if (this->random_number_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_random_number_hash());
  }

  // string expected_income = 8;
  if (this->expected_income().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expected_income());
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 height_span = 9;
  if (this->height_span() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height_span());
  }

  // bool cross_chain = 10;
  if (this->cross_chain() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTLTOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.HTLTOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const HTLTOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HTLTOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.HTLTOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.HTLTOrder)
    MergeFrom(*source);
  }
}

void HTLTOrder::MergeFrom(const HTLTOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.HTLTOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amount_.MergeFrom(from.amount_);
  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.recipient_other_chain().size() > 0) {
    _internal_set_recipient_other_chain(from._internal_recipient_other_chain());
  }
  if (from.sender_other_chain().size() > 0) {
    _internal_set_sender_other_chain(from._internal_sender_other_chain());
  }
  if (from.random_number_hash().size() > 0) {
    _internal_set_random_number_hash(from._internal_random_number_hash());
  }
  if (from.expected_income().size() > 0) {
    _internal_set_expected_income(from._internal_expected_income());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.height_span() != 0) {
    _internal_set_height_span(from._internal_height_span());
  }
  if (from.cross_chain() != 0) {
    _internal_set_cross_chain(from._internal_cross_chain());
  }
}

void HTLTOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.HTLTOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTLTOrder::CopyFrom(const HTLTOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.HTLTOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTLTOrder::IsInitialized() const {
  return true;
}

void HTLTOrder::InternalSwap(HTLTOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.InternalSwap(&other->amount_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_other_chain_.Swap(&other->recipient_other_chain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_other_chain_.Swap(&other->sender_other_chain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  random_number_hash_.Swap(&other->random_number_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expected_income_.Swap(&other->expected_income_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HTLTOrder, cross_chain_)
      + sizeof(HTLTOrder::cross_chain_)
      - PROTOBUF_FIELD_OFFSET(HTLTOrder, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HTLTOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DepositHTLTOrder::_Internal {
 public:
};

DepositHTLTOrder::DepositHTLTOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amount_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.DepositHTLTOrder)
}
DepositHTLTOrder::DepositHTLTOrder(const DepositHTLTOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amount_(from.amount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  swap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_swap_id().empty()) {
    swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_swap_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.DepositHTLTOrder)
}

void DepositHTLTOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositHTLTOrder_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DepositHTLTOrder::~DepositHTLTOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.DepositHTLTOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositHTLTOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swap_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepositHTLTOrder::ArenaDtor(void* object) {
  DepositHTLTOrder* _this = reinterpret_cast< DepositHTLTOrder* >(object);
  (void)_this;
}
void DepositHTLTOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositHTLTOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositHTLTOrder& DepositHTLTOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositHTLTOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void DepositHTLTOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.DepositHTLTOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.Clear();
  from_.ClearToEmpty();
  swap_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositHTLTOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.Binance.Proto.SendOrder.Token amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes swap_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_swap_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositHTLTOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.DepositHTLTOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated .TW.Binance.Proto.SendOrder.Token amount = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_amount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_amount(i), target, stream);
  }

  // bytes swap_id = 3;
  if (this->swap_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_swap_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.DepositHTLTOrder)
  return target;
}

size_t DepositHTLTOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.DepositHTLTOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Binance.Proto.SendOrder.Token amount = 2;
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->amount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes swap_id = 3;
  if (this->swap_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_swap_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositHTLTOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.DepositHTLTOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositHTLTOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositHTLTOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.DepositHTLTOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.DepositHTLTOrder)
    MergeFrom(*source);
  }
}

void DepositHTLTOrder::MergeFrom(const DepositHTLTOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.DepositHTLTOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amount_.MergeFrom(from.amount_);
  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.swap_id().size() > 0) {
    _internal_set_swap_id(from._internal_swap_id());
  }
}

void DepositHTLTOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.DepositHTLTOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositHTLTOrder::CopyFrom(const DepositHTLTOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.DepositHTLTOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositHTLTOrder::IsInitialized() const {
  return true;
}

void DepositHTLTOrder::InternalSwap(DepositHTLTOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.InternalSwap(&other->amount_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap_id_.Swap(&other->swap_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositHTLTOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClaimHTLOrder::_Internal {
 public:
};

ClaimHTLOrder::ClaimHTLOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.ClaimHTLOrder)
}
ClaimHTLOrder::ClaimHTLOrder(const ClaimHTLOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  swap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_swap_id().empty()) {
    swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_swap_id(), 
      GetArena());
  }
  random_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_random_number().empty()) {
    random_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_random_number(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.ClaimHTLOrder)
}

void ClaimHTLOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClaimHTLOrder_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  random_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClaimHTLOrder::~ClaimHTLOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.ClaimHTLOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClaimHTLOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swap_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  random_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClaimHTLOrder::ArenaDtor(void* object) {
  ClaimHTLOrder* _this = reinterpret_cast< ClaimHTLOrder* >(object);
  (void)_this;
}
void ClaimHTLOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClaimHTLOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClaimHTLOrder& ClaimHTLOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClaimHTLOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void ClaimHTLOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.ClaimHTLOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  swap_id_.ClearToEmpty();
  random_number_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClaimHTLOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes swap_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_swap_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes random_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_random_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClaimHTLOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.ClaimHTLOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes swap_id = 2;
  if (this->swap_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_swap_id(), target);
  }

  // bytes random_number = 3;
  if (this->random_number().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_random_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.ClaimHTLOrder)
  return target;
}

size_t ClaimHTLOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.ClaimHTLOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes swap_id = 2;
  if (this->swap_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_swap_id());
  }

  // bytes random_number = 3;
  if (this->random_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_random_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClaimHTLOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.ClaimHTLOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ClaimHTLOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClaimHTLOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.ClaimHTLOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.ClaimHTLOrder)
    MergeFrom(*source);
  }
}

void ClaimHTLOrder::MergeFrom(const ClaimHTLOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.ClaimHTLOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.swap_id().size() > 0) {
    _internal_set_swap_id(from._internal_swap_id());
  }
  if (from.random_number().size() > 0) {
    _internal_set_random_number(from._internal_random_number());
  }
}

void ClaimHTLOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.ClaimHTLOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClaimHTLOrder::CopyFrom(const ClaimHTLOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.ClaimHTLOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimHTLOrder::IsInitialized() const {
  return true;
}

void ClaimHTLOrder::InternalSwap(ClaimHTLOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap_id_.Swap(&other->swap_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  random_number_.Swap(&other->random_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClaimHTLOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RefundHTLTOrder::_Internal {
 public:
};

RefundHTLTOrder::RefundHTLTOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.RefundHTLTOrder)
}
RefundHTLTOrder::RefundHTLTOrder(const RefundHTLTOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  swap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_swap_id().empty()) {
    swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_swap_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.RefundHTLTOrder)
}

void RefundHTLTOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefundHTLTOrder_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RefundHTLTOrder::~RefundHTLTOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.RefundHTLTOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefundHTLTOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swap_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RefundHTLTOrder::ArenaDtor(void* object) {
  RefundHTLTOrder* _this = reinterpret_cast< RefundHTLTOrder* >(object);
  (void)_this;
}
void RefundHTLTOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefundHTLTOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefundHTLTOrder& RefundHTLTOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefundHTLTOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void RefundHTLTOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.RefundHTLTOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  swap_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefundHTLTOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes swap_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_swap_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefundHTLTOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.RefundHTLTOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes swap_id = 2;
  if (this->swap_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_swap_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.RefundHTLTOrder)
  return target;
}

size_t RefundHTLTOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.RefundHTLTOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes swap_id = 2;
  if (this->swap_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_swap_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefundHTLTOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.RefundHTLTOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const RefundHTLTOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefundHTLTOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.RefundHTLTOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.RefundHTLTOrder)
    MergeFrom(*source);
  }
}

void RefundHTLTOrder::MergeFrom(const RefundHTLTOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.RefundHTLTOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.swap_id().size() > 0) {
    _internal_set_swap_id(from._internal_swap_id());
  }
}

void RefundHTLTOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.RefundHTLTOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefundHTLTOrder::CopyFrom(const RefundHTLTOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.RefundHTLTOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefundHTLTOrder::IsInitialized() const {
  return true;
}

void RefundHTLTOrder::InternalSwap(RefundHTLTOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap_id_.Swap(&other->swap_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RefundHTLTOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferOut::_Internal {
 public:
  static const ::TW::Binance::Proto::SendOrder_Token& amount(const TransferOut* msg);
};

const ::TW::Binance::Proto::SendOrder_Token&
TransferOut::_Internal::amount(const TransferOut* msg) {
  return *msg->amount_;
}
TransferOut::TransferOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TransferOut)
}
TransferOut::TransferOut(const TransferOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::TW::Binance::Proto::SendOrder_Token(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  expire_time_ = from.expire_time_;
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TransferOut)
}

void TransferOut::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferOut_Binance_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(expire_time_));
}

TransferOut::~TransferOut() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TransferOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void TransferOut::ArenaDtor(void* object) {
  TransferOut* _this = reinterpret_cast< TransferOut* >(object);
  (void)_this;
}
void TransferOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferOut& TransferOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferOut_Binance_2eproto.base);
  return *internal_default_instance();
}


void TransferOut::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TransferOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  expire_time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SendOrder.Token amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TransferOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // .TW.Binance.Proto.SendOrder.Token amount = 3;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::amount(this), target, stream);
  }

  // int64 expire_time = 4;
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expire_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TransferOut)
  return target;
}

size_t TransferOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TransferOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // .TW.Binance.Proto.SendOrder.Token amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // int64 expire_time = 4;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expire_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TransferOut)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TransferOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TransferOut)
    MergeFrom(*source);
  }
}

void TransferOut::MergeFrom(const TransferOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TransferOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::TW::Binance::Proto::SendOrder_Token::MergeFrom(from._internal_amount());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
}

void TransferOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TransferOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferOut::CopyFrom(const TransferOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TransferOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferOut::IsInitialized() const {
  return true;
}

void TransferOut::InternalSwap(TransferOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferOut, expire_time_)
      + sizeof(TransferOut::expire_time_)
      - PROTOBUF_FIELD_OFFSET(TransferOut, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SideChainDelegate::_Internal {
 public:
  static const ::TW::Binance::Proto::SendOrder_Token& delegation(const SideChainDelegate* msg);
};

const ::TW::Binance::Proto::SendOrder_Token&
SideChainDelegate::_Internal::delegation(const SideChainDelegate* msg) {
  return *msg->delegation_;
}
SideChainDelegate::SideChainDelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.SideChainDelegate)
}
SideChainDelegate::SideChainDelegate(const SideChainDelegate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegator_addr().empty()) {
    delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegator_addr(), 
      GetArena());
  }
  validator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_addr().empty()) {
    validator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_addr(), 
      GetArena());
  }
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArena());
  }
  if (from._internal_has_delegation()) {
    delegation_ = new ::TW::Binance::Proto::SendOrder_Token(*from.delegation_);
  } else {
    delegation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.SideChainDelegate)
}

void SideChainDelegate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SideChainDelegate_Binance_2eproto.base);
  delegator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delegation_ = nullptr;
}

SideChainDelegate::~SideChainDelegate() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.SideChainDelegate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SideChainDelegate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegator_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete delegation_;
}

void SideChainDelegate::ArenaDtor(void* object) {
  SideChainDelegate* _this = reinterpret_cast< SideChainDelegate* >(object);
  (void)_this;
}
void SideChainDelegate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SideChainDelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SideChainDelegate& SideChainDelegate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SideChainDelegate_Binance_2eproto.base);
  return *internal_default_instance();
}


void SideChainDelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.SideChainDelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegator_addr_.ClearToEmpty();
  validator_addr_.ClearToEmpty();
  chain_id_.ClearToEmpty();
  if (GetArena() == nullptr && delegation_ != nullptr) {
    delete delegation_;
  }
  delegation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideChainDelegate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes delegator_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegator_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes validator_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_validator_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SendOrder.Token delegation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.SideChainDelegate.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SideChainDelegate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.SideChainDelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes delegator_addr = 1;
  if (this->delegator_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_delegator_addr(), target);
  }

  // bytes validator_addr = 2;
  if (this->validator_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_validator_addr(), target);
  }

  // .TW.Binance.Proto.SendOrder.Token delegation = 3;
  if (this->has_delegation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::delegation(this), target, stream);
  }

  // string chain_id = 4;
  if (this->chain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.SideChainDelegate.chain_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.SideChainDelegate)
  return target;
}

size_t SideChainDelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.SideChainDelegate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes delegator_addr = 1;
  if (this->delegator_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_delegator_addr());
  }

  // bytes validator_addr = 2;
  if (this->validator_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validator_addr());
  }

  // string chain_id = 4;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // .TW.Binance.Proto.SendOrder.Token delegation = 3;
  if (this->has_delegation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delegation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SideChainDelegate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.SideChainDelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const SideChainDelegate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SideChainDelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.SideChainDelegate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.SideChainDelegate)
    MergeFrom(*source);
  }
}

void SideChainDelegate::MergeFrom(const SideChainDelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.SideChainDelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegator_addr().size() > 0) {
    _internal_set_delegator_addr(from._internal_delegator_addr());
  }
  if (from.validator_addr().size() > 0) {
    _internal_set_validator_addr(from._internal_validator_addr());
  }
  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.has_delegation()) {
    _internal_mutable_delegation()->::TW::Binance::Proto::SendOrder_Token::MergeFrom(from._internal_delegation());
  }
}

void SideChainDelegate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.SideChainDelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SideChainDelegate::CopyFrom(const SideChainDelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.SideChainDelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideChainDelegate::IsInitialized() const {
  return true;
}

void SideChainDelegate::InternalSwap(SideChainDelegate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegator_addr_.Swap(&other->delegator_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_addr_.Swap(&other->validator_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(delegation_, other->delegation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SideChainDelegate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SideChainRedelegate::_Internal {
 public:
  static const ::TW::Binance::Proto::SendOrder_Token& amount(const SideChainRedelegate* msg);
};

const ::TW::Binance::Proto::SendOrder_Token&
SideChainRedelegate::_Internal::amount(const SideChainRedelegate* msg) {
  return *msg->amount_;
}
SideChainRedelegate::SideChainRedelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.SideChainRedelegate)
}
SideChainRedelegate::SideChainRedelegate(const SideChainRedelegate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegator_addr().empty()) {
    delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegator_addr(), 
      GetArena());
  }
  validator_src_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_src_addr().empty()) {
    validator_src_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_src_addr(), 
      GetArena());
  }
  validator_dst_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_dst_addr().empty()) {
    validator_dst_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_dst_addr(), 
      GetArena());
  }
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::TW::Binance::Proto::SendOrder_Token(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.SideChainRedelegate)
}

void SideChainRedelegate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SideChainRedelegate_Binance_2eproto.base);
  delegator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_src_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_dst_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

SideChainRedelegate::~SideChainRedelegate() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.SideChainRedelegate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SideChainRedelegate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegator_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_src_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_dst_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void SideChainRedelegate::ArenaDtor(void* object) {
  SideChainRedelegate* _this = reinterpret_cast< SideChainRedelegate* >(object);
  (void)_this;
}
void SideChainRedelegate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SideChainRedelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SideChainRedelegate& SideChainRedelegate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SideChainRedelegate_Binance_2eproto.base);
  return *internal_default_instance();
}


void SideChainRedelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.SideChainRedelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegator_addr_.ClearToEmpty();
  validator_src_addr_.ClearToEmpty();
  validator_dst_addr_.ClearToEmpty();
  chain_id_.ClearToEmpty();
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideChainRedelegate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes delegator_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegator_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes validator_src_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_validator_src_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes validator_dst_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_validator_dst_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SendOrder.Token amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chain_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.SideChainRedelegate.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SideChainRedelegate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.SideChainRedelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes delegator_addr = 1;
  if (this->delegator_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_delegator_addr(), target);
  }

  // bytes validator_src_addr = 2;
  if (this->validator_src_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_validator_src_addr(), target);
  }

  // bytes validator_dst_addr = 3;
  if (this->validator_dst_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_validator_dst_addr(), target);
  }

  // .TW.Binance.Proto.SendOrder.Token amount = 4;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::amount(this), target, stream);
  }

  // string chain_id = 5;
  if (this->chain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.SideChainRedelegate.chain_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.SideChainRedelegate)
  return target;
}

size_t SideChainRedelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.SideChainRedelegate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes delegator_addr = 1;
  if (this->delegator_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_delegator_addr());
  }

  // bytes validator_src_addr = 2;
  if (this->validator_src_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validator_src_addr());
  }

  // bytes validator_dst_addr = 3;
  if (this->validator_dst_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validator_dst_addr());
  }

  // string chain_id = 5;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // .TW.Binance.Proto.SendOrder.Token amount = 4;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SideChainRedelegate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.SideChainRedelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const SideChainRedelegate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SideChainRedelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.SideChainRedelegate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.SideChainRedelegate)
    MergeFrom(*source);
  }
}

void SideChainRedelegate::MergeFrom(const SideChainRedelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.SideChainRedelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegator_addr().size() > 0) {
    _internal_set_delegator_addr(from._internal_delegator_addr());
  }
  if (from.validator_src_addr().size() > 0) {
    _internal_set_validator_src_addr(from._internal_validator_src_addr());
  }
  if (from.validator_dst_addr().size() > 0) {
    _internal_set_validator_dst_addr(from._internal_validator_dst_addr());
  }
  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::TW::Binance::Proto::SendOrder_Token::MergeFrom(from._internal_amount());
  }
}

void SideChainRedelegate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.SideChainRedelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SideChainRedelegate::CopyFrom(const SideChainRedelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.SideChainRedelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideChainRedelegate::IsInitialized() const {
  return true;
}

void SideChainRedelegate::InternalSwap(SideChainRedelegate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegator_addr_.Swap(&other->delegator_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_src_addr_.Swap(&other->validator_src_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_dst_addr_.Swap(&other->validator_dst_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SideChainRedelegate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SideChainUndelegate::_Internal {
 public:
  static const ::TW::Binance::Proto::SendOrder_Token& amount(const SideChainUndelegate* msg);
};

const ::TW::Binance::Proto::SendOrder_Token&
SideChainUndelegate::_Internal::amount(const SideChainUndelegate* msg) {
  return *msg->amount_;
}
SideChainUndelegate::SideChainUndelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.SideChainUndelegate)
}
SideChainUndelegate::SideChainUndelegate(const SideChainUndelegate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegator_addr().empty()) {
    delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegator_addr(), 
      GetArena());
  }
  validator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_addr().empty()) {
    validator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_addr(), 
      GetArena());
  }
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::TW::Binance::Proto::SendOrder_Token(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.SideChainUndelegate)
}

void SideChainUndelegate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SideChainUndelegate_Binance_2eproto.base);
  delegator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

SideChainUndelegate::~SideChainUndelegate() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.SideChainUndelegate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SideChainUndelegate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegator_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void SideChainUndelegate::ArenaDtor(void* object) {
  SideChainUndelegate* _this = reinterpret_cast< SideChainUndelegate* >(object);
  (void)_this;
}
void SideChainUndelegate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SideChainUndelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SideChainUndelegate& SideChainUndelegate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SideChainUndelegate_Binance_2eproto.base);
  return *internal_default_instance();
}


void SideChainUndelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.SideChainUndelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegator_addr_.ClearToEmpty();
  validator_addr_.ClearToEmpty();
  chain_id_.ClearToEmpty();
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideChainUndelegate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes delegator_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegator_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes validator_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_validator_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SendOrder.Token amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.SideChainUndelegate.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SideChainUndelegate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.SideChainUndelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes delegator_addr = 1;
  if (this->delegator_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_delegator_addr(), target);
  }

  // bytes validator_addr = 2;
  if (this->validator_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_validator_addr(), target);
  }

  // .TW.Binance.Proto.SendOrder.Token amount = 3;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::amount(this), target, stream);
  }

  // string chain_id = 4;
  if (this->chain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.SideChainUndelegate.chain_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.SideChainUndelegate)
  return target;
}

size_t SideChainUndelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.SideChainUndelegate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes delegator_addr = 1;
  if (this->delegator_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_delegator_addr());
  }

  // bytes validator_addr = 2;
  if (this->validator_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validator_addr());
  }

  // string chain_id = 4;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // .TW.Binance.Proto.SendOrder.Token amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SideChainUndelegate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.SideChainUndelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const SideChainUndelegate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SideChainUndelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.SideChainUndelegate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.SideChainUndelegate)
    MergeFrom(*source);
  }
}

void SideChainUndelegate::MergeFrom(const SideChainUndelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.SideChainUndelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegator_addr().size() > 0) {
    _internal_set_delegator_addr(from._internal_delegator_addr());
  }
  if (from.validator_addr().size() > 0) {
    _internal_set_validator_addr(from._internal_validator_addr());
  }
  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::TW::Binance::Proto::SendOrder_Token::MergeFrom(from._internal_amount());
  }
}

void SideChainUndelegate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.SideChainUndelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SideChainUndelegate::CopyFrom(const SideChainUndelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.SideChainUndelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideChainUndelegate::IsInitialized() const {
  return true;
}

void SideChainUndelegate::InternalSwap(SideChainUndelegate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegator_addr_.Swap(&other->delegator_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_addr_.Swap(&other->validator_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SideChainUndelegate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeLockOrder::_Internal {
 public:
};

TimeLockOrder::TimeLockOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amount_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TimeLockOrder)
}
TimeLockOrder::TimeLockOrder(const TimeLockOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amount_(from.amount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_address().empty()) {
    from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_address(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  lock_time_ = from.lock_time_;
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TimeLockOrder)
}

void TimeLockOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeLockOrder_Binance_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lock_time_ = PROTOBUF_LONGLONG(0);
}

TimeLockOrder::~TimeLockOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TimeLockOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeLockOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimeLockOrder::ArenaDtor(void* object) {
  TimeLockOrder* _this = reinterpret_cast< TimeLockOrder* >(object);
  (void)_this;
}
void TimeLockOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeLockOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeLockOrder& TimeLockOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeLockOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void TimeLockOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TimeLockOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.Clear();
  from_address_.ClearToEmpty();
  description_.ClearToEmpty();
  lock_time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeLockOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TimeLockOrder.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.Binance.Proto.SendOrder.Token amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 lock_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeLockOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TimeLockOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from_address = 1;
  if (this->from_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from_address(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TimeLockOrder.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .TW.Binance.Proto.SendOrder.Token amount = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_amount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_amount(i), target, stream);
  }

  // int64 lock_time = 4;
  if (this->lock_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lock_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TimeLockOrder)
  return target;
}

size_t TimeLockOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TimeLockOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Binance.Proto.SendOrder.Token amount = 3;
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->amount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes from_address = 1;
  if (this->from_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from_address());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int64 lock_time = 4;
  if (this->lock_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lock_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeLockOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TimeLockOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeLockOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeLockOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TimeLockOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TimeLockOrder)
    MergeFrom(*source);
  }
}

void TimeLockOrder::MergeFrom(const TimeLockOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TimeLockOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amount_.MergeFrom(from.amount_);
  if (from.from_address().size() > 0) {
    _internal_set_from_address(from._internal_from_address());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.lock_time() != 0) {
    _internal_set_lock_time(from._internal_lock_time());
  }
}

void TimeLockOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TimeLockOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeLockOrder::CopyFrom(const TimeLockOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TimeLockOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLockOrder::IsInitialized() const {
  return true;
}

void TimeLockOrder::InternalSwap(TimeLockOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.InternalSwap(&other->amount_);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lock_time_, other->lock_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeLockOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeRelockOrder::_Internal {
 public:
};

TimeRelockOrder::TimeRelockOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amount_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TimeRelockOrder)
}
TimeRelockOrder::TimeRelockOrder(const TimeRelockOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amount_(from.amount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_address().empty()) {
    from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_address(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(lock_time_));
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TimeRelockOrder)
}

void TimeRelockOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeRelockOrder_Binance_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lock_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lock_time_));
}

TimeRelockOrder::~TimeRelockOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TimeRelockOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeRelockOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimeRelockOrder::ArenaDtor(void* object) {
  TimeRelockOrder* _this = reinterpret_cast< TimeRelockOrder* >(object);
  (void)_this;
}
void TimeRelockOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeRelockOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeRelockOrder& TimeRelockOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeRelockOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void TimeRelockOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TimeRelockOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.Clear();
  from_address_.ClearToEmpty();
  description_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lock_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeRelockOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.TimeRelockOrder.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.Binance.Proto.SendOrder.Token amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 lock_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeRelockOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TimeRelockOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from_address = 1;
  if (this->from_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from_address(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.TimeRelockOrder.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // repeated .TW.Binance.Proto.SendOrder.Token amount = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_amount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_amount(i), target, stream);
  }

  // int64 lock_time = 5;
  if (this->lock_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_lock_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TimeRelockOrder)
  return target;
}

size_t TimeRelockOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TimeRelockOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Binance.Proto.SendOrder.Token amount = 4;
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->amount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes from_address = 1;
  if (this->from_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from_address());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 lock_time = 5;
  if (this->lock_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lock_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeRelockOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TimeRelockOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeRelockOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeRelockOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TimeRelockOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TimeRelockOrder)
    MergeFrom(*source);
  }
}

void TimeRelockOrder::MergeFrom(const TimeRelockOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TimeRelockOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amount_.MergeFrom(from.amount_);
  if (from.from_address().size() > 0) {
    _internal_set_from_address(from._internal_from_address());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.lock_time() != 0) {
    _internal_set_lock_time(from._internal_lock_time());
  }
}

void TimeRelockOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TimeRelockOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRelockOrder::CopyFrom(const TimeRelockOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TimeRelockOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRelockOrder::IsInitialized() const {
  return true;
}

void TimeRelockOrder::InternalSwap(TimeRelockOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.InternalSwap(&other->amount_);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRelockOrder, lock_time_)
      + sizeof(TimeRelockOrder::lock_time_)
      - PROTOBUF_FIELD_OFFSET(TimeRelockOrder, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRelockOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeUnlockOrder::_Internal {
 public:
};

TimeUnlockOrder::TimeUnlockOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.TimeUnlockOrder)
}
TimeUnlockOrder::TimeUnlockOrder(const TimeUnlockOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_address().empty()) {
    from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_address(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.TimeUnlockOrder)
}

void TimeUnlockOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeUnlockOrder_Binance_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

TimeUnlockOrder::~TimeUnlockOrder() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.TimeUnlockOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeUnlockOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimeUnlockOrder::ArenaDtor(void* object) {
  TimeUnlockOrder* _this = reinterpret_cast< TimeUnlockOrder* >(object);
  (void)_this;
}
void TimeUnlockOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeUnlockOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeUnlockOrder& TimeUnlockOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeUnlockOrder_Binance_2eproto.base);
  return *internal_default_instance();
}


void TimeUnlockOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.TimeUnlockOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_address_.ClearToEmpty();
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeUnlockOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeUnlockOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.TimeUnlockOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from_address = 1;
  if (this->from_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from_address(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.TimeUnlockOrder)
  return target;
}

size_t TimeUnlockOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.TimeUnlockOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from_address = 1;
  if (this->from_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from_address());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeUnlockOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.TimeUnlockOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeUnlockOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeUnlockOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.TimeUnlockOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.TimeUnlockOrder)
    MergeFrom(*source);
  }
}

void TimeUnlockOrder::MergeFrom(const TimeUnlockOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.TimeUnlockOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_address().size() > 0) {
    _internal_set_from_address(from._internal_from_address());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void TimeUnlockOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.TimeUnlockOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeUnlockOrder::CopyFrom(const TimeUnlockOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.TimeUnlockOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeUnlockOrder::IsInitialized() const {
  return true;
}

void TimeUnlockOrder::InternalSwap(TimeUnlockOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeUnlockOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Binance::Proto::TradeOrder& trade_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::CancelTradeOrder& cancel_trade_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::SendOrder& send_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::TokenFreezeOrder& freeze_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::TokenUnfreezeOrder& unfreeze_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::HTLTOrder& htlt_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::DepositHTLTOrder& deposithtlt_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::ClaimHTLOrder& claimhtlt_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::RefundHTLTOrder& refundhtlt_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::TokenIssueOrder& issue_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::TokenMintOrder& mint_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::TokenBurnOrder& burn_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::TransferOut& transfer_out_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::SideChainDelegate& side_delegate_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::SideChainRedelegate& side_redelegate_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::SideChainUndelegate& side_undelegate_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::TimeLockOrder& time_lock_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::TimeRelockOrder& time_relock_order(const SigningInput* msg);
  static const ::TW::Binance::Proto::TimeUnlockOrder& time_unlock_order(const SigningInput* msg);
};

const ::TW::Binance::Proto::TradeOrder&
SigningInput::_Internal::trade_order(const SigningInput* msg) {
  return *msg->order_oneof_.trade_order_;
}
const ::TW::Binance::Proto::CancelTradeOrder&
SigningInput::_Internal::cancel_trade_order(const SigningInput* msg) {
  return *msg->order_oneof_.cancel_trade_order_;
}
const ::TW::Binance::Proto::SendOrder&
SigningInput::_Internal::send_order(const SigningInput* msg) {
  return *msg->order_oneof_.send_order_;
}
const ::TW::Binance::Proto::TokenFreezeOrder&
SigningInput::_Internal::freeze_order(const SigningInput* msg) {
  return *msg->order_oneof_.freeze_order_;
}
const ::TW::Binance::Proto::TokenUnfreezeOrder&
SigningInput::_Internal::unfreeze_order(const SigningInput* msg) {
  return *msg->order_oneof_.unfreeze_order_;
}
const ::TW::Binance::Proto::HTLTOrder&
SigningInput::_Internal::htlt_order(const SigningInput* msg) {
  return *msg->order_oneof_.htlt_order_;
}
const ::TW::Binance::Proto::DepositHTLTOrder&
SigningInput::_Internal::deposithtlt_order(const SigningInput* msg) {
  return *msg->order_oneof_.deposithtlt_order_;
}
const ::TW::Binance::Proto::ClaimHTLOrder&
SigningInput::_Internal::claimhtlt_order(const SigningInput* msg) {
  return *msg->order_oneof_.claimhtlt_order_;
}
const ::TW::Binance::Proto::RefundHTLTOrder&
SigningInput::_Internal::refundhtlt_order(const SigningInput* msg) {
  return *msg->order_oneof_.refundhtlt_order_;
}
const ::TW::Binance::Proto::TokenIssueOrder&
SigningInput::_Internal::issue_order(const SigningInput* msg) {
  return *msg->order_oneof_.issue_order_;
}
const ::TW::Binance::Proto::TokenMintOrder&
SigningInput::_Internal::mint_order(const SigningInput* msg) {
  return *msg->order_oneof_.mint_order_;
}
const ::TW::Binance::Proto::TokenBurnOrder&
SigningInput::_Internal::burn_order(const SigningInput* msg) {
  return *msg->order_oneof_.burn_order_;
}
const ::TW::Binance::Proto::TransferOut&
SigningInput::_Internal::transfer_out_order(const SigningInput* msg) {
  return *msg->order_oneof_.transfer_out_order_;
}
const ::TW::Binance::Proto::SideChainDelegate&
SigningInput::_Internal::side_delegate_order(const SigningInput* msg) {
  return *msg->order_oneof_.side_delegate_order_;
}
const ::TW::Binance::Proto::SideChainRedelegate&
SigningInput::_Internal::side_redelegate_order(const SigningInput* msg) {
  return *msg->order_oneof_.side_redelegate_order_;
}
const ::TW::Binance::Proto::SideChainUndelegate&
SigningInput::_Internal::side_undelegate_order(const SigningInput* msg) {
  return *msg->order_oneof_.side_undelegate_order_;
}
const ::TW::Binance::Proto::TimeLockOrder&
SigningInput::_Internal::time_lock_order(const SigningInput* msg) {
  return *msg->order_oneof_.time_lock_order_;
}
const ::TW::Binance::Proto::TimeRelockOrder&
SigningInput::_Internal::time_relock_order(const SigningInput* msg) {
  return *msg->order_oneof_.time_relock_order_;
}
const ::TW::Binance::Proto::TimeUnlockOrder&
SigningInput::_Internal::time_unlock_order(const SigningInput* msg) {
  return *msg->order_oneof_.time_unlock_order_;
}
void SigningInput::set_allocated_trade_order(::TW::Binance::Proto::TradeOrder* trade_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (trade_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trade_order);
    if (message_arena != submessage_arena) {
      trade_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade_order, submessage_arena);
    }
    set_has_trade_order();
    order_oneof_.trade_order_ = trade_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.trade_order)
}
void SigningInput::set_allocated_cancel_trade_order(::TW::Binance::Proto::CancelTradeOrder* cancel_trade_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (cancel_trade_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_trade_order);
    if (message_arena != submessage_arena) {
      cancel_trade_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_trade_order, submessage_arena);
    }
    set_has_cancel_trade_order();
    order_oneof_.cancel_trade_order_ = cancel_trade_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.cancel_trade_order)
}
void SigningInput::set_allocated_send_order(::TW::Binance::Proto::SendOrder* send_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (send_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(send_order);
    if (message_arena != submessage_arena) {
      send_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_order, submessage_arena);
    }
    set_has_send_order();
    order_oneof_.send_order_ = send_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.send_order)
}
void SigningInput::set_allocated_freeze_order(::TW::Binance::Proto::TokenFreezeOrder* freeze_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (freeze_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(freeze_order);
    if (message_arena != submessage_arena) {
      freeze_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freeze_order, submessage_arena);
    }
    set_has_freeze_order();
    order_oneof_.freeze_order_ = freeze_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.freeze_order)
}
void SigningInput::set_allocated_unfreeze_order(::TW::Binance::Proto::TokenUnfreezeOrder* unfreeze_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (unfreeze_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unfreeze_order);
    if (message_arena != submessage_arena) {
      unfreeze_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unfreeze_order, submessage_arena);
    }
    set_has_unfreeze_order();
    order_oneof_.unfreeze_order_ = unfreeze_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.unfreeze_order)
}
void SigningInput::set_allocated_htlt_order(::TW::Binance::Proto::HTLTOrder* htlt_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (htlt_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(htlt_order);
    if (message_arena != submessage_arena) {
      htlt_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, htlt_order, submessage_arena);
    }
    set_has_htlt_order();
    order_oneof_.htlt_order_ = htlt_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.htlt_order)
}
void SigningInput::set_allocated_deposithtlt_order(::TW::Binance::Proto::DepositHTLTOrder* deposithtlt_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (deposithtlt_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deposithtlt_order);
    if (message_arena != submessage_arena) {
      deposithtlt_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposithtlt_order, submessage_arena);
    }
    set_has_deposithtlt_order();
    order_oneof_.deposithtlt_order_ = deposithtlt_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.depositHTLT_order)
}
void SigningInput::set_allocated_claimhtlt_order(::TW::Binance::Proto::ClaimHTLOrder* claimhtlt_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (claimhtlt_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(claimhtlt_order);
    if (message_arena != submessage_arena) {
      claimhtlt_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claimhtlt_order, submessage_arena);
    }
    set_has_claimhtlt_order();
    order_oneof_.claimhtlt_order_ = claimhtlt_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.claimHTLT_order)
}
void SigningInput::set_allocated_refundhtlt_order(::TW::Binance::Proto::RefundHTLTOrder* refundhtlt_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (refundhtlt_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(refundhtlt_order);
    if (message_arena != submessage_arena) {
      refundhtlt_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refundhtlt_order, submessage_arena);
    }
    set_has_refundhtlt_order();
    order_oneof_.refundhtlt_order_ = refundhtlt_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.refundHTLT_order)
}
void SigningInput::set_allocated_issue_order(::TW::Binance::Proto::TokenIssueOrder* issue_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (issue_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(issue_order);
    if (message_arena != submessage_arena) {
      issue_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, issue_order, submessage_arena);
    }
    set_has_issue_order();
    order_oneof_.issue_order_ = issue_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.issue_order)
}
void SigningInput::set_allocated_mint_order(::TW::Binance::Proto::TokenMintOrder* mint_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (mint_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mint_order);
    if (message_arena != submessage_arena) {
      mint_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mint_order, submessage_arena);
    }
    set_has_mint_order();
    order_oneof_.mint_order_ = mint_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.mint_order)
}
void SigningInput::set_allocated_burn_order(::TW::Binance::Proto::TokenBurnOrder* burn_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (burn_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(burn_order);
    if (message_arena != submessage_arena) {
      burn_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, burn_order, submessage_arena);
    }
    set_has_burn_order();
    order_oneof_.burn_order_ = burn_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.burn_order)
}
void SigningInput::set_allocated_transfer_out_order(::TW::Binance::Proto::TransferOut* transfer_out_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (transfer_out_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer_out_order);
    if (message_arena != submessage_arena) {
      transfer_out_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_out_order, submessage_arena);
    }
    set_has_transfer_out_order();
    order_oneof_.transfer_out_order_ = transfer_out_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.transfer_out_order)
}
void SigningInput::set_allocated_side_delegate_order(::TW::Binance::Proto::SideChainDelegate* side_delegate_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (side_delegate_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(side_delegate_order);
    if (message_arena != submessage_arena) {
      side_delegate_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, side_delegate_order, submessage_arena);
    }
    set_has_side_delegate_order();
    order_oneof_.side_delegate_order_ = side_delegate_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.side_delegate_order)
}
void SigningInput::set_allocated_side_redelegate_order(::TW::Binance::Proto::SideChainRedelegate* side_redelegate_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (side_redelegate_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(side_redelegate_order);
    if (message_arena != submessage_arena) {
      side_redelegate_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, side_redelegate_order, submessage_arena);
    }
    set_has_side_redelegate_order();
    order_oneof_.side_redelegate_order_ = side_redelegate_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.side_redelegate_order)
}
void SigningInput::set_allocated_side_undelegate_order(::TW::Binance::Proto::SideChainUndelegate* side_undelegate_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (side_undelegate_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(side_undelegate_order);
    if (message_arena != submessage_arena) {
      side_undelegate_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, side_undelegate_order, submessage_arena);
    }
    set_has_side_undelegate_order();
    order_oneof_.side_undelegate_order_ = side_undelegate_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.side_undelegate_order)
}
void SigningInput::set_allocated_time_lock_order(::TW::Binance::Proto::TimeLockOrder* time_lock_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (time_lock_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_lock_order);
    if (message_arena != submessage_arena) {
      time_lock_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_lock_order, submessage_arena);
    }
    set_has_time_lock_order();
    order_oneof_.time_lock_order_ = time_lock_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.time_lock_order)
}
void SigningInput::set_allocated_time_relock_order(::TW::Binance::Proto::TimeRelockOrder* time_relock_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (time_relock_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_relock_order);
    if (message_arena != submessage_arena) {
      time_relock_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_relock_order, submessage_arena);
    }
    set_has_time_relock_order();
    order_oneof_.time_relock_order_ = time_relock_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.time_relock_order)
}
void SigningInput::set_allocated_time_unlock_order(::TW::Binance::Proto::TimeUnlockOrder* time_unlock_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_order_oneof();
  if (time_unlock_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_unlock_order);
    if (message_arena != submessage_arena) {
      time_unlock_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_unlock_order, submessage_arena);
    }
    set_has_time_unlock_order();
    order_oneof_.time_unlock_order_ = time_unlock_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.time_unlock_order)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArena());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArena());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  ::memcpy(&account_number_, &from.account_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&account_number_)) + sizeof(source_));
  clear_has_order_oneof();
  switch (from.order_oneof_case()) {
    case kTradeOrder: {
      _internal_mutable_trade_order()->::TW::Binance::Proto::TradeOrder::MergeFrom(from._internal_trade_order());
      break;
    }
    case kCancelTradeOrder: {
      _internal_mutable_cancel_trade_order()->::TW::Binance::Proto::CancelTradeOrder::MergeFrom(from._internal_cancel_trade_order());
      break;
    }
    case kSendOrder: {
      _internal_mutable_send_order()->::TW::Binance::Proto::SendOrder::MergeFrom(from._internal_send_order());
      break;
    }
    case kFreezeOrder: {
      _internal_mutable_freeze_order()->::TW::Binance::Proto::TokenFreezeOrder::MergeFrom(from._internal_freeze_order());
      break;
    }
    case kUnfreezeOrder: {
      _internal_mutable_unfreeze_order()->::TW::Binance::Proto::TokenUnfreezeOrder::MergeFrom(from._internal_unfreeze_order());
      break;
    }
    case kHtltOrder: {
      _internal_mutable_htlt_order()->::TW::Binance::Proto::HTLTOrder::MergeFrom(from._internal_htlt_order());
      break;
    }
    case kDepositHTLTOrder: {
      _internal_mutable_deposithtlt_order()->::TW::Binance::Proto::DepositHTLTOrder::MergeFrom(from._internal_deposithtlt_order());
      break;
    }
    case kClaimHTLTOrder: {
      _internal_mutable_claimhtlt_order()->::TW::Binance::Proto::ClaimHTLOrder::MergeFrom(from._internal_claimhtlt_order());
      break;
    }
    case kRefundHTLTOrder: {
      _internal_mutable_refundhtlt_order()->::TW::Binance::Proto::RefundHTLTOrder::MergeFrom(from._internal_refundhtlt_order());
      break;
    }
    case kIssueOrder: {
      _internal_mutable_issue_order()->::TW::Binance::Proto::TokenIssueOrder::MergeFrom(from._internal_issue_order());
      break;
    }
    case kMintOrder: {
      _internal_mutable_mint_order()->::TW::Binance::Proto::TokenMintOrder::MergeFrom(from._internal_mint_order());
      break;
    }
    case kBurnOrder: {
      _internal_mutable_burn_order()->::TW::Binance::Proto::TokenBurnOrder::MergeFrom(from._internal_burn_order());
      break;
    }
    case kTransferOutOrder: {
      _internal_mutable_transfer_out_order()->::TW::Binance::Proto::TransferOut::MergeFrom(from._internal_transfer_out_order());
      break;
    }
    case kSideDelegateOrder: {
      _internal_mutable_side_delegate_order()->::TW::Binance::Proto::SideChainDelegate::MergeFrom(from._internal_side_delegate_order());
      break;
    }
    case kSideRedelegateOrder: {
      _internal_mutable_side_redelegate_order()->::TW::Binance::Proto::SideChainRedelegate::MergeFrom(from._internal_side_redelegate_order());
      break;
    }
    case kSideUndelegateOrder: {
      _internal_mutable_side_undelegate_order()->::TW::Binance::Proto::SideChainUndelegate::MergeFrom(from._internal_side_undelegate_order());
      break;
    }
    case kTimeLockOrder: {
      _internal_mutable_time_lock_order()->::TW::Binance::Proto::TimeLockOrder::MergeFrom(from._internal_time_lock_order());
      break;
    }
    case kTimeRelockOrder: {
      _internal_mutable_time_relock_order()->::TW::Binance::Proto::TimeRelockOrder::MergeFrom(from._internal_time_relock_order());
      break;
    }
    case kTimeUnlockOrder: {
      _internal_mutable_time_unlock_order()->::TW::Binance::Proto::TimeUnlockOrder::MergeFrom(from._internal_time_unlock_order());
      break;
    }
    case ORDER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Binance_2eproto.base);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&account_number_)) + sizeof(source_));
  clear_has_order_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_order_oneof()) {
    clear_order_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Binance_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::clear_order_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Binance.Proto.SigningInput)
  switch (order_oneof_case()) {
    case kTradeOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.trade_order_;
      }
      break;
    }
    case kCancelTradeOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.cancel_trade_order_;
      }
      break;
    }
    case kSendOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.send_order_;
      }
      break;
    }
    case kFreezeOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.freeze_order_;
      }
      break;
    }
    case kUnfreezeOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.unfreeze_order_;
      }
      break;
    }
    case kHtltOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.htlt_order_;
      }
      break;
    }
    case kDepositHTLTOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.deposithtlt_order_;
      }
      break;
    }
    case kClaimHTLTOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.claimhtlt_order_;
      }
      break;
    }
    case kRefundHTLTOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.refundhtlt_order_;
      }
      break;
    }
    case kIssueOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.issue_order_;
      }
      break;
    }
    case kMintOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.mint_order_;
      }
      break;
    }
    case kBurnOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.burn_order_;
      }
      break;
    }
    case kTransferOutOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.transfer_out_order_;
      }
      break;
    }
    case kSideDelegateOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.side_delegate_order_;
      }
      break;
    }
    case kSideRedelegateOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.side_redelegate_order_;
      }
      break;
    }
    case kSideUndelegateOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.side_undelegate_order_;
      }
      break;
    }
    case kTimeLockOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.time_lock_order_;
      }
      break;
    }
    case kTimeRelockOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.time_relock_order_;
      }
      break;
    }
    case kTimeUnlockOrder: {
      if (GetArena() == nullptr) {
        delete order_oneof_.time_unlock_order_;
      }
      break;
    }
    case ORDER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ORDER_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  memo_.ClearToEmpty();
  private_key_.ClearToEmpty();
  ::memset(&account_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&account_number_)) + sizeof(source_));
  clear_order_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.SigningInput.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 account_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          account_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Binance.Proto.SigningInput.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes private_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TradeOrder trade_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.CancelTradeOrder cancel_trade_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_trade_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SendOrder send_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TokenFreezeOrder freeze_order = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_freeze_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TokenUnfreezeOrder unfreeze_order = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_unfreeze_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.HTLTOrder htlt_order = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_htlt_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.DepositHTLTOrder depositHTLT_order = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposithtlt_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.ClaimHTLOrder claimHTLT_order = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_claimhtlt_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.RefundHTLTOrder refundHTLT_order = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_refundhtlt_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TokenIssueOrder issue_order = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_issue_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TokenMintOrder mint_order = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_mint_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TokenBurnOrder burn_order = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_burn_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TransferOut transfer_out_order = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer_out_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SideChainDelegate side_delegate_order = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_side_delegate_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SideChainRedelegate side_redelegate_order = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_side_redelegate_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SideChainUndelegate side_undelegate_order = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_side_undelegate_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TimeLockOrder time_lock_order = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_lock_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TimeRelockOrder time_relock_order = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_relock_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.TimeUnlockOrder time_unlock_order = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_unlock_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1;
  if (this->chain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.SigningInput.chain_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  // int64 account_number = 2;
  if (this->account_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_account_number(), target);
  }

  // int64 sequence = 3;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sequence(), target);
  }

  // int64 source = 4;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_source(), target);
  }

  // string memo = 5;
  if (this->memo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Binance.Proto.SigningInput.memo");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_memo(), target);
  }

  // bytes private_key = 6;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_private_key(), target);
  }

  // .TW.Binance.Proto.TradeOrder trade_order = 8;
  if (_internal_has_trade_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::trade_order(this), target, stream);
  }

  // .TW.Binance.Proto.CancelTradeOrder cancel_trade_order = 9;
  if (_internal_has_cancel_trade_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::cancel_trade_order(this), target, stream);
  }

  // .TW.Binance.Proto.SendOrder send_order = 10;
  if (_internal_has_send_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::send_order(this), target, stream);
  }

  // .TW.Binance.Proto.TokenFreezeOrder freeze_order = 11;
  if (_internal_has_freeze_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::freeze_order(this), target, stream);
  }

  // .TW.Binance.Proto.TokenUnfreezeOrder unfreeze_order = 12;
  if (_internal_has_unfreeze_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::unfreeze_order(this), target, stream);
  }

  // .TW.Binance.Proto.HTLTOrder htlt_order = 13;
  if (_internal_has_htlt_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::htlt_order(this), target, stream);
  }

  // .TW.Binance.Proto.DepositHTLTOrder depositHTLT_order = 14;
  if (_internal_has_deposithtlt_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::deposithtlt_order(this), target, stream);
  }

  // .TW.Binance.Proto.ClaimHTLOrder claimHTLT_order = 15;
  if (_internal_has_claimhtlt_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::claimhtlt_order(this), target, stream);
  }

  // .TW.Binance.Proto.RefundHTLTOrder refundHTLT_order = 16;
  if (_internal_has_refundhtlt_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::refundhtlt_order(this), target, stream);
  }

  // .TW.Binance.Proto.TokenIssueOrder issue_order = 17;
  if (_internal_has_issue_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::issue_order(this), target, stream);
  }

  // .TW.Binance.Proto.TokenMintOrder mint_order = 18;
  if (_internal_has_mint_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::mint_order(this), target, stream);
  }

  // .TW.Binance.Proto.TokenBurnOrder burn_order = 19;
  if (_internal_has_burn_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::burn_order(this), target, stream);
  }

  // .TW.Binance.Proto.TransferOut transfer_out_order = 20;
  if (_internal_has_transfer_out_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::transfer_out_order(this), target, stream);
  }

  // .TW.Binance.Proto.SideChainDelegate side_delegate_order = 21;
  if (_internal_has_side_delegate_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::side_delegate_order(this), target, stream);
  }

  // .TW.Binance.Proto.SideChainRedelegate side_redelegate_order = 22;
  if (_internal_has_side_redelegate_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::side_redelegate_order(this), target, stream);
  }

  // .TW.Binance.Proto.SideChainUndelegate side_undelegate_order = 23;
  if (_internal_has_side_undelegate_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::side_undelegate_order(this), target, stream);
  }

  // .TW.Binance.Proto.TimeLockOrder time_lock_order = 24;
  if (_internal_has_time_lock_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::time_lock_order(this), target, stream);
  }

  // .TW.Binance.Proto.TimeRelockOrder time_relock_order = 25;
  if (_internal_has_time_relock_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::time_relock_order(this), target, stream);
  }

  // .TW.Binance.Proto.TimeUnlockOrder time_unlock_order = 26;
  if (_internal_has_time_unlock_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::time_unlock_order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 1;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // string memo = 5;
  if (this->memo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes private_key = 6;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // int64 account_number = 2;
  if (this->account_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_account_number());
  }

  // int64 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // int64 source = 4;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_source());
  }

  switch (order_oneof_case()) {
    // .TW.Binance.Proto.TradeOrder trade_order = 8;
    case kTradeOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.trade_order_);
      break;
    }
    // .TW.Binance.Proto.CancelTradeOrder cancel_trade_order = 9;
    case kCancelTradeOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.cancel_trade_order_);
      break;
    }
    // .TW.Binance.Proto.SendOrder send_order = 10;
    case kSendOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.send_order_);
      break;
    }
    // .TW.Binance.Proto.TokenFreezeOrder freeze_order = 11;
    case kFreezeOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.freeze_order_);
      break;
    }
    // .TW.Binance.Proto.TokenUnfreezeOrder unfreeze_order = 12;
    case kUnfreezeOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.unfreeze_order_);
      break;
    }
    // .TW.Binance.Proto.HTLTOrder htlt_order = 13;
    case kHtltOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.htlt_order_);
      break;
    }
    // .TW.Binance.Proto.DepositHTLTOrder depositHTLT_order = 14;
    case kDepositHTLTOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.deposithtlt_order_);
      break;
    }
    // .TW.Binance.Proto.ClaimHTLOrder claimHTLT_order = 15;
    case kClaimHTLTOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.claimhtlt_order_);
      break;
    }
    // .TW.Binance.Proto.RefundHTLTOrder refundHTLT_order = 16;
    case kRefundHTLTOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.refundhtlt_order_);
      break;
    }
    // .TW.Binance.Proto.TokenIssueOrder issue_order = 17;
    case kIssueOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.issue_order_);
      break;
    }
    // .TW.Binance.Proto.TokenMintOrder mint_order = 18;
    case kMintOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.mint_order_);
      break;
    }
    // .TW.Binance.Proto.TokenBurnOrder burn_order = 19;
    case kBurnOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.burn_order_);
      break;
    }
    // .TW.Binance.Proto.TransferOut transfer_out_order = 20;
    case kTransferOutOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.transfer_out_order_);
      break;
    }
    // .TW.Binance.Proto.SideChainDelegate side_delegate_order = 21;
    case kSideDelegateOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.side_delegate_order_);
      break;
    }
    // .TW.Binance.Proto.SideChainRedelegate side_redelegate_order = 22;
    case kSideRedelegateOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.side_redelegate_order_);
      break;
    }
    // .TW.Binance.Proto.SideChainUndelegate side_undelegate_order = 23;
    case kSideUndelegateOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.side_undelegate_order_);
      break;
    }
    // .TW.Binance.Proto.TimeLockOrder time_lock_order = 24;
    case kTimeLockOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.time_lock_order_);
      break;
    }
    // .TW.Binance.Proto.TimeRelockOrder time_relock_order = 25;
    case kTimeRelockOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.time_relock_order_);
      break;
    }
    // .TW.Binance.Proto.TimeUnlockOrder time_unlock_order = 26;
    case kTimeUnlockOrder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_oneof_.time_unlock_order_);
      break;
    }
    case ORDER_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.memo().size() > 0) {
    _internal_set_memo(from._internal_memo());
  }
  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.account_number() != 0) {
    _internal_set_account_number(from._internal_account_number());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
  switch (from.order_oneof_case()) {
    case kTradeOrder: {
      _internal_mutable_trade_order()->::TW::Binance::Proto::TradeOrder::MergeFrom(from._internal_trade_order());
      break;
    }
    case kCancelTradeOrder: {
      _internal_mutable_cancel_trade_order()->::TW::Binance::Proto::CancelTradeOrder::MergeFrom(from._internal_cancel_trade_order());
      break;
    }
    case kSendOrder: {
      _internal_mutable_send_order()->::TW::Binance::Proto::SendOrder::MergeFrom(from._internal_send_order());
      break;
    }
    case kFreezeOrder: {
      _internal_mutable_freeze_order()->::TW::Binance::Proto::TokenFreezeOrder::MergeFrom(from._internal_freeze_order());
      break;
    }
    case kUnfreezeOrder: {
      _internal_mutable_unfreeze_order()->::TW::Binance::Proto::TokenUnfreezeOrder::MergeFrom(from._internal_unfreeze_order());
      break;
    }
    case kHtltOrder: {
      _internal_mutable_htlt_order()->::TW::Binance::Proto::HTLTOrder::MergeFrom(from._internal_htlt_order());
      break;
    }
    case kDepositHTLTOrder: {
      _internal_mutable_deposithtlt_order()->::TW::Binance::Proto::DepositHTLTOrder::MergeFrom(from._internal_deposithtlt_order());
      break;
    }
    case kClaimHTLTOrder: {
      _internal_mutable_claimhtlt_order()->::TW::Binance::Proto::ClaimHTLOrder::MergeFrom(from._internal_claimhtlt_order());
      break;
    }
    case kRefundHTLTOrder: {
      _internal_mutable_refundhtlt_order()->::TW::Binance::Proto::RefundHTLTOrder::MergeFrom(from._internal_refundhtlt_order());
      break;
    }
    case kIssueOrder: {
      _internal_mutable_issue_order()->::TW::Binance::Proto::TokenIssueOrder::MergeFrom(from._internal_issue_order());
      break;
    }
    case kMintOrder: {
      _internal_mutable_mint_order()->::TW::Binance::Proto::TokenMintOrder::MergeFrom(from._internal_mint_order());
      break;
    }
    case kBurnOrder: {
      _internal_mutable_burn_order()->::TW::Binance::Proto::TokenBurnOrder::MergeFrom(from._internal_burn_order());
      break;
    }
    case kTransferOutOrder: {
      _internal_mutable_transfer_out_order()->::TW::Binance::Proto::TransferOut::MergeFrom(from._internal_transfer_out_order());
      break;
    }
    case kSideDelegateOrder: {
      _internal_mutable_side_delegate_order()->::TW::Binance::Proto::SideChainDelegate::MergeFrom(from._internal_side_delegate_order());
      break;
    }
    case kSideRedelegateOrder: {
      _internal_mutable_side_redelegate_order()->::TW::Binance::Proto::SideChainRedelegate::MergeFrom(from._internal_side_redelegate_order());
      break;
    }
    case kSideUndelegateOrder: {
      _internal_mutable_side_undelegate_order()->::TW::Binance::Proto::SideChainUndelegate::MergeFrom(from._internal_side_undelegate_order());
      break;
    }
    case kTimeLockOrder: {
      _internal_mutable_time_lock_order()->::TW::Binance::Proto::TimeLockOrder::MergeFrom(from._internal_time_lock_order());
      break;
    }
    case kTimeRelockOrder: {
      _internal_mutable_time_relock_order()->::TW::Binance::Proto::TimeRelockOrder::MergeFrom(from._internal_time_relock_order());
      break;
    }
    case kTimeUnlockOrder: {
      _internal_mutable_time_unlock_order()->::TW::Binance::Proto::TimeUnlockOrder::MergeFrom(from._internal_time_unlock_order());
      break;
    }
    case ORDER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memo_.Swap(&other->memo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, source_)
      + sizeof(SigningInput::source_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, account_number_)>(
          reinterpret_cast<char*>(&account_number_),
          reinterpret_cast<char*>(&other->account_number_));
  swap(order_oneof_, other->order_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Binance.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Binance.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Binance_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Binance.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Binance_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Binance.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Binance.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Binance.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Binance.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Binance.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Binance.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Binance.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Binance.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Binance.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Binance.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Binance
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::Transaction* Arena::CreateMaybeMessage< ::TW::Binance::Proto::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::Signature_PubKey* Arena::CreateMaybeMessage< ::TW::Binance::Proto::Signature_PubKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::Signature_PubKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::Signature* Arena::CreateMaybeMessage< ::TW::Binance::Proto::Signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TradeOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TradeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TradeOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::CancelTradeOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::CancelTradeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::CancelTradeOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::SendOrder_Token* Arena::CreateMaybeMessage< ::TW::Binance::Proto::SendOrder_Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::SendOrder_Token >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::SendOrder_Input* Arena::CreateMaybeMessage< ::TW::Binance::Proto::SendOrder_Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::SendOrder_Input >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::SendOrder_Output* Arena::CreateMaybeMessage< ::TW::Binance::Proto::SendOrder_Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::SendOrder_Output >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::SendOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::SendOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::SendOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TokenIssueOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TokenIssueOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TokenIssueOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TokenMintOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TokenMintOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TokenMintOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TokenBurnOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TokenBurnOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TokenBurnOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TokenFreezeOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TokenFreezeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TokenFreezeOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TokenUnfreezeOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TokenUnfreezeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TokenUnfreezeOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::HTLTOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::HTLTOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::HTLTOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::DepositHTLTOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::DepositHTLTOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::DepositHTLTOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::ClaimHTLOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::ClaimHTLOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::ClaimHTLOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::RefundHTLTOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::RefundHTLTOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::RefundHTLTOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TransferOut* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TransferOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TransferOut >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::SideChainDelegate* Arena::CreateMaybeMessage< ::TW::Binance::Proto::SideChainDelegate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::SideChainDelegate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::SideChainRedelegate* Arena::CreateMaybeMessage< ::TW::Binance::Proto::SideChainRedelegate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::SideChainRedelegate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::SideChainUndelegate* Arena::CreateMaybeMessage< ::TW::Binance::Proto::SideChainUndelegate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::SideChainUndelegate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TimeLockOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TimeLockOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TimeLockOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TimeRelockOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TimeRelockOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TimeRelockOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::TimeUnlockOrder* Arena::CreateMaybeMessage< ::TW::Binance::Proto::TimeUnlockOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::TimeUnlockOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Binance::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Binance::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Binance::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Binance::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
