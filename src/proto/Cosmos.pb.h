// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cosmos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Cosmos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Cosmos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Cosmos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Cosmos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cosmos_2eproto;
namespace TW {
namespace Cosmos {
namespace Proto {
class Amount;
class AmountDefaultTypeInternal;
extern AmountDefaultTypeInternal _Amount_default_instance_;
class Fee;
class FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
class Height;
class HeightDefaultTypeInternal;
extern HeightDefaultTypeInternal _Height_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_AuthGrant;
class Message_AuthGrantDefaultTypeInternal;
extern Message_AuthGrantDefaultTypeInternal _Message_AuthGrant_default_instance_;
class Message_AuthRevoke;
class Message_AuthRevokeDefaultTypeInternal;
extern Message_AuthRevokeDefaultTypeInternal _Message_AuthRevoke_default_instance_;
class Message_BeginRedelegate;
class Message_BeginRedelegateDefaultTypeInternal;
extern Message_BeginRedelegateDefaultTypeInternal _Message_BeginRedelegate_default_instance_;
class Message_Delegate;
class Message_DelegateDefaultTypeInternal;
extern Message_DelegateDefaultTypeInternal _Message_Delegate_default_instance_;
class Message_MsgVote;
class Message_MsgVoteDefaultTypeInternal;
extern Message_MsgVoteDefaultTypeInternal _Message_MsgVote_default_instance_;
class Message_RawJSON;
class Message_RawJSONDefaultTypeInternal;
extern Message_RawJSONDefaultTypeInternal _Message_RawJSON_default_instance_;
class Message_Send;
class Message_SendDefaultTypeInternal;
extern Message_SendDefaultTypeInternal _Message_Send_default_instance_;
class Message_SignDirect;
class Message_SignDirectDefaultTypeInternal;
extern Message_SignDirectDefaultTypeInternal _Message_SignDirect_default_instance_;
class Message_StakeAuthorization;
class Message_StakeAuthorizationDefaultTypeInternal;
extern Message_StakeAuthorizationDefaultTypeInternal _Message_StakeAuthorization_default_instance_;
class Message_StakeAuthorization_Validators;
class Message_StakeAuthorization_ValidatorsDefaultTypeInternal;
extern Message_StakeAuthorization_ValidatorsDefaultTypeInternal _Message_StakeAuthorization_Validators_default_instance_;
class Message_THORChainSend;
class Message_THORChainSendDefaultTypeInternal;
extern Message_THORChainSendDefaultTypeInternal _Message_THORChainSend_default_instance_;
class Message_Transfer;
class Message_TransferDefaultTypeInternal;
extern Message_TransferDefaultTypeInternal _Message_Transfer_default_instance_;
class Message_Undelegate;
class Message_UndelegateDefaultTypeInternal;
extern Message_UndelegateDefaultTypeInternal _Message_Undelegate_default_instance_;
class Message_WasmExecuteContractGeneric;
class Message_WasmExecuteContractGenericDefaultTypeInternal;
extern Message_WasmExecuteContractGenericDefaultTypeInternal _Message_WasmExecuteContractGeneric_default_instance_;
class Message_WasmExecuteContractSend;
class Message_WasmExecuteContractSendDefaultTypeInternal;
extern Message_WasmExecuteContractSendDefaultTypeInternal _Message_WasmExecuteContractSend_default_instance_;
class Message_WasmExecuteContractTransfer;
class Message_WasmExecuteContractTransferDefaultTypeInternal;
extern Message_WasmExecuteContractTransferDefaultTypeInternal _Message_WasmExecuteContractTransfer_default_instance_;
class Message_WasmTerraExecuteContractGeneric;
class Message_WasmTerraExecuteContractGenericDefaultTypeInternal;
extern Message_WasmTerraExecuteContractGenericDefaultTypeInternal _Message_WasmTerraExecuteContractGeneric_default_instance_;
class Message_WasmTerraExecuteContractSend;
class Message_WasmTerraExecuteContractSendDefaultTypeInternal;
extern Message_WasmTerraExecuteContractSendDefaultTypeInternal _Message_WasmTerraExecuteContractSend_default_instance_;
class Message_WasmTerraExecuteContractTransfer;
class Message_WasmTerraExecuteContractTransferDefaultTypeInternal;
extern Message_WasmTerraExecuteContractTransferDefaultTypeInternal _Message_WasmTerraExecuteContractTransfer_default_instance_;
class Message_WithdrawDelegationReward;
class Message_WithdrawDelegationRewardDefaultTypeInternal;
extern Message_WithdrawDelegationRewardDefaultTypeInternal _Message_WithdrawDelegationReward_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Cosmos
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Cosmos::Proto::Amount* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Amount>(Arena*);
template<> ::TW::Cosmos::Proto::Fee* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Fee>(Arena*);
template<> ::TW::Cosmos::Proto::Height* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Height>(Arena*);
template<> ::TW::Cosmos::Proto::Message* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message>(Arena*);
template<> ::TW::Cosmos::Proto::Message_AuthGrant* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_AuthGrant>(Arena*);
template<> ::TW::Cosmos::Proto::Message_AuthRevoke* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_AuthRevoke>(Arena*);
template<> ::TW::Cosmos::Proto::Message_BeginRedelegate* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_BeginRedelegate>(Arena*);
template<> ::TW::Cosmos::Proto::Message_Delegate* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_Delegate>(Arena*);
template<> ::TW::Cosmos::Proto::Message_MsgVote* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_MsgVote>(Arena*);
template<> ::TW::Cosmos::Proto::Message_RawJSON* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_RawJSON>(Arena*);
template<> ::TW::Cosmos::Proto::Message_Send* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_Send>(Arena*);
template<> ::TW::Cosmos::Proto::Message_SignDirect* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_SignDirect>(Arena*);
template<> ::TW::Cosmos::Proto::Message_StakeAuthorization* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_StakeAuthorization>(Arena*);
template<> ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_StakeAuthorization_Validators>(Arena*);
template<> ::TW::Cosmos::Proto::Message_THORChainSend* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_THORChainSend>(Arena*);
template<> ::TW::Cosmos::Proto::Message_Transfer* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_Transfer>(Arena*);
template<> ::TW::Cosmos::Proto::Message_Undelegate* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_Undelegate>(Arena*);
template<> ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric>(Arena*);
template<> ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_WasmExecuteContractSend>(Arena*);
template<> ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer>(Arena*);
template<> ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric>(Arena*);
template<> ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend>(Arena*);
template<> ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer>(Arena*);
template<> ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::Message_WithdrawDelegationReward>(Arena*);
template<> ::TW::Cosmos::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::SigningInput>(Arena*);
template<> ::TW::Cosmos::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Cosmos::Proto::SigningOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Cosmos {
namespace Proto {

enum Message_AuthorizationType : int {
  Message_AuthorizationType_UNSPECIFIED = 0,
  Message_AuthorizationType_DELEGATE = 1,
  Message_AuthorizationType_UNDELEGATE = 2,
  Message_AuthorizationType_REDELEGATE = 3,
  Message_AuthorizationType_Message_AuthorizationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_AuthorizationType_Message_AuthorizationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Message_AuthorizationType_IsValid(int value);
constexpr Message_AuthorizationType Message_AuthorizationType_AuthorizationType_MIN = Message_AuthorizationType_UNSPECIFIED;
constexpr Message_AuthorizationType Message_AuthorizationType_AuthorizationType_MAX = Message_AuthorizationType_REDELEGATE;
constexpr int Message_AuthorizationType_AuthorizationType_ARRAYSIZE = Message_AuthorizationType_AuthorizationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_AuthorizationType_descriptor();
template<typename T>
inline const std::string& Message_AuthorizationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_AuthorizationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_AuthorizationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_AuthorizationType_descriptor(), enum_t_value);
}
inline bool Message_AuthorizationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Message_AuthorizationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_AuthorizationType>(
    Message_AuthorizationType_descriptor(), name, value);
}
enum Message_VoteOption : int {
  Message_VoteOption__UNSPECIFIED = 0,
  Message_VoteOption_YES = 1,
  Message_VoteOption_ABSTAIN = 2,
  Message_VoteOption_NO = 3,
  Message_VoteOption_NO_WITH_VETO = 4,
  Message_VoteOption_Message_VoteOption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_VoteOption_Message_VoteOption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Message_VoteOption_IsValid(int value);
constexpr Message_VoteOption Message_VoteOption_VoteOption_MIN = Message_VoteOption__UNSPECIFIED;
constexpr Message_VoteOption Message_VoteOption_VoteOption_MAX = Message_VoteOption_NO_WITH_VETO;
constexpr int Message_VoteOption_VoteOption_ARRAYSIZE = Message_VoteOption_VoteOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_VoteOption_descriptor();
template<typename T>
inline const std::string& Message_VoteOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_VoteOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_VoteOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_VoteOption_descriptor(), enum_t_value);
}
inline bool Message_VoteOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Message_VoteOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_VoteOption>(
    Message_VoteOption_descriptor(), name, value);
}
enum BroadcastMode : int {
  BLOCK = 0,
  SYNC = 1,
  ASYNC = 2,
  BroadcastMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BroadcastMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BroadcastMode_IsValid(int value);
constexpr BroadcastMode BroadcastMode_MIN = BLOCK;
constexpr BroadcastMode BroadcastMode_MAX = ASYNC;
constexpr int BroadcastMode_ARRAYSIZE = BroadcastMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastMode_descriptor();
template<typename T>
inline const std::string& BroadcastMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BroadcastMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BroadcastMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BroadcastMode_descriptor(), enum_t_value);
}
inline bool BroadcastMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BroadcastMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BroadcastMode>(
    BroadcastMode_descriptor(), name, value);
}
enum SigningMode : int {
  JSON = 0,
  Protobuf = 1,
  SigningMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SigningMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SigningMode_IsValid(int value);
constexpr SigningMode SigningMode_MIN = JSON;
constexpr SigningMode SigningMode_MAX = Protobuf;
constexpr int SigningMode_ARRAYSIZE = SigningMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SigningMode_descriptor();
template<typename T>
inline const std::string& SigningMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SigningMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SigningMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SigningMode_descriptor(), enum_t_value);
}
inline bool SigningMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SigningMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SigningMode>(
    SigningMode_descriptor(), name, value);
}
// ===================================================================

class Amount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Amount) */ {
 public:
  inline Amount() : Amount(nullptr) {}
  virtual ~Amount();

  Amount(const Amount& from);
  Amount(Amount&& from) noexcept
    : Amount() {
    *this = ::std::move(from);
  }

  inline Amount& operator=(const Amount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Amount& operator=(Amount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Amount& default_instance();

  static inline const Amount* internal_default_instance() {
    return reinterpret_cast<const Amount*>(
               &_Amount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Amount& a, Amount& b) {
    a.Swap(&b);
  }
  inline void Swap(Amount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Amount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Amount* New() const final {
    return CreateMaybeMessage<Amount>(nullptr);
  }

  Amount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Amount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Amount& from);
  void MergeFrom(const Amount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Amount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Amount";
  }
  protected:
  explicit Amount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string denom = 1;
  void clear_denom();
  const std::string& denom() const;
  void set_denom(const std::string& value);
  void set_denom(std::string&& value);
  void set_denom(const char* value);
  void set_denom(const char* value, size_t size);
  std::string* mutable_denom();
  std::string* release_denom();
  void set_allocated_denom(std::string* denom);
  private:
  const std::string& _internal_denom() const;
  void _internal_set_denom(const std::string& value);
  std::string* _internal_mutable_denom();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Amount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Fee PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Fee) */ {
 public:
  inline Fee() : Fee(nullptr) {}
  virtual ~Fee();

  Fee(const Fee& from);
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fee& operator=(Fee&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fee& default_instance();

  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }
  inline void Swap(Fee* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fee* New() const final {
    return CreateMaybeMessage<Fee>(nullptr);
  }

  Fee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fee& from);
  void MergeFrom(const Fee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Fee";
  }
  protected:
  explicit Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountsFieldNumber = 1,
    kGasFieldNumber = 2,
  };
  // repeated .TW.Cosmos.Proto.Amount amounts = 1;
  int amounts_size() const;
  private:
  int _internal_amounts_size() const;
  public:
  void clear_amounts();
  ::TW::Cosmos::Proto::Amount* mutable_amounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
      mutable_amounts();
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_amounts(int index) const;
  ::TW::Cosmos::Proto::Amount* _internal_add_amounts();
  public:
  const ::TW::Cosmos::Proto::Amount& amounts(int index) const;
  ::TW::Cosmos::Proto::Amount* add_amounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
      amounts() const;

  // uint64 gas = 2;
  void clear_gas();
  ::PROTOBUF_NAMESPACE_ID::uint64 gas() const;
  void set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gas() const;
  void _internal_set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Fee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount > amounts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Height PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Height) */ {
 public:
  inline Height() : Height(nullptr) {}
  virtual ~Height();

  Height(const Height& from);
  Height(Height&& from) noexcept
    : Height() {
    *this = ::std::move(from);
  }

  inline Height& operator=(const Height& from) {
    CopyFrom(from);
    return *this;
  }
  inline Height& operator=(Height&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Height& default_instance();

  static inline const Height* internal_default_instance() {
    return reinterpret_cast<const Height*>(
               &_Height_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Height& a, Height& b) {
    a.Swap(&b);
  }
  inline void Swap(Height* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Height* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Height* New() const final {
    return CreateMaybeMessage<Height>(nullptr);
  }

  Height* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Height>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Height& from);
  void MergeFrom(const Height& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Height* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Height";
  }
  protected:
  explicit Height(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionNumberFieldNumber = 1,
    kRevisionHeightFieldNumber = 2,
  };
  // uint64 revision_number = 1;
  void clear_revision_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_number() const;
  void set_revision_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision_number() const;
  void _internal_set_revision_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 revision_height = 2;
  void clear_revision_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_height() const;
  void set_revision_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision_height() const;
  void _internal_set_revision_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Height)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_Send PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.Send) */ {
 public:
  inline Message_Send() : Message_Send(nullptr) {}
  virtual ~Message_Send();

  Message_Send(const Message_Send& from);
  Message_Send(Message_Send&& from) noexcept
    : Message_Send() {
    *this = ::std::move(from);
  }

  inline Message_Send& operator=(const Message_Send& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Send& operator=(Message_Send&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Send& default_instance();

  static inline const Message_Send* internal_default_instance() {
    return reinterpret_cast<const Message_Send*>(
               &_Message_Send_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message_Send& a, Message_Send& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Send* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Send* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Send* New() const final {
    return CreateMaybeMessage<Message_Send>(nullptr);
  }

  Message_Send* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Send>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Send& from);
  void MergeFrom(const Message_Send& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Send* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.Send";
  }
  protected:
  explicit Message_Send(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountsFieldNumber = 3,
    kFromAddressFieldNumber = 1,
    kToAddressFieldNumber = 2,
    kTypePrefixFieldNumber = 4,
  };
  // repeated .TW.Cosmos.Proto.Amount amounts = 3;
  int amounts_size() const;
  private:
  int _internal_amounts_size() const;
  public:
  void clear_amounts();
  ::TW::Cosmos::Proto::Amount* mutable_amounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
      mutable_amounts();
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_amounts(int index) const;
  ::TW::Cosmos::Proto::Amount* _internal_add_amounts();
  public:
  const ::TW::Cosmos::Proto::Amount& amounts(int index) const;
  ::TW::Cosmos::Proto::Amount* add_amounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
      amounts() const;

  // string from_address = 1;
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // string to_address = 2;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string type_prefix = 4;
  void clear_type_prefix();
  const std::string& type_prefix() const;
  void set_type_prefix(const std::string& value);
  void set_type_prefix(std::string&& value);
  void set_type_prefix(const char* value);
  void set_type_prefix(const char* value, size_t size);
  std::string* mutable_type_prefix();
  std::string* release_type_prefix();
  void set_allocated_type_prefix(std::string* type_prefix);
  private:
  const std::string& _internal_type_prefix() const;
  void _internal_set_type_prefix(const std::string& value);
  std::string* _internal_mutable_type_prefix();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.Send)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount > amounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.Transfer) */ {
 public:
  inline Message_Transfer() : Message_Transfer(nullptr) {}
  virtual ~Message_Transfer();

  Message_Transfer(const Message_Transfer& from);
  Message_Transfer(Message_Transfer&& from) noexcept
    : Message_Transfer() {
    *this = ::std::move(from);
  }

  inline Message_Transfer& operator=(const Message_Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Transfer& operator=(Message_Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Transfer& default_instance();

  static inline const Message_Transfer* internal_default_instance() {
    return reinterpret_cast<const Message_Transfer*>(
               &_Message_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Message_Transfer& a, Message_Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Transfer* New() const final {
    return CreateMaybeMessage<Message_Transfer>(nullptr);
  }

  Message_Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Transfer& from);
  void MergeFrom(const Message_Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.Transfer";
  }
  protected:
  explicit Message_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePortFieldNumber = 1,
    kSourceChannelFieldNumber = 2,
    kSenderFieldNumber = 4,
    kReceiverFieldNumber = 5,
    kTokenFieldNumber = 3,
    kTimeoutHeightFieldNumber = 6,
    kTimeoutTimestampFieldNumber = 7,
  };
  // string source_port = 1;
  void clear_source_port();
  const std::string& source_port() const;
  void set_source_port(const std::string& value);
  void set_source_port(std::string&& value);
  void set_source_port(const char* value);
  void set_source_port(const char* value, size_t size);
  std::string* mutable_source_port();
  std::string* release_source_port();
  void set_allocated_source_port(std::string* source_port);
  private:
  const std::string& _internal_source_port() const;
  void _internal_set_source_port(const std::string& value);
  std::string* _internal_mutable_source_port();
  public:

  // string source_channel = 2;
  void clear_source_channel();
  const std::string& source_channel() const;
  void set_source_channel(const std::string& value);
  void set_source_channel(std::string&& value);
  void set_source_channel(const char* value);
  void set_source_channel(const char* value, size_t size);
  std::string* mutable_source_channel();
  std::string* release_source_channel();
  void set_allocated_source_channel(std::string* source_channel);
  private:
  const std::string& _internal_source_channel() const;
  void _internal_set_source_channel(const std::string& value);
  std::string* _internal_mutable_source_channel();
  public:

  // string sender = 4;
  void clear_sender();
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string receiver = 5;
  void clear_receiver();
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // .TW.Cosmos.Proto.Amount token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::TW::Cosmos::Proto::Amount& token() const;
  ::TW::Cosmos::Proto::Amount* release_token();
  ::TW::Cosmos::Proto::Amount* mutable_token();
  void set_allocated_token(::TW::Cosmos::Proto::Amount* token);
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_token() const;
  ::TW::Cosmos::Proto::Amount* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::TW::Cosmos::Proto::Amount* token);
  ::TW::Cosmos::Proto::Amount* unsafe_arena_release_token();

  // .TW.Cosmos.Proto.Height timeout_height = 6;
  bool has_timeout_height() const;
  private:
  bool _internal_has_timeout_height() const;
  public:
  void clear_timeout_height();
  const ::TW::Cosmos::Proto::Height& timeout_height() const;
  ::TW::Cosmos::Proto::Height* release_timeout_height();
  ::TW::Cosmos::Proto::Height* mutable_timeout_height();
  void set_allocated_timeout_height(::TW::Cosmos::Proto::Height* timeout_height);
  private:
  const ::TW::Cosmos::Proto::Height& _internal_timeout_height() const;
  ::TW::Cosmos::Proto::Height* _internal_mutable_timeout_height();
  public:
  void unsafe_arena_set_allocated_timeout_height(
      ::TW::Cosmos::Proto::Height* timeout_height);
  ::TW::Cosmos::Proto::Height* unsafe_arena_release_timeout_height();

  // uint64 timeout_timestamp = 7;
  void clear_timeout_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_timestamp() const;
  void set_timeout_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeout_timestamp() const;
  void _internal_set_timeout_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::TW::Cosmos::Proto::Amount* token_;
  ::TW::Cosmos::Proto::Height* timeout_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_Delegate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.Delegate) */ {
 public:
  inline Message_Delegate() : Message_Delegate(nullptr) {}
  virtual ~Message_Delegate();

  Message_Delegate(const Message_Delegate& from);
  Message_Delegate(Message_Delegate&& from) noexcept
    : Message_Delegate() {
    *this = ::std::move(from);
  }

  inline Message_Delegate& operator=(const Message_Delegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Delegate& operator=(Message_Delegate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Delegate& default_instance();

  static inline const Message_Delegate* internal_default_instance() {
    return reinterpret_cast<const Message_Delegate*>(
               &_Message_Delegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Message_Delegate& a, Message_Delegate& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Delegate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Delegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Delegate* New() const final {
    return CreateMaybeMessage<Message_Delegate>(nullptr);
  }

  Message_Delegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Delegate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Delegate& from);
  void MergeFrom(const Message_Delegate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Delegate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.Delegate";
  }
  protected:
  explicit Message_Delegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kTypePrefixFieldNumber = 4,
    kAmountFieldNumber = 3,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  void set_delegator_address(const std::string& value);
  void set_delegator_address(std::string&& value);
  void set_delegator_address(const char* value);
  void set_delegator_address(const char* value, size_t size);
  std::string* mutable_delegator_address();
  std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_address = 2;
  void clear_validator_address();
  const std::string& validator_address() const;
  void set_validator_address(const std::string& value);
  void set_validator_address(std::string&& value);
  void set_validator_address(const char* value);
  void set_validator_address(const char* value, size_t size);
  std::string* mutable_validator_address();
  std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // string type_prefix = 4;
  void clear_type_prefix();
  const std::string& type_prefix() const;
  void set_type_prefix(const std::string& value);
  void set_type_prefix(std::string&& value);
  void set_type_prefix(const char* value);
  void set_type_prefix(const char* value, size_t size);
  std::string* mutable_type_prefix();
  std::string* release_type_prefix();
  void set_allocated_type_prefix(std::string* type_prefix);
  private:
  const std::string& _internal_type_prefix() const;
  void _internal_set_type_prefix(const std::string& value);
  std::string* _internal_mutable_type_prefix();
  public:

  // .TW.Cosmos.Proto.Amount amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::TW::Cosmos::Proto::Amount& amount() const;
  ::TW::Cosmos::Proto::Amount* release_amount();
  ::TW::Cosmos::Proto::Amount* mutable_amount();
  void set_allocated_amount(::TW::Cosmos::Proto::Amount* amount);
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_amount() const;
  ::TW::Cosmos::Proto::Amount* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::TW::Cosmos::Proto::Amount* amount);
  ::TW::Cosmos::Proto::Amount* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.Delegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_prefix_;
  ::TW::Cosmos::Proto::Amount* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_Undelegate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.Undelegate) */ {
 public:
  inline Message_Undelegate() : Message_Undelegate(nullptr) {}
  virtual ~Message_Undelegate();

  Message_Undelegate(const Message_Undelegate& from);
  Message_Undelegate(Message_Undelegate&& from) noexcept
    : Message_Undelegate() {
    *this = ::std::move(from);
  }

  inline Message_Undelegate& operator=(const Message_Undelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Undelegate& operator=(Message_Undelegate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Undelegate& default_instance();

  static inline const Message_Undelegate* internal_default_instance() {
    return reinterpret_cast<const Message_Undelegate*>(
               &_Message_Undelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Message_Undelegate& a, Message_Undelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Undelegate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Undelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Undelegate* New() const final {
    return CreateMaybeMessage<Message_Undelegate>(nullptr);
  }

  Message_Undelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Undelegate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Undelegate& from);
  void MergeFrom(const Message_Undelegate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Undelegate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.Undelegate";
  }
  protected:
  explicit Message_Undelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kTypePrefixFieldNumber = 4,
    kAmountFieldNumber = 3,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  void set_delegator_address(const std::string& value);
  void set_delegator_address(std::string&& value);
  void set_delegator_address(const char* value);
  void set_delegator_address(const char* value, size_t size);
  std::string* mutable_delegator_address();
  std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_address = 2;
  void clear_validator_address();
  const std::string& validator_address() const;
  void set_validator_address(const std::string& value);
  void set_validator_address(std::string&& value);
  void set_validator_address(const char* value);
  void set_validator_address(const char* value, size_t size);
  std::string* mutable_validator_address();
  std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // string type_prefix = 4;
  void clear_type_prefix();
  const std::string& type_prefix() const;
  void set_type_prefix(const std::string& value);
  void set_type_prefix(std::string&& value);
  void set_type_prefix(const char* value);
  void set_type_prefix(const char* value, size_t size);
  std::string* mutable_type_prefix();
  std::string* release_type_prefix();
  void set_allocated_type_prefix(std::string* type_prefix);
  private:
  const std::string& _internal_type_prefix() const;
  void _internal_set_type_prefix(const std::string& value);
  std::string* _internal_mutable_type_prefix();
  public:

  // .TW.Cosmos.Proto.Amount amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::TW::Cosmos::Proto::Amount& amount() const;
  ::TW::Cosmos::Proto::Amount* release_amount();
  ::TW::Cosmos::Proto::Amount* mutable_amount();
  void set_allocated_amount(::TW::Cosmos::Proto::Amount* amount);
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_amount() const;
  ::TW::Cosmos::Proto::Amount* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::TW::Cosmos::Proto::Amount* amount);
  ::TW::Cosmos::Proto::Amount* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.Undelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_prefix_;
  ::TW::Cosmos::Proto::Amount* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_BeginRedelegate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.BeginRedelegate) */ {
 public:
  inline Message_BeginRedelegate() : Message_BeginRedelegate(nullptr) {}
  virtual ~Message_BeginRedelegate();

  Message_BeginRedelegate(const Message_BeginRedelegate& from);
  Message_BeginRedelegate(Message_BeginRedelegate&& from) noexcept
    : Message_BeginRedelegate() {
    *this = ::std::move(from);
  }

  inline Message_BeginRedelegate& operator=(const Message_BeginRedelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_BeginRedelegate& operator=(Message_BeginRedelegate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_BeginRedelegate& default_instance();

  static inline const Message_BeginRedelegate* internal_default_instance() {
    return reinterpret_cast<const Message_BeginRedelegate*>(
               &_Message_BeginRedelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Message_BeginRedelegate& a, Message_BeginRedelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_BeginRedelegate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_BeginRedelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_BeginRedelegate* New() const final {
    return CreateMaybeMessage<Message_BeginRedelegate>(nullptr);
  }

  Message_BeginRedelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_BeginRedelegate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_BeginRedelegate& from);
  void MergeFrom(const Message_BeginRedelegate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_BeginRedelegate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.BeginRedelegate";
  }
  protected:
  explicit Message_BeginRedelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorSrcAddressFieldNumber = 2,
    kValidatorDstAddressFieldNumber = 3,
    kTypePrefixFieldNumber = 5,
    kAmountFieldNumber = 4,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  void set_delegator_address(const std::string& value);
  void set_delegator_address(std::string&& value);
  void set_delegator_address(const char* value);
  void set_delegator_address(const char* value, size_t size);
  std::string* mutable_delegator_address();
  std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_src_address = 2;
  void clear_validator_src_address();
  const std::string& validator_src_address() const;
  void set_validator_src_address(const std::string& value);
  void set_validator_src_address(std::string&& value);
  void set_validator_src_address(const char* value);
  void set_validator_src_address(const char* value, size_t size);
  std::string* mutable_validator_src_address();
  std::string* release_validator_src_address();
  void set_allocated_validator_src_address(std::string* validator_src_address);
  private:
  const std::string& _internal_validator_src_address() const;
  void _internal_set_validator_src_address(const std::string& value);
  std::string* _internal_mutable_validator_src_address();
  public:

  // string validator_dst_address = 3;
  void clear_validator_dst_address();
  const std::string& validator_dst_address() const;
  void set_validator_dst_address(const std::string& value);
  void set_validator_dst_address(std::string&& value);
  void set_validator_dst_address(const char* value);
  void set_validator_dst_address(const char* value, size_t size);
  std::string* mutable_validator_dst_address();
  std::string* release_validator_dst_address();
  void set_allocated_validator_dst_address(std::string* validator_dst_address);
  private:
  const std::string& _internal_validator_dst_address() const;
  void _internal_set_validator_dst_address(const std::string& value);
  std::string* _internal_mutable_validator_dst_address();
  public:

  // string type_prefix = 5;
  void clear_type_prefix();
  const std::string& type_prefix() const;
  void set_type_prefix(const std::string& value);
  void set_type_prefix(std::string&& value);
  void set_type_prefix(const char* value);
  void set_type_prefix(const char* value, size_t size);
  std::string* mutable_type_prefix();
  std::string* release_type_prefix();
  void set_allocated_type_prefix(std::string* type_prefix);
  private:
  const std::string& _internal_type_prefix() const;
  void _internal_set_type_prefix(const std::string& value);
  std::string* _internal_mutable_type_prefix();
  public:

  // .TW.Cosmos.Proto.Amount amount = 4;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::TW::Cosmos::Proto::Amount& amount() const;
  ::TW::Cosmos::Proto::Amount* release_amount();
  ::TW::Cosmos::Proto::Amount* mutable_amount();
  void set_allocated_amount(::TW::Cosmos::Proto::Amount* amount);
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_amount() const;
  ::TW::Cosmos::Proto::Amount* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::TW::Cosmos::Proto::Amount* amount);
  ::TW::Cosmos::Proto::Amount* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.BeginRedelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_src_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_dst_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_prefix_;
  ::TW::Cosmos::Proto::Amount* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_WithdrawDelegationReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.WithdrawDelegationReward) */ {
 public:
  inline Message_WithdrawDelegationReward() : Message_WithdrawDelegationReward(nullptr) {}
  virtual ~Message_WithdrawDelegationReward();

  Message_WithdrawDelegationReward(const Message_WithdrawDelegationReward& from);
  Message_WithdrawDelegationReward(Message_WithdrawDelegationReward&& from) noexcept
    : Message_WithdrawDelegationReward() {
    *this = ::std::move(from);
  }

  inline Message_WithdrawDelegationReward& operator=(const Message_WithdrawDelegationReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_WithdrawDelegationReward& operator=(Message_WithdrawDelegationReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_WithdrawDelegationReward& default_instance();

  static inline const Message_WithdrawDelegationReward* internal_default_instance() {
    return reinterpret_cast<const Message_WithdrawDelegationReward*>(
               &_Message_WithdrawDelegationReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Message_WithdrawDelegationReward& a, Message_WithdrawDelegationReward& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_WithdrawDelegationReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_WithdrawDelegationReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_WithdrawDelegationReward* New() const final {
    return CreateMaybeMessage<Message_WithdrawDelegationReward>(nullptr);
  }

  Message_WithdrawDelegationReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_WithdrawDelegationReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_WithdrawDelegationReward& from);
  void MergeFrom(const Message_WithdrawDelegationReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_WithdrawDelegationReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.WithdrawDelegationReward";
  }
  protected:
  explicit Message_WithdrawDelegationReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kTypePrefixFieldNumber = 3,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  void set_delegator_address(const std::string& value);
  void set_delegator_address(std::string&& value);
  void set_delegator_address(const char* value);
  void set_delegator_address(const char* value, size_t size);
  std::string* mutable_delegator_address();
  std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_address = 2;
  void clear_validator_address();
  const std::string& validator_address() const;
  void set_validator_address(const std::string& value);
  void set_validator_address(std::string&& value);
  void set_validator_address(const char* value);
  void set_validator_address(const char* value, size_t size);
  std::string* mutable_validator_address();
  std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // string type_prefix = 3;
  void clear_type_prefix();
  const std::string& type_prefix() const;
  void set_type_prefix(const std::string& value);
  void set_type_prefix(std::string&& value);
  void set_type_prefix(const char* value);
  void set_type_prefix(const char* value, size_t size);
  std::string* mutable_type_prefix();
  std::string* release_type_prefix();
  void set_allocated_type_prefix(std::string* type_prefix);
  private:
  const std::string& _internal_type_prefix() const;
  void _internal_set_type_prefix(const std::string& value);
  std::string* _internal_mutable_type_prefix();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.WithdrawDelegationReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_WasmTerraExecuteContractTransfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer) */ {
 public:
  inline Message_WasmTerraExecuteContractTransfer() : Message_WasmTerraExecuteContractTransfer(nullptr) {}
  virtual ~Message_WasmTerraExecuteContractTransfer();

  Message_WasmTerraExecuteContractTransfer(const Message_WasmTerraExecuteContractTransfer& from);
  Message_WasmTerraExecuteContractTransfer(Message_WasmTerraExecuteContractTransfer&& from) noexcept
    : Message_WasmTerraExecuteContractTransfer() {
    *this = ::std::move(from);
  }

  inline Message_WasmTerraExecuteContractTransfer& operator=(const Message_WasmTerraExecuteContractTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_WasmTerraExecuteContractTransfer& operator=(Message_WasmTerraExecuteContractTransfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_WasmTerraExecuteContractTransfer& default_instance();

  static inline const Message_WasmTerraExecuteContractTransfer* internal_default_instance() {
    return reinterpret_cast<const Message_WasmTerraExecuteContractTransfer*>(
               &_Message_WasmTerraExecuteContractTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Message_WasmTerraExecuteContractTransfer& a, Message_WasmTerraExecuteContractTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_WasmTerraExecuteContractTransfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_WasmTerraExecuteContractTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_WasmTerraExecuteContractTransfer* New() const final {
    return CreateMaybeMessage<Message_WasmTerraExecuteContractTransfer>(nullptr);
  }

  Message_WasmTerraExecuteContractTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_WasmTerraExecuteContractTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_WasmTerraExecuteContractTransfer& from);
  void MergeFrom(const Message_WasmTerraExecuteContractTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_WasmTerraExecuteContractTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer";
  }
  protected:
  explicit Message_WasmTerraExecuteContractTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
    kRecipientAddressFieldNumber = 4,
  };
  // string sender_address = 1;
  void clear_sender_address();
  const std::string& sender_address() const;
  void set_sender_address(const std::string& value);
  void set_sender_address(std::string&& value);
  void set_sender_address(const char* value);
  void set_sender_address(const char* value, size_t size);
  std::string* mutable_sender_address();
  std::string* release_sender_address();
  void set_allocated_sender_address(std::string* sender_address);
  private:
  const std::string& _internal_sender_address() const;
  void _internal_set_sender_address(const std::string& value);
  std::string* _internal_mutable_sender_address();
  public:

  // string contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const char* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);
  private:
  const std::string& _internal_contract_address() const;
  void _internal_set_contract_address(const std::string& value);
  std::string* _internal_mutable_contract_address();
  public:

  // bytes amount = 3;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string recipient_address = 4;
  void clear_recipient_address();
  const std::string& recipient_address() const;
  void set_recipient_address(const std::string& value);
  void set_recipient_address(std::string&& value);
  void set_recipient_address(const char* value);
  void set_recipient_address(const char* value, size_t size);
  std::string* mutable_recipient_address();
  std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* recipient_address);
  private:
  const std::string& _internal_recipient_address() const;
  void _internal_set_recipient_address(const std::string& value);
  std::string* _internal_mutable_recipient_address();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_WasmTerraExecuteContractSend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend) */ {
 public:
  inline Message_WasmTerraExecuteContractSend() : Message_WasmTerraExecuteContractSend(nullptr) {}
  virtual ~Message_WasmTerraExecuteContractSend();

  Message_WasmTerraExecuteContractSend(const Message_WasmTerraExecuteContractSend& from);
  Message_WasmTerraExecuteContractSend(Message_WasmTerraExecuteContractSend&& from) noexcept
    : Message_WasmTerraExecuteContractSend() {
    *this = ::std::move(from);
  }

  inline Message_WasmTerraExecuteContractSend& operator=(const Message_WasmTerraExecuteContractSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_WasmTerraExecuteContractSend& operator=(Message_WasmTerraExecuteContractSend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_WasmTerraExecuteContractSend& default_instance();

  static inline const Message_WasmTerraExecuteContractSend* internal_default_instance() {
    return reinterpret_cast<const Message_WasmTerraExecuteContractSend*>(
               &_Message_WasmTerraExecuteContractSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Message_WasmTerraExecuteContractSend& a, Message_WasmTerraExecuteContractSend& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_WasmTerraExecuteContractSend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_WasmTerraExecuteContractSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_WasmTerraExecuteContractSend* New() const final {
    return CreateMaybeMessage<Message_WasmTerraExecuteContractSend>(nullptr);
  }

  Message_WasmTerraExecuteContractSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_WasmTerraExecuteContractSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_WasmTerraExecuteContractSend& from);
  void MergeFrom(const Message_WasmTerraExecuteContractSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_WasmTerraExecuteContractSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend";
  }
  protected:
  explicit Message_WasmTerraExecuteContractSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinFieldNumber = 6,
    kSenderAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
    kRecipientContractAddressFieldNumber = 4,
    kMsgFieldNumber = 5,
  };
  // repeated string coin = 6;
  int coin_size() const;
  private:
  int _internal_coin_size() const;
  public:
  void clear_coin();
  const std::string& coin(int index) const;
  std::string* mutable_coin(int index);
  void set_coin(int index, const std::string& value);
  void set_coin(int index, std::string&& value);
  void set_coin(int index, const char* value);
  void set_coin(int index, const char* value, size_t size);
  std::string* add_coin();
  void add_coin(const std::string& value);
  void add_coin(std::string&& value);
  void add_coin(const char* value);
  void add_coin(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& coin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_coin();
  private:
  const std::string& _internal_coin(int index) const;
  std::string* _internal_add_coin();
  public:

  // string sender_address = 1;
  void clear_sender_address();
  const std::string& sender_address() const;
  void set_sender_address(const std::string& value);
  void set_sender_address(std::string&& value);
  void set_sender_address(const char* value);
  void set_sender_address(const char* value, size_t size);
  std::string* mutable_sender_address();
  std::string* release_sender_address();
  void set_allocated_sender_address(std::string* sender_address);
  private:
  const std::string& _internal_sender_address() const;
  void _internal_set_sender_address(const std::string& value);
  std::string* _internal_mutable_sender_address();
  public:

  // string contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const char* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);
  private:
  const std::string& _internal_contract_address() const;
  void _internal_set_contract_address(const std::string& value);
  std::string* _internal_mutable_contract_address();
  public:

  // bytes amount = 3;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string recipient_contract_address = 4;
  void clear_recipient_contract_address();
  const std::string& recipient_contract_address() const;
  void set_recipient_contract_address(const std::string& value);
  void set_recipient_contract_address(std::string&& value);
  void set_recipient_contract_address(const char* value);
  void set_recipient_contract_address(const char* value, size_t size);
  std::string* mutable_recipient_contract_address();
  std::string* release_recipient_contract_address();
  void set_allocated_recipient_contract_address(std::string* recipient_contract_address);
  private:
  const std::string& _internal_recipient_contract_address() const;
  void _internal_set_recipient_contract_address(const std::string& value);
  std::string* _internal_mutable_recipient_contract_address();
  public:

  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> coin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_THORChainSend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.THORChainSend) */ {
 public:
  inline Message_THORChainSend() : Message_THORChainSend(nullptr) {}
  virtual ~Message_THORChainSend();

  Message_THORChainSend(const Message_THORChainSend& from);
  Message_THORChainSend(Message_THORChainSend&& from) noexcept
    : Message_THORChainSend() {
    *this = ::std::move(from);
  }

  inline Message_THORChainSend& operator=(const Message_THORChainSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_THORChainSend& operator=(Message_THORChainSend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_THORChainSend& default_instance();

  static inline const Message_THORChainSend* internal_default_instance() {
    return reinterpret_cast<const Message_THORChainSend*>(
               &_Message_THORChainSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Message_THORChainSend& a, Message_THORChainSend& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_THORChainSend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_THORChainSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_THORChainSend* New() const final {
    return CreateMaybeMessage<Message_THORChainSend>(nullptr);
  }

  Message_THORChainSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_THORChainSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_THORChainSend& from);
  void MergeFrom(const Message_THORChainSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_THORChainSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.THORChainSend";
  }
  protected:
  explicit Message_THORChainSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountsFieldNumber = 3,
    kFromAddressFieldNumber = 1,
    kToAddressFieldNumber = 2,
  };
  // repeated .TW.Cosmos.Proto.Amount amounts = 3;
  int amounts_size() const;
  private:
  int _internal_amounts_size() const;
  public:
  void clear_amounts();
  ::TW::Cosmos::Proto::Amount* mutable_amounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
      mutable_amounts();
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_amounts(int index) const;
  ::TW::Cosmos::Proto::Amount* _internal_add_amounts();
  public:
  const ::TW::Cosmos::Proto::Amount& amounts(int index) const;
  ::TW::Cosmos::Proto::Amount* add_amounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
      amounts() const;

  // bytes from_address = 1;
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const void* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // bytes to_address = 2;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const void* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.THORChainSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount > amounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_WasmTerraExecuteContractGeneric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric) */ {
 public:
  inline Message_WasmTerraExecuteContractGeneric() : Message_WasmTerraExecuteContractGeneric(nullptr) {}
  virtual ~Message_WasmTerraExecuteContractGeneric();

  Message_WasmTerraExecuteContractGeneric(const Message_WasmTerraExecuteContractGeneric& from);
  Message_WasmTerraExecuteContractGeneric(Message_WasmTerraExecuteContractGeneric&& from) noexcept
    : Message_WasmTerraExecuteContractGeneric() {
    *this = ::std::move(from);
  }

  inline Message_WasmTerraExecuteContractGeneric& operator=(const Message_WasmTerraExecuteContractGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_WasmTerraExecuteContractGeneric& operator=(Message_WasmTerraExecuteContractGeneric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_WasmTerraExecuteContractGeneric& default_instance();

  static inline const Message_WasmTerraExecuteContractGeneric* internal_default_instance() {
    return reinterpret_cast<const Message_WasmTerraExecuteContractGeneric*>(
               &_Message_WasmTerraExecuteContractGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Message_WasmTerraExecuteContractGeneric& a, Message_WasmTerraExecuteContractGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_WasmTerraExecuteContractGeneric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_WasmTerraExecuteContractGeneric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_WasmTerraExecuteContractGeneric* New() const final {
    return CreateMaybeMessage<Message_WasmTerraExecuteContractGeneric>(nullptr);
  }

  Message_WasmTerraExecuteContractGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_WasmTerraExecuteContractGeneric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_WasmTerraExecuteContractGeneric& from);
  void MergeFrom(const Message_WasmTerraExecuteContractGeneric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_WasmTerraExecuteContractGeneric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric";
  }
  protected:
  explicit Message_WasmTerraExecuteContractGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinsFieldNumber = 5,
    kSenderAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kExecuteMsgFieldNumber = 3,
  };
  // repeated .TW.Cosmos.Proto.Amount coins = 5;
  int coins_size() const;
  private:
  int _internal_coins_size() const;
  public:
  void clear_coins();
  ::TW::Cosmos::Proto::Amount* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
      mutable_coins();
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_coins(int index) const;
  ::TW::Cosmos::Proto::Amount* _internal_add_coins();
  public:
  const ::TW::Cosmos::Proto::Amount& coins(int index) const;
  ::TW::Cosmos::Proto::Amount* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
      coins() const;

  // string sender_address = 1;
  void clear_sender_address();
  const std::string& sender_address() const;
  void set_sender_address(const std::string& value);
  void set_sender_address(std::string&& value);
  void set_sender_address(const char* value);
  void set_sender_address(const char* value, size_t size);
  std::string* mutable_sender_address();
  std::string* release_sender_address();
  void set_allocated_sender_address(std::string* sender_address);
  private:
  const std::string& _internal_sender_address() const;
  void _internal_set_sender_address(const std::string& value);
  std::string* _internal_mutable_sender_address();
  public:

  // string contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const char* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);
  private:
  const std::string& _internal_contract_address() const;
  void _internal_set_contract_address(const std::string& value);
  std::string* _internal_mutable_contract_address();
  public:

  // string execute_msg = 3;
  void clear_execute_msg();
  const std::string& execute_msg() const;
  void set_execute_msg(const std::string& value);
  void set_execute_msg(std::string&& value);
  void set_execute_msg(const char* value);
  void set_execute_msg(const char* value, size_t size);
  std::string* mutable_execute_msg();
  std::string* release_execute_msg();
  void set_allocated_execute_msg(std::string* execute_msg);
  private:
  const std::string& _internal_execute_msg() const;
  void _internal_set_execute_msg(const std::string& value);
  std::string* _internal_mutable_execute_msg();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount > coins_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execute_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_WasmExecuteContractTransfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer) */ {
 public:
  inline Message_WasmExecuteContractTransfer() : Message_WasmExecuteContractTransfer(nullptr) {}
  virtual ~Message_WasmExecuteContractTransfer();

  Message_WasmExecuteContractTransfer(const Message_WasmExecuteContractTransfer& from);
  Message_WasmExecuteContractTransfer(Message_WasmExecuteContractTransfer&& from) noexcept
    : Message_WasmExecuteContractTransfer() {
    *this = ::std::move(from);
  }

  inline Message_WasmExecuteContractTransfer& operator=(const Message_WasmExecuteContractTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_WasmExecuteContractTransfer& operator=(Message_WasmExecuteContractTransfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_WasmExecuteContractTransfer& default_instance();

  static inline const Message_WasmExecuteContractTransfer* internal_default_instance() {
    return reinterpret_cast<const Message_WasmExecuteContractTransfer*>(
               &_Message_WasmExecuteContractTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Message_WasmExecuteContractTransfer& a, Message_WasmExecuteContractTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_WasmExecuteContractTransfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_WasmExecuteContractTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_WasmExecuteContractTransfer* New() const final {
    return CreateMaybeMessage<Message_WasmExecuteContractTransfer>(nullptr);
  }

  Message_WasmExecuteContractTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_WasmExecuteContractTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_WasmExecuteContractTransfer& from);
  void MergeFrom(const Message_WasmExecuteContractTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_WasmExecuteContractTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.WasmExecuteContractTransfer";
  }
  protected:
  explicit Message_WasmExecuteContractTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
    kRecipientAddressFieldNumber = 4,
  };
  // string sender_address = 1;
  void clear_sender_address();
  const std::string& sender_address() const;
  void set_sender_address(const std::string& value);
  void set_sender_address(std::string&& value);
  void set_sender_address(const char* value);
  void set_sender_address(const char* value, size_t size);
  std::string* mutable_sender_address();
  std::string* release_sender_address();
  void set_allocated_sender_address(std::string* sender_address);
  private:
  const std::string& _internal_sender_address() const;
  void _internal_set_sender_address(const std::string& value);
  std::string* _internal_mutable_sender_address();
  public:

  // string contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const char* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);
  private:
  const std::string& _internal_contract_address() const;
  void _internal_set_contract_address(const std::string& value);
  std::string* _internal_mutable_contract_address();
  public:

  // bytes amount = 3;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string recipient_address = 4;
  void clear_recipient_address();
  const std::string& recipient_address() const;
  void set_recipient_address(const std::string& value);
  void set_recipient_address(std::string&& value);
  void set_recipient_address(const char* value);
  void set_recipient_address(const char* value, size_t size);
  std::string* mutable_recipient_address();
  std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* recipient_address);
  private:
  const std::string& _internal_recipient_address() const;
  void _internal_set_recipient_address(const std::string& value);
  std::string* _internal_mutable_recipient_address();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_WasmExecuteContractSend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.WasmExecuteContractSend) */ {
 public:
  inline Message_WasmExecuteContractSend() : Message_WasmExecuteContractSend(nullptr) {}
  virtual ~Message_WasmExecuteContractSend();

  Message_WasmExecuteContractSend(const Message_WasmExecuteContractSend& from);
  Message_WasmExecuteContractSend(Message_WasmExecuteContractSend&& from) noexcept
    : Message_WasmExecuteContractSend() {
    *this = ::std::move(from);
  }

  inline Message_WasmExecuteContractSend& operator=(const Message_WasmExecuteContractSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_WasmExecuteContractSend& operator=(Message_WasmExecuteContractSend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_WasmExecuteContractSend& default_instance();

  static inline const Message_WasmExecuteContractSend* internal_default_instance() {
    return reinterpret_cast<const Message_WasmExecuteContractSend*>(
               &_Message_WasmExecuteContractSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Message_WasmExecuteContractSend& a, Message_WasmExecuteContractSend& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_WasmExecuteContractSend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_WasmExecuteContractSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_WasmExecuteContractSend* New() const final {
    return CreateMaybeMessage<Message_WasmExecuteContractSend>(nullptr);
  }

  Message_WasmExecuteContractSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_WasmExecuteContractSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_WasmExecuteContractSend& from);
  void MergeFrom(const Message_WasmExecuteContractSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_WasmExecuteContractSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.WasmExecuteContractSend";
  }
  protected:
  explicit Message_WasmExecuteContractSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinFieldNumber = 6,
    kSenderAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
    kRecipientContractAddressFieldNumber = 4,
    kMsgFieldNumber = 5,
  };
  // repeated string coin = 6;
  int coin_size() const;
  private:
  int _internal_coin_size() const;
  public:
  void clear_coin();
  const std::string& coin(int index) const;
  std::string* mutable_coin(int index);
  void set_coin(int index, const std::string& value);
  void set_coin(int index, std::string&& value);
  void set_coin(int index, const char* value);
  void set_coin(int index, const char* value, size_t size);
  std::string* add_coin();
  void add_coin(const std::string& value);
  void add_coin(std::string&& value);
  void add_coin(const char* value);
  void add_coin(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& coin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_coin();
  private:
  const std::string& _internal_coin(int index) const;
  std::string* _internal_add_coin();
  public:

  // string sender_address = 1;
  void clear_sender_address();
  const std::string& sender_address() const;
  void set_sender_address(const std::string& value);
  void set_sender_address(std::string&& value);
  void set_sender_address(const char* value);
  void set_sender_address(const char* value, size_t size);
  std::string* mutable_sender_address();
  std::string* release_sender_address();
  void set_allocated_sender_address(std::string* sender_address);
  private:
  const std::string& _internal_sender_address() const;
  void _internal_set_sender_address(const std::string& value);
  std::string* _internal_mutable_sender_address();
  public:

  // string contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const char* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);
  private:
  const std::string& _internal_contract_address() const;
  void _internal_set_contract_address(const std::string& value);
  std::string* _internal_mutable_contract_address();
  public:

  // bytes amount = 3;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string recipient_contract_address = 4;
  void clear_recipient_contract_address();
  const std::string& recipient_contract_address() const;
  void set_recipient_contract_address(const std::string& value);
  void set_recipient_contract_address(std::string&& value);
  void set_recipient_contract_address(const char* value);
  void set_recipient_contract_address(const char* value, size_t size);
  std::string* mutable_recipient_contract_address();
  std::string* release_recipient_contract_address();
  void set_allocated_recipient_contract_address(std::string* recipient_contract_address);
  private:
  const std::string& _internal_recipient_contract_address() const;
  void _internal_set_recipient_contract_address(const std::string& value);
  std::string* _internal_mutable_recipient_contract_address();
  public:

  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.WasmExecuteContractSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> coin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_WasmExecuteContractGeneric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric) */ {
 public:
  inline Message_WasmExecuteContractGeneric() : Message_WasmExecuteContractGeneric(nullptr) {}
  virtual ~Message_WasmExecuteContractGeneric();

  Message_WasmExecuteContractGeneric(const Message_WasmExecuteContractGeneric& from);
  Message_WasmExecuteContractGeneric(Message_WasmExecuteContractGeneric&& from) noexcept
    : Message_WasmExecuteContractGeneric() {
    *this = ::std::move(from);
  }

  inline Message_WasmExecuteContractGeneric& operator=(const Message_WasmExecuteContractGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_WasmExecuteContractGeneric& operator=(Message_WasmExecuteContractGeneric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_WasmExecuteContractGeneric& default_instance();

  static inline const Message_WasmExecuteContractGeneric* internal_default_instance() {
    return reinterpret_cast<const Message_WasmExecuteContractGeneric*>(
               &_Message_WasmExecuteContractGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Message_WasmExecuteContractGeneric& a, Message_WasmExecuteContractGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_WasmExecuteContractGeneric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_WasmExecuteContractGeneric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_WasmExecuteContractGeneric* New() const final {
    return CreateMaybeMessage<Message_WasmExecuteContractGeneric>(nullptr);
  }

  Message_WasmExecuteContractGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_WasmExecuteContractGeneric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_WasmExecuteContractGeneric& from);
  void MergeFrom(const Message_WasmExecuteContractGeneric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_WasmExecuteContractGeneric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.WasmExecuteContractGeneric";
  }
  protected:
  explicit Message_WasmExecuteContractGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinsFieldNumber = 5,
    kSenderAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kExecuteMsgFieldNumber = 3,
  };
  // repeated .TW.Cosmos.Proto.Amount coins = 5;
  int coins_size() const;
  private:
  int _internal_coins_size() const;
  public:
  void clear_coins();
  ::TW::Cosmos::Proto::Amount* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
      mutable_coins();
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_coins(int index) const;
  ::TW::Cosmos::Proto::Amount* _internal_add_coins();
  public:
  const ::TW::Cosmos::Proto::Amount& coins(int index) const;
  ::TW::Cosmos::Proto::Amount* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
      coins() const;

  // string sender_address = 1;
  void clear_sender_address();
  const std::string& sender_address() const;
  void set_sender_address(const std::string& value);
  void set_sender_address(std::string&& value);
  void set_sender_address(const char* value);
  void set_sender_address(const char* value, size_t size);
  std::string* mutable_sender_address();
  std::string* release_sender_address();
  void set_allocated_sender_address(std::string* sender_address);
  private:
  const std::string& _internal_sender_address() const;
  void _internal_set_sender_address(const std::string& value);
  std::string* _internal_mutable_sender_address();
  public:

  // string contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const char* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);
  private:
  const std::string& _internal_contract_address() const;
  void _internal_set_contract_address(const std::string& value);
  std::string* _internal_mutable_contract_address();
  public:

  // string execute_msg = 3;
  void clear_execute_msg();
  const std::string& execute_msg() const;
  void set_execute_msg(const std::string& value);
  void set_execute_msg(std::string&& value);
  void set_execute_msg(const char* value);
  void set_execute_msg(const char* value, size_t size);
  std::string* mutable_execute_msg();
  std::string* release_execute_msg();
  void set_allocated_execute_msg(std::string* execute_msg);
  private:
  const std::string& _internal_execute_msg() const;
  void _internal_set_execute_msg(const std::string& value);
  std::string* _internal_mutable_execute_msg();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount > coins_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execute_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_RawJSON PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.RawJSON) */ {
 public:
  inline Message_RawJSON() : Message_RawJSON(nullptr) {}
  virtual ~Message_RawJSON();

  Message_RawJSON(const Message_RawJSON& from);
  Message_RawJSON(Message_RawJSON&& from) noexcept
    : Message_RawJSON() {
    *this = ::std::move(from);
  }

  inline Message_RawJSON& operator=(const Message_RawJSON& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_RawJSON& operator=(Message_RawJSON&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_RawJSON& default_instance();

  static inline const Message_RawJSON* internal_default_instance() {
    return reinterpret_cast<const Message_RawJSON*>(
               &_Message_RawJSON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Message_RawJSON& a, Message_RawJSON& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_RawJSON* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_RawJSON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_RawJSON* New() const final {
    return CreateMaybeMessage<Message_RawJSON>(nullptr);
  }

  Message_RawJSON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_RawJSON>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_RawJSON& from);
  void MergeFrom(const Message_RawJSON& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_RawJSON* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.RawJSON";
  }
  protected:
  explicit Message_RawJSON(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.RawJSON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_SignDirect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.SignDirect) */ {
 public:
  inline Message_SignDirect() : Message_SignDirect(nullptr) {}
  virtual ~Message_SignDirect();

  Message_SignDirect(const Message_SignDirect& from);
  Message_SignDirect(Message_SignDirect&& from) noexcept
    : Message_SignDirect() {
    *this = ::std::move(from);
  }

  inline Message_SignDirect& operator=(const Message_SignDirect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_SignDirect& operator=(Message_SignDirect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_SignDirect& default_instance();

  static inline const Message_SignDirect* internal_default_instance() {
    return reinterpret_cast<const Message_SignDirect*>(
               &_Message_SignDirect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Message_SignDirect& a, Message_SignDirect& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_SignDirect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_SignDirect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_SignDirect* New() const final {
    return CreateMaybeMessage<Message_SignDirect>(nullptr);
  }

  Message_SignDirect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_SignDirect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_SignDirect& from);
  void MergeFrom(const Message_SignDirect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_SignDirect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.SignDirect";
  }
  protected:
  explicit Message_SignDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyBytesFieldNumber = 1,
    kAuthInfoBytesFieldNumber = 2,
    kAminoHashFieldNumber = 3,
  };
  // bytes body_bytes = 1;
  void clear_body_bytes();
  const std::string& body_bytes() const;
  void set_body_bytes(const std::string& value);
  void set_body_bytes(std::string&& value);
  void set_body_bytes(const char* value);
  void set_body_bytes(const void* value, size_t size);
  std::string* mutable_body_bytes();
  std::string* release_body_bytes();
  void set_allocated_body_bytes(std::string* body_bytes);
  private:
  const std::string& _internal_body_bytes() const;
  void _internal_set_body_bytes(const std::string& value);
  std::string* _internal_mutable_body_bytes();
  public:

  // bytes auth_info_bytes = 2;
  void clear_auth_info_bytes();
  const std::string& auth_info_bytes() const;
  void set_auth_info_bytes(const std::string& value);
  void set_auth_info_bytes(std::string&& value);
  void set_auth_info_bytes(const char* value);
  void set_auth_info_bytes(const void* value, size_t size);
  std::string* mutable_auth_info_bytes();
  std::string* release_auth_info_bytes();
  void set_allocated_auth_info_bytes(std::string* auth_info_bytes);
  private:
  const std::string& _internal_auth_info_bytes() const;
  void _internal_set_auth_info_bytes(const std::string& value);
  std::string* _internal_mutable_auth_info_bytes();
  public:

  // bytes amino_hash = 3;
  void clear_amino_hash();
  const std::string& amino_hash() const;
  void set_amino_hash(const std::string& value);
  void set_amino_hash(std::string&& value);
  void set_amino_hash(const char* value);
  void set_amino_hash(const void* value, size_t size);
  std::string* mutable_amino_hash();
  std::string* release_amino_hash();
  void set_allocated_amino_hash(std::string* amino_hash);
  private:
  const std::string& _internal_amino_hash() const;
  void _internal_set_amino_hash(const std::string& value);
  std::string* _internal_mutable_amino_hash();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.SignDirect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_info_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amino_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_StakeAuthorization_Validators PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.StakeAuthorization.Validators) */ {
 public:
  inline Message_StakeAuthorization_Validators() : Message_StakeAuthorization_Validators(nullptr) {}
  virtual ~Message_StakeAuthorization_Validators();

  Message_StakeAuthorization_Validators(const Message_StakeAuthorization_Validators& from);
  Message_StakeAuthorization_Validators(Message_StakeAuthorization_Validators&& from) noexcept
    : Message_StakeAuthorization_Validators() {
    *this = ::std::move(from);
  }

  inline Message_StakeAuthorization_Validators& operator=(const Message_StakeAuthorization_Validators& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_StakeAuthorization_Validators& operator=(Message_StakeAuthorization_Validators&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_StakeAuthorization_Validators& default_instance();

  static inline const Message_StakeAuthorization_Validators* internal_default_instance() {
    return reinterpret_cast<const Message_StakeAuthorization_Validators*>(
               &_Message_StakeAuthorization_Validators_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Message_StakeAuthorization_Validators& a, Message_StakeAuthorization_Validators& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_StakeAuthorization_Validators* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_StakeAuthorization_Validators* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_StakeAuthorization_Validators* New() const final {
    return CreateMaybeMessage<Message_StakeAuthorization_Validators>(nullptr);
  }

  Message_StakeAuthorization_Validators* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_StakeAuthorization_Validators>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_StakeAuthorization_Validators& from);
  void MergeFrom(const Message_StakeAuthorization_Validators& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_StakeAuthorization_Validators* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.StakeAuthorization.Validators";
  }
  protected:
  explicit Message_StakeAuthorization_Validators(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // repeated string address = 1;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  const std::string& address(int index) const;
  std::string* mutable_address(int index);
  void set_address(int index, const std::string& value);
  void set_address(int index, std::string&& value);
  void set_address(int index, const char* value);
  void set_address(int index, const char* value, size_t size);
  std::string* add_address();
  void add_address(const std::string& value);
  void add_address(std::string&& value);
  void add_address(const char* value);
  void add_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_address();
  private:
  const std::string& _internal_address(int index) const;
  std::string* _internal_add_address();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.StakeAuthorization.Validators)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_StakeAuthorization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.StakeAuthorization) */ {
 public:
  inline Message_StakeAuthorization() : Message_StakeAuthorization(nullptr) {}
  virtual ~Message_StakeAuthorization();

  Message_StakeAuthorization(const Message_StakeAuthorization& from);
  Message_StakeAuthorization(Message_StakeAuthorization&& from) noexcept
    : Message_StakeAuthorization() {
    *this = ::std::move(from);
  }

  inline Message_StakeAuthorization& operator=(const Message_StakeAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_StakeAuthorization& operator=(Message_StakeAuthorization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_StakeAuthorization& default_instance();

  enum ValidatorsCase {
    kAllowList = 2,
    kDenyList = 3,
    VALIDATORS_NOT_SET = 0,
  };

  static inline const Message_StakeAuthorization* internal_default_instance() {
    return reinterpret_cast<const Message_StakeAuthorization*>(
               &_Message_StakeAuthorization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Message_StakeAuthorization& a, Message_StakeAuthorization& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_StakeAuthorization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_StakeAuthorization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_StakeAuthorization* New() const final {
    return CreateMaybeMessage<Message_StakeAuthorization>(nullptr);
  }

  Message_StakeAuthorization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_StakeAuthorization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_StakeAuthorization& from);
  void MergeFrom(const Message_StakeAuthorization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_StakeAuthorization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.StakeAuthorization";
  }
  protected:
  explicit Message_StakeAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_StakeAuthorization_Validators Validators;

  // accessors -------------------------------------------------------

  enum : int {
    kMaxTokensFieldNumber = 1,
    kAuthorizationTypeFieldNumber = 4,
    kAllowListFieldNumber = 2,
    kDenyListFieldNumber = 3,
  };
  // .TW.Cosmos.Proto.Amount max_tokens = 1;
  bool has_max_tokens() const;
  private:
  bool _internal_has_max_tokens() const;
  public:
  void clear_max_tokens();
  const ::TW::Cosmos::Proto::Amount& max_tokens() const;
  ::TW::Cosmos::Proto::Amount* release_max_tokens();
  ::TW::Cosmos::Proto::Amount* mutable_max_tokens();
  void set_allocated_max_tokens(::TW::Cosmos::Proto::Amount* max_tokens);
  private:
  const ::TW::Cosmos::Proto::Amount& _internal_max_tokens() const;
  ::TW::Cosmos::Proto::Amount* _internal_mutable_max_tokens();
  public:
  void unsafe_arena_set_allocated_max_tokens(
      ::TW::Cosmos::Proto::Amount* max_tokens);
  ::TW::Cosmos::Proto::Amount* unsafe_arena_release_max_tokens();

  // .TW.Cosmos.Proto.Message.AuthorizationType authorization_type = 4;
  void clear_authorization_type();
  ::TW::Cosmos::Proto::Message_AuthorizationType authorization_type() const;
  void set_authorization_type(::TW::Cosmos::Proto::Message_AuthorizationType value);
  private:
  ::TW::Cosmos::Proto::Message_AuthorizationType _internal_authorization_type() const;
  void _internal_set_authorization_type(::TW::Cosmos::Proto::Message_AuthorizationType value);
  public:

  // .TW.Cosmos.Proto.Message.StakeAuthorization.Validators allow_list = 2;
  bool has_allow_list() const;
  private:
  bool _internal_has_allow_list() const;
  public:
  void clear_allow_list();
  const ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators& allow_list() const;
  ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* release_allow_list();
  ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* mutable_allow_list();
  void set_allocated_allow_list(::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* allow_list);
  private:
  const ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators& _internal_allow_list() const;
  ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* _internal_mutable_allow_list();
  public:
  void unsafe_arena_set_allocated_allow_list(
      ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* allow_list);
  ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* unsafe_arena_release_allow_list();

  // .TW.Cosmos.Proto.Message.StakeAuthorization.Validators deny_list = 3;
  bool has_deny_list() const;
  private:
  bool _internal_has_deny_list() const;
  public:
  void clear_deny_list();
  const ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators& deny_list() const;
  ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* release_deny_list();
  ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* mutable_deny_list();
  void set_allocated_deny_list(::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* deny_list);
  private:
  const ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators& _internal_deny_list() const;
  ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* _internal_mutable_deny_list();
  public:
  void unsafe_arena_set_allocated_deny_list(
      ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* deny_list);
  ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* unsafe_arena_release_deny_list();

  void clear_validators();
  ValidatorsCase validators_case() const;
  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.StakeAuthorization)
 private:
  class _Internal;
  void set_has_allow_list();
  void set_has_deny_list();

  inline bool has_validators() const;
  inline void clear_has_validators();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Cosmos::Proto::Amount* max_tokens_;
  int authorization_type_;
  union ValidatorsUnion {
    ValidatorsUnion() {}
    ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* allow_list_;
    ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* deny_list_;
  } validators_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_AuthGrant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.AuthGrant) */ {
 public:
  inline Message_AuthGrant() : Message_AuthGrant(nullptr) {}
  virtual ~Message_AuthGrant();

  Message_AuthGrant(const Message_AuthGrant& from);
  Message_AuthGrant(Message_AuthGrant&& from) noexcept
    : Message_AuthGrant() {
    *this = ::std::move(from);
  }

  inline Message_AuthGrant& operator=(const Message_AuthGrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AuthGrant& operator=(Message_AuthGrant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_AuthGrant& default_instance();

  enum GrantTypeCase {
    kGrantStake = 3,
    GRANT_TYPE_NOT_SET = 0,
  };

  static inline const Message_AuthGrant* internal_default_instance() {
    return reinterpret_cast<const Message_AuthGrant*>(
               &_Message_AuthGrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Message_AuthGrant& a, Message_AuthGrant& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AuthGrant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_AuthGrant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_AuthGrant* New() const final {
    return CreateMaybeMessage<Message_AuthGrant>(nullptr);
  }

  Message_AuthGrant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_AuthGrant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_AuthGrant& from);
  void MergeFrom(const Message_AuthGrant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AuthGrant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.AuthGrant";
  }
  protected:
  explicit Message_AuthGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGranterFieldNumber = 1,
    kGranteeFieldNumber = 2,
    kExpirationFieldNumber = 4,
    kGrantStakeFieldNumber = 3,
  };
  // string granter = 1;
  void clear_granter();
  const std::string& granter() const;
  void set_granter(const std::string& value);
  void set_granter(std::string&& value);
  void set_granter(const char* value);
  void set_granter(const char* value, size_t size);
  std::string* mutable_granter();
  std::string* release_granter();
  void set_allocated_granter(std::string* granter);
  private:
  const std::string& _internal_granter() const;
  void _internal_set_granter(const std::string& value);
  std::string* _internal_mutable_granter();
  public:

  // string grantee = 2;
  void clear_grantee();
  const std::string& grantee() const;
  void set_grantee(const std::string& value);
  void set_grantee(std::string&& value);
  void set_grantee(const char* value);
  void set_grantee(const char* value, size_t size);
  std::string* mutable_grantee();
  std::string* release_grantee();
  void set_allocated_grantee(std::string* grantee);
  private:
  const std::string& _internal_grantee() const;
  void _internal_set_grantee(const std::string& value);
  std::string* _internal_mutable_grantee();
  public:

  // int64 expiration = 4;
  void clear_expiration();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration() const;
  void set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiration() const;
  void _internal_set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .TW.Cosmos.Proto.Message.StakeAuthorization grant_stake = 3;
  bool has_grant_stake() const;
  private:
  bool _internal_has_grant_stake() const;
  public:
  void clear_grant_stake();
  const ::TW::Cosmos::Proto::Message_StakeAuthorization& grant_stake() const;
  ::TW::Cosmos::Proto::Message_StakeAuthorization* release_grant_stake();
  ::TW::Cosmos::Proto::Message_StakeAuthorization* mutable_grant_stake();
  void set_allocated_grant_stake(::TW::Cosmos::Proto::Message_StakeAuthorization* grant_stake);
  private:
  const ::TW::Cosmos::Proto::Message_StakeAuthorization& _internal_grant_stake() const;
  ::TW::Cosmos::Proto::Message_StakeAuthorization* _internal_mutable_grant_stake();
  public:
  void unsafe_arena_set_allocated_grant_stake(
      ::TW::Cosmos::Proto::Message_StakeAuthorization* grant_stake);
  ::TW::Cosmos::Proto::Message_StakeAuthorization* unsafe_arena_release_grant_stake();

  void clear_grant_type();
  GrantTypeCase grant_type_case() const;
  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.AuthGrant)
 private:
  class _Internal;
  void set_has_grant_stake();

  inline bool has_grant_type() const;
  inline void clear_has_grant_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grantee_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_;
  union GrantTypeUnion {
    GrantTypeUnion() {}
    ::TW::Cosmos::Proto::Message_StakeAuthorization* grant_stake_;
  } grant_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_AuthRevoke PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.AuthRevoke) */ {
 public:
  inline Message_AuthRevoke() : Message_AuthRevoke(nullptr) {}
  virtual ~Message_AuthRevoke();

  Message_AuthRevoke(const Message_AuthRevoke& from);
  Message_AuthRevoke(Message_AuthRevoke&& from) noexcept
    : Message_AuthRevoke() {
    *this = ::std::move(from);
  }

  inline Message_AuthRevoke& operator=(const Message_AuthRevoke& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AuthRevoke& operator=(Message_AuthRevoke&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_AuthRevoke& default_instance();

  static inline const Message_AuthRevoke* internal_default_instance() {
    return reinterpret_cast<const Message_AuthRevoke*>(
               &_Message_AuthRevoke_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Message_AuthRevoke& a, Message_AuthRevoke& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AuthRevoke* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_AuthRevoke* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_AuthRevoke* New() const final {
    return CreateMaybeMessage<Message_AuthRevoke>(nullptr);
  }

  Message_AuthRevoke* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_AuthRevoke>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_AuthRevoke& from);
  void MergeFrom(const Message_AuthRevoke& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AuthRevoke* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.AuthRevoke";
  }
  protected:
  explicit Message_AuthRevoke(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGranterFieldNumber = 1,
    kGranteeFieldNumber = 2,
    kMsgTypeUrlFieldNumber = 3,
  };
  // string granter = 1;
  void clear_granter();
  const std::string& granter() const;
  void set_granter(const std::string& value);
  void set_granter(std::string&& value);
  void set_granter(const char* value);
  void set_granter(const char* value, size_t size);
  std::string* mutable_granter();
  std::string* release_granter();
  void set_allocated_granter(std::string* granter);
  private:
  const std::string& _internal_granter() const;
  void _internal_set_granter(const std::string& value);
  std::string* _internal_mutable_granter();
  public:

  // string grantee = 2;
  void clear_grantee();
  const std::string& grantee() const;
  void set_grantee(const std::string& value);
  void set_grantee(std::string&& value);
  void set_grantee(const char* value);
  void set_grantee(const char* value, size_t size);
  std::string* mutable_grantee();
  std::string* release_grantee();
  void set_allocated_grantee(std::string* grantee);
  private:
  const std::string& _internal_grantee() const;
  void _internal_set_grantee(const std::string& value);
  std::string* _internal_mutable_grantee();
  public:

  // string msg_type_url = 3;
  void clear_msg_type_url();
  const std::string& msg_type_url() const;
  void set_msg_type_url(const std::string& value);
  void set_msg_type_url(std::string&& value);
  void set_msg_type_url(const char* value);
  void set_msg_type_url(const char* value, size_t size);
  std::string* mutable_msg_type_url();
  std::string* release_msg_type_url();
  void set_allocated_msg_type_url(std::string* msg_type_url);
  private:
  const std::string& _internal_msg_type_url() const;
  void _internal_set_msg_type_url(const std::string& value);
  std::string* _internal_mutable_msg_type_url();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.AuthRevoke)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grantee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message_MsgVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message.MsgVote) */ {
 public:
  inline Message_MsgVote() : Message_MsgVote(nullptr) {}
  virtual ~Message_MsgVote();

  Message_MsgVote(const Message_MsgVote& from);
  Message_MsgVote(Message_MsgVote&& from) noexcept
    : Message_MsgVote() {
    *this = ::std::move(from);
  }

  inline Message_MsgVote& operator=(const Message_MsgVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MsgVote& operator=(Message_MsgVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_MsgVote& default_instance();

  static inline const Message_MsgVote* internal_default_instance() {
    return reinterpret_cast<const Message_MsgVote*>(
               &_Message_MsgVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Message_MsgVote& a, Message_MsgVote& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MsgVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MsgVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_MsgVote* New() const final {
    return CreateMaybeMessage<Message_MsgVote>(nullptr);
  }

  Message_MsgVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_MsgVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_MsgVote& from);
  void MergeFrom(const Message_MsgVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MsgVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message.MsgVote";
  }
  protected:
  explicit Message_MsgVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoterFieldNumber = 2,
    kProposalIdFieldNumber = 1,
    kOptionFieldNumber = 3,
  };
  // string voter = 2;
  void clear_voter();
  const std::string& voter() const;
  void set_voter(const std::string& value);
  void set_voter(std::string&& value);
  void set_voter(const char* value);
  void set_voter(const char* value, size_t size);
  std::string* mutable_voter();
  std::string* release_voter();
  void set_allocated_voter(std::string* voter);
  private:
  const std::string& _internal_voter() const;
  void _internal_set_voter(const std::string& value);
  std::string* _internal_mutable_voter();
  public:

  // uint64 proposal_id = 1;
  void clear_proposal_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 proposal_id() const;
  void set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_proposal_id() const;
  void _internal_set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .TW.Cosmos.Proto.Message.VoteOption option = 3;
  void clear_option();
  ::TW::Cosmos::Proto::Message_VoteOption option() const;
  void set_option(::TW::Cosmos::Proto::Message_VoteOption value);
  private:
  ::TW::Cosmos::Proto::Message_VoteOption _internal_option() const;
  void _internal_set_option(::TW::Cosmos::Proto::Message_VoteOption value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message.MsgVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_;
  ::PROTOBUF_NAMESPACE_ID::uint64 proposal_id_;
  int option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum MessageOneofCase {
    kSendCoinsMessage = 1,
    kTransferTokensMessage = 2,
    kStakeMessage = 3,
    kUnstakeMessage = 4,
    kRestakeMessage = 5,
    kWithdrawStakeRewardMessage = 6,
    kRawJsonMessage = 7,
    kWasmTerraExecuteContractTransferMessage = 8,
    kWasmTerraExecuteContractSendMessage = 9,
    kThorchainSendMessage = 10,
    kWasmTerraExecuteContractGeneric = 11,
    kWasmExecuteContractTransferMessage = 12,
    kWasmExecuteContractSendMessage = 13,
    kWasmExecuteContractGeneric = 14,
    kSignDirectMessage = 15,
    kAuthGrant = 16,
    kAuthRevoke = 17,
    kMsgVote = 18,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_Send Send;
  typedef Message_Transfer Transfer;
  typedef Message_Delegate Delegate;
  typedef Message_Undelegate Undelegate;
  typedef Message_BeginRedelegate BeginRedelegate;
  typedef Message_WithdrawDelegationReward WithdrawDelegationReward;
  typedef Message_WasmTerraExecuteContractTransfer WasmTerraExecuteContractTransfer;
  typedef Message_WasmTerraExecuteContractSend WasmTerraExecuteContractSend;
  typedef Message_THORChainSend THORChainSend;
  typedef Message_WasmTerraExecuteContractGeneric WasmTerraExecuteContractGeneric;
  typedef Message_WasmExecuteContractTransfer WasmExecuteContractTransfer;
  typedef Message_WasmExecuteContractSend WasmExecuteContractSend;
  typedef Message_WasmExecuteContractGeneric WasmExecuteContractGeneric;
  typedef Message_RawJSON RawJSON;
  typedef Message_SignDirect SignDirect;
  typedef Message_StakeAuthorization StakeAuthorization;
  typedef Message_AuthGrant AuthGrant;
  typedef Message_AuthRevoke AuthRevoke;
  typedef Message_MsgVote MsgVote;

  typedef Message_AuthorizationType AuthorizationType;
  static constexpr AuthorizationType UNSPECIFIED =
    Message_AuthorizationType_UNSPECIFIED;
  static constexpr AuthorizationType DELEGATE =
    Message_AuthorizationType_DELEGATE;
  static constexpr AuthorizationType UNDELEGATE =
    Message_AuthorizationType_UNDELEGATE;
  static constexpr AuthorizationType REDELEGATE =
    Message_AuthorizationType_REDELEGATE;
  static inline bool AuthorizationType_IsValid(int value) {
    return Message_AuthorizationType_IsValid(value);
  }
  static constexpr AuthorizationType AuthorizationType_MIN =
    Message_AuthorizationType_AuthorizationType_MIN;
  static constexpr AuthorizationType AuthorizationType_MAX =
    Message_AuthorizationType_AuthorizationType_MAX;
  static constexpr int AuthorizationType_ARRAYSIZE =
    Message_AuthorizationType_AuthorizationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuthorizationType_descriptor() {
    return Message_AuthorizationType_descriptor();
  }
  template<typename T>
  static inline const std::string& AuthorizationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuthorizationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuthorizationType_Name.");
    return Message_AuthorizationType_Name(enum_t_value);
  }
  static inline bool AuthorizationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AuthorizationType* value) {
    return Message_AuthorizationType_Parse(name, value);
  }

  typedef Message_VoteOption VoteOption;
  static constexpr VoteOption _UNSPECIFIED =
    Message_VoteOption__UNSPECIFIED;
  static constexpr VoteOption YES =
    Message_VoteOption_YES;
  static constexpr VoteOption ABSTAIN =
    Message_VoteOption_ABSTAIN;
  static constexpr VoteOption NO =
    Message_VoteOption_NO;
  static constexpr VoteOption NO_WITH_VETO =
    Message_VoteOption_NO_WITH_VETO;
  static inline bool VoteOption_IsValid(int value) {
    return Message_VoteOption_IsValid(value);
  }
  static constexpr VoteOption VoteOption_MIN =
    Message_VoteOption_VoteOption_MIN;
  static constexpr VoteOption VoteOption_MAX =
    Message_VoteOption_VoteOption_MAX;
  static constexpr int VoteOption_ARRAYSIZE =
    Message_VoteOption_VoteOption_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VoteOption_descriptor() {
    return Message_VoteOption_descriptor();
  }
  template<typename T>
  static inline const std::string& VoteOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VoteOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VoteOption_Name.");
    return Message_VoteOption_Name(enum_t_value);
  }
  static inline bool VoteOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VoteOption* value) {
    return Message_VoteOption_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSendCoinsMessageFieldNumber = 1,
    kTransferTokensMessageFieldNumber = 2,
    kStakeMessageFieldNumber = 3,
    kUnstakeMessageFieldNumber = 4,
    kRestakeMessageFieldNumber = 5,
    kWithdrawStakeRewardMessageFieldNumber = 6,
    kRawJsonMessageFieldNumber = 7,
    kWasmTerraExecuteContractTransferMessageFieldNumber = 8,
    kWasmTerraExecuteContractSendMessageFieldNumber = 9,
    kThorchainSendMessageFieldNumber = 10,
    kWasmTerraExecuteContractGenericFieldNumber = 11,
    kWasmExecuteContractTransferMessageFieldNumber = 12,
    kWasmExecuteContractSendMessageFieldNumber = 13,
    kWasmExecuteContractGenericFieldNumber = 14,
    kSignDirectMessageFieldNumber = 15,
    kAuthGrantFieldNumber = 16,
    kAuthRevokeFieldNumber = 17,
    kMsgVoteFieldNumber = 18,
  };
  // .TW.Cosmos.Proto.Message.Send send_coins_message = 1;
  bool has_send_coins_message() const;
  private:
  bool _internal_has_send_coins_message() const;
  public:
  void clear_send_coins_message();
  const ::TW::Cosmos::Proto::Message_Send& send_coins_message() const;
  ::TW::Cosmos::Proto::Message_Send* release_send_coins_message();
  ::TW::Cosmos::Proto::Message_Send* mutable_send_coins_message();
  void set_allocated_send_coins_message(::TW::Cosmos::Proto::Message_Send* send_coins_message);
  private:
  const ::TW::Cosmos::Proto::Message_Send& _internal_send_coins_message() const;
  ::TW::Cosmos::Proto::Message_Send* _internal_mutable_send_coins_message();
  public:
  void unsafe_arena_set_allocated_send_coins_message(
      ::TW::Cosmos::Proto::Message_Send* send_coins_message);
  ::TW::Cosmos::Proto::Message_Send* unsafe_arena_release_send_coins_message();

  // .TW.Cosmos.Proto.Message.Transfer transfer_tokens_message = 2;
  bool has_transfer_tokens_message() const;
  private:
  bool _internal_has_transfer_tokens_message() const;
  public:
  void clear_transfer_tokens_message();
  const ::TW::Cosmos::Proto::Message_Transfer& transfer_tokens_message() const;
  ::TW::Cosmos::Proto::Message_Transfer* release_transfer_tokens_message();
  ::TW::Cosmos::Proto::Message_Transfer* mutable_transfer_tokens_message();
  void set_allocated_transfer_tokens_message(::TW::Cosmos::Proto::Message_Transfer* transfer_tokens_message);
  private:
  const ::TW::Cosmos::Proto::Message_Transfer& _internal_transfer_tokens_message() const;
  ::TW::Cosmos::Proto::Message_Transfer* _internal_mutable_transfer_tokens_message();
  public:
  void unsafe_arena_set_allocated_transfer_tokens_message(
      ::TW::Cosmos::Proto::Message_Transfer* transfer_tokens_message);
  ::TW::Cosmos::Proto::Message_Transfer* unsafe_arena_release_transfer_tokens_message();

  // .TW.Cosmos.Proto.Message.Delegate stake_message = 3;
  bool has_stake_message() const;
  private:
  bool _internal_has_stake_message() const;
  public:
  void clear_stake_message();
  const ::TW::Cosmos::Proto::Message_Delegate& stake_message() const;
  ::TW::Cosmos::Proto::Message_Delegate* release_stake_message();
  ::TW::Cosmos::Proto::Message_Delegate* mutable_stake_message();
  void set_allocated_stake_message(::TW::Cosmos::Proto::Message_Delegate* stake_message);
  private:
  const ::TW::Cosmos::Proto::Message_Delegate& _internal_stake_message() const;
  ::TW::Cosmos::Proto::Message_Delegate* _internal_mutable_stake_message();
  public:
  void unsafe_arena_set_allocated_stake_message(
      ::TW::Cosmos::Proto::Message_Delegate* stake_message);
  ::TW::Cosmos::Proto::Message_Delegate* unsafe_arena_release_stake_message();

  // .TW.Cosmos.Proto.Message.Undelegate unstake_message = 4;
  bool has_unstake_message() const;
  private:
  bool _internal_has_unstake_message() const;
  public:
  void clear_unstake_message();
  const ::TW::Cosmos::Proto::Message_Undelegate& unstake_message() const;
  ::TW::Cosmos::Proto::Message_Undelegate* release_unstake_message();
  ::TW::Cosmos::Proto::Message_Undelegate* mutable_unstake_message();
  void set_allocated_unstake_message(::TW::Cosmos::Proto::Message_Undelegate* unstake_message);
  private:
  const ::TW::Cosmos::Proto::Message_Undelegate& _internal_unstake_message() const;
  ::TW::Cosmos::Proto::Message_Undelegate* _internal_mutable_unstake_message();
  public:
  void unsafe_arena_set_allocated_unstake_message(
      ::TW::Cosmos::Proto::Message_Undelegate* unstake_message);
  ::TW::Cosmos::Proto::Message_Undelegate* unsafe_arena_release_unstake_message();

  // .TW.Cosmos.Proto.Message.BeginRedelegate restake_message = 5;
  bool has_restake_message() const;
  private:
  bool _internal_has_restake_message() const;
  public:
  void clear_restake_message();
  const ::TW::Cosmos::Proto::Message_BeginRedelegate& restake_message() const;
  ::TW::Cosmos::Proto::Message_BeginRedelegate* release_restake_message();
  ::TW::Cosmos::Proto::Message_BeginRedelegate* mutable_restake_message();
  void set_allocated_restake_message(::TW::Cosmos::Proto::Message_BeginRedelegate* restake_message);
  private:
  const ::TW::Cosmos::Proto::Message_BeginRedelegate& _internal_restake_message() const;
  ::TW::Cosmos::Proto::Message_BeginRedelegate* _internal_mutable_restake_message();
  public:
  void unsafe_arena_set_allocated_restake_message(
      ::TW::Cosmos::Proto::Message_BeginRedelegate* restake_message);
  ::TW::Cosmos::Proto::Message_BeginRedelegate* unsafe_arena_release_restake_message();

  // .TW.Cosmos.Proto.Message.WithdrawDelegationReward withdraw_stake_reward_message = 6;
  bool has_withdraw_stake_reward_message() const;
  private:
  bool _internal_has_withdraw_stake_reward_message() const;
  public:
  void clear_withdraw_stake_reward_message();
  const ::TW::Cosmos::Proto::Message_WithdrawDelegationReward& withdraw_stake_reward_message() const;
  ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* release_withdraw_stake_reward_message();
  ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* mutable_withdraw_stake_reward_message();
  void set_allocated_withdraw_stake_reward_message(::TW::Cosmos::Proto::Message_WithdrawDelegationReward* withdraw_stake_reward_message);
  private:
  const ::TW::Cosmos::Proto::Message_WithdrawDelegationReward& _internal_withdraw_stake_reward_message() const;
  ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* _internal_mutable_withdraw_stake_reward_message();
  public:
  void unsafe_arena_set_allocated_withdraw_stake_reward_message(
      ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* withdraw_stake_reward_message);
  ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* unsafe_arena_release_withdraw_stake_reward_message();

  // .TW.Cosmos.Proto.Message.RawJSON raw_json_message = 7;
  bool has_raw_json_message() const;
  private:
  bool _internal_has_raw_json_message() const;
  public:
  void clear_raw_json_message();
  const ::TW::Cosmos::Proto::Message_RawJSON& raw_json_message() const;
  ::TW::Cosmos::Proto::Message_RawJSON* release_raw_json_message();
  ::TW::Cosmos::Proto::Message_RawJSON* mutable_raw_json_message();
  void set_allocated_raw_json_message(::TW::Cosmos::Proto::Message_RawJSON* raw_json_message);
  private:
  const ::TW::Cosmos::Proto::Message_RawJSON& _internal_raw_json_message() const;
  ::TW::Cosmos::Proto::Message_RawJSON* _internal_mutable_raw_json_message();
  public:
  void unsafe_arena_set_allocated_raw_json_message(
      ::TW::Cosmos::Proto::Message_RawJSON* raw_json_message);
  ::TW::Cosmos::Proto::Message_RawJSON* unsafe_arena_release_raw_json_message();

  // .TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer wasm_terra_execute_contract_transfer_message = 8;
  bool has_wasm_terra_execute_contract_transfer_message() const;
  private:
  bool _internal_has_wasm_terra_execute_contract_transfer_message() const;
  public:
  void clear_wasm_terra_execute_contract_transfer_message();
  const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer& wasm_terra_execute_contract_transfer_message() const;
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* release_wasm_terra_execute_contract_transfer_message();
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* mutable_wasm_terra_execute_contract_transfer_message();
  void set_allocated_wasm_terra_execute_contract_transfer_message(::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* wasm_terra_execute_contract_transfer_message);
  private:
  const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer& _internal_wasm_terra_execute_contract_transfer_message() const;
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* _internal_mutable_wasm_terra_execute_contract_transfer_message();
  public:
  void unsafe_arena_set_allocated_wasm_terra_execute_contract_transfer_message(
      ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* wasm_terra_execute_contract_transfer_message);
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* unsafe_arena_release_wasm_terra_execute_contract_transfer_message();

  // .TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend wasm_terra_execute_contract_send_message = 9;
  bool has_wasm_terra_execute_contract_send_message() const;
  private:
  bool _internal_has_wasm_terra_execute_contract_send_message() const;
  public:
  void clear_wasm_terra_execute_contract_send_message();
  const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend& wasm_terra_execute_contract_send_message() const;
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* release_wasm_terra_execute_contract_send_message();
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* mutable_wasm_terra_execute_contract_send_message();
  void set_allocated_wasm_terra_execute_contract_send_message(::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* wasm_terra_execute_contract_send_message);
  private:
  const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend& _internal_wasm_terra_execute_contract_send_message() const;
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* _internal_mutable_wasm_terra_execute_contract_send_message();
  public:
  void unsafe_arena_set_allocated_wasm_terra_execute_contract_send_message(
      ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* wasm_terra_execute_contract_send_message);
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* unsafe_arena_release_wasm_terra_execute_contract_send_message();

  // .TW.Cosmos.Proto.Message.THORChainSend thorchain_send_message = 10;
  bool has_thorchain_send_message() const;
  private:
  bool _internal_has_thorchain_send_message() const;
  public:
  void clear_thorchain_send_message();
  const ::TW::Cosmos::Proto::Message_THORChainSend& thorchain_send_message() const;
  ::TW::Cosmos::Proto::Message_THORChainSend* release_thorchain_send_message();
  ::TW::Cosmos::Proto::Message_THORChainSend* mutable_thorchain_send_message();
  void set_allocated_thorchain_send_message(::TW::Cosmos::Proto::Message_THORChainSend* thorchain_send_message);
  private:
  const ::TW::Cosmos::Proto::Message_THORChainSend& _internal_thorchain_send_message() const;
  ::TW::Cosmos::Proto::Message_THORChainSend* _internal_mutable_thorchain_send_message();
  public:
  void unsafe_arena_set_allocated_thorchain_send_message(
      ::TW::Cosmos::Proto::Message_THORChainSend* thorchain_send_message);
  ::TW::Cosmos::Proto::Message_THORChainSend* unsafe_arena_release_thorchain_send_message();

  // .TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric wasm_terra_execute_contract_generic = 11;
  bool has_wasm_terra_execute_contract_generic() const;
  private:
  bool _internal_has_wasm_terra_execute_contract_generic() const;
  public:
  void clear_wasm_terra_execute_contract_generic();
  const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric& wasm_terra_execute_contract_generic() const;
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* release_wasm_terra_execute_contract_generic();
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* mutable_wasm_terra_execute_contract_generic();
  void set_allocated_wasm_terra_execute_contract_generic(::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* wasm_terra_execute_contract_generic);
  private:
  const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric& _internal_wasm_terra_execute_contract_generic() const;
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* _internal_mutable_wasm_terra_execute_contract_generic();
  public:
  void unsafe_arena_set_allocated_wasm_terra_execute_contract_generic(
      ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* wasm_terra_execute_contract_generic);
  ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* unsafe_arena_release_wasm_terra_execute_contract_generic();

  // .TW.Cosmos.Proto.Message.WasmExecuteContractTransfer wasm_execute_contract_transfer_message = 12;
  bool has_wasm_execute_contract_transfer_message() const;
  private:
  bool _internal_has_wasm_execute_contract_transfer_message() const;
  public:
  void clear_wasm_execute_contract_transfer_message();
  const ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer& wasm_execute_contract_transfer_message() const;
  ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* release_wasm_execute_contract_transfer_message();
  ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* mutable_wasm_execute_contract_transfer_message();
  void set_allocated_wasm_execute_contract_transfer_message(::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* wasm_execute_contract_transfer_message);
  private:
  const ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer& _internal_wasm_execute_contract_transfer_message() const;
  ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* _internal_mutable_wasm_execute_contract_transfer_message();
  public:
  void unsafe_arena_set_allocated_wasm_execute_contract_transfer_message(
      ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* wasm_execute_contract_transfer_message);
  ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* unsafe_arena_release_wasm_execute_contract_transfer_message();

  // .TW.Cosmos.Proto.Message.WasmExecuteContractSend wasm_execute_contract_send_message = 13;
  bool has_wasm_execute_contract_send_message() const;
  private:
  bool _internal_has_wasm_execute_contract_send_message() const;
  public:
  void clear_wasm_execute_contract_send_message();
  const ::TW::Cosmos::Proto::Message_WasmExecuteContractSend& wasm_execute_contract_send_message() const;
  ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* release_wasm_execute_contract_send_message();
  ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* mutable_wasm_execute_contract_send_message();
  void set_allocated_wasm_execute_contract_send_message(::TW::Cosmos::Proto::Message_WasmExecuteContractSend* wasm_execute_contract_send_message);
  private:
  const ::TW::Cosmos::Proto::Message_WasmExecuteContractSend& _internal_wasm_execute_contract_send_message() const;
  ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* _internal_mutable_wasm_execute_contract_send_message();
  public:
  void unsafe_arena_set_allocated_wasm_execute_contract_send_message(
      ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* wasm_execute_contract_send_message);
  ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* unsafe_arena_release_wasm_execute_contract_send_message();

  // .TW.Cosmos.Proto.Message.WasmExecuteContractGeneric wasm_execute_contract_generic = 14;
  bool has_wasm_execute_contract_generic() const;
  private:
  bool _internal_has_wasm_execute_contract_generic() const;
  public:
  void clear_wasm_execute_contract_generic();
  const ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric& wasm_execute_contract_generic() const;
  ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* release_wasm_execute_contract_generic();
  ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* mutable_wasm_execute_contract_generic();
  void set_allocated_wasm_execute_contract_generic(::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* wasm_execute_contract_generic);
  private:
  const ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric& _internal_wasm_execute_contract_generic() const;
  ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* _internal_mutable_wasm_execute_contract_generic();
  public:
  void unsafe_arena_set_allocated_wasm_execute_contract_generic(
      ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* wasm_execute_contract_generic);
  ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* unsafe_arena_release_wasm_execute_contract_generic();

  // .TW.Cosmos.Proto.Message.SignDirect sign_direct_message = 15;
  bool has_sign_direct_message() const;
  private:
  bool _internal_has_sign_direct_message() const;
  public:
  void clear_sign_direct_message();
  const ::TW::Cosmos::Proto::Message_SignDirect& sign_direct_message() const;
  ::TW::Cosmos::Proto::Message_SignDirect* release_sign_direct_message();
  ::TW::Cosmos::Proto::Message_SignDirect* mutable_sign_direct_message();
  void set_allocated_sign_direct_message(::TW::Cosmos::Proto::Message_SignDirect* sign_direct_message);
  private:
  const ::TW::Cosmos::Proto::Message_SignDirect& _internal_sign_direct_message() const;
  ::TW::Cosmos::Proto::Message_SignDirect* _internal_mutable_sign_direct_message();
  public:
  void unsafe_arena_set_allocated_sign_direct_message(
      ::TW::Cosmos::Proto::Message_SignDirect* sign_direct_message);
  ::TW::Cosmos::Proto::Message_SignDirect* unsafe_arena_release_sign_direct_message();

  // .TW.Cosmos.Proto.Message.AuthGrant auth_grant = 16;
  bool has_auth_grant() const;
  private:
  bool _internal_has_auth_grant() const;
  public:
  void clear_auth_grant();
  const ::TW::Cosmos::Proto::Message_AuthGrant& auth_grant() const;
  ::TW::Cosmos::Proto::Message_AuthGrant* release_auth_grant();
  ::TW::Cosmos::Proto::Message_AuthGrant* mutable_auth_grant();
  void set_allocated_auth_grant(::TW::Cosmos::Proto::Message_AuthGrant* auth_grant);
  private:
  const ::TW::Cosmos::Proto::Message_AuthGrant& _internal_auth_grant() const;
  ::TW::Cosmos::Proto::Message_AuthGrant* _internal_mutable_auth_grant();
  public:
  void unsafe_arena_set_allocated_auth_grant(
      ::TW::Cosmos::Proto::Message_AuthGrant* auth_grant);
  ::TW::Cosmos::Proto::Message_AuthGrant* unsafe_arena_release_auth_grant();

  // .TW.Cosmos.Proto.Message.AuthRevoke auth_revoke = 17;
  bool has_auth_revoke() const;
  private:
  bool _internal_has_auth_revoke() const;
  public:
  void clear_auth_revoke();
  const ::TW::Cosmos::Proto::Message_AuthRevoke& auth_revoke() const;
  ::TW::Cosmos::Proto::Message_AuthRevoke* release_auth_revoke();
  ::TW::Cosmos::Proto::Message_AuthRevoke* mutable_auth_revoke();
  void set_allocated_auth_revoke(::TW::Cosmos::Proto::Message_AuthRevoke* auth_revoke);
  private:
  const ::TW::Cosmos::Proto::Message_AuthRevoke& _internal_auth_revoke() const;
  ::TW::Cosmos::Proto::Message_AuthRevoke* _internal_mutable_auth_revoke();
  public:
  void unsafe_arena_set_allocated_auth_revoke(
      ::TW::Cosmos::Proto::Message_AuthRevoke* auth_revoke);
  ::TW::Cosmos::Proto::Message_AuthRevoke* unsafe_arena_release_auth_revoke();

  // .TW.Cosmos.Proto.Message.MsgVote msg_vote = 18;
  bool has_msg_vote() const;
  private:
  bool _internal_has_msg_vote() const;
  public:
  void clear_msg_vote();
  const ::TW::Cosmos::Proto::Message_MsgVote& msg_vote() const;
  ::TW::Cosmos::Proto::Message_MsgVote* release_msg_vote();
  ::TW::Cosmos::Proto::Message_MsgVote* mutable_msg_vote();
  void set_allocated_msg_vote(::TW::Cosmos::Proto::Message_MsgVote* msg_vote);
  private:
  const ::TW::Cosmos::Proto::Message_MsgVote& _internal_msg_vote() const;
  ::TW::Cosmos::Proto::Message_MsgVote* _internal_mutable_msg_vote();
  public:
  void unsafe_arena_set_allocated_msg_vote(
      ::TW::Cosmos::Proto::Message_MsgVote* msg_vote);
  ::TW::Cosmos::Proto::Message_MsgVote* unsafe_arena_release_msg_vote();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.Message)
 private:
  class _Internal;
  void set_has_send_coins_message();
  void set_has_transfer_tokens_message();
  void set_has_stake_message();
  void set_has_unstake_message();
  void set_has_restake_message();
  void set_has_withdraw_stake_reward_message();
  void set_has_raw_json_message();
  void set_has_wasm_terra_execute_contract_transfer_message();
  void set_has_wasm_terra_execute_contract_send_message();
  void set_has_thorchain_send_message();
  void set_has_wasm_terra_execute_contract_generic();
  void set_has_wasm_execute_contract_transfer_message();
  void set_has_wasm_execute_contract_send_message();
  void set_has_wasm_execute_contract_generic();
  void set_has_sign_direct_message();
  void set_has_auth_grant();
  void set_has_auth_revoke();
  void set_has_msg_vote();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    MessageOneofUnion() {}
    ::TW::Cosmos::Proto::Message_Send* send_coins_message_;
    ::TW::Cosmos::Proto::Message_Transfer* transfer_tokens_message_;
    ::TW::Cosmos::Proto::Message_Delegate* stake_message_;
    ::TW::Cosmos::Proto::Message_Undelegate* unstake_message_;
    ::TW::Cosmos::Proto::Message_BeginRedelegate* restake_message_;
    ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* withdraw_stake_reward_message_;
    ::TW::Cosmos::Proto::Message_RawJSON* raw_json_message_;
    ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* wasm_terra_execute_contract_transfer_message_;
    ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* wasm_terra_execute_contract_send_message_;
    ::TW::Cosmos::Proto::Message_THORChainSend* thorchain_send_message_;
    ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* wasm_terra_execute_contract_generic_;
    ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* wasm_execute_contract_transfer_message_;
    ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* wasm_execute_contract_send_message_;
    ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* wasm_execute_contract_generic_;
    ::TW::Cosmos::Proto::Message_SignDirect* sign_direct_message_;
    ::TW::Cosmos::Proto::Message_AuthGrant* auth_grant_;
    ::TW::Cosmos::Proto::Message_AuthRevoke* auth_revoke_;
    ::TW::Cosmos::Proto::Message_MsgVote* msg_vote_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 8,
    kChainIdFieldNumber = 3,
    kMemoFieldNumber = 5,
    kPrivateKeyFieldNumber = 7,
    kFeeFieldNumber = 4,
    kAccountNumberFieldNumber = 2,
    kSigningModeFieldNumber = 1,
    kModeFieldNumber = 9,
    kSequenceFieldNumber = 6,
  };
  // repeated .TW.Cosmos.Proto.Message messages = 8;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::TW::Cosmos::Proto::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Message >*
      mutable_messages();
  private:
  const ::TW::Cosmos::Proto::Message& _internal_messages(int index) const;
  ::TW::Cosmos::Proto::Message* _internal_add_messages();
  public:
  const ::TW::Cosmos::Proto::Message& messages(int index) const;
  ::TW::Cosmos::Proto::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Message >&
      messages() const;

  // string chain_id = 3;
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // string memo = 5;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes private_key = 7;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Cosmos.Proto.Fee fee = 4;
  bool has_fee() const;
  private:
  bool _internal_has_fee() const;
  public:
  void clear_fee();
  const ::TW::Cosmos::Proto::Fee& fee() const;
  ::TW::Cosmos::Proto::Fee* release_fee();
  ::TW::Cosmos::Proto::Fee* mutable_fee();
  void set_allocated_fee(::TW::Cosmos::Proto::Fee* fee);
  private:
  const ::TW::Cosmos::Proto::Fee& _internal_fee() const;
  ::TW::Cosmos::Proto::Fee* _internal_mutable_fee();
  public:
  void unsafe_arena_set_allocated_fee(
      ::TW::Cosmos::Proto::Fee* fee);
  ::TW::Cosmos::Proto::Fee* unsafe_arena_release_fee();

  // uint64 account_number = 2;
  void clear_account_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 account_number() const;
  void set_account_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account_number() const;
  void _internal_set_account_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .TW.Cosmos.Proto.SigningMode signing_mode = 1;
  void clear_signing_mode();
  ::TW::Cosmos::Proto::SigningMode signing_mode() const;
  void set_signing_mode(::TW::Cosmos::Proto::SigningMode value);
  private:
  ::TW::Cosmos::Proto::SigningMode _internal_signing_mode() const;
  void _internal_set_signing_mode(::TW::Cosmos::Proto::SigningMode value);
  public:

  // .TW.Cosmos.Proto.BroadcastMode mode = 9;
  void clear_mode();
  ::TW::Cosmos::Proto::BroadcastMode mode() const;
  void set_mode(::TW::Cosmos::Proto::BroadcastMode value);
  private:
  ::TW::Cosmos::Proto::BroadcastMode _internal_mode() const;
  void _internal_set_mode(::TW::Cosmos::Proto::BroadcastMode value);
  public:

  // uint64 sequence = 6;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Message > messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::TW::Cosmos::Proto::Fee* fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_number_;
  int signing_mode_;
  int mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Cosmos.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Cosmos.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cosmos_2eproto);
    return ::descriptor_table_Cosmos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kJsonFieldNumber = 2,
    kSerializedFieldNumber = 3,
    kErrorFieldNumber = 4,
    kSignatureJsonFieldNumber = 5,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string json = 2;
  void clear_json();
  const std::string& json() const;
  void set_json(const std::string& value);
  void set_json(std::string&& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  std::string* mutable_json();
  std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // string serialized = 3;
  void clear_serialized();
  const std::string& serialized() const;
  void set_serialized(const std::string& value);
  void set_serialized(std::string&& value);
  void set_serialized(const char* value);
  void set_serialized(const char* value, size_t size);
  std::string* mutable_serialized();
  std::string* release_serialized();
  void set_allocated_serialized(std::string* serialized);
  private:
  const std::string& _internal_serialized() const;
  void _internal_set_serialized(const std::string& value);
  std::string* _internal_mutable_serialized();
  public:

  // string error = 4;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // string signature_json = 5;
  void clear_signature_json();
  const std::string& signature_json() const;
  void set_signature_json(const std::string& value);
  void set_signature_json(std::string&& value);
  void set_signature_json(const char* value);
  void set_signature_json(const char* value, size_t size);
  std::string* mutable_signature_json();
  std::string* release_signature_json();
  void set_allocated_signature_json(std::string* signature_json);
  private:
  const std::string& _internal_signature_json() const;
  void _internal_set_signature_json(const std::string& value);
  std::string* _internal_mutable_signature_json();
  public:

  // @@protoc_insertion_point(class_scope:TW.Cosmos.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cosmos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Amount

// string denom = 1;
inline void Amount::clear_denom() {
  denom_.ClearToEmpty();
}
inline const std::string& Amount::denom() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Amount.denom)
  return _internal_denom();
}
inline void Amount::set_denom(const std::string& value) {
  _internal_set_denom(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Amount.denom)
}
inline std::string* Amount::mutable_denom() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Amount.denom)
  return _internal_mutable_denom();
}
inline const std::string& Amount::_internal_denom() const {
  return denom_.Get();
}
inline void Amount::_internal_set_denom(const std::string& value) {
  
  denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Amount::set_denom(std::string&& value) {
  
  denom_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Amount.denom)
}
inline void Amount::set_denom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Amount.denom)
}
inline void Amount::set_denom(const char* value,
    size_t size) {
  
  denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Amount.denom)
}
inline std::string* Amount::_internal_mutable_denom() {
  
  return denom_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Amount::release_denom() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Amount.denom)
  return denom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Amount::set_allocated_denom(std::string* denom) {
  if (denom != nullptr) {
    
  } else {
    
  }
  denom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denom,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Amount.denom)
}

// string amount = 2;
inline void Amount::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Amount::amount() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Amount.amount)
  return _internal_amount();
}
inline void Amount::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Amount.amount)
}
inline std::string* Amount::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Amount.amount)
  return _internal_mutable_amount();
}
inline const std::string& Amount::_internal_amount() const {
  return amount_.Get();
}
inline void Amount::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Amount::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Amount.amount)
}
inline void Amount::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Amount.amount)
}
inline void Amount::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Amount.amount)
}
inline std::string* Amount::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Amount::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Amount.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Amount::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Amount.amount)
}

// -------------------------------------------------------------------

// Fee

// repeated .TW.Cosmos.Proto.Amount amounts = 1;
inline int Fee::_internal_amounts_size() const {
  return amounts_.size();
}
inline int Fee::amounts_size() const {
  return _internal_amounts_size();
}
inline void Fee::clear_amounts() {
  amounts_.Clear();
}
inline ::TW::Cosmos::Proto::Amount* Fee::mutable_amounts(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Fee.amounts)
  return amounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
Fee::mutable_amounts() {
  // @@protoc_insertion_point(field_mutable_list:TW.Cosmos.Proto.Fee.amounts)
  return &amounts_;
}
inline const ::TW::Cosmos::Proto::Amount& Fee::_internal_amounts(int index) const {
  return amounts_.Get(index);
}
inline const ::TW::Cosmos::Proto::Amount& Fee::amounts(int index) const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Fee.amounts)
  return _internal_amounts(index);
}
inline ::TW::Cosmos::Proto::Amount* Fee::_internal_add_amounts() {
  return amounts_.Add();
}
inline ::TW::Cosmos::Proto::Amount* Fee::add_amounts() {
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Fee.amounts)
  return _internal_add_amounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
Fee::amounts() const {
  // @@protoc_insertion_point(field_list:TW.Cosmos.Proto.Fee.amounts)
  return amounts_;
}

// uint64 gas = 2;
inline void Fee::clear_gas() {
  gas_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::_internal_gas() const {
  return gas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::gas() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Fee.gas)
  return _internal_gas();
}
inline void Fee::_internal_set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gas_ = value;
}
inline void Fee::set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Fee.gas)
}

// -------------------------------------------------------------------

// Height

// uint64 revision_number = 1;
inline void Height::clear_revision_number() {
  revision_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Height::_internal_revision_number() const {
  return revision_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Height::revision_number() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Height.revision_number)
  return _internal_revision_number();
}
inline void Height::_internal_set_revision_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  revision_number_ = value;
}
inline void Height::set_revision_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision_number(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Height.revision_number)
}

// uint64 revision_height = 2;
inline void Height::clear_revision_height() {
  revision_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Height::_internal_revision_height() const {
  return revision_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Height::revision_height() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Height.revision_height)
  return _internal_revision_height();
}
inline void Height::_internal_set_revision_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  revision_height_ = value;
}
inline void Height::set_revision_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision_height(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Height.revision_height)
}

// -------------------------------------------------------------------

// Message_Send

// string from_address = 1;
inline void Message_Send::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& Message_Send::from_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Send.from_address)
  return _internal_from_address();
}
inline void Message_Send::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Send.from_address)
}
inline std::string* Message_Send::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Send.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& Message_Send::_internal_from_address() const {
  return from_address_.Get();
}
inline void Message_Send::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Send::set_from_address(std::string&& value) {
  
  from_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Send.from_address)
}
inline void Message_Send::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Send.from_address)
}
inline void Message_Send::set_from_address(const char* value,
    size_t size) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Send.from_address)
}
inline std::string* Message_Send::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Send::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Send.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Send::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Send.from_address)
}

// string to_address = 2;
inline void Message_Send::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& Message_Send::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Send.to_address)
  return _internal_to_address();
}
inline void Message_Send::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Send.to_address)
}
inline std::string* Message_Send::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Send.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& Message_Send::_internal_to_address() const {
  return to_address_.Get();
}
inline void Message_Send::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Send::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Send.to_address)
}
inline void Message_Send::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Send.to_address)
}
inline void Message_Send::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Send.to_address)
}
inline std::string* Message_Send::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Send::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Send.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Send::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Send.to_address)
}

// repeated .TW.Cosmos.Proto.Amount amounts = 3;
inline int Message_Send::_internal_amounts_size() const {
  return amounts_.size();
}
inline int Message_Send::amounts_size() const {
  return _internal_amounts_size();
}
inline void Message_Send::clear_amounts() {
  amounts_.Clear();
}
inline ::TW::Cosmos::Proto::Amount* Message_Send::mutable_amounts(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Send.amounts)
  return amounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
Message_Send::mutable_amounts() {
  // @@protoc_insertion_point(field_mutable_list:TW.Cosmos.Proto.Message.Send.amounts)
  return &amounts_;
}
inline const ::TW::Cosmos::Proto::Amount& Message_Send::_internal_amounts(int index) const {
  return amounts_.Get(index);
}
inline const ::TW::Cosmos::Proto::Amount& Message_Send::amounts(int index) const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Send.amounts)
  return _internal_amounts(index);
}
inline ::TW::Cosmos::Proto::Amount* Message_Send::_internal_add_amounts() {
  return amounts_.Add();
}
inline ::TW::Cosmos::Proto::Amount* Message_Send::add_amounts() {
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.Send.amounts)
  return _internal_add_amounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
Message_Send::amounts() const {
  // @@protoc_insertion_point(field_list:TW.Cosmos.Proto.Message.Send.amounts)
  return amounts_;
}

// string type_prefix = 4;
inline void Message_Send::clear_type_prefix() {
  type_prefix_.ClearToEmpty();
}
inline const std::string& Message_Send::type_prefix() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Send.type_prefix)
  return _internal_type_prefix();
}
inline void Message_Send::set_type_prefix(const std::string& value) {
  _internal_set_type_prefix(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Send.type_prefix)
}
inline std::string* Message_Send::mutable_type_prefix() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Send.type_prefix)
  return _internal_mutable_type_prefix();
}
inline const std::string& Message_Send::_internal_type_prefix() const {
  return type_prefix_.Get();
}
inline void Message_Send::_internal_set_type_prefix(const std::string& value) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Send::set_type_prefix(std::string&& value) {
  
  type_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Send.type_prefix)
}
inline void Message_Send::set_type_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Send.type_prefix)
}
inline void Message_Send::set_type_prefix(const char* value,
    size_t size) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Send.type_prefix)
}
inline std::string* Message_Send::_internal_mutable_type_prefix() {
  
  return type_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Send::release_type_prefix() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Send.type_prefix)
  return type_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Send::set_allocated_type_prefix(std::string* type_prefix) {
  if (type_prefix != nullptr) {
    
  } else {
    
  }
  type_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Send.type_prefix)
}

// -------------------------------------------------------------------

// Message_Transfer

// string source_port = 1;
inline void Message_Transfer::clear_source_port() {
  source_port_.ClearToEmpty();
}
inline const std::string& Message_Transfer::source_port() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Transfer.source_port)
  return _internal_source_port();
}
inline void Message_Transfer::set_source_port(const std::string& value) {
  _internal_set_source_port(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Transfer.source_port)
}
inline std::string* Message_Transfer::mutable_source_port() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Transfer.source_port)
  return _internal_mutable_source_port();
}
inline const std::string& Message_Transfer::_internal_source_port() const {
  return source_port_.Get();
}
inline void Message_Transfer::_internal_set_source_port(const std::string& value) {
  
  source_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Transfer::set_source_port(std::string&& value) {
  
  source_port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Transfer.source_port)
}
inline void Message_Transfer::set_source_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Transfer.source_port)
}
inline void Message_Transfer::set_source_port(const char* value,
    size_t size) {
  
  source_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Transfer.source_port)
}
inline std::string* Message_Transfer::_internal_mutable_source_port() {
  
  return source_port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Transfer::release_source_port() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Transfer.source_port)
  return source_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Transfer::set_allocated_source_port(std::string* source_port) {
  if (source_port != nullptr) {
    
  } else {
    
  }
  source_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Transfer.source_port)
}

// string source_channel = 2;
inline void Message_Transfer::clear_source_channel() {
  source_channel_.ClearToEmpty();
}
inline const std::string& Message_Transfer::source_channel() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Transfer.source_channel)
  return _internal_source_channel();
}
inline void Message_Transfer::set_source_channel(const std::string& value) {
  _internal_set_source_channel(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Transfer.source_channel)
}
inline std::string* Message_Transfer::mutable_source_channel() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Transfer.source_channel)
  return _internal_mutable_source_channel();
}
inline const std::string& Message_Transfer::_internal_source_channel() const {
  return source_channel_.Get();
}
inline void Message_Transfer::_internal_set_source_channel(const std::string& value) {
  
  source_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Transfer::set_source_channel(std::string&& value) {
  
  source_channel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Transfer.source_channel)
}
inline void Message_Transfer::set_source_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Transfer.source_channel)
}
inline void Message_Transfer::set_source_channel(const char* value,
    size_t size) {
  
  source_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Transfer.source_channel)
}
inline std::string* Message_Transfer::_internal_mutable_source_channel() {
  
  return source_channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Transfer::release_source_channel() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Transfer.source_channel)
  return source_channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Transfer::set_allocated_source_channel(std::string* source_channel) {
  if (source_channel != nullptr) {
    
  } else {
    
  }
  source_channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_channel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Transfer.source_channel)
}

// .TW.Cosmos.Proto.Amount token = 3;
inline bool Message_Transfer::_internal_has_token() const {
  return this != internal_default_instance() && token_ != nullptr;
}
inline bool Message_Transfer::has_token() const {
  return _internal_has_token();
}
inline void Message_Transfer::clear_token() {
  if (GetArena() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
inline const ::TW::Cosmos::Proto::Amount& Message_Transfer::_internal_token() const {
  const ::TW::Cosmos::Proto::Amount* p = token_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Cosmos::Proto::Amount&>(
      ::TW::Cosmos::Proto::_Amount_default_instance_);
}
inline const ::TW::Cosmos::Proto::Amount& Message_Transfer::token() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Transfer.token)
  return _internal_token();
}
inline void Message_Transfer::unsafe_arena_set_allocated_token(
    ::TW::Cosmos::Proto::Amount* token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  token_ = token;
  if (token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.Transfer.token)
}
inline ::TW::Cosmos::Proto::Amount* Message_Transfer::release_token() {
  
  ::TW::Cosmos::Proto::Amount* temp = token_;
  token_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_Transfer::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Transfer.token)
  
  ::TW::Cosmos::Proto::Amount* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_Transfer::_internal_mutable_token() {
  
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Cosmos::Proto::Amount>(GetArena());
    token_ = p;
  }
  return token_;
}
inline ::TW::Cosmos::Proto::Amount* Message_Transfer::mutable_token() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Transfer.token)
  return _internal_mutable_token();
}
inline void Message_Transfer::set_allocated_token(::TW::Cosmos::Proto::Amount* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Transfer.token)
}

// string sender = 4;
inline void Message_Transfer::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& Message_Transfer::sender() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Transfer.sender)
  return _internal_sender();
}
inline void Message_Transfer::set_sender(const std::string& value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Transfer.sender)
}
inline std::string* Message_Transfer::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Transfer.sender)
  return _internal_mutable_sender();
}
inline const std::string& Message_Transfer::_internal_sender() const {
  return sender_.Get();
}
inline void Message_Transfer::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Transfer::set_sender(std::string&& value) {
  
  sender_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Transfer.sender)
}
inline void Message_Transfer::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Transfer.sender)
}
inline void Message_Transfer::set_sender(const char* value,
    size_t size) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Transfer.sender)
}
inline std::string* Message_Transfer::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Transfer::release_sender() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Transfer.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Transfer::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Transfer.sender)
}

// string receiver = 5;
inline void Message_Transfer::clear_receiver() {
  receiver_.ClearToEmpty();
}
inline const std::string& Message_Transfer::receiver() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Transfer.receiver)
  return _internal_receiver();
}
inline void Message_Transfer::set_receiver(const std::string& value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Transfer.receiver)
}
inline std::string* Message_Transfer::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Transfer.receiver)
  return _internal_mutable_receiver();
}
inline const std::string& Message_Transfer::_internal_receiver() const {
  return receiver_.Get();
}
inline void Message_Transfer::_internal_set_receiver(const std::string& value) {
  
  receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Transfer::set_receiver(std::string&& value) {
  
  receiver_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Transfer.receiver)
}
inline void Message_Transfer::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Transfer.receiver)
}
inline void Message_Transfer::set_receiver(const char* value,
    size_t size) {
  
  receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Transfer.receiver)
}
inline std::string* Message_Transfer::_internal_mutable_receiver() {
  
  return receiver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Transfer::release_receiver() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Transfer.receiver)
  return receiver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Transfer::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Transfer.receiver)
}

// .TW.Cosmos.Proto.Height timeout_height = 6;
inline bool Message_Transfer::_internal_has_timeout_height() const {
  return this != internal_default_instance() && timeout_height_ != nullptr;
}
inline bool Message_Transfer::has_timeout_height() const {
  return _internal_has_timeout_height();
}
inline void Message_Transfer::clear_timeout_height() {
  if (GetArena() == nullptr && timeout_height_ != nullptr) {
    delete timeout_height_;
  }
  timeout_height_ = nullptr;
}
inline const ::TW::Cosmos::Proto::Height& Message_Transfer::_internal_timeout_height() const {
  const ::TW::Cosmos::Proto::Height* p = timeout_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Cosmos::Proto::Height&>(
      ::TW::Cosmos::Proto::_Height_default_instance_);
}
inline const ::TW::Cosmos::Proto::Height& Message_Transfer::timeout_height() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Transfer.timeout_height)
  return _internal_timeout_height();
}
inline void Message_Transfer::unsafe_arena_set_allocated_timeout_height(
    ::TW::Cosmos::Proto::Height* timeout_height) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_height_);
  }
  timeout_height_ = timeout_height;
  if (timeout_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.Transfer.timeout_height)
}
inline ::TW::Cosmos::Proto::Height* Message_Transfer::release_timeout_height() {
  
  ::TW::Cosmos::Proto::Height* temp = timeout_height_;
  timeout_height_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Cosmos::Proto::Height* Message_Transfer::unsafe_arena_release_timeout_height() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Transfer.timeout_height)
  
  ::TW::Cosmos::Proto::Height* temp = timeout_height_;
  timeout_height_ = nullptr;
  return temp;
}
inline ::TW::Cosmos::Proto::Height* Message_Transfer::_internal_mutable_timeout_height() {
  
  if (timeout_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Cosmos::Proto::Height>(GetArena());
    timeout_height_ = p;
  }
  return timeout_height_;
}
inline ::TW::Cosmos::Proto::Height* Message_Transfer::mutable_timeout_height() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Transfer.timeout_height)
  return _internal_mutable_timeout_height();
}
inline void Message_Transfer::set_allocated_timeout_height(::TW::Cosmos::Proto::Height* timeout_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timeout_height_;
  }
  if (timeout_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timeout_height);
    if (message_arena != submessage_arena) {
      timeout_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout_height, submessage_arena);
    }
    
  } else {
    
  }
  timeout_height_ = timeout_height;
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Transfer.timeout_height)
}

// uint64 timeout_timestamp = 7;
inline void Message_Transfer::clear_timeout_timestamp() {
  timeout_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message_Transfer::_internal_timeout_timestamp() const {
  return timeout_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message_Transfer::timeout_timestamp() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Transfer.timeout_timestamp)
  return _internal_timeout_timestamp();
}
inline void Message_Transfer::_internal_set_timeout_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timeout_timestamp_ = value;
}
inline void Message_Transfer::set_timeout_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeout_timestamp(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Transfer.timeout_timestamp)
}

// -------------------------------------------------------------------

// Message_Delegate

// string delegator_address = 1;
inline void Message_Delegate::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& Message_Delegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Delegate.delegator_address)
  return _internal_delegator_address();
}
inline void Message_Delegate::set_delegator_address(const std::string& value) {
  _internal_set_delegator_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Delegate.delegator_address)
}
inline std::string* Message_Delegate::mutable_delegator_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Delegate.delegator_address)
  return _internal_mutable_delegator_address();
}
inline const std::string& Message_Delegate::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void Message_Delegate::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Delegate::set_delegator_address(std::string&& value) {
  
  delegator_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Delegate.delegator_address)
}
inline void Message_Delegate::set_delegator_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Delegate.delegator_address)
}
inline void Message_Delegate::set_delegator_address(const char* value,
    size_t size) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Delegate.delegator_address)
}
inline std::string* Message_Delegate::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Delegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Delegate.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Delegate::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Delegate.delegator_address)
}

// string validator_address = 2;
inline void Message_Delegate::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& Message_Delegate::validator_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Delegate.validator_address)
  return _internal_validator_address();
}
inline void Message_Delegate::set_validator_address(const std::string& value) {
  _internal_set_validator_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Delegate.validator_address)
}
inline std::string* Message_Delegate::mutable_validator_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Delegate.validator_address)
  return _internal_mutable_validator_address();
}
inline const std::string& Message_Delegate::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void Message_Delegate::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Delegate::set_validator_address(std::string&& value) {
  
  validator_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Delegate.validator_address)
}
inline void Message_Delegate::set_validator_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Delegate.validator_address)
}
inline void Message_Delegate::set_validator_address(const char* value,
    size_t size) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Delegate.validator_address)
}
inline std::string* Message_Delegate::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Delegate::release_validator_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Delegate.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Delegate::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Delegate.validator_address)
}

// .TW.Cosmos.Proto.Amount amount = 3;
inline bool Message_Delegate::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool Message_Delegate::has_amount() const {
  return _internal_has_amount();
}
inline void Message_Delegate::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::TW::Cosmos::Proto::Amount& Message_Delegate::_internal_amount() const {
  const ::TW::Cosmos::Proto::Amount* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Cosmos::Proto::Amount&>(
      ::TW::Cosmos::Proto::_Amount_default_instance_);
}
inline const ::TW::Cosmos::Proto::Amount& Message_Delegate::amount() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Delegate.amount)
  return _internal_amount();
}
inline void Message_Delegate::unsafe_arena_set_allocated_amount(
    ::TW::Cosmos::Proto::Amount* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.Delegate.amount)
}
inline ::TW::Cosmos::Proto::Amount* Message_Delegate::release_amount() {
  
  ::TW::Cosmos::Proto::Amount* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_Delegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Delegate.amount)
  
  ::TW::Cosmos::Proto::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_Delegate::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Cosmos::Proto::Amount>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::TW::Cosmos::Proto::Amount* Message_Delegate::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Delegate.amount)
  return _internal_mutable_amount();
}
inline void Message_Delegate::set_allocated_amount(::TW::Cosmos::Proto::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Delegate.amount)
}

// string type_prefix = 4;
inline void Message_Delegate::clear_type_prefix() {
  type_prefix_.ClearToEmpty();
}
inline const std::string& Message_Delegate::type_prefix() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Delegate.type_prefix)
  return _internal_type_prefix();
}
inline void Message_Delegate::set_type_prefix(const std::string& value) {
  _internal_set_type_prefix(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Delegate.type_prefix)
}
inline std::string* Message_Delegate::mutable_type_prefix() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Delegate.type_prefix)
  return _internal_mutable_type_prefix();
}
inline const std::string& Message_Delegate::_internal_type_prefix() const {
  return type_prefix_.Get();
}
inline void Message_Delegate::_internal_set_type_prefix(const std::string& value) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Delegate::set_type_prefix(std::string&& value) {
  
  type_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Delegate.type_prefix)
}
inline void Message_Delegate::set_type_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Delegate.type_prefix)
}
inline void Message_Delegate::set_type_prefix(const char* value,
    size_t size) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Delegate.type_prefix)
}
inline std::string* Message_Delegate::_internal_mutable_type_prefix() {
  
  return type_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Delegate::release_type_prefix() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Delegate.type_prefix)
  return type_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Delegate::set_allocated_type_prefix(std::string* type_prefix) {
  if (type_prefix != nullptr) {
    
  } else {
    
  }
  type_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Delegate.type_prefix)
}

// -------------------------------------------------------------------

// Message_Undelegate

// string delegator_address = 1;
inline void Message_Undelegate::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& Message_Undelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Undelegate.delegator_address)
  return _internal_delegator_address();
}
inline void Message_Undelegate::set_delegator_address(const std::string& value) {
  _internal_set_delegator_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Undelegate.delegator_address)
}
inline std::string* Message_Undelegate::mutable_delegator_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Undelegate.delegator_address)
  return _internal_mutable_delegator_address();
}
inline const std::string& Message_Undelegate::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void Message_Undelegate::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Undelegate::set_delegator_address(std::string&& value) {
  
  delegator_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Undelegate.delegator_address)
}
inline void Message_Undelegate::set_delegator_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Undelegate.delegator_address)
}
inline void Message_Undelegate::set_delegator_address(const char* value,
    size_t size) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Undelegate.delegator_address)
}
inline std::string* Message_Undelegate::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Undelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Undelegate.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Undelegate::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Undelegate.delegator_address)
}

// string validator_address = 2;
inline void Message_Undelegate::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& Message_Undelegate::validator_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Undelegate.validator_address)
  return _internal_validator_address();
}
inline void Message_Undelegate::set_validator_address(const std::string& value) {
  _internal_set_validator_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Undelegate.validator_address)
}
inline std::string* Message_Undelegate::mutable_validator_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Undelegate.validator_address)
  return _internal_mutable_validator_address();
}
inline const std::string& Message_Undelegate::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void Message_Undelegate::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Undelegate::set_validator_address(std::string&& value) {
  
  validator_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Undelegate.validator_address)
}
inline void Message_Undelegate::set_validator_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Undelegate.validator_address)
}
inline void Message_Undelegate::set_validator_address(const char* value,
    size_t size) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Undelegate.validator_address)
}
inline std::string* Message_Undelegate::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Undelegate::release_validator_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Undelegate.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Undelegate::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Undelegate.validator_address)
}

// .TW.Cosmos.Proto.Amount amount = 3;
inline bool Message_Undelegate::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool Message_Undelegate::has_amount() const {
  return _internal_has_amount();
}
inline void Message_Undelegate::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::TW::Cosmos::Proto::Amount& Message_Undelegate::_internal_amount() const {
  const ::TW::Cosmos::Proto::Amount* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Cosmos::Proto::Amount&>(
      ::TW::Cosmos::Proto::_Amount_default_instance_);
}
inline const ::TW::Cosmos::Proto::Amount& Message_Undelegate::amount() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Undelegate.amount)
  return _internal_amount();
}
inline void Message_Undelegate::unsafe_arena_set_allocated_amount(
    ::TW::Cosmos::Proto::Amount* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.Undelegate.amount)
}
inline ::TW::Cosmos::Proto::Amount* Message_Undelegate::release_amount() {
  
  ::TW::Cosmos::Proto::Amount* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_Undelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Undelegate.amount)
  
  ::TW::Cosmos::Proto::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_Undelegate::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Cosmos::Proto::Amount>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::TW::Cosmos::Proto::Amount* Message_Undelegate::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Undelegate.amount)
  return _internal_mutable_amount();
}
inline void Message_Undelegate::set_allocated_amount(::TW::Cosmos::Proto::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Undelegate.amount)
}

// string type_prefix = 4;
inline void Message_Undelegate::clear_type_prefix() {
  type_prefix_.ClearToEmpty();
}
inline const std::string& Message_Undelegate::type_prefix() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.Undelegate.type_prefix)
  return _internal_type_prefix();
}
inline void Message_Undelegate::set_type_prefix(const std::string& value) {
  _internal_set_type_prefix(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.Undelegate.type_prefix)
}
inline std::string* Message_Undelegate::mutable_type_prefix() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.Undelegate.type_prefix)
  return _internal_mutable_type_prefix();
}
inline const std::string& Message_Undelegate::_internal_type_prefix() const {
  return type_prefix_.Get();
}
inline void Message_Undelegate::_internal_set_type_prefix(const std::string& value) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_Undelegate::set_type_prefix(std::string&& value) {
  
  type_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.Undelegate.type_prefix)
}
inline void Message_Undelegate::set_type_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.Undelegate.type_prefix)
}
inline void Message_Undelegate::set_type_prefix(const char* value,
    size_t size) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.Undelegate.type_prefix)
}
inline std::string* Message_Undelegate::_internal_mutable_type_prefix() {
  
  return type_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_Undelegate::release_type_prefix() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.Undelegate.type_prefix)
  return type_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_Undelegate::set_allocated_type_prefix(std::string* type_prefix) {
  if (type_prefix != nullptr) {
    
  } else {
    
  }
  type_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.Undelegate.type_prefix)
}

// -------------------------------------------------------------------

// Message_BeginRedelegate

// string delegator_address = 1;
inline void Message_BeginRedelegate::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& Message_BeginRedelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.BeginRedelegate.delegator_address)
  return _internal_delegator_address();
}
inline void Message_BeginRedelegate::set_delegator_address(const std::string& value) {
  _internal_set_delegator_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.BeginRedelegate.delegator_address)
}
inline std::string* Message_BeginRedelegate::mutable_delegator_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.BeginRedelegate.delegator_address)
  return _internal_mutable_delegator_address();
}
inline const std::string& Message_BeginRedelegate::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void Message_BeginRedelegate::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_BeginRedelegate::set_delegator_address(std::string&& value) {
  
  delegator_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.BeginRedelegate.delegator_address)
}
inline void Message_BeginRedelegate::set_delegator_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.BeginRedelegate.delegator_address)
}
inline void Message_BeginRedelegate::set_delegator_address(const char* value,
    size_t size) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.BeginRedelegate.delegator_address)
}
inline std::string* Message_BeginRedelegate::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_BeginRedelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.BeginRedelegate.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_BeginRedelegate::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.BeginRedelegate.delegator_address)
}

// string validator_src_address = 2;
inline void Message_BeginRedelegate::clear_validator_src_address() {
  validator_src_address_.ClearToEmpty();
}
inline const std::string& Message_BeginRedelegate::validator_src_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.BeginRedelegate.validator_src_address)
  return _internal_validator_src_address();
}
inline void Message_BeginRedelegate::set_validator_src_address(const std::string& value) {
  _internal_set_validator_src_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.BeginRedelegate.validator_src_address)
}
inline std::string* Message_BeginRedelegate::mutable_validator_src_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.BeginRedelegate.validator_src_address)
  return _internal_mutable_validator_src_address();
}
inline const std::string& Message_BeginRedelegate::_internal_validator_src_address() const {
  return validator_src_address_.Get();
}
inline void Message_BeginRedelegate::_internal_set_validator_src_address(const std::string& value) {
  
  validator_src_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_BeginRedelegate::set_validator_src_address(std::string&& value) {
  
  validator_src_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.BeginRedelegate.validator_src_address)
}
inline void Message_BeginRedelegate::set_validator_src_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_src_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.BeginRedelegate.validator_src_address)
}
inline void Message_BeginRedelegate::set_validator_src_address(const char* value,
    size_t size) {
  
  validator_src_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.BeginRedelegate.validator_src_address)
}
inline std::string* Message_BeginRedelegate::_internal_mutable_validator_src_address() {
  
  return validator_src_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_BeginRedelegate::release_validator_src_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.BeginRedelegate.validator_src_address)
  return validator_src_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_BeginRedelegate::set_allocated_validator_src_address(std::string* validator_src_address) {
  if (validator_src_address != nullptr) {
    
  } else {
    
  }
  validator_src_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_src_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.BeginRedelegate.validator_src_address)
}

// string validator_dst_address = 3;
inline void Message_BeginRedelegate::clear_validator_dst_address() {
  validator_dst_address_.ClearToEmpty();
}
inline const std::string& Message_BeginRedelegate::validator_dst_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.BeginRedelegate.validator_dst_address)
  return _internal_validator_dst_address();
}
inline void Message_BeginRedelegate::set_validator_dst_address(const std::string& value) {
  _internal_set_validator_dst_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.BeginRedelegate.validator_dst_address)
}
inline std::string* Message_BeginRedelegate::mutable_validator_dst_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.BeginRedelegate.validator_dst_address)
  return _internal_mutable_validator_dst_address();
}
inline const std::string& Message_BeginRedelegate::_internal_validator_dst_address() const {
  return validator_dst_address_.Get();
}
inline void Message_BeginRedelegate::_internal_set_validator_dst_address(const std::string& value) {
  
  validator_dst_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_BeginRedelegate::set_validator_dst_address(std::string&& value) {
  
  validator_dst_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.BeginRedelegate.validator_dst_address)
}
inline void Message_BeginRedelegate::set_validator_dst_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_dst_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.BeginRedelegate.validator_dst_address)
}
inline void Message_BeginRedelegate::set_validator_dst_address(const char* value,
    size_t size) {
  
  validator_dst_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.BeginRedelegate.validator_dst_address)
}
inline std::string* Message_BeginRedelegate::_internal_mutable_validator_dst_address() {
  
  return validator_dst_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_BeginRedelegate::release_validator_dst_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.BeginRedelegate.validator_dst_address)
  return validator_dst_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_BeginRedelegate::set_allocated_validator_dst_address(std::string* validator_dst_address) {
  if (validator_dst_address != nullptr) {
    
  } else {
    
  }
  validator_dst_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_dst_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.BeginRedelegate.validator_dst_address)
}

// .TW.Cosmos.Proto.Amount amount = 4;
inline bool Message_BeginRedelegate::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool Message_BeginRedelegate::has_amount() const {
  return _internal_has_amount();
}
inline void Message_BeginRedelegate::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::TW::Cosmos::Proto::Amount& Message_BeginRedelegate::_internal_amount() const {
  const ::TW::Cosmos::Proto::Amount* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Cosmos::Proto::Amount&>(
      ::TW::Cosmos::Proto::_Amount_default_instance_);
}
inline const ::TW::Cosmos::Proto::Amount& Message_BeginRedelegate::amount() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.BeginRedelegate.amount)
  return _internal_amount();
}
inline void Message_BeginRedelegate::unsafe_arena_set_allocated_amount(
    ::TW::Cosmos::Proto::Amount* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.BeginRedelegate.amount)
}
inline ::TW::Cosmos::Proto::Amount* Message_BeginRedelegate::release_amount() {
  
  ::TW::Cosmos::Proto::Amount* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_BeginRedelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.BeginRedelegate.amount)
  
  ::TW::Cosmos::Proto::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_BeginRedelegate::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Cosmos::Proto::Amount>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::TW::Cosmos::Proto::Amount* Message_BeginRedelegate::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.BeginRedelegate.amount)
  return _internal_mutable_amount();
}
inline void Message_BeginRedelegate::set_allocated_amount(::TW::Cosmos::Proto::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.BeginRedelegate.amount)
}

// string type_prefix = 5;
inline void Message_BeginRedelegate::clear_type_prefix() {
  type_prefix_.ClearToEmpty();
}
inline const std::string& Message_BeginRedelegate::type_prefix() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.BeginRedelegate.type_prefix)
  return _internal_type_prefix();
}
inline void Message_BeginRedelegate::set_type_prefix(const std::string& value) {
  _internal_set_type_prefix(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.BeginRedelegate.type_prefix)
}
inline std::string* Message_BeginRedelegate::mutable_type_prefix() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.BeginRedelegate.type_prefix)
  return _internal_mutable_type_prefix();
}
inline const std::string& Message_BeginRedelegate::_internal_type_prefix() const {
  return type_prefix_.Get();
}
inline void Message_BeginRedelegate::_internal_set_type_prefix(const std::string& value) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_BeginRedelegate::set_type_prefix(std::string&& value) {
  
  type_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.BeginRedelegate.type_prefix)
}
inline void Message_BeginRedelegate::set_type_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.BeginRedelegate.type_prefix)
}
inline void Message_BeginRedelegate::set_type_prefix(const char* value,
    size_t size) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.BeginRedelegate.type_prefix)
}
inline std::string* Message_BeginRedelegate::_internal_mutable_type_prefix() {
  
  return type_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_BeginRedelegate::release_type_prefix() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.BeginRedelegate.type_prefix)
  return type_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_BeginRedelegate::set_allocated_type_prefix(std::string* type_prefix) {
  if (type_prefix != nullptr) {
    
  } else {
    
  }
  type_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.BeginRedelegate.type_prefix)
}

// -------------------------------------------------------------------

// Message_WithdrawDelegationReward

// string delegator_address = 1;
inline void Message_WithdrawDelegationReward::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& Message_WithdrawDelegationReward::delegator_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WithdrawDelegationReward.delegator_address)
  return _internal_delegator_address();
}
inline void Message_WithdrawDelegationReward::set_delegator_address(const std::string& value) {
  _internal_set_delegator_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WithdrawDelegationReward.delegator_address)
}
inline std::string* Message_WithdrawDelegationReward::mutable_delegator_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WithdrawDelegationReward.delegator_address)
  return _internal_mutable_delegator_address();
}
inline const std::string& Message_WithdrawDelegationReward::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void Message_WithdrawDelegationReward::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WithdrawDelegationReward::set_delegator_address(std::string&& value) {
  
  delegator_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WithdrawDelegationReward.delegator_address)
}
inline void Message_WithdrawDelegationReward::set_delegator_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WithdrawDelegationReward.delegator_address)
}
inline void Message_WithdrawDelegationReward::set_delegator_address(const char* value,
    size_t size) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WithdrawDelegationReward.delegator_address)
}
inline std::string* Message_WithdrawDelegationReward::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WithdrawDelegationReward::release_delegator_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WithdrawDelegationReward.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WithdrawDelegationReward::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WithdrawDelegationReward.delegator_address)
}

// string validator_address = 2;
inline void Message_WithdrawDelegationReward::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& Message_WithdrawDelegationReward::validator_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WithdrawDelegationReward.validator_address)
  return _internal_validator_address();
}
inline void Message_WithdrawDelegationReward::set_validator_address(const std::string& value) {
  _internal_set_validator_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WithdrawDelegationReward.validator_address)
}
inline std::string* Message_WithdrawDelegationReward::mutable_validator_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WithdrawDelegationReward.validator_address)
  return _internal_mutable_validator_address();
}
inline const std::string& Message_WithdrawDelegationReward::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void Message_WithdrawDelegationReward::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WithdrawDelegationReward::set_validator_address(std::string&& value) {
  
  validator_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WithdrawDelegationReward.validator_address)
}
inline void Message_WithdrawDelegationReward::set_validator_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WithdrawDelegationReward.validator_address)
}
inline void Message_WithdrawDelegationReward::set_validator_address(const char* value,
    size_t size) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WithdrawDelegationReward.validator_address)
}
inline std::string* Message_WithdrawDelegationReward::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WithdrawDelegationReward::release_validator_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WithdrawDelegationReward.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WithdrawDelegationReward::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WithdrawDelegationReward.validator_address)
}

// string type_prefix = 3;
inline void Message_WithdrawDelegationReward::clear_type_prefix() {
  type_prefix_.ClearToEmpty();
}
inline const std::string& Message_WithdrawDelegationReward::type_prefix() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WithdrawDelegationReward.type_prefix)
  return _internal_type_prefix();
}
inline void Message_WithdrawDelegationReward::set_type_prefix(const std::string& value) {
  _internal_set_type_prefix(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WithdrawDelegationReward.type_prefix)
}
inline std::string* Message_WithdrawDelegationReward::mutable_type_prefix() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WithdrawDelegationReward.type_prefix)
  return _internal_mutable_type_prefix();
}
inline const std::string& Message_WithdrawDelegationReward::_internal_type_prefix() const {
  return type_prefix_.Get();
}
inline void Message_WithdrawDelegationReward::_internal_set_type_prefix(const std::string& value) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WithdrawDelegationReward::set_type_prefix(std::string&& value) {
  
  type_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WithdrawDelegationReward.type_prefix)
}
inline void Message_WithdrawDelegationReward::set_type_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WithdrawDelegationReward.type_prefix)
}
inline void Message_WithdrawDelegationReward::set_type_prefix(const char* value,
    size_t size) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WithdrawDelegationReward.type_prefix)
}
inline std::string* Message_WithdrawDelegationReward::_internal_mutable_type_prefix() {
  
  return type_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WithdrawDelegationReward::release_type_prefix() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WithdrawDelegationReward.type_prefix)
  return type_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WithdrawDelegationReward::set_allocated_type_prefix(std::string* type_prefix) {
  if (type_prefix != nullptr) {
    
  } else {
    
  }
  type_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WithdrawDelegationReward.type_prefix)
}

// -------------------------------------------------------------------

// Message_WasmTerraExecuteContractTransfer

// string sender_address = 1;
inline void Message_WasmTerraExecuteContractTransfer::clear_sender_address() {
  sender_address_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractTransfer::sender_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.sender_address)
  return _internal_sender_address();
}
inline void Message_WasmTerraExecuteContractTransfer::set_sender_address(const std::string& value) {
  _internal_set_sender_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.sender_address)
}
inline std::string* Message_WasmTerraExecuteContractTransfer::mutable_sender_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.sender_address)
  return _internal_mutable_sender_address();
}
inline const std::string& Message_WasmTerraExecuteContractTransfer::_internal_sender_address() const {
  return sender_address_.Get();
}
inline void Message_WasmTerraExecuteContractTransfer::_internal_set_sender_address(const std::string& value) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractTransfer::set_sender_address(std::string&& value) {
  
  sender_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.sender_address)
}
inline void Message_WasmTerraExecuteContractTransfer::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.sender_address)
}
inline void Message_WasmTerraExecuteContractTransfer::set_sender_address(const char* value,
    size_t size) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.sender_address)
}
inline std::string* Message_WasmTerraExecuteContractTransfer::_internal_mutable_sender_address() {
  
  return sender_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractTransfer::release_sender_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.sender_address)
  return sender_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractTransfer::set_allocated_sender_address(std::string* sender_address) {
  if (sender_address != nullptr) {
    
  } else {
    
  }
  sender_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.sender_address)
}

// string contract_address = 2;
inline void Message_WasmTerraExecuteContractTransfer::clear_contract_address() {
  contract_address_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractTransfer::contract_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.contract_address)
  return _internal_contract_address();
}
inline void Message_WasmTerraExecuteContractTransfer::set_contract_address(const std::string& value) {
  _internal_set_contract_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.contract_address)
}
inline std::string* Message_WasmTerraExecuteContractTransfer::mutable_contract_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.contract_address)
  return _internal_mutable_contract_address();
}
inline const std::string& Message_WasmTerraExecuteContractTransfer::_internal_contract_address() const {
  return contract_address_.Get();
}
inline void Message_WasmTerraExecuteContractTransfer::_internal_set_contract_address(const std::string& value) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractTransfer::set_contract_address(std::string&& value) {
  
  contract_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.contract_address)
}
inline void Message_WasmTerraExecuteContractTransfer::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.contract_address)
}
inline void Message_WasmTerraExecuteContractTransfer::set_contract_address(const char* value,
    size_t size) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.contract_address)
}
inline std::string* Message_WasmTerraExecuteContractTransfer::_internal_mutable_contract_address() {
  
  return contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractTransfer::release_contract_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.contract_address)
  return contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractTransfer::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.contract_address)
}

// bytes amount = 3;
inline void Message_WasmTerraExecuteContractTransfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.amount)
  return _internal_amount();
}
inline void Message_WasmTerraExecuteContractTransfer::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.amount)
}
inline std::string* Message_WasmTerraExecuteContractTransfer::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.amount)
  return _internal_mutable_amount();
}
inline const std::string& Message_WasmTerraExecuteContractTransfer::_internal_amount() const {
  return amount_.Get();
}
inline void Message_WasmTerraExecuteContractTransfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractTransfer::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.amount)
}
inline void Message_WasmTerraExecuteContractTransfer::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.amount)
}
inline void Message_WasmTerraExecuteContractTransfer::set_amount(const void* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.amount)
}
inline std::string* Message_WasmTerraExecuteContractTransfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractTransfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractTransfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.amount)
}

// string recipient_address = 4;
inline void Message_WasmTerraExecuteContractTransfer::clear_recipient_address() {
  recipient_address_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractTransfer::recipient_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.recipient_address)
  return _internal_recipient_address();
}
inline void Message_WasmTerraExecuteContractTransfer::set_recipient_address(const std::string& value) {
  _internal_set_recipient_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.recipient_address)
}
inline std::string* Message_WasmTerraExecuteContractTransfer::mutable_recipient_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.recipient_address)
  return _internal_mutable_recipient_address();
}
inline const std::string& Message_WasmTerraExecuteContractTransfer::_internal_recipient_address() const {
  return recipient_address_.Get();
}
inline void Message_WasmTerraExecuteContractTransfer::_internal_set_recipient_address(const std::string& value) {
  
  recipient_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractTransfer::set_recipient_address(std::string&& value) {
  
  recipient_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.recipient_address)
}
inline void Message_WasmTerraExecuteContractTransfer::set_recipient_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.recipient_address)
}
inline void Message_WasmTerraExecuteContractTransfer::set_recipient_address(const char* value,
    size_t size) {
  
  recipient_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.recipient_address)
}
inline std::string* Message_WasmTerraExecuteContractTransfer::_internal_mutable_recipient_address() {
  
  return recipient_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractTransfer::release_recipient_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.recipient_address)
  return recipient_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractTransfer::set_allocated_recipient_address(std::string* recipient_address) {
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer.recipient_address)
}

// -------------------------------------------------------------------

// Message_WasmTerraExecuteContractSend

// string sender_address = 1;
inline void Message_WasmTerraExecuteContractSend::clear_sender_address() {
  sender_address_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractSend::sender_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.sender_address)
  return _internal_sender_address();
}
inline void Message_WasmTerraExecuteContractSend::set_sender_address(const std::string& value) {
  _internal_set_sender_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.sender_address)
}
inline std::string* Message_WasmTerraExecuteContractSend::mutable_sender_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.sender_address)
  return _internal_mutable_sender_address();
}
inline const std::string& Message_WasmTerraExecuteContractSend::_internal_sender_address() const {
  return sender_address_.Get();
}
inline void Message_WasmTerraExecuteContractSend::_internal_set_sender_address(const std::string& value) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_sender_address(std::string&& value) {
  
  sender_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.sender_address)
}
inline void Message_WasmTerraExecuteContractSend::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.sender_address)
}
inline void Message_WasmTerraExecuteContractSend::set_sender_address(const char* value,
    size_t size) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.sender_address)
}
inline std::string* Message_WasmTerraExecuteContractSend::_internal_mutable_sender_address() {
  
  return sender_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractSend::release_sender_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.sender_address)
  return sender_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_allocated_sender_address(std::string* sender_address) {
  if (sender_address != nullptr) {
    
  } else {
    
  }
  sender_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.sender_address)
}

// string contract_address = 2;
inline void Message_WasmTerraExecuteContractSend::clear_contract_address() {
  contract_address_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractSend::contract_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.contract_address)
  return _internal_contract_address();
}
inline void Message_WasmTerraExecuteContractSend::set_contract_address(const std::string& value) {
  _internal_set_contract_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.contract_address)
}
inline std::string* Message_WasmTerraExecuteContractSend::mutable_contract_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.contract_address)
  return _internal_mutable_contract_address();
}
inline const std::string& Message_WasmTerraExecuteContractSend::_internal_contract_address() const {
  return contract_address_.Get();
}
inline void Message_WasmTerraExecuteContractSend::_internal_set_contract_address(const std::string& value) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_contract_address(std::string&& value) {
  
  contract_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.contract_address)
}
inline void Message_WasmTerraExecuteContractSend::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.contract_address)
}
inline void Message_WasmTerraExecuteContractSend::set_contract_address(const char* value,
    size_t size) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.contract_address)
}
inline std::string* Message_WasmTerraExecuteContractSend::_internal_mutable_contract_address() {
  
  return contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractSend::release_contract_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.contract_address)
  return contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.contract_address)
}

// bytes amount = 3;
inline void Message_WasmTerraExecuteContractSend::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractSend::amount() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.amount)
  return _internal_amount();
}
inline void Message_WasmTerraExecuteContractSend::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.amount)
}
inline std::string* Message_WasmTerraExecuteContractSend::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.amount)
  return _internal_mutable_amount();
}
inline const std::string& Message_WasmTerraExecuteContractSend::_internal_amount() const {
  return amount_.Get();
}
inline void Message_WasmTerraExecuteContractSend::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.amount)
}
inline void Message_WasmTerraExecuteContractSend::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.amount)
}
inline void Message_WasmTerraExecuteContractSend::set_amount(const void* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.amount)
}
inline std::string* Message_WasmTerraExecuteContractSend::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractSend::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.amount)
}

// string recipient_contract_address = 4;
inline void Message_WasmTerraExecuteContractSend::clear_recipient_contract_address() {
  recipient_contract_address_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractSend::recipient_contract_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.recipient_contract_address)
  return _internal_recipient_contract_address();
}
inline void Message_WasmTerraExecuteContractSend::set_recipient_contract_address(const std::string& value) {
  _internal_set_recipient_contract_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.recipient_contract_address)
}
inline std::string* Message_WasmTerraExecuteContractSend::mutable_recipient_contract_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.recipient_contract_address)
  return _internal_mutable_recipient_contract_address();
}
inline const std::string& Message_WasmTerraExecuteContractSend::_internal_recipient_contract_address() const {
  return recipient_contract_address_.Get();
}
inline void Message_WasmTerraExecuteContractSend::_internal_set_recipient_contract_address(const std::string& value) {
  
  recipient_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_recipient_contract_address(std::string&& value) {
  
  recipient_contract_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.recipient_contract_address)
}
inline void Message_WasmTerraExecuteContractSend::set_recipient_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.recipient_contract_address)
}
inline void Message_WasmTerraExecuteContractSend::set_recipient_contract_address(const char* value,
    size_t size) {
  
  recipient_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.recipient_contract_address)
}
inline std::string* Message_WasmTerraExecuteContractSend::_internal_mutable_recipient_contract_address() {
  
  return recipient_contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractSend::release_recipient_contract_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.recipient_contract_address)
  return recipient_contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_allocated_recipient_contract_address(std::string* recipient_contract_address) {
  if (recipient_contract_address != nullptr) {
    
  } else {
    
  }
  recipient_contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_contract_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.recipient_contract_address)
}

// string msg = 5;
inline void Message_WasmTerraExecuteContractSend::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractSend::msg() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.msg)
  return _internal_msg();
}
inline void Message_WasmTerraExecuteContractSend::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.msg)
}
inline std::string* Message_WasmTerraExecuteContractSend::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.msg)
  return _internal_mutable_msg();
}
inline const std::string& Message_WasmTerraExecuteContractSend::_internal_msg() const {
  return msg_.Get();
}
inline void Message_WasmTerraExecuteContractSend::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.msg)
}
inline void Message_WasmTerraExecuteContractSend::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.msg)
}
inline void Message_WasmTerraExecuteContractSend::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.msg)
}
inline std::string* Message_WasmTerraExecuteContractSend::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractSend::release_msg() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractSend::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.msg)
}

// repeated string coin = 6;
inline int Message_WasmTerraExecuteContractSend::_internal_coin_size() const {
  return coin_.size();
}
inline int Message_WasmTerraExecuteContractSend::coin_size() const {
  return _internal_coin_size();
}
inline void Message_WasmTerraExecuteContractSend::clear_coin() {
  coin_.Clear();
}
inline std::string* Message_WasmTerraExecuteContractSend::add_coin() {
  // @@protoc_insertion_point(field_add_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
  return _internal_add_coin();
}
inline const std::string& Message_WasmTerraExecuteContractSend::_internal_coin(int index) const {
  return coin_.Get(index);
}
inline const std::string& Message_WasmTerraExecuteContractSend::coin(int index) const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
  return _internal_coin(index);
}
inline std::string* Message_WasmTerraExecuteContractSend::mutable_coin(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
  return coin_.Mutable(index);
}
inline void Message_WasmTerraExecuteContractSend::set_coin(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
  coin_.Mutable(index)->assign(value);
}
inline void Message_WasmTerraExecuteContractSend::set_coin(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
  coin_.Mutable(index)->assign(std::move(value));
}
inline void Message_WasmTerraExecuteContractSend::set_coin(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  coin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
}
inline void Message_WasmTerraExecuteContractSend::set_coin(int index, const char* value, size_t size) {
  coin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
}
inline std::string* Message_WasmTerraExecuteContractSend::_internal_add_coin() {
  return coin_.Add();
}
inline void Message_WasmTerraExecuteContractSend::add_coin(const std::string& value) {
  coin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
}
inline void Message_WasmTerraExecuteContractSend::add_coin(std::string&& value) {
  coin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
}
inline void Message_WasmTerraExecuteContractSend::add_coin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  coin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
}
inline void Message_WasmTerraExecuteContractSend::add_coin(const char* value, size_t size) {
  coin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Message_WasmTerraExecuteContractSend::coin() const {
  // @@protoc_insertion_point(field_list:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Message_WasmTerraExecuteContractSend::mutable_coin() {
  // @@protoc_insertion_point(field_mutable_list:TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend.coin)
  return &coin_;
}

// -------------------------------------------------------------------

// Message_THORChainSend

// bytes from_address = 1;
inline void Message_THORChainSend::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& Message_THORChainSend::from_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.THORChainSend.from_address)
  return _internal_from_address();
}
inline void Message_THORChainSend::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.THORChainSend.from_address)
}
inline std::string* Message_THORChainSend::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.THORChainSend.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& Message_THORChainSend::_internal_from_address() const {
  return from_address_.Get();
}
inline void Message_THORChainSend::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_THORChainSend::set_from_address(std::string&& value) {
  
  from_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.THORChainSend.from_address)
}
inline void Message_THORChainSend::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.THORChainSend.from_address)
}
inline void Message_THORChainSend::set_from_address(const void* value,
    size_t size) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.THORChainSend.from_address)
}
inline std::string* Message_THORChainSend::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_THORChainSend::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.THORChainSend.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_THORChainSend::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.THORChainSend.from_address)
}

// bytes to_address = 2;
inline void Message_THORChainSend::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& Message_THORChainSend::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.THORChainSend.to_address)
  return _internal_to_address();
}
inline void Message_THORChainSend::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.THORChainSend.to_address)
}
inline std::string* Message_THORChainSend::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.THORChainSend.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& Message_THORChainSend::_internal_to_address() const {
  return to_address_.Get();
}
inline void Message_THORChainSend::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_THORChainSend::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.THORChainSend.to_address)
}
inline void Message_THORChainSend::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.THORChainSend.to_address)
}
inline void Message_THORChainSend::set_to_address(const void* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.THORChainSend.to_address)
}
inline std::string* Message_THORChainSend::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_THORChainSend::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.THORChainSend.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_THORChainSend::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.THORChainSend.to_address)
}

// repeated .TW.Cosmos.Proto.Amount amounts = 3;
inline int Message_THORChainSend::_internal_amounts_size() const {
  return amounts_.size();
}
inline int Message_THORChainSend::amounts_size() const {
  return _internal_amounts_size();
}
inline void Message_THORChainSend::clear_amounts() {
  amounts_.Clear();
}
inline ::TW::Cosmos::Proto::Amount* Message_THORChainSend::mutable_amounts(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.THORChainSend.amounts)
  return amounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
Message_THORChainSend::mutable_amounts() {
  // @@protoc_insertion_point(field_mutable_list:TW.Cosmos.Proto.Message.THORChainSend.amounts)
  return &amounts_;
}
inline const ::TW::Cosmos::Proto::Amount& Message_THORChainSend::_internal_amounts(int index) const {
  return amounts_.Get(index);
}
inline const ::TW::Cosmos::Proto::Amount& Message_THORChainSend::amounts(int index) const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.THORChainSend.amounts)
  return _internal_amounts(index);
}
inline ::TW::Cosmos::Proto::Amount* Message_THORChainSend::_internal_add_amounts() {
  return amounts_.Add();
}
inline ::TW::Cosmos::Proto::Amount* Message_THORChainSend::add_amounts() {
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.THORChainSend.amounts)
  return _internal_add_amounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
Message_THORChainSend::amounts() const {
  // @@protoc_insertion_point(field_list:TW.Cosmos.Proto.Message.THORChainSend.amounts)
  return amounts_;
}

// -------------------------------------------------------------------

// Message_WasmTerraExecuteContractGeneric

// string sender_address = 1;
inline void Message_WasmTerraExecuteContractGeneric::clear_sender_address() {
  sender_address_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractGeneric::sender_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.sender_address)
  return _internal_sender_address();
}
inline void Message_WasmTerraExecuteContractGeneric::set_sender_address(const std::string& value) {
  _internal_set_sender_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.sender_address)
}
inline std::string* Message_WasmTerraExecuteContractGeneric::mutable_sender_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.sender_address)
  return _internal_mutable_sender_address();
}
inline const std::string& Message_WasmTerraExecuteContractGeneric::_internal_sender_address() const {
  return sender_address_.Get();
}
inline void Message_WasmTerraExecuteContractGeneric::_internal_set_sender_address(const std::string& value) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractGeneric::set_sender_address(std::string&& value) {
  
  sender_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.sender_address)
}
inline void Message_WasmTerraExecuteContractGeneric::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.sender_address)
}
inline void Message_WasmTerraExecuteContractGeneric::set_sender_address(const char* value,
    size_t size) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.sender_address)
}
inline std::string* Message_WasmTerraExecuteContractGeneric::_internal_mutable_sender_address() {
  
  return sender_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractGeneric::release_sender_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.sender_address)
  return sender_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractGeneric::set_allocated_sender_address(std::string* sender_address) {
  if (sender_address != nullptr) {
    
  } else {
    
  }
  sender_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.sender_address)
}

// string contract_address = 2;
inline void Message_WasmTerraExecuteContractGeneric::clear_contract_address() {
  contract_address_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractGeneric::contract_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.contract_address)
  return _internal_contract_address();
}
inline void Message_WasmTerraExecuteContractGeneric::set_contract_address(const std::string& value) {
  _internal_set_contract_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.contract_address)
}
inline std::string* Message_WasmTerraExecuteContractGeneric::mutable_contract_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.contract_address)
  return _internal_mutable_contract_address();
}
inline const std::string& Message_WasmTerraExecuteContractGeneric::_internal_contract_address() const {
  return contract_address_.Get();
}
inline void Message_WasmTerraExecuteContractGeneric::_internal_set_contract_address(const std::string& value) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractGeneric::set_contract_address(std::string&& value) {
  
  contract_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.contract_address)
}
inline void Message_WasmTerraExecuteContractGeneric::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.contract_address)
}
inline void Message_WasmTerraExecuteContractGeneric::set_contract_address(const char* value,
    size_t size) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.contract_address)
}
inline std::string* Message_WasmTerraExecuteContractGeneric::_internal_mutable_contract_address() {
  
  return contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractGeneric::release_contract_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.contract_address)
  return contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractGeneric::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.contract_address)
}

// string execute_msg = 3;
inline void Message_WasmTerraExecuteContractGeneric::clear_execute_msg() {
  execute_msg_.ClearToEmpty();
}
inline const std::string& Message_WasmTerraExecuteContractGeneric::execute_msg() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.execute_msg)
  return _internal_execute_msg();
}
inline void Message_WasmTerraExecuteContractGeneric::set_execute_msg(const std::string& value) {
  _internal_set_execute_msg(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.execute_msg)
}
inline std::string* Message_WasmTerraExecuteContractGeneric::mutable_execute_msg() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.execute_msg)
  return _internal_mutable_execute_msg();
}
inline const std::string& Message_WasmTerraExecuteContractGeneric::_internal_execute_msg() const {
  return execute_msg_.Get();
}
inline void Message_WasmTerraExecuteContractGeneric::_internal_set_execute_msg(const std::string& value) {
  
  execute_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmTerraExecuteContractGeneric::set_execute_msg(std::string&& value) {
  
  execute_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.execute_msg)
}
inline void Message_WasmTerraExecuteContractGeneric::set_execute_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  execute_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.execute_msg)
}
inline void Message_WasmTerraExecuteContractGeneric::set_execute_msg(const char* value,
    size_t size) {
  
  execute_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.execute_msg)
}
inline std::string* Message_WasmTerraExecuteContractGeneric::_internal_mutable_execute_msg() {
  
  return execute_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmTerraExecuteContractGeneric::release_execute_msg() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.execute_msg)
  return execute_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmTerraExecuteContractGeneric::set_allocated_execute_msg(std::string* execute_msg) {
  if (execute_msg != nullptr) {
    
  } else {
    
  }
  execute_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), execute_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.execute_msg)
}

// repeated .TW.Cosmos.Proto.Amount coins = 5;
inline int Message_WasmTerraExecuteContractGeneric::_internal_coins_size() const {
  return coins_.size();
}
inline int Message_WasmTerraExecuteContractGeneric::coins_size() const {
  return _internal_coins_size();
}
inline void Message_WasmTerraExecuteContractGeneric::clear_coins() {
  coins_.Clear();
}
inline ::TW::Cosmos::Proto::Amount* Message_WasmTerraExecuteContractGeneric::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.coins)
  return coins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
Message_WasmTerraExecuteContractGeneric::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.coins)
  return &coins_;
}
inline const ::TW::Cosmos::Proto::Amount& Message_WasmTerraExecuteContractGeneric::_internal_coins(int index) const {
  return coins_.Get(index);
}
inline const ::TW::Cosmos::Proto::Amount& Message_WasmTerraExecuteContractGeneric::coins(int index) const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.coins)
  return _internal_coins(index);
}
inline ::TW::Cosmos::Proto::Amount* Message_WasmTerraExecuteContractGeneric::_internal_add_coins() {
  return coins_.Add();
}
inline ::TW::Cosmos::Proto::Amount* Message_WasmTerraExecuteContractGeneric::add_coins() {
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.coins)
  return _internal_add_coins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
Message_WasmTerraExecuteContractGeneric::coins() const {
  // @@protoc_insertion_point(field_list:TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric.coins)
  return coins_;
}

// -------------------------------------------------------------------

// Message_WasmExecuteContractTransfer

// string sender_address = 1;
inline void Message_WasmExecuteContractTransfer::clear_sender_address() {
  sender_address_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractTransfer::sender_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.sender_address)
  return _internal_sender_address();
}
inline void Message_WasmExecuteContractTransfer::set_sender_address(const std::string& value) {
  _internal_set_sender_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.sender_address)
}
inline std::string* Message_WasmExecuteContractTransfer::mutable_sender_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.sender_address)
  return _internal_mutable_sender_address();
}
inline const std::string& Message_WasmExecuteContractTransfer::_internal_sender_address() const {
  return sender_address_.Get();
}
inline void Message_WasmExecuteContractTransfer::_internal_set_sender_address(const std::string& value) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractTransfer::set_sender_address(std::string&& value) {
  
  sender_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.sender_address)
}
inline void Message_WasmExecuteContractTransfer::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.sender_address)
}
inline void Message_WasmExecuteContractTransfer::set_sender_address(const char* value,
    size_t size) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.sender_address)
}
inline std::string* Message_WasmExecuteContractTransfer::_internal_mutable_sender_address() {
  
  return sender_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractTransfer::release_sender_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.sender_address)
  return sender_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractTransfer::set_allocated_sender_address(std::string* sender_address) {
  if (sender_address != nullptr) {
    
  } else {
    
  }
  sender_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.sender_address)
}

// string contract_address = 2;
inline void Message_WasmExecuteContractTransfer::clear_contract_address() {
  contract_address_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractTransfer::contract_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.contract_address)
  return _internal_contract_address();
}
inline void Message_WasmExecuteContractTransfer::set_contract_address(const std::string& value) {
  _internal_set_contract_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.contract_address)
}
inline std::string* Message_WasmExecuteContractTransfer::mutable_contract_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.contract_address)
  return _internal_mutable_contract_address();
}
inline const std::string& Message_WasmExecuteContractTransfer::_internal_contract_address() const {
  return contract_address_.Get();
}
inline void Message_WasmExecuteContractTransfer::_internal_set_contract_address(const std::string& value) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractTransfer::set_contract_address(std::string&& value) {
  
  contract_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.contract_address)
}
inline void Message_WasmExecuteContractTransfer::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.contract_address)
}
inline void Message_WasmExecuteContractTransfer::set_contract_address(const char* value,
    size_t size) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.contract_address)
}
inline std::string* Message_WasmExecuteContractTransfer::_internal_mutable_contract_address() {
  
  return contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractTransfer::release_contract_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.contract_address)
  return contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractTransfer::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.contract_address)
}

// bytes amount = 3;
inline void Message_WasmExecuteContractTransfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.amount)
  return _internal_amount();
}
inline void Message_WasmExecuteContractTransfer::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.amount)
}
inline std::string* Message_WasmExecuteContractTransfer::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.amount)
  return _internal_mutable_amount();
}
inline const std::string& Message_WasmExecuteContractTransfer::_internal_amount() const {
  return amount_.Get();
}
inline void Message_WasmExecuteContractTransfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractTransfer::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.amount)
}
inline void Message_WasmExecuteContractTransfer::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.amount)
}
inline void Message_WasmExecuteContractTransfer::set_amount(const void* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.amount)
}
inline std::string* Message_WasmExecuteContractTransfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractTransfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractTransfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.amount)
}

// string recipient_address = 4;
inline void Message_WasmExecuteContractTransfer::clear_recipient_address() {
  recipient_address_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractTransfer::recipient_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.recipient_address)
  return _internal_recipient_address();
}
inline void Message_WasmExecuteContractTransfer::set_recipient_address(const std::string& value) {
  _internal_set_recipient_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.recipient_address)
}
inline std::string* Message_WasmExecuteContractTransfer::mutable_recipient_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.recipient_address)
  return _internal_mutable_recipient_address();
}
inline const std::string& Message_WasmExecuteContractTransfer::_internal_recipient_address() const {
  return recipient_address_.Get();
}
inline void Message_WasmExecuteContractTransfer::_internal_set_recipient_address(const std::string& value) {
  
  recipient_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractTransfer::set_recipient_address(std::string&& value) {
  
  recipient_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.recipient_address)
}
inline void Message_WasmExecuteContractTransfer::set_recipient_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.recipient_address)
}
inline void Message_WasmExecuteContractTransfer::set_recipient_address(const char* value,
    size_t size) {
  
  recipient_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.recipient_address)
}
inline std::string* Message_WasmExecuteContractTransfer::_internal_mutable_recipient_address() {
  
  return recipient_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractTransfer::release_recipient_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.recipient_address)
  return recipient_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractTransfer::set_allocated_recipient_address(std::string* recipient_address) {
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractTransfer.recipient_address)
}

// -------------------------------------------------------------------

// Message_WasmExecuteContractSend

// string sender_address = 1;
inline void Message_WasmExecuteContractSend::clear_sender_address() {
  sender_address_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractSend::sender_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractSend.sender_address)
  return _internal_sender_address();
}
inline void Message_WasmExecuteContractSend::set_sender_address(const std::string& value) {
  _internal_set_sender_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractSend.sender_address)
}
inline std::string* Message_WasmExecuteContractSend::mutable_sender_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractSend.sender_address)
  return _internal_mutable_sender_address();
}
inline const std::string& Message_WasmExecuteContractSend::_internal_sender_address() const {
  return sender_address_.Get();
}
inline void Message_WasmExecuteContractSend::_internal_set_sender_address(const std::string& value) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractSend::set_sender_address(std::string&& value) {
  
  sender_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractSend.sender_address)
}
inline void Message_WasmExecuteContractSend::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractSend.sender_address)
}
inline void Message_WasmExecuteContractSend::set_sender_address(const char* value,
    size_t size) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractSend.sender_address)
}
inline std::string* Message_WasmExecuteContractSend::_internal_mutable_sender_address() {
  
  return sender_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractSend::release_sender_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractSend.sender_address)
  return sender_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractSend::set_allocated_sender_address(std::string* sender_address) {
  if (sender_address != nullptr) {
    
  } else {
    
  }
  sender_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractSend.sender_address)
}

// string contract_address = 2;
inline void Message_WasmExecuteContractSend::clear_contract_address() {
  contract_address_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractSend::contract_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractSend.contract_address)
  return _internal_contract_address();
}
inline void Message_WasmExecuteContractSend::set_contract_address(const std::string& value) {
  _internal_set_contract_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractSend.contract_address)
}
inline std::string* Message_WasmExecuteContractSend::mutable_contract_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractSend.contract_address)
  return _internal_mutable_contract_address();
}
inline const std::string& Message_WasmExecuteContractSend::_internal_contract_address() const {
  return contract_address_.Get();
}
inline void Message_WasmExecuteContractSend::_internal_set_contract_address(const std::string& value) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractSend::set_contract_address(std::string&& value) {
  
  contract_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractSend.contract_address)
}
inline void Message_WasmExecuteContractSend::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractSend.contract_address)
}
inline void Message_WasmExecuteContractSend::set_contract_address(const char* value,
    size_t size) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractSend.contract_address)
}
inline std::string* Message_WasmExecuteContractSend::_internal_mutable_contract_address() {
  
  return contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractSend::release_contract_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractSend.contract_address)
  return contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractSend::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractSend.contract_address)
}

// bytes amount = 3;
inline void Message_WasmExecuteContractSend::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractSend::amount() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractSend.amount)
  return _internal_amount();
}
inline void Message_WasmExecuteContractSend::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractSend.amount)
}
inline std::string* Message_WasmExecuteContractSend::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractSend.amount)
  return _internal_mutable_amount();
}
inline const std::string& Message_WasmExecuteContractSend::_internal_amount() const {
  return amount_.Get();
}
inline void Message_WasmExecuteContractSend::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractSend::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractSend.amount)
}
inline void Message_WasmExecuteContractSend::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractSend.amount)
}
inline void Message_WasmExecuteContractSend::set_amount(const void* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractSend.amount)
}
inline std::string* Message_WasmExecuteContractSend::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractSend::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractSend.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractSend::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractSend.amount)
}

// string recipient_contract_address = 4;
inline void Message_WasmExecuteContractSend::clear_recipient_contract_address() {
  recipient_contract_address_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractSend::recipient_contract_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractSend.recipient_contract_address)
  return _internal_recipient_contract_address();
}
inline void Message_WasmExecuteContractSend::set_recipient_contract_address(const std::string& value) {
  _internal_set_recipient_contract_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractSend.recipient_contract_address)
}
inline std::string* Message_WasmExecuteContractSend::mutable_recipient_contract_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractSend.recipient_contract_address)
  return _internal_mutable_recipient_contract_address();
}
inline const std::string& Message_WasmExecuteContractSend::_internal_recipient_contract_address() const {
  return recipient_contract_address_.Get();
}
inline void Message_WasmExecuteContractSend::_internal_set_recipient_contract_address(const std::string& value) {
  
  recipient_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractSend::set_recipient_contract_address(std::string&& value) {
  
  recipient_contract_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractSend.recipient_contract_address)
}
inline void Message_WasmExecuteContractSend::set_recipient_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractSend.recipient_contract_address)
}
inline void Message_WasmExecuteContractSend::set_recipient_contract_address(const char* value,
    size_t size) {
  
  recipient_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractSend.recipient_contract_address)
}
inline std::string* Message_WasmExecuteContractSend::_internal_mutable_recipient_contract_address() {
  
  return recipient_contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractSend::release_recipient_contract_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractSend.recipient_contract_address)
  return recipient_contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractSend::set_allocated_recipient_contract_address(std::string* recipient_contract_address) {
  if (recipient_contract_address != nullptr) {
    
  } else {
    
  }
  recipient_contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_contract_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractSend.recipient_contract_address)
}

// string msg = 5;
inline void Message_WasmExecuteContractSend::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractSend::msg() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractSend.msg)
  return _internal_msg();
}
inline void Message_WasmExecuteContractSend::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractSend.msg)
}
inline std::string* Message_WasmExecuteContractSend::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractSend.msg)
  return _internal_mutable_msg();
}
inline const std::string& Message_WasmExecuteContractSend::_internal_msg() const {
  return msg_.Get();
}
inline void Message_WasmExecuteContractSend::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractSend::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractSend.msg)
}
inline void Message_WasmExecuteContractSend::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractSend.msg)
}
inline void Message_WasmExecuteContractSend::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractSend.msg)
}
inline std::string* Message_WasmExecuteContractSend::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractSend::release_msg() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractSend.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractSend::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractSend.msg)
}

// repeated string coin = 6;
inline int Message_WasmExecuteContractSend::_internal_coin_size() const {
  return coin_.size();
}
inline int Message_WasmExecuteContractSend::coin_size() const {
  return _internal_coin_size();
}
inline void Message_WasmExecuteContractSend::clear_coin() {
  coin_.Clear();
}
inline std::string* Message_WasmExecuteContractSend::add_coin() {
  // @@protoc_insertion_point(field_add_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
  return _internal_add_coin();
}
inline const std::string& Message_WasmExecuteContractSend::_internal_coin(int index) const {
  return coin_.Get(index);
}
inline const std::string& Message_WasmExecuteContractSend::coin(int index) const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
  return _internal_coin(index);
}
inline std::string* Message_WasmExecuteContractSend::mutable_coin(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
  return coin_.Mutable(index);
}
inline void Message_WasmExecuteContractSend::set_coin(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
  coin_.Mutable(index)->assign(value);
}
inline void Message_WasmExecuteContractSend::set_coin(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
  coin_.Mutable(index)->assign(std::move(value));
}
inline void Message_WasmExecuteContractSend::set_coin(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  coin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
}
inline void Message_WasmExecuteContractSend::set_coin(int index, const char* value, size_t size) {
  coin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
}
inline std::string* Message_WasmExecuteContractSend::_internal_add_coin() {
  return coin_.Add();
}
inline void Message_WasmExecuteContractSend::add_coin(const std::string& value) {
  coin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
}
inline void Message_WasmExecuteContractSend::add_coin(std::string&& value) {
  coin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
}
inline void Message_WasmExecuteContractSend::add_coin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  coin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
}
inline void Message_WasmExecuteContractSend::add_coin(const char* value, size_t size) {
  coin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Message_WasmExecuteContractSend::coin() const {
  // @@protoc_insertion_point(field_list:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Message_WasmExecuteContractSend::mutable_coin() {
  // @@protoc_insertion_point(field_mutable_list:TW.Cosmos.Proto.Message.WasmExecuteContractSend.coin)
  return &coin_;
}

// -------------------------------------------------------------------

// Message_WasmExecuteContractGeneric

// string sender_address = 1;
inline void Message_WasmExecuteContractGeneric::clear_sender_address() {
  sender_address_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractGeneric::sender_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.sender_address)
  return _internal_sender_address();
}
inline void Message_WasmExecuteContractGeneric::set_sender_address(const std::string& value) {
  _internal_set_sender_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.sender_address)
}
inline std::string* Message_WasmExecuteContractGeneric::mutable_sender_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.sender_address)
  return _internal_mutable_sender_address();
}
inline const std::string& Message_WasmExecuteContractGeneric::_internal_sender_address() const {
  return sender_address_.Get();
}
inline void Message_WasmExecuteContractGeneric::_internal_set_sender_address(const std::string& value) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractGeneric::set_sender_address(std::string&& value) {
  
  sender_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.sender_address)
}
inline void Message_WasmExecuteContractGeneric::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.sender_address)
}
inline void Message_WasmExecuteContractGeneric::set_sender_address(const char* value,
    size_t size) {
  
  sender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.sender_address)
}
inline std::string* Message_WasmExecuteContractGeneric::_internal_mutable_sender_address() {
  
  return sender_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractGeneric::release_sender_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.sender_address)
  return sender_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractGeneric::set_allocated_sender_address(std::string* sender_address) {
  if (sender_address != nullptr) {
    
  } else {
    
  }
  sender_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.sender_address)
}

// string contract_address = 2;
inline void Message_WasmExecuteContractGeneric::clear_contract_address() {
  contract_address_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractGeneric::contract_address() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.contract_address)
  return _internal_contract_address();
}
inline void Message_WasmExecuteContractGeneric::set_contract_address(const std::string& value) {
  _internal_set_contract_address(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.contract_address)
}
inline std::string* Message_WasmExecuteContractGeneric::mutable_contract_address() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.contract_address)
  return _internal_mutable_contract_address();
}
inline const std::string& Message_WasmExecuteContractGeneric::_internal_contract_address() const {
  return contract_address_.Get();
}
inline void Message_WasmExecuteContractGeneric::_internal_set_contract_address(const std::string& value) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractGeneric::set_contract_address(std::string&& value) {
  
  contract_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.contract_address)
}
inline void Message_WasmExecuteContractGeneric::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.contract_address)
}
inline void Message_WasmExecuteContractGeneric::set_contract_address(const char* value,
    size_t size) {
  
  contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.contract_address)
}
inline std::string* Message_WasmExecuteContractGeneric::_internal_mutable_contract_address() {
  
  return contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractGeneric::release_contract_address() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.contract_address)
  return contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractGeneric::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.contract_address)
}

// string execute_msg = 3;
inline void Message_WasmExecuteContractGeneric::clear_execute_msg() {
  execute_msg_.ClearToEmpty();
}
inline const std::string& Message_WasmExecuteContractGeneric::execute_msg() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.execute_msg)
  return _internal_execute_msg();
}
inline void Message_WasmExecuteContractGeneric::set_execute_msg(const std::string& value) {
  _internal_set_execute_msg(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.execute_msg)
}
inline std::string* Message_WasmExecuteContractGeneric::mutable_execute_msg() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.execute_msg)
  return _internal_mutable_execute_msg();
}
inline const std::string& Message_WasmExecuteContractGeneric::_internal_execute_msg() const {
  return execute_msg_.Get();
}
inline void Message_WasmExecuteContractGeneric::_internal_set_execute_msg(const std::string& value) {
  
  execute_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_WasmExecuteContractGeneric::set_execute_msg(std::string&& value) {
  
  execute_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.execute_msg)
}
inline void Message_WasmExecuteContractGeneric::set_execute_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  execute_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.execute_msg)
}
inline void Message_WasmExecuteContractGeneric::set_execute_msg(const char* value,
    size_t size) {
  
  execute_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.execute_msg)
}
inline std::string* Message_WasmExecuteContractGeneric::_internal_mutable_execute_msg() {
  
  return execute_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_WasmExecuteContractGeneric::release_execute_msg() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.execute_msg)
  return execute_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_WasmExecuteContractGeneric::set_allocated_execute_msg(std::string* execute_msg) {
  if (execute_msg != nullptr) {
    
  } else {
    
  }
  execute_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), execute_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.execute_msg)
}

// repeated .TW.Cosmos.Proto.Amount coins = 5;
inline int Message_WasmExecuteContractGeneric::_internal_coins_size() const {
  return coins_.size();
}
inline int Message_WasmExecuteContractGeneric::coins_size() const {
  return _internal_coins_size();
}
inline void Message_WasmExecuteContractGeneric::clear_coins() {
  coins_.Clear();
}
inline ::TW::Cosmos::Proto::Amount* Message_WasmExecuteContractGeneric::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.coins)
  return coins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >*
Message_WasmExecuteContractGeneric::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.coins)
  return &coins_;
}
inline const ::TW::Cosmos::Proto::Amount& Message_WasmExecuteContractGeneric::_internal_coins(int index) const {
  return coins_.Get(index);
}
inline const ::TW::Cosmos::Proto::Amount& Message_WasmExecuteContractGeneric::coins(int index) const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.coins)
  return _internal_coins(index);
}
inline ::TW::Cosmos::Proto::Amount* Message_WasmExecuteContractGeneric::_internal_add_coins() {
  return coins_.Add();
}
inline ::TW::Cosmos::Proto::Amount* Message_WasmExecuteContractGeneric::add_coins() {
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.coins)
  return _internal_add_coins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Amount >&
Message_WasmExecuteContractGeneric::coins() const {
  // @@protoc_insertion_point(field_list:TW.Cosmos.Proto.Message.WasmExecuteContractGeneric.coins)
  return coins_;
}

// -------------------------------------------------------------------

// Message_RawJSON

// string type = 1;
inline void Message_RawJSON::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Message_RawJSON::type() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.RawJSON.type)
  return _internal_type();
}
inline void Message_RawJSON::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.RawJSON.type)
}
inline std::string* Message_RawJSON::mutable_type() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.RawJSON.type)
  return _internal_mutable_type();
}
inline const std::string& Message_RawJSON::_internal_type() const {
  return type_.Get();
}
inline void Message_RawJSON::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_RawJSON::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.RawJSON.type)
}
inline void Message_RawJSON::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.RawJSON.type)
}
inline void Message_RawJSON::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.RawJSON.type)
}
inline std::string* Message_RawJSON::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_RawJSON::release_type() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.RawJSON.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_RawJSON::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.RawJSON.type)
}

// string value = 2;
inline void Message_RawJSON::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Message_RawJSON::value() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.RawJSON.value)
  return _internal_value();
}
inline void Message_RawJSON::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.RawJSON.value)
}
inline std::string* Message_RawJSON::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.RawJSON.value)
  return _internal_mutable_value();
}
inline const std::string& Message_RawJSON::_internal_value() const {
  return value_.Get();
}
inline void Message_RawJSON::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_RawJSON::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.RawJSON.value)
}
inline void Message_RawJSON::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.RawJSON.value)
}
inline void Message_RawJSON::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.RawJSON.value)
}
inline std::string* Message_RawJSON::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_RawJSON::release_value() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.RawJSON.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_RawJSON::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.RawJSON.value)
}

// -------------------------------------------------------------------

// Message_SignDirect

// bytes body_bytes = 1;
inline void Message_SignDirect::clear_body_bytes() {
  body_bytes_.ClearToEmpty();
}
inline const std::string& Message_SignDirect::body_bytes() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.SignDirect.body_bytes)
  return _internal_body_bytes();
}
inline void Message_SignDirect::set_body_bytes(const std::string& value) {
  _internal_set_body_bytes(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.SignDirect.body_bytes)
}
inline std::string* Message_SignDirect::mutable_body_bytes() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.SignDirect.body_bytes)
  return _internal_mutable_body_bytes();
}
inline const std::string& Message_SignDirect::_internal_body_bytes() const {
  return body_bytes_.Get();
}
inline void Message_SignDirect::_internal_set_body_bytes(const std::string& value) {
  
  body_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_SignDirect::set_body_bytes(std::string&& value) {
  
  body_bytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.SignDirect.body_bytes)
}
inline void Message_SignDirect::set_body_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.SignDirect.body_bytes)
}
inline void Message_SignDirect::set_body_bytes(const void* value,
    size_t size) {
  
  body_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.SignDirect.body_bytes)
}
inline std::string* Message_SignDirect::_internal_mutable_body_bytes() {
  
  return body_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_SignDirect::release_body_bytes() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.SignDirect.body_bytes)
  return body_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_SignDirect::set_allocated_body_bytes(std::string* body_bytes) {
  if (body_bytes != nullptr) {
    
  } else {
    
  }
  body_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.SignDirect.body_bytes)
}

// bytes auth_info_bytes = 2;
inline void Message_SignDirect::clear_auth_info_bytes() {
  auth_info_bytes_.ClearToEmpty();
}
inline const std::string& Message_SignDirect::auth_info_bytes() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.SignDirect.auth_info_bytes)
  return _internal_auth_info_bytes();
}
inline void Message_SignDirect::set_auth_info_bytes(const std::string& value) {
  _internal_set_auth_info_bytes(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.SignDirect.auth_info_bytes)
}
inline std::string* Message_SignDirect::mutable_auth_info_bytes() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.SignDirect.auth_info_bytes)
  return _internal_mutable_auth_info_bytes();
}
inline const std::string& Message_SignDirect::_internal_auth_info_bytes() const {
  return auth_info_bytes_.Get();
}
inline void Message_SignDirect::_internal_set_auth_info_bytes(const std::string& value) {
  
  auth_info_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_SignDirect::set_auth_info_bytes(std::string&& value) {
  
  auth_info_bytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.SignDirect.auth_info_bytes)
}
inline void Message_SignDirect::set_auth_info_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_info_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.SignDirect.auth_info_bytes)
}
inline void Message_SignDirect::set_auth_info_bytes(const void* value,
    size_t size) {
  
  auth_info_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.SignDirect.auth_info_bytes)
}
inline std::string* Message_SignDirect::_internal_mutable_auth_info_bytes() {
  
  return auth_info_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_SignDirect::release_auth_info_bytes() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.SignDirect.auth_info_bytes)
  return auth_info_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_SignDirect::set_allocated_auth_info_bytes(std::string* auth_info_bytes) {
  if (auth_info_bytes != nullptr) {
    
  } else {
    
  }
  auth_info_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_info_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.SignDirect.auth_info_bytes)
}

// bytes amino_hash = 3;
inline void Message_SignDirect::clear_amino_hash() {
  amino_hash_.ClearToEmpty();
}
inline const std::string& Message_SignDirect::amino_hash() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.SignDirect.amino_hash)
  return _internal_amino_hash();
}
inline void Message_SignDirect::set_amino_hash(const std::string& value) {
  _internal_set_amino_hash(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.SignDirect.amino_hash)
}
inline std::string* Message_SignDirect::mutable_amino_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.SignDirect.amino_hash)
  return _internal_mutable_amino_hash();
}
inline const std::string& Message_SignDirect::_internal_amino_hash() const {
  return amino_hash_.Get();
}
inline void Message_SignDirect::_internal_set_amino_hash(const std::string& value) {
  
  amino_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_SignDirect::set_amino_hash(std::string&& value) {
  
  amino_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.SignDirect.amino_hash)
}
inline void Message_SignDirect::set_amino_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amino_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.SignDirect.amino_hash)
}
inline void Message_SignDirect::set_amino_hash(const void* value,
    size_t size) {
  
  amino_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.SignDirect.amino_hash)
}
inline std::string* Message_SignDirect::_internal_mutable_amino_hash() {
  
  return amino_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_SignDirect::release_amino_hash() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.SignDirect.amino_hash)
  return amino_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_SignDirect::set_allocated_amino_hash(std::string* amino_hash) {
  if (amino_hash != nullptr) {
    
  } else {
    
  }
  amino_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amino_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.SignDirect.amino_hash)
}

// -------------------------------------------------------------------

// Message_StakeAuthorization_Validators

// repeated string address = 1;
inline int Message_StakeAuthorization_Validators::_internal_address_size() const {
  return address_.size();
}
inline int Message_StakeAuthorization_Validators::address_size() const {
  return _internal_address_size();
}
inline void Message_StakeAuthorization_Validators::clear_address() {
  address_.Clear();
}
inline std::string* Message_StakeAuthorization_Validators::add_address() {
  // @@protoc_insertion_point(field_add_mutable:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
  return _internal_add_address();
}
inline const std::string& Message_StakeAuthorization_Validators::_internal_address(int index) const {
  return address_.Get(index);
}
inline const std::string& Message_StakeAuthorization_Validators::address(int index) const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
  return _internal_address(index);
}
inline std::string* Message_StakeAuthorization_Validators::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
  return address_.Mutable(index);
}
inline void Message_StakeAuthorization_Validators::set_address(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
  address_.Mutable(index)->assign(value);
}
inline void Message_StakeAuthorization_Validators::set_address(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
  address_.Mutable(index)->assign(std::move(value));
}
inline void Message_StakeAuthorization_Validators::set_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
}
inline void Message_StakeAuthorization_Validators::set_address(int index, const char* value, size_t size) {
  address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
}
inline std::string* Message_StakeAuthorization_Validators::_internal_add_address() {
  return address_.Add();
}
inline void Message_StakeAuthorization_Validators::add_address(const std::string& value) {
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
}
inline void Message_StakeAuthorization_Validators::add_address(std::string&& value) {
  address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
}
inline void Message_StakeAuthorization_Validators::add_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
}
inline void Message_StakeAuthorization_Validators::add_address(const char* value, size_t size) {
  address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Message_StakeAuthorization_Validators::address() const {
  // @@protoc_insertion_point(field_list:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Message_StakeAuthorization_Validators::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:TW.Cosmos.Proto.Message.StakeAuthorization.Validators.address)
  return &address_;
}

// -------------------------------------------------------------------

// Message_StakeAuthorization

// .TW.Cosmos.Proto.Amount max_tokens = 1;
inline bool Message_StakeAuthorization::_internal_has_max_tokens() const {
  return this != internal_default_instance() && max_tokens_ != nullptr;
}
inline bool Message_StakeAuthorization::has_max_tokens() const {
  return _internal_has_max_tokens();
}
inline void Message_StakeAuthorization::clear_max_tokens() {
  if (GetArena() == nullptr && max_tokens_ != nullptr) {
    delete max_tokens_;
  }
  max_tokens_ = nullptr;
}
inline const ::TW::Cosmos::Proto::Amount& Message_StakeAuthorization::_internal_max_tokens() const {
  const ::TW::Cosmos::Proto::Amount* p = max_tokens_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Cosmos::Proto::Amount&>(
      ::TW::Cosmos::Proto::_Amount_default_instance_);
}
inline const ::TW::Cosmos::Proto::Amount& Message_StakeAuthorization::max_tokens() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.StakeAuthorization.max_tokens)
  return _internal_max_tokens();
}
inline void Message_StakeAuthorization::unsafe_arena_set_allocated_max_tokens(
    ::TW::Cosmos::Proto::Amount* max_tokens) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_tokens_);
  }
  max_tokens_ = max_tokens;
  if (max_tokens) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.StakeAuthorization.max_tokens)
}
inline ::TW::Cosmos::Proto::Amount* Message_StakeAuthorization::release_max_tokens() {
  
  ::TW::Cosmos::Proto::Amount* temp = max_tokens_;
  max_tokens_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_StakeAuthorization::unsafe_arena_release_max_tokens() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.StakeAuthorization.max_tokens)
  
  ::TW::Cosmos::Proto::Amount* temp = max_tokens_;
  max_tokens_ = nullptr;
  return temp;
}
inline ::TW::Cosmos::Proto::Amount* Message_StakeAuthorization::_internal_mutable_max_tokens() {
  
  if (max_tokens_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Cosmos::Proto::Amount>(GetArena());
    max_tokens_ = p;
  }
  return max_tokens_;
}
inline ::TW::Cosmos::Proto::Amount* Message_StakeAuthorization::mutable_max_tokens() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.StakeAuthorization.max_tokens)
  return _internal_mutable_max_tokens();
}
inline void Message_StakeAuthorization::set_allocated_max_tokens(::TW::Cosmos::Proto::Amount* max_tokens) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete max_tokens_;
  }
  if (max_tokens) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(max_tokens);
    if (message_arena != submessage_arena) {
      max_tokens = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_tokens, submessage_arena);
    }
    
  } else {
    
  }
  max_tokens_ = max_tokens;
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.StakeAuthorization.max_tokens)
}

// .TW.Cosmos.Proto.Message.StakeAuthorization.Validators allow_list = 2;
inline bool Message_StakeAuthorization::_internal_has_allow_list() const {
  return validators_case() == kAllowList;
}
inline bool Message_StakeAuthorization::has_allow_list() const {
  return _internal_has_allow_list();
}
inline void Message_StakeAuthorization::set_has_allow_list() {
  _oneof_case_[0] = kAllowList;
}
inline void Message_StakeAuthorization::clear_allow_list() {
  if (_internal_has_allow_list()) {
    if (GetArena() == nullptr) {
      delete validators_.allow_list_;
    }
    clear_has_validators();
  }
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* Message_StakeAuthorization::release_allow_list() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.StakeAuthorization.allow_list)
  if (_internal_has_allow_list()) {
    clear_has_validators();
      ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* temp = validators_.allow_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    validators_.allow_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators& Message_StakeAuthorization::_internal_allow_list() const {
  return _internal_has_allow_list()
      ? *validators_.allow_list_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators&>(::TW::Cosmos::Proto::_Message_StakeAuthorization_Validators_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators& Message_StakeAuthorization::allow_list() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.StakeAuthorization.allow_list)
  return _internal_allow_list();
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* Message_StakeAuthorization::unsafe_arena_release_allow_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.StakeAuthorization.allow_list)
  if (_internal_has_allow_list()) {
    clear_has_validators();
    ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* temp = validators_.allow_list_;
    validators_.allow_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_StakeAuthorization::unsafe_arena_set_allocated_allow_list(::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* allow_list) {
  clear_validators();
  if (allow_list) {
    set_has_allow_list();
    validators_.allow_list_ = allow_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.StakeAuthorization.allow_list)
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* Message_StakeAuthorization::_internal_mutable_allow_list() {
  if (!_internal_has_allow_list()) {
    clear_validators();
    set_has_allow_list();
    validators_.allow_list_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators >(GetArena());
  }
  return validators_.allow_list_;
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* Message_StakeAuthorization::mutable_allow_list() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.StakeAuthorization.allow_list)
  return _internal_mutable_allow_list();
}

// .TW.Cosmos.Proto.Message.StakeAuthorization.Validators deny_list = 3;
inline bool Message_StakeAuthorization::_internal_has_deny_list() const {
  return validators_case() == kDenyList;
}
inline bool Message_StakeAuthorization::has_deny_list() const {
  return _internal_has_deny_list();
}
inline void Message_StakeAuthorization::set_has_deny_list() {
  _oneof_case_[0] = kDenyList;
}
inline void Message_StakeAuthorization::clear_deny_list() {
  if (_internal_has_deny_list()) {
    if (GetArena() == nullptr) {
      delete validators_.deny_list_;
    }
    clear_has_validators();
  }
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* Message_StakeAuthorization::release_deny_list() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.StakeAuthorization.deny_list)
  if (_internal_has_deny_list()) {
    clear_has_validators();
      ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* temp = validators_.deny_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    validators_.deny_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators& Message_StakeAuthorization::_internal_deny_list() const {
  return _internal_has_deny_list()
      ? *validators_.deny_list_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators&>(::TW::Cosmos::Proto::_Message_StakeAuthorization_Validators_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators& Message_StakeAuthorization::deny_list() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.StakeAuthorization.deny_list)
  return _internal_deny_list();
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* Message_StakeAuthorization::unsafe_arena_release_deny_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.StakeAuthorization.deny_list)
  if (_internal_has_deny_list()) {
    clear_has_validators();
    ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* temp = validators_.deny_list_;
    validators_.deny_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_StakeAuthorization::unsafe_arena_set_allocated_deny_list(::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* deny_list) {
  clear_validators();
  if (deny_list) {
    set_has_deny_list();
    validators_.deny_list_ = deny_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.StakeAuthorization.deny_list)
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* Message_StakeAuthorization::_internal_mutable_deny_list() {
  if (!_internal_has_deny_list()) {
    clear_validators();
    set_has_deny_list();
    validators_.deny_list_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators >(GetArena());
  }
  return validators_.deny_list_;
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization_Validators* Message_StakeAuthorization::mutable_deny_list() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.StakeAuthorization.deny_list)
  return _internal_mutable_deny_list();
}

// .TW.Cosmos.Proto.Message.AuthorizationType authorization_type = 4;
inline void Message_StakeAuthorization::clear_authorization_type() {
  authorization_type_ = 0;
}
inline ::TW::Cosmos::Proto::Message_AuthorizationType Message_StakeAuthorization::_internal_authorization_type() const {
  return static_cast< ::TW::Cosmos::Proto::Message_AuthorizationType >(authorization_type_);
}
inline ::TW::Cosmos::Proto::Message_AuthorizationType Message_StakeAuthorization::authorization_type() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.StakeAuthorization.authorization_type)
  return _internal_authorization_type();
}
inline void Message_StakeAuthorization::_internal_set_authorization_type(::TW::Cosmos::Proto::Message_AuthorizationType value) {
  
  authorization_type_ = value;
}
inline void Message_StakeAuthorization::set_authorization_type(::TW::Cosmos::Proto::Message_AuthorizationType value) {
  _internal_set_authorization_type(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.StakeAuthorization.authorization_type)
}

inline bool Message_StakeAuthorization::has_validators() const {
  return validators_case() != VALIDATORS_NOT_SET;
}
inline void Message_StakeAuthorization::clear_has_validators() {
  _oneof_case_[0] = VALIDATORS_NOT_SET;
}
inline Message_StakeAuthorization::ValidatorsCase Message_StakeAuthorization::validators_case() const {
  return Message_StakeAuthorization::ValidatorsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Message_AuthGrant

// string granter = 1;
inline void Message_AuthGrant::clear_granter() {
  granter_.ClearToEmpty();
}
inline const std::string& Message_AuthGrant::granter() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.AuthGrant.granter)
  return _internal_granter();
}
inline void Message_AuthGrant::set_granter(const std::string& value) {
  _internal_set_granter(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.AuthGrant.granter)
}
inline std::string* Message_AuthGrant::mutable_granter() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.AuthGrant.granter)
  return _internal_mutable_granter();
}
inline const std::string& Message_AuthGrant::_internal_granter() const {
  return granter_.Get();
}
inline void Message_AuthGrant::_internal_set_granter(const std::string& value) {
  
  granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_AuthGrant::set_granter(std::string&& value) {
  
  granter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.AuthGrant.granter)
}
inline void Message_AuthGrant::set_granter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.AuthGrant.granter)
}
inline void Message_AuthGrant::set_granter(const char* value,
    size_t size) {
  
  granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.AuthGrant.granter)
}
inline std::string* Message_AuthGrant::_internal_mutable_granter() {
  
  return granter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_AuthGrant::release_granter() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.AuthGrant.granter)
  return granter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_AuthGrant::set_allocated_granter(std::string* granter) {
  if (granter != nullptr) {
    
  } else {
    
  }
  granter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), granter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.AuthGrant.granter)
}

// string grantee = 2;
inline void Message_AuthGrant::clear_grantee() {
  grantee_.ClearToEmpty();
}
inline const std::string& Message_AuthGrant::grantee() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.AuthGrant.grantee)
  return _internal_grantee();
}
inline void Message_AuthGrant::set_grantee(const std::string& value) {
  _internal_set_grantee(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.AuthGrant.grantee)
}
inline std::string* Message_AuthGrant::mutable_grantee() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.AuthGrant.grantee)
  return _internal_mutable_grantee();
}
inline const std::string& Message_AuthGrant::_internal_grantee() const {
  return grantee_.Get();
}
inline void Message_AuthGrant::_internal_set_grantee(const std::string& value) {
  
  grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_AuthGrant::set_grantee(std::string&& value) {
  
  grantee_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.AuthGrant.grantee)
}
inline void Message_AuthGrant::set_grantee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.AuthGrant.grantee)
}
inline void Message_AuthGrant::set_grantee(const char* value,
    size_t size) {
  
  grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.AuthGrant.grantee)
}
inline std::string* Message_AuthGrant::_internal_mutable_grantee() {
  
  return grantee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_AuthGrant::release_grantee() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.AuthGrant.grantee)
  return grantee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_AuthGrant::set_allocated_grantee(std::string* grantee) {
  if (grantee != nullptr) {
    
  } else {
    
  }
  grantee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grantee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.AuthGrant.grantee)
}

// .TW.Cosmos.Proto.Message.StakeAuthorization grant_stake = 3;
inline bool Message_AuthGrant::_internal_has_grant_stake() const {
  return grant_type_case() == kGrantStake;
}
inline bool Message_AuthGrant::has_grant_stake() const {
  return _internal_has_grant_stake();
}
inline void Message_AuthGrant::set_has_grant_stake() {
  _oneof_case_[0] = kGrantStake;
}
inline void Message_AuthGrant::clear_grant_stake() {
  if (_internal_has_grant_stake()) {
    if (GetArena() == nullptr) {
      delete grant_type_.grant_stake_;
    }
    clear_has_grant_type();
  }
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization* Message_AuthGrant::release_grant_stake() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.AuthGrant.grant_stake)
  if (_internal_has_grant_stake()) {
    clear_has_grant_type();
      ::TW::Cosmos::Proto::Message_StakeAuthorization* temp = grant_type_.grant_stake_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    grant_type_.grant_stake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_StakeAuthorization& Message_AuthGrant::_internal_grant_stake() const {
  return _internal_has_grant_stake()
      ? *grant_type_.grant_stake_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_StakeAuthorization&>(::TW::Cosmos::Proto::_Message_StakeAuthorization_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_StakeAuthorization& Message_AuthGrant::grant_stake() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.AuthGrant.grant_stake)
  return _internal_grant_stake();
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization* Message_AuthGrant::unsafe_arena_release_grant_stake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.AuthGrant.grant_stake)
  if (_internal_has_grant_stake()) {
    clear_has_grant_type();
    ::TW::Cosmos::Proto::Message_StakeAuthorization* temp = grant_type_.grant_stake_;
    grant_type_.grant_stake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_AuthGrant::unsafe_arena_set_allocated_grant_stake(::TW::Cosmos::Proto::Message_StakeAuthorization* grant_stake) {
  clear_grant_type();
  if (grant_stake) {
    set_has_grant_stake();
    grant_type_.grant_stake_ = grant_stake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.AuthGrant.grant_stake)
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization* Message_AuthGrant::_internal_mutable_grant_stake() {
  if (!_internal_has_grant_stake()) {
    clear_grant_type();
    set_has_grant_stake();
    grant_type_.grant_stake_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_StakeAuthorization >(GetArena());
  }
  return grant_type_.grant_stake_;
}
inline ::TW::Cosmos::Proto::Message_StakeAuthorization* Message_AuthGrant::mutable_grant_stake() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.AuthGrant.grant_stake)
  return _internal_mutable_grant_stake();
}

// int64 expiration = 4;
inline void Message_AuthGrant::clear_expiration() {
  expiration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message_AuthGrant::_internal_expiration() const {
  return expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message_AuthGrant::expiration() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.AuthGrant.expiration)
  return _internal_expiration();
}
inline void Message_AuthGrant::_internal_set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiration_ = value;
}
inline void Message_AuthGrant::set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.AuthGrant.expiration)
}

inline bool Message_AuthGrant::has_grant_type() const {
  return grant_type_case() != GRANT_TYPE_NOT_SET;
}
inline void Message_AuthGrant::clear_has_grant_type() {
  _oneof_case_[0] = GRANT_TYPE_NOT_SET;
}
inline Message_AuthGrant::GrantTypeCase Message_AuthGrant::grant_type_case() const {
  return Message_AuthGrant::GrantTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Message_AuthRevoke

// string granter = 1;
inline void Message_AuthRevoke::clear_granter() {
  granter_.ClearToEmpty();
}
inline const std::string& Message_AuthRevoke::granter() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.AuthRevoke.granter)
  return _internal_granter();
}
inline void Message_AuthRevoke::set_granter(const std::string& value) {
  _internal_set_granter(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.AuthRevoke.granter)
}
inline std::string* Message_AuthRevoke::mutable_granter() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.AuthRevoke.granter)
  return _internal_mutable_granter();
}
inline const std::string& Message_AuthRevoke::_internal_granter() const {
  return granter_.Get();
}
inline void Message_AuthRevoke::_internal_set_granter(const std::string& value) {
  
  granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_AuthRevoke::set_granter(std::string&& value) {
  
  granter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.AuthRevoke.granter)
}
inline void Message_AuthRevoke::set_granter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.AuthRevoke.granter)
}
inline void Message_AuthRevoke::set_granter(const char* value,
    size_t size) {
  
  granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.AuthRevoke.granter)
}
inline std::string* Message_AuthRevoke::_internal_mutable_granter() {
  
  return granter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_AuthRevoke::release_granter() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.AuthRevoke.granter)
  return granter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_AuthRevoke::set_allocated_granter(std::string* granter) {
  if (granter != nullptr) {
    
  } else {
    
  }
  granter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), granter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.AuthRevoke.granter)
}

// string grantee = 2;
inline void Message_AuthRevoke::clear_grantee() {
  grantee_.ClearToEmpty();
}
inline const std::string& Message_AuthRevoke::grantee() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.AuthRevoke.grantee)
  return _internal_grantee();
}
inline void Message_AuthRevoke::set_grantee(const std::string& value) {
  _internal_set_grantee(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.AuthRevoke.grantee)
}
inline std::string* Message_AuthRevoke::mutable_grantee() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.AuthRevoke.grantee)
  return _internal_mutable_grantee();
}
inline const std::string& Message_AuthRevoke::_internal_grantee() const {
  return grantee_.Get();
}
inline void Message_AuthRevoke::_internal_set_grantee(const std::string& value) {
  
  grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_AuthRevoke::set_grantee(std::string&& value) {
  
  grantee_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.AuthRevoke.grantee)
}
inline void Message_AuthRevoke::set_grantee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.AuthRevoke.grantee)
}
inline void Message_AuthRevoke::set_grantee(const char* value,
    size_t size) {
  
  grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.AuthRevoke.grantee)
}
inline std::string* Message_AuthRevoke::_internal_mutable_grantee() {
  
  return grantee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_AuthRevoke::release_grantee() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.AuthRevoke.grantee)
  return grantee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_AuthRevoke::set_allocated_grantee(std::string* grantee) {
  if (grantee != nullptr) {
    
  } else {
    
  }
  grantee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grantee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.AuthRevoke.grantee)
}

// string msg_type_url = 3;
inline void Message_AuthRevoke::clear_msg_type_url() {
  msg_type_url_.ClearToEmpty();
}
inline const std::string& Message_AuthRevoke::msg_type_url() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.AuthRevoke.msg_type_url)
  return _internal_msg_type_url();
}
inline void Message_AuthRevoke::set_msg_type_url(const std::string& value) {
  _internal_set_msg_type_url(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.AuthRevoke.msg_type_url)
}
inline std::string* Message_AuthRevoke::mutable_msg_type_url() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.AuthRevoke.msg_type_url)
  return _internal_mutable_msg_type_url();
}
inline const std::string& Message_AuthRevoke::_internal_msg_type_url() const {
  return msg_type_url_.Get();
}
inline void Message_AuthRevoke::_internal_set_msg_type_url(const std::string& value) {
  
  msg_type_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_AuthRevoke::set_msg_type_url(std::string&& value) {
  
  msg_type_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.AuthRevoke.msg_type_url)
}
inline void Message_AuthRevoke::set_msg_type_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_type_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.AuthRevoke.msg_type_url)
}
inline void Message_AuthRevoke::set_msg_type_url(const char* value,
    size_t size) {
  
  msg_type_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.AuthRevoke.msg_type_url)
}
inline std::string* Message_AuthRevoke::_internal_mutable_msg_type_url() {
  
  return msg_type_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_AuthRevoke::release_msg_type_url() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.AuthRevoke.msg_type_url)
  return msg_type_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_AuthRevoke::set_allocated_msg_type_url(std::string* msg_type_url) {
  if (msg_type_url != nullptr) {
    
  } else {
    
  }
  msg_type_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_type_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.AuthRevoke.msg_type_url)
}

// -------------------------------------------------------------------

// Message_MsgVote

// uint64 proposal_id = 1;
inline void Message_MsgVote::clear_proposal_id() {
  proposal_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message_MsgVote::_internal_proposal_id() const {
  return proposal_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message_MsgVote::proposal_id() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.MsgVote.proposal_id)
  return _internal_proposal_id();
}
inline void Message_MsgVote::_internal_set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  proposal_id_ = value;
}
inline void Message_MsgVote::set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.MsgVote.proposal_id)
}

// string voter = 2;
inline void Message_MsgVote::clear_voter() {
  voter_.ClearToEmpty();
}
inline const std::string& Message_MsgVote::voter() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.MsgVote.voter)
  return _internal_voter();
}
inline void Message_MsgVote::set_voter(const std::string& value) {
  _internal_set_voter(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.MsgVote.voter)
}
inline std::string* Message_MsgVote::mutable_voter() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.MsgVote.voter)
  return _internal_mutable_voter();
}
inline const std::string& Message_MsgVote::_internal_voter() const {
  return voter_.Get();
}
inline void Message_MsgVote::_internal_set_voter(const std::string& value) {
  
  voter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message_MsgVote::set_voter(std::string&& value) {
  
  voter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.Message.MsgVote.voter)
}
inline void Message_MsgVote::set_voter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.Message.MsgVote.voter)
}
inline void Message_MsgVote::set_voter(const char* value,
    size_t size) {
  
  voter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.Message.MsgVote.voter)
}
inline std::string* Message_MsgVote::_internal_mutable_voter() {
  
  return voter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message_MsgVote::release_voter() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.MsgVote.voter)
  return voter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_MsgVote::set_allocated_voter(std::string* voter) {
  if (voter != nullptr) {
    
  } else {
    
  }
  voter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.Message.MsgVote.voter)
}

// .TW.Cosmos.Proto.Message.VoteOption option = 3;
inline void Message_MsgVote::clear_option() {
  option_ = 0;
}
inline ::TW::Cosmos::Proto::Message_VoteOption Message_MsgVote::_internal_option() const {
  return static_cast< ::TW::Cosmos::Proto::Message_VoteOption >(option_);
}
inline ::TW::Cosmos::Proto::Message_VoteOption Message_MsgVote::option() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.MsgVote.option)
  return _internal_option();
}
inline void Message_MsgVote::_internal_set_option(::TW::Cosmos::Proto::Message_VoteOption value) {
  
  option_ = value;
}
inline void Message_MsgVote::set_option(::TW::Cosmos::Proto::Message_VoteOption value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.Message.MsgVote.option)
}

// -------------------------------------------------------------------

// Message

// .TW.Cosmos.Proto.Message.Send send_coins_message = 1;
inline bool Message::_internal_has_send_coins_message() const {
  return message_oneof_case() == kSendCoinsMessage;
}
inline bool Message::has_send_coins_message() const {
  return _internal_has_send_coins_message();
}
inline void Message::set_has_send_coins_message() {
  _oneof_case_[0] = kSendCoinsMessage;
}
inline void Message::clear_send_coins_message() {
  if (_internal_has_send_coins_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.send_coins_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_Send* Message::release_send_coins_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.send_coins_message)
  if (_internal_has_send_coins_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_Send* temp = message_oneof_.send_coins_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.send_coins_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_Send& Message::_internal_send_coins_message() const {
  return _internal_has_send_coins_message()
      ? *message_oneof_.send_coins_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_Send&>(::TW::Cosmos::Proto::_Message_Send_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_Send& Message::send_coins_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.send_coins_message)
  return _internal_send_coins_message();
}
inline ::TW::Cosmos::Proto::Message_Send* Message::unsafe_arena_release_send_coins_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.send_coins_message)
  if (_internal_has_send_coins_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_Send* temp = message_oneof_.send_coins_message_;
    message_oneof_.send_coins_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_send_coins_message(::TW::Cosmos::Proto::Message_Send* send_coins_message) {
  clear_message_oneof();
  if (send_coins_message) {
    set_has_send_coins_message();
    message_oneof_.send_coins_message_ = send_coins_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.send_coins_message)
}
inline ::TW::Cosmos::Proto::Message_Send* Message::_internal_mutable_send_coins_message() {
  if (!_internal_has_send_coins_message()) {
    clear_message_oneof();
    set_has_send_coins_message();
    message_oneof_.send_coins_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_Send >(GetArena());
  }
  return message_oneof_.send_coins_message_;
}
inline ::TW::Cosmos::Proto::Message_Send* Message::mutable_send_coins_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.send_coins_message)
  return _internal_mutable_send_coins_message();
}

// .TW.Cosmos.Proto.Message.Transfer transfer_tokens_message = 2;
inline bool Message::_internal_has_transfer_tokens_message() const {
  return message_oneof_case() == kTransferTokensMessage;
}
inline bool Message::has_transfer_tokens_message() const {
  return _internal_has_transfer_tokens_message();
}
inline void Message::set_has_transfer_tokens_message() {
  _oneof_case_[0] = kTransferTokensMessage;
}
inline void Message::clear_transfer_tokens_message() {
  if (_internal_has_transfer_tokens_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.transfer_tokens_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_Transfer* Message::release_transfer_tokens_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.transfer_tokens_message)
  if (_internal_has_transfer_tokens_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_Transfer* temp = message_oneof_.transfer_tokens_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.transfer_tokens_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_Transfer& Message::_internal_transfer_tokens_message() const {
  return _internal_has_transfer_tokens_message()
      ? *message_oneof_.transfer_tokens_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_Transfer&>(::TW::Cosmos::Proto::_Message_Transfer_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_Transfer& Message::transfer_tokens_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.transfer_tokens_message)
  return _internal_transfer_tokens_message();
}
inline ::TW::Cosmos::Proto::Message_Transfer* Message::unsafe_arena_release_transfer_tokens_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.transfer_tokens_message)
  if (_internal_has_transfer_tokens_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_Transfer* temp = message_oneof_.transfer_tokens_message_;
    message_oneof_.transfer_tokens_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_transfer_tokens_message(::TW::Cosmos::Proto::Message_Transfer* transfer_tokens_message) {
  clear_message_oneof();
  if (transfer_tokens_message) {
    set_has_transfer_tokens_message();
    message_oneof_.transfer_tokens_message_ = transfer_tokens_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.transfer_tokens_message)
}
inline ::TW::Cosmos::Proto::Message_Transfer* Message::_internal_mutable_transfer_tokens_message() {
  if (!_internal_has_transfer_tokens_message()) {
    clear_message_oneof();
    set_has_transfer_tokens_message();
    message_oneof_.transfer_tokens_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_Transfer >(GetArena());
  }
  return message_oneof_.transfer_tokens_message_;
}
inline ::TW::Cosmos::Proto::Message_Transfer* Message::mutable_transfer_tokens_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.transfer_tokens_message)
  return _internal_mutable_transfer_tokens_message();
}

// .TW.Cosmos.Proto.Message.Delegate stake_message = 3;
inline bool Message::_internal_has_stake_message() const {
  return message_oneof_case() == kStakeMessage;
}
inline bool Message::has_stake_message() const {
  return _internal_has_stake_message();
}
inline void Message::set_has_stake_message() {
  _oneof_case_[0] = kStakeMessage;
}
inline void Message::clear_stake_message() {
  if (_internal_has_stake_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.stake_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_Delegate* Message::release_stake_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.stake_message)
  if (_internal_has_stake_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_Delegate* temp = message_oneof_.stake_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.stake_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_Delegate& Message::_internal_stake_message() const {
  return _internal_has_stake_message()
      ? *message_oneof_.stake_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_Delegate&>(::TW::Cosmos::Proto::_Message_Delegate_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_Delegate& Message::stake_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.stake_message)
  return _internal_stake_message();
}
inline ::TW::Cosmos::Proto::Message_Delegate* Message::unsafe_arena_release_stake_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.stake_message)
  if (_internal_has_stake_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_Delegate* temp = message_oneof_.stake_message_;
    message_oneof_.stake_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_stake_message(::TW::Cosmos::Proto::Message_Delegate* stake_message) {
  clear_message_oneof();
  if (stake_message) {
    set_has_stake_message();
    message_oneof_.stake_message_ = stake_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.stake_message)
}
inline ::TW::Cosmos::Proto::Message_Delegate* Message::_internal_mutable_stake_message() {
  if (!_internal_has_stake_message()) {
    clear_message_oneof();
    set_has_stake_message();
    message_oneof_.stake_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_Delegate >(GetArena());
  }
  return message_oneof_.stake_message_;
}
inline ::TW::Cosmos::Proto::Message_Delegate* Message::mutable_stake_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.stake_message)
  return _internal_mutable_stake_message();
}

// .TW.Cosmos.Proto.Message.Undelegate unstake_message = 4;
inline bool Message::_internal_has_unstake_message() const {
  return message_oneof_case() == kUnstakeMessage;
}
inline bool Message::has_unstake_message() const {
  return _internal_has_unstake_message();
}
inline void Message::set_has_unstake_message() {
  _oneof_case_[0] = kUnstakeMessage;
}
inline void Message::clear_unstake_message() {
  if (_internal_has_unstake_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.unstake_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_Undelegate* Message::release_unstake_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.unstake_message)
  if (_internal_has_unstake_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_Undelegate* temp = message_oneof_.unstake_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.unstake_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_Undelegate& Message::_internal_unstake_message() const {
  return _internal_has_unstake_message()
      ? *message_oneof_.unstake_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_Undelegate&>(::TW::Cosmos::Proto::_Message_Undelegate_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_Undelegate& Message::unstake_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.unstake_message)
  return _internal_unstake_message();
}
inline ::TW::Cosmos::Proto::Message_Undelegate* Message::unsafe_arena_release_unstake_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.unstake_message)
  if (_internal_has_unstake_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_Undelegate* temp = message_oneof_.unstake_message_;
    message_oneof_.unstake_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_unstake_message(::TW::Cosmos::Proto::Message_Undelegate* unstake_message) {
  clear_message_oneof();
  if (unstake_message) {
    set_has_unstake_message();
    message_oneof_.unstake_message_ = unstake_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.unstake_message)
}
inline ::TW::Cosmos::Proto::Message_Undelegate* Message::_internal_mutable_unstake_message() {
  if (!_internal_has_unstake_message()) {
    clear_message_oneof();
    set_has_unstake_message();
    message_oneof_.unstake_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_Undelegate >(GetArena());
  }
  return message_oneof_.unstake_message_;
}
inline ::TW::Cosmos::Proto::Message_Undelegate* Message::mutable_unstake_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.unstake_message)
  return _internal_mutable_unstake_message();
}

// .TW.Cosmos.Proto.Message.BeginRedelegate restake_message = 5;
inline bool Message::_internal_has_restake_message() const {
  return message_oneof_case() == kRestakeMessage;
}
inline bool Message::has_restake_message() const {
  return _internal_has_restake_message();
}
inline void Message::set_has_restake_message() {
  _oneof_case_[0] = kRestakeMessage;
}
inline void Message::clear_restake_message() {
  if (_internal_has_restake_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.restake_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_BeginRedelegate* Message::release_restake_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.restake_message)
  if (_internal_has_restake_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_BeginRedelegate* temp = message_oneof_.restake_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.restake_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_BeginRedelegate& Message::_internal_restake_message() const {
  return _internal_has_restake_message()
      ? *message_oneof_.restake_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_BeginRedelegate&>(::TW::Cosmos::Proto::_Message_BeginRedelegate_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_BeginRedelegate& Message::restake_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.restake_message)
  return _internal_restake_message();
}
inline ::TW::Cosmos::Proto::Message_BeginRedelegate* Message::unsafe_arena_release_restake_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.restake_message)
  if (_internal_has_restake_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_BeginRedelegate* temp = message_oneof_.restake_message_;
    message_oneof_.restake_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_restake_message(::TW::Cosmos::Proto::Message_BeginRedelegate* restake_message) {
  clear_message_oneof();
  if (restake_message) {
    set_has_restake_message();
    message_oneof_.restake_message_ = restake_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.restake_message)
}
inline ::TW::Cosmos::Proto::Message_BeginRedelegate* Message::_internal_mutable_restake_message() {
  if (!_internal_has_restake_message()) {
    clear_message_oneof();
    set_has_restake_message();
    message_oneof_.restake_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_BeginRedelegate >(GetArena());
  }
  return message_oneof_.restake_message_;
}
inline ::TW::Cosmos::Proto::Message_BeginRedelegate* Message::mutable_restake_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.restake_message)
  return _internal_mutable_restake_message();
}

// .TW.Cosmos.Proto.Message.WithdrawDelegationReward withdraw_stake_reward_message = 6;
inline bool Message::_internal_has_withdraw_stake_reward_message() const {
  return message_oneof_case() == kWithdrawStakeRewardMessage;
}
inline bool Message::has_withdraw_stake_reward_message() const {
  return _internal_has_withdraw_stake_reward_message();
}
inline void Message::set_has_withdraw_stake_reward_message() {
  _oneof_case_[0] = kWithdrawStakeRewardMessage;
}
inline void Message::clear_withdraw_stake_reward_message() {
  if (_internal_has_withdraw_stake_reward_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.withdraw_stake_reward_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* Message::release_withdraw_stake_reward_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.withdraw_stake_reward_message)
  if (_internal_has_withdraw_stake_reward_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* temp = message_oneof_.withdraw_stake_reward_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.withdraw_stake_reward_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_WithdrawDelegationReward& Message::_internal_withdraw_stake_reward_message() const {
  return _internal_has_withdraw_stake_reward_message()
      ? *message_oneof_.withdraw_stake_reward_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_WithdrawDelegationReward&>(::TW::Cosmos::Proto::_Message_WithdrawDelegationReward_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_WithdrawDelegationReward& Message::withdraw_stake_reward_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.withdraw_stake_reward_message)
  return _internal_withdraw_stake_reward_message();
}
inline ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* Message::unsafe_arena_release_withdraw_stake_reward_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.withdraw_stake_reward_message)
  if (_internal_has_withdraw_stake_reward_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* temp = message_oneof_.withdraw_stake_reward_message_;
    message_oneof_.withdraw_stake_reward_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_withdraw_stake_reward_message(::TW::Cosmos::Proto::Message_WithdrawDelegationReward* withdraw_stake_reward_message) {
  clear_message_oneof();
  if (withdraw_stake_reward_message) {
    set_has_withdraw_stake_reward_message();
    message_oneof_.withdraw_stake_reward_message_ = withdraw_stake_reward_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.withdraw_stake_reward_message)
}
inline ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* Message::_internal_mutable_withdraw_stake_reward_message() {
  if (!_internal_has_withdraw_stake_reward_message()) {
    clear_message_oneof();
    set_has_withdraw_stake_reward_message();
    message_oneof_.withdraw_stake_reward_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_WithdrawDelegationReward >(GetArena());
  }
  return message_oneof_.withdraw_stake_reward_message_;
}
inline ::TW::Cosmos::Proto::Message_WithdrawDelegationReward* Message::mutable_withdraw_stake_reward_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.withdraw_stake_reward_message)
  return _internal_mutable_withdraw_stake_reward_message();
}

// .TW.Cosmos.Proto.Message.RawJSON raw_json_message = 7;
inline bool Message::_internal_has_raw_json_message() const {
  return message_oneof_case() == kRawJsonMessage;
}
inline bool Message::has_raw_json_message() const {
  return _internal_has_raw_json_message();
}
inline void Message::set_has_raw_json_message() {
  _oneof_case_[0] = kRawJsonMessage;
}
inline void Message::clear_raw_json_message() {
  if (_internal_has_raw_json_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.raw_json_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_RawJSON* Message::release_raw_json_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.raw_json_message)
  if (_internal_has_raw_json_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_RawJSON* temp = message_oneof_.raw_json_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.raw_json_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_RawJSON& Message::_internal_raw_json_message() const {
  return _internal_has_raw_json_message()
      ? *message_oneof_.raw_json_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_RawJSON&>(::TW::Cosmos::Proto::_Message_RawJSON_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_RawJSON& Message::raw_json_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.raw_json_message)
  return _internal_raw_json_message();
}
inline ::TW::Cosmos::Proto::Message_RawJSON* Message::unsafe_arena_release_raw_json_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.raw_json_message)
  if (_internal_has_raw_json_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_RawJSON* temp = message_oneof_.raw_json_message_;
    message_oneof_.raw_json_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_raw_json_message(::TW::Cosmos::Proto::Message_RawJSON* raw_json_message) {
  clear_message_oneof();
  if (raw_json_message) {
    set_has_raw_json_message();
    message_oneof_.raw_json_message_ = raw_json_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.raw_json_message)
}
inline ::TW::Cosmos::Proto::Message_RawJSON* Message::_internal_mutable_raw_json_message() {
  if (!_internal_has_raw_json_message()) {
    clear_message_oneof();
    set_has_raw_json_message();
    message_oneof_.raw_json_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_RawJSON >(GetArena());
  }
  return message_oneof_.raw_json_message_;
}
inline ::TW::Cosmos::Proto::Message_RawJSON* Message::mutable_raw_json_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.raw_json_message)
  return _internal_mutable_raw_json_message();
}

// .TW.Cosmos.Proto.Message.WasmTerraExecuteContractTransfer wasm_terra_execute_contract_transfer_message = 8;
inline bool Message::_internal_has_wasm_terra_execute_contract_transfer_message() const {
  return message_oneof_case() == kWasmTerraExecuteContractTransferMessage;
}
inline bool Message::has_wasm_terra_execute_contract_transfer_message() const {
  return _internal_has_wasm_terra_execute_contract_transfer_message();
}
inline void Message::set_has_wasm_terra_execute_contract_transfer_message() {
  _oneof_case_[0] = kWasmTerraExecuteContractTransferMessage;
}
inline void Message::clear_wasm_terra_execute_contract_transfer_message() {
  if (_internal_has_wasm_terra_execute_contract_transfer_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.wasm_terra_execute_contract_transfer_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* Message::release_wasm_terra_execute_contract_transfer_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_transfer_message)
  if (_internal_has_wasm_terra_execute_contract_transfer_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* temp = message_oneof_.wasm_terra_execute_contract_transfer_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.wasm_terra_execute_contract_transfer_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer& Message::_internal_wasm_terra_execute_contract_transfer_message() const {
  return _internal_has_wasm_terra_execute_contract_transfer_message()
      ? *message_oneof_.wasm_terra_execute_contract_transfer_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer&>(::TW::Cosmos::Proto::_Message_WasmTerraExecuteContractTransfer_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer& Message::wasm_terra_execute_contract_transfer_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_transfer_message)
  return _internal_wasm_terra_execute_contract_transfer_message();
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* Message::unsafe_arena_release_wasm_terra_execute_contract_transfer_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_transfer_message)
  if (_internal_has_wasm_terra_execute_contract_transfer_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* temp = message_oneof_.wasm_terra_execute_contract_transfer_message_;
    message_oneof_.wasm_terra_execute_contract_transfer_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_wasm_terra_execute_contract_transfer_message(::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* wasm_terra_execute_contract_transfer_message) {
  clear_message_oneof();
  if (wasm_terra_execute_contract_transfer_message) {
    set_has_wasm_terra_execute_contract_transfer_message();
    message_oneof_.wasm_terra_execute_contract_transfer_message_ = wasm_terra_execute_contract_transfer_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_transfer_message)
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* Message::_internal_mutable_wasm_terra_execute_contract_transfer_message() {
  if (!_internal_has_wasm_terra_execute_contract_transfer_message()) {
    clear_message_oneof();
    set_has_wasm_terra_execute_contract_transfer_message();
    message_oneof_.wasm_terra_execute_contract_transfer_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer >(GetArena());
  }
  return message_oneof_.wasm_terra_execute_contract_transfer_message_;
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractTransfer* Message::mutable_wasm_terra_execute_contract_transfer_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_transfer_message)
  return _internal_mutable_wasm_terra_execute_contract_transfer_message();
}

// .TW.Cosmos.Proto.Message.WasmTerraExecuteContractSend wasm_terra_execute_contract_send_message = 9;
inline bool Message::_internal_has_wasm_terra_execute_contract_send_message() const {
  return message_oneof_case() == kWasmTerraExecuteContractSendMessage;
}
inline bool Message::has_wasm_terra_execute_contract_send_message() const {
  return _internal_has_wasm_terra_execute_contract_send_message();
}
inline void Message::set_has_wasm_terra_execute_contract_send_message() {
  _oneof_case_[0] = kWasmTerraExecuteContractSendMessage;
}
inline void Message::clear_wasm_terra_execute_contract_send_message() {
  if (_internal_has_wasm_terra_execute_contract_send_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.wasm_terra_execute_contract_send_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* Message::release_wasm_terra_execute_contract_send_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_send_message)
  if (_internal_has_wasm_terra_execute_contract_send_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* temp = message_oneof_.wasm_terra_execute_contract_send_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.wasm_terra_execute_contract_send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend& Message::_internal_wasm_terra_execute_contract_send_message() const {
  return _internal_has_wasm_terra_execute_contract_send_message()
      ? *message_oneof_.wasm_terra_execute_contract_send_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend&>(::TW::Cosmos::Proto::_Message_WasmTerraExecuteContractSend_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend& Message::wasm_terra_execute_contract_send_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_send_message)
  return _internal_wasm_terra_execute_contract_send_message();
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* Message::unsafe_arena_release_wasm_terra_execute_contract_send_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_send_message)
  if (_internal_has_wasm_terra_execute_contract_send_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* temp = message_oneof_.wasm_terra_execute_contract_send_message_;
    message_oneof_.wasm_terra_execute_contract_send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_wasm_terra_execute_contract_send_message(::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* wasm_terra_execute_contract_send_message) {
  clear_message_oneof();
  if (wasm_terra_execute_contract_send_message) {
    set_has_wasm_terra_execute_contract_send_message();
    message_oneof_.wasm_terra_execute_contract_send_message_ = wasm_terra_execute_contract_send_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_send_message)
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* Message::_internal_mutable_wasm_terra_execute_contract_send_message() {
  if (!_internal_has_wasm_terra_execute_contract_send_message()) {
    clear_message_oneof();
    set_has_wasm_terra_execute_contract_send_message();
    message_oneof_.wasm_terra_execute_contract_send_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend >(GetArena());
  }
  return message_oneof_.wasm_terra_execute_contract_send_message_;
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractSend* Message::mutable_wasm_terra_execute_contract_send_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_send_message)
  return _internal_mutable_wasm_terra_execute_contract_send_message();
}

// .TW.Cosmos.Proto.Message.THORChainSend thorchain_send_message = 10;
inline bool Message::_internal_has_thorchain_send_message() const {
  return message_oneof_case() == kThorchainSendMessage;
}
inline bool Message::has_thorchain_send_message() const {
  return _internal_has_thorchain_send_message();
}
inline void Message::set_has_thorchain_send_message() {
  _oneof_case_[0] = kThorchainSendMessage;
}
inline void Message::clear_thorchain_send_message() {
  if (_internal_has_thorchain_send_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.thorchain_send_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_THORChainSend* Message::release_thorchain_send_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.thorchain_send_message)
  if (_internal_has_thorchain_send_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_THORChainSend* temp = message_oneof_.thorchain_send_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.thorchain_send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_THORChainSend& Message::_internal_thorchain_send_message() const {
  return _internal_has_thorchain_send_message()
      ? *message_oneof_.thorchain_send_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_THORChainSend&>(::TW::Cosmos::Proto::_Message_THORChainSend_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_THORChainSend& Message::thorchain_send_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.thorchain_send_message)
  return _internal_thorchain_send_message();
}
inline ::TW::Cosmos::Proto::Message_THORChainSend* Message::unsafe_arena_release_thorchain_send_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.thorchain_send_message)
  if (_internal_has_thorchain_send_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_THORChainSend* temp = message_oneof_.thorchain_send_message_;
    message_oneof_.thorchain_send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_thorchain_send_message(::TW::Cosmos::Proto::Message_THORChainSend* thorchain_send_message) {
  clear_message_oneof();
  if (thorchain_send_message) {
    set_has_thorchain_send_message();
    message_oneof_.thorchain_send_message_ = thorchain_send_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.thorchain_send_message)
}
inline ::TW::Cosmos::Proto::Message_THORChainSend* Message::_internal_mutable_thorchain_send_message() {
  if (!_internal_has_thorchain_send_message()) {
    clear_message_oneof();
    set_has_thorchain_send_message();
    message_oneof_.thorchain_send_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_THORChainSend >(GetArena());
  }
  return message_oneof_.thorchain_send_message_;
}
inline ::TW::Cosmos::Proto::Message_THORChainSend* Message::mutable_thorchain_send_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.thorchain_send_message)
  return _internal_mutable_thorchain_send_message();
}

// .TW.Cosmos.Proto.Message.WasmTerraExecuteContractGeneric wasm_terra_execute_contract_generic = 11;
inline bool Message::_internal_has_wasm_terra_execute_contract_generic() const {
  return message_oneof_case() == kWasmTerraExecuteContractGeneric;
}
inline bool Message::has_wasm_terra_execute_contract_generic() const {
  return _internal_has_wasm_terra_execute_contract_generic();
}
inline void Message::set_has_wasm_terra_execute_contract_generic() {
  _oneof_case_[0] = kWasmTerraExecuteContractGeneric;
}
inline void Message::clear_wasm_terra_execute_contract_generic() {
  if (_internal_has_wasm_terra_execute_contract_generic()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.wasm_terra_execute_contract_generic_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* Message::release_wasm_terra_execute_contract_generic() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_generic)
  if (_internal_has_wasm_terra_execute_contract_generic()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* temp = message_oneof_.wasm_terra_execute_contract_generic_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.wasm_terra_execute_contract_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric& Message::_internal_wasm_terra_execute_contract_generic() const {
  return _internal_has_wasm_terra_execute_contract_generic()
      ? *message_oneof_.wasm_terra_execute_contract_generic_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric&>(::TW::Cosmos::Proto::_Message_WasmTerraExecuteContractGeneric_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric& Message::wasm_terra_execute_contract_generic() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_generic)
  return _internal_wasm_terra_execute_contract_generic();
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* Message::unsafe_arena_release_wasm_terra_execute_contract_generic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_generic)
  if (_internal_has_wasm_terra_execute_contract_generic()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* temp = message_oneof_.wasm_terra_execute_contract_generic_;
    message_oneof_.wasm_terra_execute_contract_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_wasm_terra_execute_contract_generic(::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* wasm_terra_execute_contract_generic) {
  clear_message_oneof();
  if (wasm_terra_execute_contract_generic) {
    set_has_wasm_terra_execute_contract_generic();
    message_oneof_.wasm_terra_execute_contract_generic_ = wasm_terra_execute_contract_generic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_generic)
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* Message::_internal_mutable_wasm_terra_execute_contract_generic() {
  if (!_internal_has_wasm_terra_execute_contract_generic()) {
    clear_message_oneof();
    set_has_wasm_terra_execute_contract_generic();
    message_oneof_.wasm_terra_execute_contract_generic_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric >(GetArena());
  }
  return message_oneof_.wasm_terra_execute_contract_generic_;
}
inline ::TW::Cosmos::Proto::Message_WasmTerraExecuteContractGeneric* Message::mutable_wasm_terra_execute_contract_generic() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.wasm_terra_execute_contract_generic)
  return _internal_mutable_wasm_terra_execute_contract_generic();
}

// .TW.Cosmos.Proto.Message.WasmExecuteContractTransfer wasm_execute_contract_transfer_message = 12;
inline bool Message::_internal_has_wasm_execute_contract_transfer_message() const {
  return message_oneof_case() == kWasmExecuteContractTransferMessage;
}
inline bool Message::has_wasm_execute_contract_transfer_message() const {
  return _internal_has_wasm_execute_contract_transfer_message();
}
inline void Message::set_has_wasm_execute_contract_transfer_message() {
  _oneof_case_[0] = kWasmExecuteContractTransferMessage;
}
inline void Message::clear_wasm_execute_contract_transfer_message() {
  if (_internal_has_wasm_execute_contract_transfer_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.wasm_execute_contract_transfer_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* Message::release_wasm_execute_contract_transfer_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.wasm_execute_contract_transfer_message)
  if (_internal_has_wasm_execute_contract_transfer_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* temp = message_oneof_.wasm_execute_contract_transfer_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.wasm_execute_contract_transfer_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer& Message::_internal_wasm_execute_contract_transfer_message() const {
  return _internal_has_wasm_execute_contract_transfer_message()
      ? *message_oneof_.wasm_execute_contract_transfer_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer&>(::TW::Cosmos::Proto::_Message_WasmExecuteContractTransfer_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer& Message::wasm_execute_contract_transfer_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.wasm_execute_contract_transfer_message)
  return _internal_wasm_execute_contract_transfer_message();
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* Message::unsafe_arena_release_wasm_execute_contract_transfer_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.wasm_execute_contract_transfer_message)
  if (_internal_has_wasm_execute_contract_transfer_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* temp = message_oneof_.wasm_execute_contract_transfer_message_;
    message_oneof_.wasm_execute_contract_transfer_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_wasm_execute_contract_transfer_message(::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* wasm_execute_contract_transfer_message) {
  clear_message_oneof();
  if (wasm_execute_contract_transfer_message) {
    set_has_wasm_execute_contract_transfer_message();
    message_oneof_.wasm_execute_contract_transfer_message_ = wasm_execute_contract_transfer_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.wasm_execute_contract_transfer_message)
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* Message::_internal_mutable_wasm_execute_contract_transfer_message() {
  if (!_internal_has_wasm_execute_contract_transfer_message()) {
    clear_message_oneof();
    set_has_wasm_execute_contract_transfer_message();
    message_oneof_.wasm_execute_contract_transfer_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer >(GetArena());
  }
  return message_oneof_.wasm_execute_contract_transfer_message_;
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractTransfer* Message::mutable_wasm_execute_contract_transfer_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.wasm_execute_contract_transfer_message)
  return _internal_mutable_wasm_execute_contract_transfer_message();
}

// .TW.Cosmos.Proto.Message.WasmExecuteContractSend wasm_execute_contract_send_message = 13;
inline bool Message::_internal_has_wasm_execute_contract_send_message() const {
  return message_oneof_case() == kWasmExecuteContractSendMessage;
}
inline bool Message::has_wasm_execute_contract_send_message() const {
  return _internal_has_wasm_execute_contract_send_message();
}
inline void Message::set_has_wasm_execute_contract_send_message() {
  _oneof_case_[0] = kWasmExecuteContractSendMessage;
}
inline void Message::clear_wasm_execute_contract_send_message() {
  if (_internal_has_wasm_execute_contract_send_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.wasm_execute_contract_send_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* Message::release_wasm_execute_contract_send_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.wasm_execute_contract_send_message)
  if (_internal_has_wasm_execute_contract_send_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* temp = message_oneof_.wasm_execute_contract_send_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.wasm_execute_contract_send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_WasmExecuteContractSend& Message::_internal_wasm_execute_contract_send_message() const {
  return _internal_has_wasm_execute_contract_send_message()
      ? *message_oneof_.wasm_execute_contract_send_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_WasmExecuteContractSend&>(::TW::Cosmos::Proto::_Message_WasmExecuteContractSend_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_WasmExecuteContractSend& Message::wasm_execute_contract_send_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.wasm_execute_contract_send_message)
  return _internal_wasm_execute_contract_send_message();
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* Message::unsafe_arena_release_wasm_execute_contract_send_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.wasm_execute_contract_send_message)
  if (_internal_has_wasm_execute_contract_send_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* temp = message_oneof_.wasm_execute_contract_send_message_;
    message_oneof_.wasm_execute_contract_send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_wasm_execute_contract_send_message(::TW::Cosmos::Proto::Message_WasmExecuteContractSend* wasm_execute_contract_send_message) {
  clear_message_oneof();
  if (wasm_execute_contract_send_message) {
    set_has_wasm_execute_contract_send_message();
    message_oneof_.wasm_execute_contract_send_message_ = wasm_execute_contract_send_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.wasm_execute_contract_send_message)
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* Message::_internal_mutable_wasm_execute_contract_send_message() {
  if (!_internal_has_wasm_execute_contract_send_message()) {
    clear_message_oneof();
    set_has_wasm_execute_contract_send_message();
    message_oneof_.wasm_execute_contract_send_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_WasmExecuteContractSend >(GetArena());
  }
  return message_oneof_.wasm_execute_contract_send_message_;
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractSend* Message::mutable_wasm_execute_contract_send_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.wasm_execute_contract_send_message)
  return _internal_mutable_wasm_execute_contract_send_message();
}

// .TW.Cosmos.Proto.Message.WasmExecuteContractGeneric wasm_execute_contract_generic = 14;
inline bool Message::_internal_has_wasm_execute_contract_generic() const {
  return message_oneof_case() == kWasmExecuteContractGeneric;
}
inline bool Message::has_wasm_execute_contract_generic() const {
  return _internal_has_wasm_execute_contract_generic();
}
inline void Message::set_has_wasm_execute_contract_generic() {
  _oneof_case_[0] = kWasmExecuteContractGeneric;
}
inline void Message::clear_wasm_execute_contract_generic() {
  if (_internal_has_wasm_execute_contract_generic()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.wasm_execute_contract_generic_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* Message::release_wasm_execute_contract_generic() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.wasm_execute_contract_generic)
  if (_internal_has_wasm_execute_contract_generic()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* temp = message_oneof_.wasm_execute_contract_generic_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.wasm_execute_contract_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric& Message::_internal_wasm_execute_contract_generic() const {
  return _internal_has_wasm_execute_contract_generic()
      ? *message_oneof_.wasm_execute_contract_generic_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric&>(::TW::Cosmos::Proto::_Message_WasmExecuteContractGeneric_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric& Message::wasm_execute_contract_generic() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.wasm_execute_contract_generic)
  return _internal_wasm_execute_contract_generic();
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* Message::unsafe_arena_release_wasm_execute_contract_generic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.wasm_execute_contract_generic)
  if (_internal_has_wasm_execute_contract_generic()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* temp = message_oneof_.wasm_execute_contract_generic_;
    message_oneof_.wasm_execute_contract_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_wasm_execute_contract_generic(::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* wasm_execute_contract_generic) {
  clear_message_oneof();
  if (wasm_execute_contract_generic) {
    set_has_wasm_execute_contract_generic();
    message_oneof_.wasm_execute_contract_generic_ = wasm_execute_contract_generic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.wasm_execute_contract_generic)
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* Message::_internal_mutable_wasm_execute_contract_generic() {
  if (!_internal_has_wasm_execute_contract_generic()) {
    clear_message_oneof();
    set_has_wasm_execute_contract_generic();
    message_oneof_.wasm_execute_contract_generic_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric >(GetArena());
  }
  return message_oneof_.wasm_execute_contract_generic_;
}
inline ::TW::Cosmos::Proto::Message_WasmExecuteContractGeneric* Message::mutable_wasm_execute_contract_generic() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.wasm_execute_contract_generic)
  return _internal_mutable_wasm_execute_contract_generic();
}

// .TW.Cosmos.Proto.Message.SignDirect sign_direct_message = 15;
inline bool Message::_internal_has_sign_direct_message() const {
  return message_oneof_case() == kSignDirectMessage;
}
inline bool Message::has_sign_direct_message() const {
  return _internal_has_sign_direct_message();
}
inline void Message::set_has_sign_direct_message() {
  _oneof_case_[0] = kSignDirectMessage;
}
inline void Message::clear_sign_direct_message() {
  if (_internal_has_sign_direct_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.sign_direct_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_SignDirect* Message::release_sign_direct_message() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.sign_direct_message)
  if (_internal_has_sign_direct_message()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_SignDirect* temp = message_oneof_.sign_direct_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.sign_direct_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_SignDirect& Message::_internal_sign_direct_message() const {
  return _internal_has_sign_direct_message()
      ? *message_oneof_.sign_direct_message_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_SignDirect&>(::TW::Cosmos::Proto::_Message_SignDirect_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_SignDirect& Message::sign_direct_message() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.sign_direct_message)
  return _internal_sign_direct_message();
}
inline ::TW::Cosmos::Proto::Message_SignDirect* Message::unsafe_arena_release_sign_direct_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.sign_direct_message)
  if (_internal_has_sign_direct_message()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_SignDirect* temp = message_oneof_.sign_direct_message_;
    message_oneof_.sign_direct_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_sign_direct_message(::TW::Cosmos::Proto::Message_SignDirect* sign_direct_message) {
  clear_message_oneof();
  if (sign_direct_message) {
    set_has_sign_direct_message();
    message_oneof_.sign_direct_message_ = sign_direct_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.sign_direct_message)
}
inline ::TW::Cosmos::Proto::Message_SignDirect* Message::_internal_mutable_sign_direct_message() {
  if (!_internal_has_sign_direct_message()) {
    clear_message_oneof();
    set_has_sign_direct_message();
    message_oneof_.sign_direct_message_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_SignDirect >(GetArena());
  }
  return message_oneof_.sign_direct_message_;
}
inline ::TW::Cosmos::Proto::Message_SignDirect* Message::mutable_sign_direct_message() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.sign_direct_message)
  return _internal_mutable_sign_direct_message();
}

// .TW.Cosmos.Proto.Message.AuthGrant auth_grant = 16;
inline bool Message::_internal_has_auth_grant() const {
  return message_oneof_case() == kAuthGrant;
}
inline bool Message::has_auth_grant() const {
  return _internal_has_auth_grant();
}
inline void Message::set_has_auth_grant() {
  _oneof_case_[0] = kAuthGrant;
}
inline void Message::clear_auth_grant() {
  if (_internal_has_auth_grant()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.auth_grant_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_AuthGrant* Message::release_auth_grant() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.auth_grant)
  if (_internal_has_auth_grant()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_AuthGrant* temp = message_oneof_.auth_grant_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.auth_grant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_AuthGrant& Message::_internal_auth_grant() const {
  return _internal_has_auth_grant()
      ? *message_oneof_.auth_grant_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_AuthGrant&>(::TW::Cosmos::Proto::_Message_AuthGrant_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_AuthGrant& Message::auth_grant() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.auth_grant)
  return _internal_auth_grant();
}
inline ::TW::Cosmos::Proto::Message_AuthGrant* Message::unsafe_arena_release_auth_grant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.auth_grant)
  if (_internal_has_auth_grant()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_AuthGrant* temp = message_oneof_.auth_grant_;
    message_oneof_.auth_grant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_auth_grant(::TW::Cosmos::Proto::Message_AuthGrant* auth_grant) {
  clear_message_oneof();
  if (auth_grant) {
    set_has_auth_grant();
    message_oneof_.auth_grant_ = auth_grant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.auth_grant)
}
inline ::TW::Cosmos::Proto::Message_AuthGrant* Message::_internal_mutable_auth_grant() {
  if (!_internal_has_auth_grant()) {
    clear_message_oneof();
    set_has_auth_grant();
    message_oneof_.auth_grant_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_AuthGrant >(GetArena());
  }
  return message_oneof_.auth_grant_;
}
inline ::TW::Cosmos::Proto::Message_AuthGrant* Message::mutable_auth_grant() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.auth_grant)
  return _internal_mutable_auth_grant();
}

// .TW.Cosmos.Proto.Message.AuthRevoke auth_revoke = 17;
inline bool Message::_internal_has_auth_revoke() const {
  return message_oneof_case() == kAuthRevoke;
}
inline bool Message::has_auth_revoke() const {
  return _internal_has_auth_revoke();
}
inline void Message::set_has_auth_revoke() {
  _oneof_case_[0] = kAuthRevoke;
}
inline void Message::clear_auth_revoke() {
  if (_internal_has_auth_revoke()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.auth_revoke_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_AuthRevoke* Message::release_auth_revoke() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.auth_revoke)
  if (_internal_has_auth_revoke()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_AuthRevoke* temp = message_oneof_.auth_revoke_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.auth_revoke_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_AuthRevoke& Message::_internal_auth_revoke() const {
  return _internal_has_auth_revoke()
      ? *message_oneof_.auth_revoke_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_AuthRevoke&>(::TW::Cosmos::Proto::_Message_AuthRevoke_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_AuthRevoke& Message::auth_revoke() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.auth_revoke)
  return _internal_auth_revoke();
}
inline ::TW::Cosmos::Proto::Message_AuthRevoke* Message::unsafe_arena_release_auth_revoke() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.auth_revoke)
  if (_internal_has_auth_revoke()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_AuthRevoke* temp = message_oneof_.auth_revoke_;
    message_oneof_.auth_revoke_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_auth_revoke(::TW::Cosmos::Proto::Message_AuthRevoke* auth_revoke) {
  clear_message_oneof();
  if (auth_revoke) {
    set_has_auth_revoke();
    message_oneof_.auth_revoke_ = auth_revoke;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.auth_revoke)
}
inline ::TW::Cosmos::Proto::Message_AuthRevoke* Message::_internal_mutable_auth_revoke() {
  if (!_internal_has_auth_revoke()) {
    clear_message_oneof();
    set_has_auth_revoke();
    message_oneof_.auth_revoke_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_AuthRevoke >(GetArena());
  }
  return message_oneof_.auth_revoke_;
}
inline ::TW::Cosmos::Proto::Message_AuthRevoke* Message::mutable_auth_revoke() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.auth_revoke)
  return _internal_mutable_auth_revoke();
}

// .TW.Cosmos.Proto.Message.MsgVote msg_vote = 18;
inline bool Message::_internal_has_msg_vote() const {
  return message_oneof_case() == kMsgVote;
}
inline bool Message::has_msg_vote() const {
  return _internal_has_msg_vote();
}
inline void Message::set_has_msg_vote() {
  _oneof_case_[0] = kMsgVote;
}
inline void Message::clear_msg_vote() {
  if (_internal_has_msg_vote()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.msg_vote_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Cosmos::Proto::Message_MsgVote* Message::release_msg_vote() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.Message.msg_vote)
  if (_internal_has_msg_vote()) {
    clear_has_message_oneof();
      ::TW::Cosmos::Proto::Message_MsgVote* temp = message_oneof_.msg_vote_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.msg_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::Message_MsgVote& Message::_internal_msg_vote() const {
  return _internal_has_msg_vote()
      ? *message_oneof_.msg_vote_
      : reinterpret_cast< ::TW::Cosmos::Proto::Message_MsgVote&>(::TW::Cosmos::Proto::_Message_MsgVote_default_instance_);
}
inline const ::TW::Cosmos::Proto::Message_MsgVote& Message::msg_vote() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.Message.msg_vote)
  return _internal_msg_vote();
}
inline ::TW::Cosmos::Proto::Message_MsgVote* Message::unsafe_arena_release_msg_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Cosmos.Proto.Message.msg_vote)
  if (_internal_has_msg_vote()) {
    clear_has_message_oneof();
    ::TW::Cosmos::Proto::Message_MsgVote* temp = message_oneof_.msg_vote_;
    message_oneof_.msg_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_msg_vote(::TW::Cosmos::Proto::Message_MsgVote* msg_vote) {
  clear_message_oneof();
  if (msg_vote) {
    set_has_msg_vote();
    message_oneof_.msg_vote_ = msg_vote;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.Message.msg_vote)
}
inline ::TW::Cosmos::Proto::Message_MsgVote* Message::_internal_mutable_msg_vote() {
  if (!_internal_has_msg_vote()) {
    clear_message_oneof();
    set_has_msg_vote();
    message_oneof_.msg_vote_ = CreateMaybeMessage< ::TW::Cosmos::Proto::Message_MsgVote >(GetArena());
  }
  return message_oneof_.msg_vote_;
}
inline ::TW::Cosmos::Proto::Message_MsgVote* Message::mutable_msg_vote() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.Message.msg_vote)
  return _internal_mutable_msg_vote();
}

inline bool Message::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Message::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Message::MessageOneofCase Message::message_oneof_case() const {
  return Message::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// .TW.Cosmos.Proto.SigningMode signing_mode = 1;
inline void SigningInput::clear_signing_mode() {
  signing_mode_ = 0;
}
inline ::TW::Cosmos::Proto::SigningMode SigningInput::_internal_signing_mode() const {
  return static_cast< ::TW::Cosmos::Proto::SigningMode >(signing_mode_);
}
inline ::TW::Cosmos::Proto::SigningMode SigningInput::signing_mode() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningInput.signing_mode)
  return _internal_signing_mode();
}
inline void SigningInput::_internal_set_signing_mode(::TW::Cosmos::Proto::SigningMode value) {
  
  signing_mode_ = value;
}
inline void SigningInput::set_signing_mode(::TW::Cosmos::Proto::SigningMode value) {
  _internal_set_signing_mode(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningInput.signing_mode)
}

// uint64 account_number = 2;
inline void SigningInput::clear_account_number() {
  account_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_account_number() const {
  return account_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::account_number() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningInput.account_number)
  return _internal_account_number();
}
inline void SigningInput::_internal_set_account_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_number_ = value;
}
inline void SigningInput::set_account_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningInput.account_number)
}

// string chain_id = 3;
inline void SigningInput::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& SigningInput::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningInput.chain_id)
  return _internal_chain_id();
}
inline void SigningInput::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningInput.chain_id)
}
inline std::string* SigningInput::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningInput.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& SigningInput::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void SigningInput::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_chain_id(std::string&& value) {
  
  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.SigningInput.chain_id)
}
inline void SigningInput::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.SigningInput.chain_id)
}
inline void SigningInput::set_chain_id(const char* value,
    size_t size) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.SigningInput.chain_id)
}
inline std::string* SigningInput::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.SigningInput.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.SigningInput.chain_id)
}

// .TW.Cosmos.Proto.Fee fee = 4;
inline bool SigningInput::_internal_has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline bool SigningInput::has_fee() const {
  return _internal_has_fee();
}
inline void SigningInput::clear_fee() {
  if (GetArena() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
inline const ::TW::Cosmos::Proto::Fee& SigningInput::_internal_fee() const {
  const ::TW::Cosmos::Proto::Fee* p = fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Cosmos::Proto::Fee&>(
      ::TW::Cosmos::Proto::_Fee_default_instance_);
}
inline const ::TW::Cosmos::Proto::Fee& SigningInput::fee() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningInput.fee)
  return _internal_fee();
}
inline void SigningInput::unsafe_arena_set_allocated_fee(
    ::TW::Cosmos::Proto::Fee* fee) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Cosmos.Proto.SigningInput.fee)
}
inline ::TW::Cosmos::Proto::Fee* SigningInput::release_fee() {
  
  ::TW::Cosmos::Proto::Fee* temp = fee_;
  fee_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Cosmos::Proto::Fee* SigningInput::unsafe_arena_release_fee() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.SigningInput.fee)
  
  ::TW::Cosmos::Proto::Fee* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::TW::Cosmos::Proto::Fee* SigningInput::_internal_mutable_fee() {
  
  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Cosmos::Proto::Fee>(GetArena());
    fee_ = p;
  }
  return fee_;
}
inline ::TW::Cosmos::Proto::Fee* SigningInput::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningInput.fee)
  return _internal_mutable_fee();
}
inline void SigningInput::set_allocated_fee(::TW::Cosmos::Proto::Fee* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fee_;
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fee);
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    
  } else {
    
  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.SigningInput.fee)
}

// string memo = 5;
inline void SigningInput::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& SigningInput::memo() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningInput.memo)
  return _internal_memo();
}
inline void SigningInput::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningInput.memo)
}
inline std::string* SigningInput::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningInput.memo)
  return _internal_mutable_memo();
}
inline const std::string& SigningInput::_internal_memo() const {
  return memo_.Get();
}
inline void SigningInput::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_memo(std::string&& value) {
  
  memo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.SigningInput.memo)
}
inline void SigningInput::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.SigningInput.memo)
}
inline void SigningInput::set_memo(const char* value,
    size_t size) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.SigningInput.memo)
}
inline std::string* SigningInput::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.SigningInput.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.SigningInput.memo)
}

// uint64 sequence = 6;
inline void SigningInput::clear_sequence() {
  sequence_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::sequence() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningInput.sequence)
  return _internal_sequence();
}
inline void SigningInput::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_ = value;
}
inline void SigningInput::set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningInput.sequence)
}

// bytes private_key = 7;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.SigningInput.private_key)
}

// repeated .TW.Cosmos.Proto.Message messages = 8;
inline int SigningInput::_internal_messages_size() const {
  return messages_.size();
}
inline int SigningInput::messages_size() const {
  return _internal_messages_size();
}
inline void SigningInput::clear_messages() {
  messages_.Clear();
}
inline ::TW::Cosmos::Proto::Message* SigningInput::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningInput.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Message >*
SigningInput::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:TW.Cosmos.Proto.SigningInput.messages)
  return &messages_;
}
inline const ::TW::Cosmos::Proto::Message& SigningInput::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::TW::Cosmos::Proto::Message& SigningInput::messages(int index) const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningInput.messages)
  return _internal_messages(index);
}
inline ::TW::Cosmos::Proto::Message* SigningInput::_internal_add_messages() {
  return messages_.Add();
}
inline ::TW::Cosmos::Proto::Message* SigningInput::add_messages() {
  // @@protoc_insertion_point(field_add:TW.Cosmos.Proto.SigningInput.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Cosmos::Proto::Message >&
SigningInput::messages() const {
  // @@protoc_insertion_point(field_list:TW.Cosmos.Proto.SigningInput.messages)
  return messages_;
}

// .TW.Cosmos.Proto.BroadcastMode mode = 9;
inline void SigningInput::clear_mode() {
  mode_ = 0;
}
inline ::TW::Cosmos::Proto::BroadcastMode SigningInput::_internal_mode() const {
  return static_cast< ::TW::Cosmos::Proto::BroadcastMode >(mode_);
}
inline ::TW::Cosmos::Proto::BroadcastMode SigningInput::mode() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningInput.mode)
  return _internal_mode();
}
inline void SigningInput::_internal_set_mode(::TW::Cosmos::Proto::BroadcastMode value) {
  
  mode_ = value;
}
inline void SigningInput::set_mode(::TW::Cosmos::Proto::BroadcastMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningInput.mode)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes signature = 1;
inline void SigningOutput::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningOutput.signature)
  return _internal_signature();
}
inline void SigningOutput::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningOutput.signature)
  return _internal_mutable_signature();
}
inline const std::string& SigningOutput::_internal_signature() const {
  return signature_.Get();
}
inline void SigningOutput::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.SigningOutput.signature)
}
inline void SigningOutput::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.SigningOutput.signature)
}
inline void SigningOutput::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_signature() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.SigningOutput.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.SigningOutput.signature)
}

// string json = 2;
inline void SigningOutput::clear_json() {
  json_.ClearToEmpty();
}
inline const std::string& SigningOutput::json() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningOutput.json)
  return _internal_json();
}
inline void SigningOutput::set_json(const std::string& value) {
  _internal_set_json(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningOutput.json)
}
inline std::string* SigningOutput::mutable_json() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningOutput.json)
  return _internal_mutable_json();
}
inline const std::string& SigningOutput::_internal_json() const {
  return json_.Get();
}
inline void SigningOutput::_internal_set_json(const std::string& value) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_json(std::string&& value) {
  
  json_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.SigningOutput.json)
}
inline void SigningOutput::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.SigningOutput.json)
}
inline void SigningOutput::set_json(const char* value,
    size_t size) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.SigningOutput.json)
}
inline std::string* SigningOutput::_internal_mutable_json() {
  
  return json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_json() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.SigningOutput.json)
  return json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.SigningOutput.json)
}

// string serialized = 3;
inline void SigningOutput::clear_serialized() {
  serialized_.ClearToEmpty();
}
inline const std::string& SigningOutput::serialized() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningOutput.serialized)
  return _internal_serialized();
}
inline void SigningOutput::set_serialized(const std::string& value) {
  _internal_set_serialized(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningOutput.serialized)
}
inline std::string* SigningOutput::mutable_serialized() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningOutput.serialized)
  return _internal_mutable_serialized();
}
inline const std::string& SigningOutput::_internal_serialized() const {
  return serialized_.Get();
}
inline void SigningOutput::_internal_set_serialized(const std::string& value) {
  
  serialized_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_serialized(std::string&& value) {
  
  serialized_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.SigningOutput.serialized)
}
inline void SigningOutput::set_serialized(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialized_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.SigningOutput.serialized)
}
inline void SigningOutput::set_serialized(const char* value,
    size_t size) {
  
  serialized_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.SigningOutput.serialized)
}
inline std::string* SigningOutput::_internal_mutable_serialized() {
  
  return serialized_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_serialized() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.SigningOutput.serialized)
  return serialized_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_serialized(std::string* serialized) {
  if (serialized != nullptr) {
    
  } else {
    
  }
  serialized_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.SigningOutput.serialized)
}

// string error = 4;
inline void SigningOutput::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningOutput.error)
}
inline std::string* SigningOutput::mutable_error() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningOutput.error)
  return _internal_mutable_error();
}
inline const std::string& SigningOutput::_internal_error() const {
  return error_.Get();
}
inline void SigningOutput::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.SigningOutput.error)
}
inline void SigningOutput::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.SigningOutput.error)
}
inline void SigningOutput::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.SigningOutput.error)
}
inline std::string* SigningOutput::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_error() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.SigningOutput.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.SigningOutput.error)
}

// string signature_json = 5;
inline void SigningOutput::clear_signature_json() {
  signature_json_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature_json() const {
  // @@protoc_insertion_point(field_get:TW.Cosmos.Proto.SigningOutput.signature_json)
  return _internal_signature_json();
}
inline void SigningOutput::set_signature_json(const std::string& value) {
  _internal_set_signature_json(value);
  // @@protoc_insertion_point(field_set:TW.Cosmos.Proto.SigningOutput.signature_json)
}
inline std::string* SigningOutput::mutable_signature_json() {
  // @@protoc_insertion_point(field_mutable:TW.Cosmos.Proto.SigningOutput.signature_json)
  return _internal_mutable_signature_json();
}
inline const std::string& SigningOutput::_internal_signature_json() const {
  return signature_json_.Get();
}
inline void SigningOutput::_internal_set_signature_json(const std::string& value) {
  
  signature_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_signature_json(std::string&& value) {
  
  signature_json_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Cosmos.Proto.SigningOutput.signature_json)
}
inline void SigningOutput::set_signature_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Cosmos.Proto.SigningOutput.signature_json)
}
inline void SigningOutput::set_signature_json(const char* value,
    size_t size) {
  
  signature_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Cosmos.Proto.SigningOutput.signature_json)
}
inline std::string* SigningOutput::_internal_mutable_signature_json() {
  
  return signature_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_signature_json() {
  // @@protoc_insertion_point(field_release:TW.Cosmos.Proto.SigningOutput.signature_json)
  return signature_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_signature_json(std::string* signature_json) {
  if (signature_json != nullptr) {
    
  } else {
    
  }
  signature_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Cosmos.Proto.SigningOutput.signature_json)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Cosmos
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::Cosmos::Proto::Message_AuthorizationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Cosmos::Proto::Message_AuthorizationType>() {
  return ::TW::Cosmos::Proto::Message_AuthorizationType_descriptor();
}
template <> struct is_proto_enum< ::TW::Cosmos::Proto::Message_VoteOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Cosmos::Proto::Message_VoteOption>() {
  return ::TW::Cosmos::Proto::Message_VoteOption_descriptor();
}
template <> struct is_proto_enum< ::TW::Cosmos::Proto::BroadcastMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Cosmos::Proto::BroadcastMode>() {
  return ::TW::Cosmos::Proto::BroadcastMode_descriptor();
}
template <> struct is_proto_enum< ::TW::Cosmos::Proto::SigningMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Cosmos::Proto::SigningMode>() {
  return ::TW::Cosmos::Proto::SigningMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Cosmos_2eproto
