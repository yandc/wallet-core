// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Elrond.proto

#include "Elrond.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Elrond_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accounts_Elrond_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Elrond_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EGLDTransfer_Elrond_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Elrond_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ESDTNFTTransfer_Elrond_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Elrond_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ESDTTransfer_Elrond_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Elrond_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenericAction_Elrond_2eproto;
namespace TW {
namespace Elrond {
namespace Proto {
class GenericActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericAction> _instance;
} _GenericAction_default_instance_;
class EGLDTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EGLDTransfer> _instance;
} _EGLDTransfer_default_instance_;
class ESDTTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ESDTTransfer> _instance;
} _ESDTTransfer_default_instance_;
class ESDTNFTTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ESDTNFTTransfer> _instance;
} _ESDTNFTTransfer_default_instance_;
class AccountsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accounts> _instance;
} _Accounts_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Elrond
}  // namespace TW
static void InitDefaultsscc_info_Accounts_Elrond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Elrond::Proto::_Accounts_default_instance_;
    new (ptr) ::TW::Elrond::Proto::Accounts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accounts_Elrond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Accounts_Elrond_2eproto}, {}};

static void InitDefaultsscc_info_EGLDTransfer_Elrond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Elrond::Proto::_EGLDTransfer_default_instance_;
    new (ptr) ::TW::Elrond::Proto::EGLDTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EGLDTransfer_Elrond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EGLDTransfer_Elrond_2eproto}, {
      &scc_info_Accounts_Elrond_2eproto.base,}};

static void InitDefaultsscc_info_ESDTNFTTransfer_Elrond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Elrond::Proto::_ESDTNFTTransfer_default_instance_;
    new (ptr) ::TW::Elrond::Proto::ESDTNFTTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ESDTNFTTransfer_Elrond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ESDTNFTTransfer_Elrond_2eproto}, {
      &scc_info_Accounts_Elrond_2eproto.base,}};

static void InitDefaultsscc_info_ESDTTransfer_Elrond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Elrond::Proto::_ESDTTransfer_default_instance_;
    new (ptr) ::TW::Elrond::Proto::ESDTTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ESDTTransfer_Elrond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ESDTTransfer_Elrond_2eproto}, {
      &scc_info_Accounts_Elrond_2eproto.base,}};

static void InitDefaultsscc_info_GenericAction_Elrond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Elrond::Proto::_GenericAction_default_instance_;
    new (ptr) ::TW::Elrond::Proto::GenericAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenericAction_Elrond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenericAction_Elrond_2eproto}, {
      &scc_info_Accounts_Elrond_2eproto.base,}};

static void InitDefaultsscc_info_SigningInput_Elrond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Elrond::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Elrond::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SigningInput_Elrond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SigningInput_Elrond_2eproto}, {
      &scc_info_GenericAction_Elrond_2eproto.base,
      &scc_info_EGLDTransfer_Elrond_2eproto.base,
      &scc_info_ESDTTransfer_Elrond_2eproto.base,
      &scc_info_ESDTNFTTransfer_Elrond_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Elrond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Elrond::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Elrond::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Elrond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Elrond_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Elrond_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Elrond_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Elrond_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Elrond_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::GenericAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::GenericAction, accounts_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::GenericAction, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::GenericAction, data_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::GenericAction, version_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::GenericAction, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::EGLDTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::EGLDTransfer, accounts_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::EGLDTransfer, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::ESDTTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::ESDTTransfer, accounts_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::ESDTTransfer, token_identifier_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::ESDTTransfer, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::ESDTNFTTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::ESDTNFTTransfer, accounts_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::ESDTNFTTransfer, token_collection_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::ESDTNFTTransfer, token_nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::ESDTNFTTransfer, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::Accounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::Accounts, sender_nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::Accounts, sender_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::Accounts, sender_username_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::Accounts, receiver_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::Accounts, receiver_username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningInput, chain_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningInput, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningInput, gas_limit_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningInput, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Elrond::Proto::SigningOutput, signature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Elrond::Proto::GenericAction)},
  { 10, -1, sizeof(::TW::Elrond::Proto::EGLDTransfer)},
  { 17, -1, sizeof(::TW::Elrond::Proto::ESDTTransfer)},
  { 25, -1, sizeof(::TW::Elrond::Proto::ESDTNFTTransfer)},
  { 34, -1, sizeof(::TW::Elrond::Proto::Accounts)},
  { 44, -1, sizeof(::TW::Elrond::Proto::SigningInput)},
  { 58, -1, sizeof(::TW::Elrond::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Elrond::Proto::_GenericAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Elrond::Proto::_EGLDTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Elrond::Proto::_ESDTTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Elrond::Proto::_ESDTNFTTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Elrond::Proto::_Accounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Elrond::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Elrond::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Elrond_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Elrond.proto\022\017TW.Elrond.Proto\"{\n\rGener"
  "icAction\022+\n\010accounts\030\001 \001(\0132\031.TW.Elrond.P"
  "roto.Accounts\022\r\n\005value\030\002 \001(\t\022\014\n\004data\030\003 \001"
  "(\t\022\017\n\007version\030\004 \001(\r\022\017\n\007options\030\005 \001(\r\"K\n\014"
  "EGLDTransfer\022+\n\010accounts\030\001 \001(\0132\031.TW.Elro"
  "nd.Proto.Accounts\022\016\n\006amount\030\002 \001(\t\"e\n\014ESD"
  "TTransfer\022+\n\010accounts\030\001 \001(\0132\031.TW.Elrond."
  "Proto.Accounts\022\030\n\020token_identifier\030\002 \001(\t"
  "\022\016\n\006amount\030\003 \001(\t\"}\n\017ESDTNFTTransfer\022+\n\010a"
  "ccounts\030\001 \001(\0132\031.TW.Elrond.Proto.Accounts"
  "\022\030\n\020token_collection\030\002 \001(\t\022\023\n\013token_nonc"
  "e\030\003 \001(\004\022\016\n\006amount\030\004 \001(\t\"v\n\010Accounts\022\024\n\014s"
  "ender_nonce\030\001 \001(\004\022\016\n\006sender\030\002 \001(\t\022\027\n\017sen"
  "der_username\030\003 \001(\t\022\020\n\010receiver\030\004 \001(\t\022\031\n\021"
  "receiver_username\030\005 \001(\t\"\324\002\n\014SigningInput"
  "\022\023\n\013private_key\030\001 \001(\014\022\020\n\010chain_id\030\002 \001(\t\022"
  "\021\n\tgas_price\030\003 \001(\004\022\021\n\tgas_limit\030\004 \001(\004\0228\n"
  "\016generic_action\030\005 \001(\0132\036.TW.Elrond.Proto."
  "GenericActionH\000\0226\n\regld_transfer\030\006 \001(\0132\035"
  ".TW.Elrond.Proto.EGLDTransferH\000\0226\n\resdt_"
  "transfer\030\007 \001(\0132\035.TW.Elrond.Proto.ESDTTra"
  "nsferH\000\022<\n\020esdtnft_transfer\030\010 \001(\0132 .TW.E"
  "lrond.Proto.ESDTNFTTransferH\000B\017\n\rmessage"
  "_oneof\"3\n\rSigningOutput\022\017\n\007encoded\030\001 \001(\t"
  "\022\021\n\tsignature\030\002 \001(\tB\027\n\025wallet.core.jni.p"
  "rotob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Elrond_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Elrond_2eproto_sccs[7] = {
  &scc_info_Accounts_Elrond_2eproto.base,
  &scc_info_EGLDTransfer_Elrond_2eproto.base,
  &scc_info_ESDTNFTTransfer_Elrond_2eproto.base,
  &scc_info_ESDTTransfer_Elrond_2eproto.base,
  &scc_info_GenericAction_Elrond_2eproto.base,
  &scc_info_SigningInput_Elrond_2eproto.base,
  &scc_info_SigningOutput_Elrond_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Elrond_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Elrond_2eproto = {
  false, false, descriptor_table_protodef_Elrond_2eproto, "Elrond.proto", 1012,
  &descriptor_table_Elrond_2eproto_once, descriptor_table_Elrond_2eproto_sccs, descriptor_table_Elrond_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_Elrond_2eproto::offsets,
  file_level_metadata_Elrond_2eproto, 7, file_level_enum_descriptors_Elrond_2eproto, file_level_service_descriptors_Elrond_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Elrond_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Elrond_2eproto)), true);
namespace TW {
namespace Elrond {
namespace Proto {

// ===================================================================

class GenericAction::_Internal {
 public:
  static const ::TW::Elrond::Proto::Accounts& accounts(const GenericAction* msg);
};

const ::TW::Elrond::Proto::Accounts&
GenericAction::_Internal::accounts(const GenericAction* msg) {
  return *msg->accounts_;
}
GenericAction::GenericAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Elrond.Proto.GenericAction)
}
GenericAction::GenericAction(const GenericAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  if (from._internal_has_accounts()) {
    accounts_ = new ::TW::Elrond::Proto::Accounts(*from.accounts_);
  } else {
    accounts_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&version_)) + sizeof(options_));
  // @@protoc_insertion_point(copy_constructor:TW.Elrond.Proto.GenericAction)
}

void GenericAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericAction_Elrond_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&accounts_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&accounts_)) + sizeof(options_));
}

GenericAction::~GenericAction() {
  // @@protoc_insertion_point(destructor:TW.Elrond.Proto.GenericAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accounts_;
}

void GenericAction::ArenaDtor(void* object) {
  GenericAction* _this = reinterpret_cast< GenericAction* >(object);
  (void)_this;
}
void GenericAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericAction& GenericAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericAction_Elrond_2eproto.base);
  return *internal_default_instance();
}


void GenericAction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Elrond.Proto.GenericAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  data_.ClearToEmpty();
  if (GetArena() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&version_)) + sizeof(options_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Elrond.Proto.Accounts accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accounts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.GenericAction.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.GenericAction.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Elrond.Proto.GenericAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Elrond.Proto.Accounts accounts = 1;
  if (this->has_accounts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accounts(this), target, stream);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.GenericAction.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.GenericAction.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint32 version = 4;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  // uint32 options = 5;
  if (this->options() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_options(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Elrond.Proto.GenericAction)
  return target;
}

size_t GenericAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Elrond.Proto.GenericAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .TW.Elrond.Proto.Accounts accounts = 1;
  if (this->has_accounts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accounts_);
  }

  // uint32 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 options = 5;
  if (this->options() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_options());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Elrond.Proto.GenericAction)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Elrond.Proto.GenericAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Elrond.Proto.GenericAction)
    MergeFrom(*source);
  }
}

void GenericAction::MergeFrom(const GenericAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Elrond.Proto.GenericAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_accounts()) {
    _internal_mutable_accounts()->::TW::Elrond::Proto::Accounts::MergeFrom(from._internal_accounts());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.options() != 0) {
    _internal_set_options(from._internal_options());
  }
}

void GenericAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Elrond.Proto.GenericAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericAction::CopyFrom(const GenericAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Elrond.Proto.GenericAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericAction::IsInitialized() const {
  return true;
}

void GenericAction::InternalSwap(GenericAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericAction, options_)
      + sizeof(GenericAction::options_)
      - PROTOBUF_FIELD_OFFSET(GenericAction, accounts_)>(
          reinterpret_cast<char*>(&accounts_),
          reinterpret_cast<char*>(&other->accounts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EGLDTransfer::_Internal {
 public:
  static const ::TW::Elrond::Proto::Accounts& accounts(const EGLDTransfer* msg);
};

const ::TW::Elrond::Proto::Accounts&
EGLDTransfer::_Internal::accounts(const EGLDTransfer* msg) {
  return *msg->accounts_;
}
EGLDTransfer::EGLDTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Elrond.Proto.EGLDTransfer)
}
EGLDTransfer::EGLDTransfer(const EGLDTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  if (from._internal_has_accounts()) {
    accounts_ = new ::TW::Elrond::Proto::Accounts(*from.accounts_);
  } else {
    accounts_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Elrond.Proto.EGLDTransfer)
}

void EGLDTransfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EGLDTransfer_Elrond_2eproto.base);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accounts_ = nullptr;
}

EGLDTransfer::~EGLDTransfer() {
  // @@protoc_insertion_point(destructor:TW.Elrond.Proto.EGLDTransfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EGLDTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accounts_;
}

void EGLDTransfer::ArenaDtor(void* object) {
  EGLDTransfer* _this = reinterpret_cast< EGLDTransfer* >(object);
  (void)_this;
}
void EGLDTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EGLDTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EGLDTransfer& EGLDTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EGLDTransfer_Elrond_2eproto.base);
  return *internal_default_instance();
}


void EGLDTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Elrond.Proto.EGLDTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  if (GetArena() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EGLDTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Elrond.Proto.Accounts accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accounts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.EGLDTransfer.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EGLDTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Elrond.Proto.EGLDTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Elrond.Proto.Accounts accounts = 1;
  if (this->has_accounts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accounts(this), target, stream);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.EGLDTransfer.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Elrond.Proto.EGLDTransfer)
  return target;
}

size_t EGLDTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Elrond.Proto.EGLDTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // .TW.Elrond.Proto.Accounts accounts = 1;
  if (this->has_accounts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accounts_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EGLDTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Elrond.Proto.EGLDTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const EGLDTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EGLDTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Elrond.Proto.EGLDTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Elrond.Proto.EGLDTransfer)
    MergeFrom(*source);
  }
}

void EGLDTransfer::MergeFrom(const EGLDTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Elrond.Proto.EGLDTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.has_accounts()) {
    _internal_mutable_accounts()->::TW::Elrond::Proto::Accounts::MergeFrom(from._internal_accounts());
  }
}

void EGLDTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Elrond.Proto.EGLDTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EGLDTransfer::CopyFrom(const EGLDTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Elrond.Proto.EGLDTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EGLDTransfer::IsInitialized() const {
  return true;
}

void EGLDTransfer::InternalSwap(EGLDTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(accounts_, other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EGLDTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESDTTransfer::_Internal {
 public:
  static const ::TW::Elrond::Proto::Accounts& accounts(const ESDTTransfer* msg);
};

const ::TW::Elrond::Proto::Accounts&
ESDTTransfer::_Internal::accounts(const ESDTTransfer* msg) {
  return *msg->accounts_;
}
ESDTTransfer::ESDTTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Elrond.Proto.ESDTTransfer)
}
ESDTTransfer::ESDTTransfer(const ESDTTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_identifier().empty()) {
    token_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_identifier(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  if (from._internal_has_accounts()) {
    accounts_ = new ::TW::Elrond::Proto::Accounts(*from.accounts_);
  } else {
    accounts_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Elrond.Proto.ESDTTransfer)
}

void ESDTTransfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ESDTTransfer_Elrond_2eproto.base);
  token_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accounts_ = nullptr;
}

ESDTTransfer::~ESDTTransfer() {
  // @@protoc_insertion_point(destructor:TW.Elrond.Proto.ESDTTransfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESDTTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accounts_;
}

void ESDTTransfer::ArenaDtor(void* object) {
  ESDTTransfer* _this = reinterpret_cast< ESDTTransfer* >(object);
  (void)_this;
}
void ESDTTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESDTTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESDTTransfer& ESDTTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ESDTTransfer_Elrond_2eproto.base);
  return *internal_default_instance();
}


void ESDTTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Elrond.Proto.ESDTTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_identifier_.ClearToEmpty();
  amount_.ClearToEmpty();
  if (GetArena() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESDTTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Elrond.Proto.Accounts accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accounts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.ESDTTransfer.token_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.ESDTTransfer.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESDTTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Elrond.Proto.ESDTTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Elrond.Proto.Accounts accounts = 1;
  if (this->has_accounts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accounts(this), target, stream);
  }

  // string token_identifier = 2;
  if (this->token_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_identifier().data(), static_cast<int>(this->_internal_token_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.ESDTTransfer.token_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_identifier(), target);
  }

  // string amount = 3;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.ESDTTransfer.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Elrond.Proto.ESDTTransfer)
  return target;
}

size_t ESDTTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Elrond.Proto.ESDTTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_identifier = 2;
  if (this->token_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_identifier());
  }

  // string amount = 3;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // .TW.Elrond.Proto.Accounts accounts = 1;
  if (this->has_accounts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accounts_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESDTTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Elrond.Proto.ESDTTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const ESDTTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESDTTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Elrond.Proto.ESDTTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Elrond.Proto.ESDTTransfer)
    MergeFrom(*source);
  }
}

void ESDTTransfer::MergeFrom(const ESDTTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Elrond.Proto.ESDTTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token_identifier().size() > 0) {
    _internal_set_token_identifier(from._internal_token_identifier());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.has_accounts()) {
    _internal_mutable_accounts()->::TW::Elrond::Proto::Accounts::MergeFrom(from._internal_accounts());
  }
}

void ESDTTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Elrond.Proto.ESDTTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESDTTransfer::CopyFrom(const ESDTTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Elrond.Proto.ESDTTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESDTTransfer::IsInitialized() const {
  return true;
}

void ESDTTransfer::InternalSwap(ESDTTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_identifier_.Swap(&other->token_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(accounts_, other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ESDTTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESDTNFTTransfer::_Internal {
 public:
  static const ::TW::Elrond::Proto::Accounts& accounts(const ESDTNFTTransfer* msg);
};

const ::TW::Elrond::Proto::Accounts&
ESDTNFTTransfer::_Internal::accounts(const ESDTNFTTransfer* msg) {
  return *msg->accounts_;
}
ESDTNFTTransfer::ESDTNFTTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Elrond.Proto.ESDTNFTTransfer)
}
ESDTNFTTransfer::ESDTNFTTransfer(const ESDTNFTTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_collection().empty()) {
    token_collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_collection(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  if (from._internal_has_accounts()) {
    accounts_ = new ::TW::Elrond::Proto::Accounts(*from.accounts_);
  } else {
    accounts_ = nullptr;
  }
  token_nonce_ = from.token_nonce_;
  // @@protoc_insertion_point(copy_constructor:TW.Elrond.Proto.ESDTNFTTransfer)
}

void ESDTNFTTransfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ESDTNFTTransfer_Elrond_2eproto.base);
  token_collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&accounts_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&token_nonce_) -
      reinterpret_cast<char*>(&accounts_)) + sizeof(token_nonce_));
}

ESDTNFTTransfer::~ESDTNFTTransfer() {
  // @@protoc_insertion_point(destructor:TW.Elrond.Proto.ESDTNFTTransfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESDTNFTTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accounts_;
}

void ESDTNFTTransfer::ArenaDtor(void* object) {
  ESDTNFTTransfer* _this = reinterpret_cast< ESDTNFTTransfer* >(object);
  (void)_this;
}
void ESDTNFTTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESDTNFTTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESDTNFTTransfer& ESDTNFTTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ESDTNFTTransfer_Elrond_2eproto.base);
  return *internal_default_instance();
}


void ESDTNFTTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Elrond.Proto.ESDTNFTTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_collection_.ClearToEmpty();
  amount_.ClearToEmpty();
  if (GetArena() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
  token_nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESDTNFTTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Elrond.Proto.Accounts accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accounts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_collection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.ESDTNFTTransfer.token_collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 token_nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          token_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.ESDTNFTTransfer.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESDTNFTTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Elrond.Proto.ESDTNFTTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Elrond.Proto.Accounts accounts = 1;
  if (this->has_accounts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accounts(this), target, stream);
  }

  // string token_collection = 2;
  if (this->token_collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_collection().data(), static_cast<int>(this->_internal_token_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.ESDTNFTTransfer.token_collection");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_collection(), target);
  }

  // uint64 token_nonce = 3;
  if (this->token_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_token_nonce(), target);
  }

  // string amount = 4;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.ESDTNFTTransfer.amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Elrond.Proto.ESDTNFTTransfer)
  return target;
}

size_t ESDTNFTTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Elrond.Proto.ESDTNFTTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_collection = 2;
  if (this->token_collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_collection());
  }

  // string amount = 4;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // .TW.Elrond.Proto.Accounts accounts = 1;
  if (this->has_accounts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accounts_);
  }

  // uint64 token_nonce = 3;
  if (this->token_nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_token_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESDTNFTTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Elrond.Proto.ESDTNFTTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const ESDTNFTTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESDTNFTTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Elrond.Proto.ESDTNFTTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Elrond.Proto.ESDTNFTTransfer)
    MergeFrom(*source);
  }
}

void ESDTNFTTransfer::MergeFrom(const ESDTNFTTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Elrond.Proto.ESDTNFTTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token_collection().size() > 0) {
    _internal_set_token_collection(from._internal_token_collection());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.has_accounts()) {
    _internal_mutable_accounts()->::TW::Elrond::Proto::Accounts::MergeFrom(from._internal_accounts());
  }
  if (from.token_nonce() != 0) {
    _internal_set_token_nonce(from._internal_token_nonce());
  }
}

void ESDTNFTTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Elrond.Proto.ESDTNFTTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESDTNFTTransfer::CopyFrom(const ESDTNFTTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Elrond.Proto.ESDTNFTTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESDTNFTTransfer::IsInitialized() const {
  return true;
}

void ESDTNFTTransfer::InternalSwap(ESDTNFTTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_collection_.Swap(&other->token_collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESDTNFTTransfer, token_nonce_)
      + sizeof(ESDTNFTTransfer::token_nonce_)
      - PROTOBUF_FIELD_OFFSET(ESDTNFTTransfer, accounts_)>(
          reinterpret_cast<char*>(&accounts_),
          reinterpret_cast<char*>(&other->accounts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESDTNFTTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Accounts::_Internal {
 public:
};

Accounts::Accounts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Elrond.Proto.Accounts)
}
Accounts::Accounts(const Accounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArena());
  }
  sender_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_username().empty()) {
    sender_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_username(), 
      GetArena());
  }
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver().empty()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArena());
  }
  receiver_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_username().empty()) {
    receiver_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_username(), 
      GetArena());
  }
  sender_nonce_ = from.sender_nonce_;
  // @@protoc_insertion_point(copy_constructor:TW.Elrond.Proto.Accounts)
}

void Accounts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Accounts_Elrond_2eproto.base);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_nonce_ = PROTOBUF_ULONGLONG(0);
}

Accounts::~Accounts() {
  // @@protoc_insertion_point(destructor:TW.Elrond.Proto.Accounts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Accounts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Accounts::ArenaDtor(void* object) {
  Accounts* _this = reinterpret_cast< Accounts* >(object);
  (void)_this;
}
void Accounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Accounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accounts& Accounts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accounts_Elrond_2eproto.base);
  return *internal_default_instance();
}


void Accounts::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Elrond.Proto.Accounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmpty();
  sender_username_.ClearToEmpty();
  receiver_.ClearToEmpty();
  receiver_username_.ClearToEmpty();
  sender_nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sender_nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sender_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.Accounts.sender"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sender_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.Accounts.sender_username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.Accounts.receiver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver_username = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_receiver_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.Accounts.receiver_username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accounts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Elrond.Proto.Accounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sender_nonce = 1;
  if (this->sender_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sender_nonce(), target);
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.Accounts.sender");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender(), target);
  }

  // string sender_username = 3;
  if (this->sender_username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_username().data(), static_cast<int>(this->_internal_sender_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.Accounts.sender_username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_username(), target);
  }

  // string receiver = 4;
  if (this->receiver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.Accounts.receiver");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_receiver(), target);
  }

  // string receiver_username = 5;
  if (this->receiver_username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_username().data(), static_cast<int>(this->_internal_receiver_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.Accounts.receiver_username");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_receiver_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Elrond.Proto.Accounts)
  return target;
}

size_t Accounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Elrond.Proto.Accounts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 2;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string sender_username = 3;
  if (this->sender_username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_username());
  }

  // string receiver = 4;
  if (this->receiver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // string receiver_username = 5;
  if (this->receiver_username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_username());
  }

  // uint64 sender_nonce = 1;
  if (this->sender_nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sender_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accounts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Elrond.Proto.Accounts)
  GOOGLE_DCHECK_NE(&from, this);
  const Accounts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accounts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Elrond.Proto.Accounts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Elrond.Proto.Accounts)
    MergeFrom(*source);
  }
}

void Accounts::MergeFrom(const Accounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Elrond.Proto.Accounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender().size() > 0) {
    _internal_set_sender(from._internal_sender());
  }
  if (from.sender_username().size() > 0) {
    _internal_set_sender_username(from._internal_sender_username());
  }
  if (from.receiver().size() > 0) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (from.receiver_username().size() > 0) {
    _internal_set_receiver_username(from._internal_receiver_username());
  }
  if (from.sender_nonce() != 0) {
    _internal_set_sender_nonce(from._internal_sender_nonce());
  }
}

void Accounts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Elrond.Proto.Accounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accounts::CopyFrom(const Accounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Elrond.Proto.Accounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accounts::IsInitialized() const {
  return true;
}

void Accounts::InternalSwap(Accounts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sender_.Swap(&other->sender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_username_.Swap(&other->sender_username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_.Swap(&other->receiver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_username_.Swap(&other->receiver_username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sender_nonce_, other->sender_nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accounts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Elrond::Proto::GenericAction& generic_action(const SigningInput* msg);
  static const ::TW::Elrond::Proto::EGLDTransfer& egld_transfer(const SigningInput* msg);
  static const ::TW::Elrond::Proto::ESDTTransfer& esdt_transfer(const SigningInput* msg);
  static const ::TW::Elrond::Proto::ESDTNFTTransfer& esdtnft_transfer(const SigningInput* msg);
};

const ::TW::Elrond::Proto::GenericAction&
SigningInput::_Internal::generic_action(const SigningInput* msg) {
  return *msg->message_oneof_.generic_action_;
}
const ::TW::Elrond::Proto::EGLDTransfer&
SigningInput::_Internal::egld_transfer(const SigningInput* msg) {
  return *msg->message_oneof_.egld_transfer_;
}
const ::TW::Elrond::Proto::ESDTTransfer&
SigningInput::_Internal::esdt_transfer(const SigningInput* msg) {
  return *msg->message_oneof_.esdt_transfer_;
}
const ::TW::Elrond::Proto::ESDTNFTTransfer&
SigningInput::_Internal::esdtnft_transfer(const SigningInput* msg) {
  return *msg->message_oneof_.esdtnft_transfer_;
}
void SigningInput::set_allocated_generic_action(::TW::Elrond::Proto::GenericAction* generic_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (generic_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generic_action);
    if (message_arena != submessage_arena) {
      generic_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic_action, submessage_arena);
    }
    set_has_generic_action();
    message_oneof_.generic_action_ = generic_action;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Elrond.Proto.SigningInput.generic_action)
}
void SigningInput::set_allocated_egld_transfer(::TW::Elrond::Proto::EGLDTransfer* egld_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (egld_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(egld_transfer);
    if (message_arena != submessage_arena) {
      egld_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, egld_transfer, submessage_arena);
    }
    set_has_egld_transfer();
    message_oneof_.egld_transfer_ = egld_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Elrond.Proto.SigningInput.egld_transfer)
}
void SigningInput::set_allocated_esdt_transfer(::TW::Elrond::Proto::ESDTTransfer* esdt_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (esdt_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esdt_transfer);
    if (message_arena != submessage_arena) {
      esdt_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esdt_transfer, submessage_arena);
    }
    set_has_esdt_transfer();
    message_oneof_.esdt_transfer_ = esdt_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Elrond.Proto.SigningInput.esdt_transfer)
}
void SigningInput::set_allocated_esdtnft_transfer(::TW::Elrond::Proto::ESDTNFTTransfer* esdtnft_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (esdtnft_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esdtnft_transfer);
    if (message_arena != submessage_arena) {
      esdtnft_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esdtnft_transfer, submessage_arena);
    }
    set_has_esdtnft_transfer();
    message_oneof_.esdtnft_transfer_ = esdtnft_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Elrond.Proto.SigningInput.esdtnft_transfer)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Elrond.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArena());
  }
  ::memcpy(&gas_price_, &from.gas_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&gas_limit_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(gas_limit_));
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kGenericAction: {
      _internal_mutable_generic_action()->::TW::Elrond::Proto::GenericAction::MergeFrom(from._internal_generic_action());
      break;
    }
    case kEgldTransfer: {
      _internal_mutable_egld_transfer()->::TW::Elrond::Proto::EGLDTransfer::MergeFrom(from._internal_egld_transfer());
      break;
    }
    case kEsdtTransfer: {
      _internal_mutable_esdt_transfer()->::TW::Elrond::Proto::ESDTTransfer::MergeFrom(from._internal_esdt_transfer());
      break;
    }
    case kEsdtnftTransfer: {
      _internal_mutable_esdtnft_transfer()->::TW::Elrond::Proto::ESDTNFTTransfer::MergeFrom(from._internal_esdtnft_transfer());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Elrond.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Elrond_2eproto.base);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gas_price_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gas_limit_) -
      reinterpret_cast<char*>(&gas_price_)) + sizeof(gas_limit_));
  clear_has_message_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Elrond.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Elrond_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Elrond.Proto.SigningInput)
  switch (message_oneof_case()) {
    case kGenericAction: {
      if (GetArena() == nullptr) {
        delete message_oneof_.generic_action_;
      }
      break;
    }
    case kEgldTransfer: {
      if (GetArena() == nullptr) {
        delete message_oneof_.egld_transfer_;
      }
      break;
    }
    case kEsdtTransfer: {
      if (GetArena() == nullptr) {
        delete message_oneof_.esdt_transfer_;
      }
      break;
    }
    case kEsdtnftTransfer: {
      if (GetArena() == nullptr) {
        delete message_oneof_.esdtnft_transfer_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Elrond.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.ClearToEmpty();
  chain_id_.ClearToEmpty();
  ::memset(&gas_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gas_limit_) -
      reinterpret_cast<char*>(&gas_price_)) + sizeof(gas_limit_));
  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.SigningInput.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Elrond.Proto.GenericAction generic_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_generic_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Elrond.Proto.EGLDTransfer egld_transfer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_egld_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Elrond.Proto.ESDTTransfer esdt_transfer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_esdt_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Elrond.Proto.ESDTNFTTransfer esdtnft_transfer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_esdtnft_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Elrond.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.SigningInput.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // uint64 gas_price = 3;
  if (this->gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gas_price(), target);
  }

  // uint64 gas_limit = 4;
  if (this->gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas_limit(), target);
  }

  // .TW.Elrond.Proto.GenericAction generic_action = 5;
  if (_internal_has_generic_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::generic_action(this), target, stream);
  }

  // .TW.Elrond.Proto.EGLDTransfer egld_transfer = 6;
  if (_internal_has_egld_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::egld_transfer(this), target, stream);
  }

  // .TW.Elrond.Proto.ESDTTransfer esdt_transfer = 7;
  if (_internal_has_esdt_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::esdt_transfer(this), target, stream);
  }

  // .TW.Elrond.Proto.ESDTNFTTransfer esdtnft_transfer = 8;
  if (_internal_has_esdtnft_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::esdtnft_transfer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Elrond.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Elrond.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // uint64 gas_price = 3;
  if (this->gas_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_price());
  }

  // uint64 gas_limit = 4;
  if (this->gas_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_limit());
  }

  switch (message_oneof_case()) {
    // .TW.Elrond.Proto.GenericAction generic_action = 5;
    case kGenericAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.generic_action_);
      break;
    }
    // .TW.Elrond.Proto.EGLDTransfer egld_transfer = 6;
    case kEgldTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.egld_transfer_);
      break;
    }
    // .TW.Elrond.Proto.ESDTTransfer esdt_transfer = 7;
    case kEsdtTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.esdt_transfer_);
      break;
    }
    // .TW.Elrond.Proto.ESDTNFTTransfer esdtnft_transfer = 8;
    case kEsdtnftTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.esdtnft_transfer_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Elrond.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Elrond.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Elrond.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Elrond.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.gas_price() != 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from.gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  switch (from.message_oneof_case()) {
    case kGenericAction: {
      _internal_mutable_generic_action()->::TW::Elrond::Proto::GenericAction::MergeFrom(from._internal_generic_action());
      break;
    }
    case kEgldTransfer: {
      _internal_mutable_egld_transfer()->::TW::Elrond::Proto::EGLDTransfer::MergeFrom(from._internal_egld_transfer());
      break;
    }
    case kEsdtTransfer: {
      _internal_mutable_esdt_transfer()->::TW::Elrond::Proto::ESDTTransfer::MergeFrom(from._internal_esdt_transfer());
      break;
    }
    case kEsdtnftTransfer: {
      _internal_mutable_esdtnft_transfer()->::TW::Elrond::Proto::ESDTNFTTransfer::MergeFrom(from._internal_esdtnft_transfer());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Elrond.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Elrond.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, gas_limit_)
      + sizeof(SigningInput::gas_limit_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, gas_price_)>(
          reinterpret_cast<char*>(&gas_price_),
          reinterpret_cast<char*>(&other->gas_price_));
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Elrond.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Elrond.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Elrond_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Elrond.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Elrond_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Elrond.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.SigningOutput.encoded"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Elrond.Proto.SigningOutput.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Elrond.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string encoded = 1;
  if (this->encoded().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoded().data(), static_cast<int>(this->_internal_encoded().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.SigningOutput.encoded");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Elrond.Proto.SigningOutput.signature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Elrond.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Elrond.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoded());
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Elrond.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Elrond.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Elrond.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Elrond.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Elrond.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Elrond.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Elrond
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Elrond::Proto::GenericAction* Arena::CreateMaybeMessage< ::TW::Elrond::Proto::GenericAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Elrond::Proto::GenericAction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Elrond::Proto::EGLDTransfer* Arena::CreateMaybeMessage< ::TW::Elrond::Proto::EGLDTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Elrond::Proto::EGLDTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Elrond::Proto::ESDTTransfer* Arena::CreateMaybeMessage< ::TW::Elrond::Proto::ESDTTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Elrond::Proto::ESDTTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Elrond::Proto::ESDTNFTTransfer* Arena::CreateMaybeMessage< ::TW::Elrond::Proto::ESDTNFTTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Elrond::Proto::ESDTNFTTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Elrond::Proto::Accounts* Arena::CreateMaybeMessage< ::TW::Elrond::Proto::Accounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Elrond::Proto::Accounts >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Elrond::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Elrond::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Elrond::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Elrond::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Elrond::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Elrond::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
