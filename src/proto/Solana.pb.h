// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Solana.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Solana_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Solana_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Solana_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Solana_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Solana_2eproto;
namespace TW {
namespace Solana {
namespace Proto {
class AccountKey;
class AccountKeyDefaultTypeInternal;
extern AccountKeyDefaultTypeInternal _AccountKey_default_instance_;
class AddressTableLookups;
class AddressTableLookupsDefaultTypeInternal;
extern AddressTableLookupsDefaultTypeInternal _AddressTableLookups_default_instance_;
class CompiledInstruction;
class CompiledInstructionDefaultTypeInternal;
extern CompiledInstructionDefaultTypeInternal _CompiledInstruction_default_instance_;
class CreateAndTransferToken;
class CreateAndTransferTokenDefaultTypeInternal;
extern CreateAndTransferTokenDefaultTypeInternal _CreateAndTransferToken_default_instance_;
class CreateTokenAccount;
class CreateTokenAccountDefaultTypeInternal;
extern CreateTokenAccountDefaultTypeInternal _CreateTokenAccount_default_instance_;
class DeactivateAllStake;
class DeactivateAllStakeDefaultTypeInternal;
extern DeactivateAllStakeDefaultTypeInternal _DeactivateAllStake_default_instance_;
class DeactivateStake;
class DeactivateStakeDefaultTypeInternal;
extern DeactivateStakeDefaultTypeInternal _DeactivateStake_default_instance_;
class DelegateStake;
class DelegateStakeDefaultTypeInternal;
extern DelegateStakeDefaultTypeInternal _DelegateStake_default_instance_;
class Instruction;
class InstructionDefaultTypeInternal;
extern InstructionDefaultTypeInternal _Instruction_default_instance_;
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class StakeAccountValue;
class StakeAccountValueDefaultTypeInternal;
extern StakeAccountValueDefaultTypeInternal _StakeAccountValue_default_instance_;
class TokenTransfer;
class TokenTransferDefaultTypeInternal;
extern TokenTransferDefaultTypeInternal _TokenTransfer_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
class WithdrawAllStake;
class WithdrawAllStakeDefaultTypeInternal;
extern WithdrawAllStakeDefaultTypeInternal _WithdrawAllStake_default_instance_;
class WithdrawStake;
class WithdrawStakeDefaultTypeInternal;
extern WithdrawStakeDefaultTypeInternal _WithdrawStake_default_instance_;
}  // namespace Proto
}  // namespace Solana
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Solana::Proto::AccountKey* Arena::CreateMaybeMessage<::TW::Solana::Proto::AccountKey>(Arena*);
template<> ::TW::Solana::Proto::AddressTableLookups* Arena::CreateMaybeMessage<::TW::Solana::Proto::AddressTableLookups>(Arena*);
template<> ::TW::Solana::Proto::CompiledInstruction* Arena::CreateMaybeMessage<::TW::Solana::Proto::CompiledInstruction>(Arena*);
template<> ::TW::Solana::Proto::CreateAndTransferToken* Arena::CreateMaybeMessage<::TW::Solana::Proto::CreateAndTransferToken>(Arena*);
template<> ::TW::Solana::Proto::CreateTokenAccount* Arena::CreateMaybeMessage<::TW::Solana::Proto::CreateTokenAccount>(Arena*);
template<> ::TW::Solana::Proto::DeactivateAllStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::DeactivateAllStake>(Arena*);
template<> ::TW::Solana::Proto::DeactivateStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::DeactivateStake>(Arena*);
template<> ::TW::Solana::Proto::DelegateStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::DelegateStake>(Arena*);
template<> ::TW::Solana::Proto::Instruction* Arena::CreateMaybeMessage<::TW::Solana::Proto::Instruction>(Arena*);
template<> ::TW::Solana::Proto::MessageHeader* Arena::CreateMaybeMessage<::TW::Solana::Proto::MessageHeader>(Arena*);
template<> ::TW::Solana::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Solana::Proto::SigningInput>(Arena*);
template<> ::TW::Solana::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Solana::Proto::SigningOutput>(Arena*);
template<> ::TW::Solana::Proto::StakeAccountValue* Arena::CreateMaybeMessage<::TW::Solana::Proto::StakeAccountValue>(Arena*);
template<> ::TW::Solana::Proto::TokenTransfer* Arena::CreateMaybeMessage<::TW::Solana::Proto::TokenTransfer>(Arena*);
template<> ::TW::Solana::Proto::Transfer* Arena::CreateMaybeMessage<::TW::Solana::Proto::Transfer>(Arena*);
template<> ::TW::Solana::Proto::WithdrawAllStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::WithdrawAllStake>(Arena*);
template<> ::TW::Solana::Proto::WithdrawStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::WithdrawStake>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Solana {
namespace Proto {

// ===================================================================

class Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  virtual ~Transfer();

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transfer& default_instance();

  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesFieldNumber = 4,
    kRecipientFieldNumber = 1,
    kMemoFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // repeated string references = 4;
  int references_size() const;
  private:
  int _internal_references_size() const;
  public:
  void clear_references();
  const std::string& references(int index) const;
  std::string* mutable_references(int index);
  void set_references(int index, const std::string& value);
  void set_references(int index, std::string&& value);
  void set_references(int index, const char* value);
  void set_references(int index, const char* value, size_t size);
  std::string* add_references();
  void add_references(const std::string& value);
  void add_references(std::string&& value);
  void add_references(const char* value);
  void add_references(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_references();
  private:
  const std::string& _internal_references(int index) const;
  std::string* _internal_add_references();
  public:

  // string recipient = 1;
  void clear_recipient();
  const std::string& recipient() const;
  void set_recipient(const std::string& value);
  void set_recipient(std::string&& value);
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  std::string* mutable_recipient();
  std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);
  private:
  const std::string& _internal_recipient() const;
  void _internal_set_recipient(const std::string& value);
  std::string* _internal_mutable_recipient();
  public:

  // string memo = 3;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // uint64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> references_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class DelegateStake PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.DelegateStake) */ {
 public:
  inline DelegateStake() : DelegateStake(nullptr) {}
  virtual ~DelegateStake();

  DelegateStake(const DelegateStake& from);
  DelegateStake(DelegateStake&& from) noexcept
    : DelegateStake() {
    *this = ::std::move(from);
  }

  inline DelegateStake& operator=(const DelegateStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateStake& operator=(DelegateStake&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegateStake& default_instance();

  static inline const DelegateStake* internal_default_instance() {
    return reinterpret_cast<const DelegateStake*>(
               &_DelegateStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DelegateStake& a, DelegateStake& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateStake* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegateStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegateStake* New() const final {
    return CreateMaybeMessage<DelegateStake>(nullptr);
  }

  DelegateStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegateStake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegateStake& from);
  void MergeFrom(const DelegateStake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateStake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.DelegateStake";
  }
  protected:
  explicit DelegateStake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorPubkeyFieldNumber = 1,
    kStakeAccountFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // string validator_pubkey = 1;
  void clear_validator_pubkey();
  const std::string& validator_pubkey() const;
  void set_validator_pubkey(const std::string& value);
  void set_validator_pubkey(std::string&& value);
  void set_validator_pubkey(const char* value);
  void set_validator_pubkey(const char* value, size_t size);
  std::string* mutable_validator_pubkey();
  std::string* release_validator_pubkey();
  void set_allocated_validator_pubkey(std::string* validator_pubkey);
  private:
  const std::string& _internal_validator_pubkey() const;
  void _internal_set_validator_pubkey(const std::string& value);
  std::string* _internal_mutable_validator_pubkey();
  public:

  // string stake_account = 3;
  void clear_stake_account();
  const std::string& stake_account() const;
  void set_stake_account(const std::string& value);
  void set_stake_account(std::string&& value);
  void set_stake_account(const char* value);
  void set_stake_account(const char* value, size_t size);
  std::string* mutable_stake_account();
  std::string* release_stake_account();
  void set_allocated_stake_account(std::string* stake_account);
  private:
  const std::string& _internal_stake_account() const;
  void _internal_set_stake_account(const std::string& value);
  std::string* _internal_mutable_stake_account();
  public:

  // uint64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.DelegateStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stake_account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class DeactivateStake PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.DeactivateStake) */ {
 public:
  inline DeactivateStake() : DeactivateStake(nullptr) {}
  virtual ~DeactivateStake();

  DeactivateStake(const DeactivateStake& from);
  DeactivateStake(DeactivateStake&& from) noexcept
    : DeactivateStake() {
    *this = ::std::move(from);
  }

  inline DeactivateStake& operator=(const DeactivateStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeactivateStake& operator=(DeactivateStake&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeactivateStake& default_instance();

  static inline const DeactivateStake* internal_default_instance() {
    return reinterpret_cast<const DeactivateStake*>(
               &_DeactivateStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeactivateStake& a, DeactivateStake& b) {
    a.Swap(&b);
  }
  inline void Swap(DeactivateStake* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeactivateStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeactivateStake* New() const final {
    return CreateMaybeMessage<DeactivateStake>(nullptr);
  }

  DeactivateStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeactivateStake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeactivateStake& from);
  void MergeFrom(const DeactivateStake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeactivateStake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.DeactivateStake";
  }
  protected:
  explicit DeactivateStake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountFieldNumber = 1,
  };
  // string stake_account = 1;
  void clear_stake_account();
  const std::string& stake_account() const;
  void set_stake_account(const std::string& value);
  void set_stake_account(std::string&& value);
  void set_stake_account(const char* value);
  void set_stake_account(const char* value, size_t size);
  std::string* mutable_stake_account();
  std::string* release_stake_account();
  void set_allocated_stake_account(std::string* stake_account);
  private:
  const std::string& _internal_stake_account() const;
  void _internal_set_stake_account(const std::string& value);
  std::string* _internal_mutable_stake_account();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.DeactivateStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stake_account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class DeactivateAllStake PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.DeactivateAllStake) */ {
 public:
  inline DeactivateAllStake() : DeactivateAllStake(nullptr) {}
  virtual ~DeactivateAllStake();

  DeactivateAllStake(const DeactivateAllStake& from);
  DeactivateAllStake(DeactivateAllStake&& from) noexcept
    : DeactivateAllStake() {
    *this = ::std::move(from);
  }

  inline DeactivateAllStake& operator=(const DeactivateAllStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeactivateAllStake& operator=(DeactivateAllStake&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeactivateAllStake& default_instance();

  static inline const DeactivateAllStake* internal_default_instance() {
    return reinterpret_cast<const DeactivateAllStake*>(
               &_DeactivateAllStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeactivateAllStake& a, DeactivateAllStake& b) {
    a.Swap(&b);
  }
  inline void Swap(DeactivateAllStake* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeactivateAllStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeactivateAllStake* New() const final {
    return CreateMaybeMessage<DeactivateAllStake>(nullptr);
  }

  DeactivateAllStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeactivateAllStake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeactivateAllStake& from);
  void MergeFrom(const DeactivateAllStake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeactivateAllStake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.DeactivateAllStake";
  }
  protected:
  explicit DeactivateAllStake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountsFieldNumber = 1,
  };
  // repeated string stake_accounts = 1;
  int stake_accounts_size() const;
  private:
  int _internal_stake_accounts_size() const;
  public:
  void clear_stake_accounts();
  const std::string& stake_accounts(int index) const;
  std::string* mutable_stake_accounts(int index);
  void set_stake_accounts(int index, const std::string& value);
  void set_stake_accounts(int index, std::string&& value);
  void set_stake_accounts(int index, const char* value);
  void set_stake_accounts(int index, const char* value, size_t size);
  std::string* add_stake_accounts();
  void add_stake_accounts(const std::string& value);
  void add_stake_accounts(std::string&& value);
  void add_stake_accounts(const char* value);
  void add_stake_accounts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stake_accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stake_accounts();
  private:
  const std::string& _internal_stake_accounts(int index) const;
  std::string* _internal_add_stake_accounts();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.DeactivateAllStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stake_accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class WithdrawStake PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.WithdrawStake) */ {
 public:
  inline WithdrawStake() : WithdrawStake(nullptr) {}
  virtual ~WithdrawStake();

  WithdrawStake(const WithdrawStake& from);
  WithdrawStake(WithdrawStake&& from) noexcept
    : WithdrawStake() {
    *this = ::std::move(from);
  }

  inline WithdrawStake& operator=(const WithdrawStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawStake& operator=(WithdrawStake&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawStake& default_instance();

  static inline const WithdrawStake* internal_default_instance() {
    return reinterpret_cast<const WithdrawStake*>(
               &_WithdrawStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WithdrawStake& a, WithdrawStake& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawStake* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawStake* New() const final {
    return CreateMaybeMessage<WithdrawStake>(nullptr);
  }

  WithdrawStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawStake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawStake& from);
  void MergeFrom(const WithdrawStake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawStake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.WithdrawStake";
  }
  protected:
  explicit WithdrawStake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string stake_account = 1;
  void clear_stake_account();
  const std::string& stake_account() const;
  void set_stake_account(const std::string& value);
  void set_stake_account(std::string&& value);
  void set_stake_account(const char* value);
  void set_stake_account(const char* value, size_t size);
  std::string* mutable_stake_account();
  std::string* release_stake_account();
  void set_allocated_stake_account(std::string* stake_account);
  private:
  const std::string& _internal_stake_account() const;
  void _internal_set_stake_account(const std::string& value);
  std::string* _internal_mutable_stake_account();
  public:

  // uint64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.WithdrawStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stake_account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class StakeAccountValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.StakeAccountValue) */ {
 public:
  inline StakeAccountValue() : StakeAccountValue(nullptr) {}
  virtual ~StakeAccountValue();

  StakeAccountValue(const StakeAccountValue& from);
  StakeAccountValue(StakeAccountValue&& from) noexcept
    : StakeAccountValue() {
    *this = ::std::move(from);
  }

  inline StakeAccountValue& operator=(const StakeAccountValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeAccountValue& operator=(StakeAccountValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StakeAccountValue& default_instance();

  static inline const StakeAccountValue* internal_default_instance() {
    return reinterpret_cast<const StakeAccountValue*>(
               &_StakeAccountValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StakeAccountValue& a, StakeAccountValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StakeAccountValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeAccountValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StakeAccountValue* New() const final {
    return CreateMaybeMessage<StakeAccountValue>(nullptr);
  }

  StakeAccountValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StakeAccountValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StakeAccountValue& from);
  void MergeFrom(const StakeAccountValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakeAccountValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.StakeAccountValue";
  }
  protected:
  explicit StakeAccountValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string stake_account = 1;
  void clear_stake_account();
  const std::string& stake_account() const;
  void set_stake_account(const std::string& value);
  void set_stake_account(std::string&& value);
  void set_stake_account(const char* value);
  void set_stake_account(const char* value, size_t size);
  std::string* mutable_stake_account();
  std::string* release_stake_account();
  void set_allocated_stake_account(std::string* stake_account);
  private:
  const std::string& _internal_stake_account() const;
  void _internal_set_stake_account(const std::string& value);
  std::string* _internal_mutable_stake_account();
  public:

  // uint64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.StakeAccountValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stake_account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class WithdrawAllStake PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.WithdrawAllStake) */ {
 public:
  inline WithdrawAllStake() : WithdrawAllStake(nullptr) {}
  virtual ~WithdrawAllStake();

  WithdrawAllStake(const WithdrawAllStake& from);
  WithdrawAllStake(WithdrawAllStake&& from) noexcept
    : WithdrawAllStake() {
    *this = ::std::move(from);
  }

  inline WithdrawAllStake& operator=(const WithdrawAllStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawAllStake& operator=(WithdrawAllStake&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawAllStake& default_instance();

  static inline const WithdrawAllStake* internal_default_instance() {
    return reinterpret_cast<const WithdrawAllStake*>(
               &_WithdrawAllStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WithdrawAllStake& a, WithdrawAllStake& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawAllStake* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawAllStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawAllStake* New() const final {
    return CreateMaybeMessage<WithdrawAllStake>(nullptr);
  }

  WithdrawAllStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawAllStake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawAllStake& from);
  void MergeFrom(const WithdrawAllStake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawAllStake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.WithdrawAllStake";
  }
  protected:
  explicit WithdrawAllStake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountsFieldNumber = 1,
  };
  // repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
  int stake_accounts_size() const;
  private:
  int _internal_stake_accounts_size() const;
  public:
  void clear_stake_accounts();
  ::TW::Solana::Proto::StakeAccountValue* mutable_stake_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue >*
      mutable_stake_accounts();
  private:
  const ::TW::Solana::Proto::StakeAccountValue& _internal_stake_accounts(int index) const;
  ::TW::Solana::Proto::StakeAccountValue* _internal_add_stake_accounts();
  public:
  const ::TW::Solana::Proto::StakeAccountValue& stake_accounts(int index) const;
  ::TW::Solana::Proto::StakeAccountValue* add_stake_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue >&
      stake_accounts() const;

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.WithdrawAllStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue > stake_accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class CreateTokenAccount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.CreateTokenAccount) */ {
 public:
  inline CreateTokenAccount() : CreateTokenAccount(nullptr) {}
  virtual ~CreateTokenAccount();

  CreateTokenAccount(const CreateTokenAccount& from);
  CreateTokenAccount(CreateTokenAccount&& from) noexcept
    : CreateTokenAccount() {
    *this = ::std::move(from);
  }

  inline CreateTokenAccount& operator=(const CreateTokenAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTokenAccount& operator=(CreateTokenAccount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTokenAccount& default_instance();

  static inline const CreateTokenAccount* internal_default_instance() {
    return reinterpret_cast<const CreateTokenAccount*>(
               &_CreateTokenAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateTokenAccount& a, CreateTokenAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTokenAccount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTokenAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTokenAccount* New() const final {
    return CreateMaybeMessage<CreateTokenAccount>(nullptr);
  }

  CreateTokenAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTokenAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTokenAccount& from);
  void MergeFrom(const CreateTokenAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTokenAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.CreateTokenAccount";
  }
  protected:
  explicit CreateTokenAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainAddressFieldNumber = 1,
    kTokenMintAddressFieldNumber = 2,
    kTokenAddressFieldNumber = 3,
    kTokenFieldNumber = 4,
  };
  // string main_address = 1;
  void clear_main_address();
  const std::string& main_address() const;
  void set_main_address(const std::string& value);
  void set_main_address(std::string&& value);
  void set_main_address(const char* value);
  void set_main_address(const char* value, size_t size);
  std::string* mutable_main_address();
  std::string* release_main_address();
  void set_allocated_main_address(std::string* main_address);
  private:
  const std::string& _internal_main_address() const;
  void _internal_set_main_address(const std::string& value);
  std::string* _internal_mutable_main_address();
  public:

  // string token_mint_address = 2;
  void clear_token_mint_address();
  const std::string& token_mint_address() const;
  void set_token_mint_address(const std::string& value);
  void set_token_mint_address(std::string&& value);
  void set_token_mint_address(const char* value);
  void set_token_mint_address(const char* value, size_t size);
  std::string* mutable_token_mint_address();
  std::string* release_token_mint_address();
  void set_allocated_token_mint_address(std::string* token_mint_address);
  private:
  const std::string& _internal_token_mint_address() const;
  void _internal_set_token_mint_address(const std::string& value);
  std::string* _internal_mutable_token_mint_address();
  public:

  // string token_address = 3;
  void clear_token_address();
  const std::string& token_address() const;
  void set_token_address(const std::string& value);
  void set_token_address(std::string&& value);
  void set_token_address(const char* value);
  void set_token_address(const char* value, size_t size);
  std::string* mutable_token_address();
  std::string* release_token_address();
  void set_allocated_token_address(std::string* token_address);
  private:
  const std::string& _internal_token_address() const;
  void _internal_set_token_address(const std::string& value);
  std::string* _internal_mutable_token_address();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.CreateTokenAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_mint_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class TokenTransfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.TokenTransfer) */ {
 public:
  inline TokenTransfer() : TokenTransfer(nullptr) {}
  virtual ~TokenTransfer();

  TokenTransfer(const TokenTransfer& from);
  TokenTransfer(TokenTransfer&& from) noexcept
    : TokenTransfer() {
    *this = ::std::move(from);
  }

  inline TokenTransfer& operator=(const TokenTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenTransfer& operator=(TokenTransfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenTransfer& default_instance();

  static inline const TokenTransfer* internal_default_instance() {
    return reinterpret_cast<const TokenTransfer*>(
               &_TokenTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TokenTransfer& a, TokenTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenTransfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenTransfer* New() const final {
    return CreateMaybeMessage<TokenTransfer>(nullptr);
  }

  TokenTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenTransfer& from);
  void MergeFrom(const TokenTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.TokenTransfer";
  }
  protected:
  explicit TokenTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesFieldNumber = 7,
    kTokenMintAddressFieldNumber = 1,
    kSenderTokenAddressFieldNumber = 2,
    kRecipientTokenAddressFieldNumber = 3,
    kMemoFieldNumber = 6,
    kTokenFieldNumber = 8,
    kAmountFieldNumber = 4,
    kDecimalsFieldNumber = 5,
  };
  // repeated string references = 7;
  int references_size() const;
  private:
  int _internal_references_size() const;
  public:
  void clear_references();
  const std::string& references(int index) const;
  std::string* mutable_references(int index);
  void set_references(int index, const std::string& value);
  void set_references(int index, std::string&& value);
  void set_references(int index, const char* value);
  void set_references(int index, const char* value, size_t size);
  std::string* add_references();
  void add_references(const std::string& value);
  void add_references(std::string&& value);
  void add_references(const char* value);
  void add_references(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_references();
  private:
  const std::string& _internal_references(int index) const;
  std::string* _internal_add_references();
  public:

  // string token_mint_address = 1;
  void clear_token_mint_address();
  const std::string& token_mint_address() const;
  void set_token_mint_address(const std::string& value);
  void set_token_mint_address(std::string&& value);
  void set_token_mint_address(const char* value);
  void set_token_mint_address(const char* value, size_t size);
  std::string* mutable_token_mint_address();
  std::string* release_token_mint_address();
  void set_allocated_token_mint_address(std::string* token_mint_address);
  private:
  const std::string& _internal_token_mint_address() const;
  void _internal_set_token_mint_address(const std::string& value);
  std::string* _internal_mutable_token_mint_address();
  public:

  // string sender_token_address = 2;
  void clear_sender_token_address();
  const std::string& sender_token_address() const;
  void set_sender_token_address(const std::string& value);
  void set_sender_token_address(std::string&& value);
  void set_sender_token_address(const char* value);
  void set_sender_token_address(const char* value, size_t size);
  std::string* mutable_sender_token_address();
  std::string* release_sender_token_address();
  void set_allocated_sender_token_address(std::string* sender_token_address);
  private:
  const std::string& _internal_sender_token_address() const;
  void _internal_set_sender_token_address(const std::string& value);
  std::string* _internal_mutable_sender_token_address();
  public:

  // string recipient_token_address = 3;
  void clear_recipient_token_address();
  const std::string& recipient_token_address() const;
  void set_recipient_token_address(const std::string& value);
  void set_recipient_token_address(std::string&& value);
  void set_recipient_token_address(const char* value);
  void set_recipient_token_address(const char* value, size_t size);
  std::string* mutable_recipient_token_address();
  std::string* release_recipient_token_address();
  void set_allocated_recipient_token_address(std::string* recipient_token_address);
  private:
  const std::string& _internal_recipient_token_address() const;
  void _internal_set_recipient_token_address(const std::string& value);
  std::string* _internal_mutable_recipient_token_address();
  public:

  // string memo = 6;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // string token = 8;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 amount = 4;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 decimals = 5;
  void clear_decimals();
  ::PROTOBUF_NAMESPACE_ID::uint32 decimals() const;
  void set_decimals(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decimals() const;
  void _internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.TokenTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> references_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_mint_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decimals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class CreateAndTransferToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.CreateAndTransferToken) */ {
 public:
  inline CreateAndTransferToken() : CreateAndTransferToken(nullptr) {}
  virtual ~CreateAndTransferToken();

  CreateAndTransferToken(const CreateAndTransferToken& from);
  CreateAndTransferToken(CreateAndTransferToken&& from) noexcept
    : CreateAndTransferToken() {
    *this = ::std::move(from);
  }

  inline CreateAndTransferToken& operator=(const CreateAndTransferToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAndTransferToken& operator=(CreateAndTransferToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAndTransferToken& default_instance();

  static inline const CreateAndTransferToken* internal_default_instance() {
    return reinterpret_cast<const CreateAndTransferToken*>(
               &_CreateAndTransferToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateAndTransferToken& a, CreateAndTransferToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAndTransferToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAndTransferToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAndTransferToken* New() const final {
    return CreateMaybeMessage<CreateAndTransferToken>(nullptr);
  }

  CreateAndTransferToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAndTransferToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAndTransferToken& from);
  void MergeFrom(const CreateAndTransferToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAndTransferToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.CreateAndTransferToken";
  }
  protected:
  explicit CreateAndTransferToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesFieldNumber = 8,
    kRecipientMainAddressFieldNumber = 1,
    kTokenMintAddressFieldNumber = 2,
    kRecipientTokenAddressFieldNumber = 3,
    kSenderTokenAddressFieldNumber = 4,
    kMemoFieldNumber = 7,
    kTokenFieldNumber = 9,
    kAmountFieldNumber = 5,
    kDecimalsFieldNumber = 6,
  };
  // repeated string references = 8;
  int references_size() const;
  private:
  int _internal_references_size() const;
  public:
  void clear_references();
  const std::string& references(int index) const;
  std::string* mutable_references(int index);
  void set_references(int index, const std::string& value);
  void set_references(int index, std::string&& value);
  void set_references(int index, const char* value);
  void set_references(int index, const char* value, size_t size);
  std::string* add_references();
  void add_references(const std::string& value);
  void add_references(std::string&& value);
  void add_references(const char* value);
  void add_references(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_references();
  private:
  const std::string& _internal_references(int index) const;
  std::string* _internal_add_references();
  public:

  // string recipient_main_address = 1;
  void clear_recipient_main_address();
  const std::string& recipient_main_address() const;
  void set_recipient_main_address(const std::string& value);
  void set_recipient_main_address(std::string&& value);
  void set_recipient_main_address(const char* value);
  void set_recipient_main_address(const char* value, size_t size);
  std::string* mutable_recipient_main_address();
  std::string* release_recipient_main_address();
  void set_allocated_recipient_main_address(std::string* recipient_main_address);
  private:
  const std::string& _internal_recipient_main_address() const;
  void _internal_set_recipient_main_address(const std::string& value);
  std::string* _internal_mutable_recipient_main_address();
  public:

  // string token_mint_address = 2;
  void clear_token_mint_address();
  const std::string& token_mint_address() const;
  void set_token_mint_address(const std::string& value);
  void set_token_mint_address(std::string&& value);
  void set_token_mint_address(const char* value);
  void set_token_mint_address(const char* value, size_t size);
  std::string* mutable_token_mint_address();
  std::string* release_token_mint_address();
  void set_allocated_token_mint_address(std::string* token_mint_address);
  private:
  const std::string& _internal_token_mint_address() const;
  void _internal_set_token_mint_address(const std::string& value);
  std::string* _internal_mutable_token_mint_address();
  public:

  // string recipient_token_address = 3;
  void clear_recipient_token_address();
  const std::string& recipient_token_address() const;
  void set_recipient_token_address(const std::string& value);
  void set_recipient_token_address(std::string&& value);
  void set_recipient_token_address(const char* value);
  void set_recipient_token_address(const char* value, size_t size);
  std::string* mutable_recipient_token_address();
  std::string* release_recipient_token_address();
  void set_allocated_recipient_token_address(std::string* recipient_token_address);
  private:
  const std::string& _internal_recipient_token_address() const;
  void _internal_set_recipient_token_address(const std::string& value);
  std::string* _internal_mutable_recipient_token_address();
  public:

  // string sender_token_address = 4;
  void clear_sender_token_address();
  const std::string& sender_token_address() const;
  void set_sender_token_address(const std::string& value);
  void set_sender_token_address(std::string&& value);
  void set_sender_token_address(const char* value);
  void set_sender_token_address(const char* value, size_t size);
  std::string* mutable_sender_token_address();
  std::string* release_sender_token_address();
  void set_allocated_sender_token_address(std::string* sender_token_address);
  private:
  const std::string& _internal_sender_token_address() const;
  void _internal_set_sender_token_address(const std::string& value);
  std::string* _internal_mutable_sender_token_address();
  public:

  // string memo = 7;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // string token = 9;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 amount = 5;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 decimals = 6;
  void clear_decimals();
  ::PROTOBUF_NAMESPACE_ID::uint32 decimals() const;
  void set_decimals(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decimals() const;
  void _internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.CreateAndTransferToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> references_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_main_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_mint_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decimals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class AccountKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.AccountKey) */ {
 public:
  inline AccountKey() : AccountKey(nullptr) {}
  virtual ~AccountKey();

  AccountKey(const AccountKey& from);
  AccountKey(AccountKey&& from) noexcept
    : AccountKey() {
    *this = ::std::move(from);
  }

  inline AccountKey& operator=(const AccountKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountKey& operator=(AccountKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountKey& default_instance();

  static inline const AccountKey* internal_default_instance() {
    return reinterpret_cast<const AccountKey*>(
               &_AccountKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AccountKey& a, AccountKey& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountKey* New() const final {
    return CreateMaybeMessage<AccountKey>(nullptr);
  }

  AccountKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountKey& from);
  void MergeFrom(const AccountKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.AccountKey";
  }
  protected:
  explicit AccountKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
    kIsSignerFieldNumber = 2,
    kIsWritableFieldNumber = 3,
  };
  // string pubkey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bool is_signer = 2;
  void clear_is_signer();
  bool is_signer() const;
  void set_is_signer(bool value);
  private:
  bool _internal_is_signer() const;
  void _internal_set_is_signer(bool value);
  public:

  // bool is_writable = 3;
  void clear_is_writable();
  bool is_writable() const;
  void set_is_writable(bool value);
  private:
  bool _internal_is_writable() const;
  void _internal_set_is_writable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.AccountKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  bool is_signer_;
  bool is_writable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class Instruction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.Instruction) */ {
 public:
  inline Instruction() : Instruction(nullptr) {}
  virtual ~Instruction();

  Instruction(const Instruction& from);
  Instruction(Instruction&& from) noexcept
    : Instruction() {
    *this = ::std::move(from);
  }

  inline Instruction& operator=(const Instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instruction& operator=(Instruction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Instruction& default_instance();

  static inline const Instruction* internal_default_instance() {
    return reinterpret_cast<const Instruction*>(
               &_Instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Instruction& a, Instruction& b) {
    a.Swap(&b);
  }
  inline void Swap(Instruction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Instruction* New() const final {
    return CreateMaybeMessage<Instruction>(nullptr);
  }

  Instruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Instruction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Instruction& from);
  void MergeFrom(const Instruction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instruction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.Instruction";
  }
  protected:
  explicit Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kProgramIdFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // repeated .TW.Solana.Proto.AccountKey keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::TW::Solana::Proto::AccountKey* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AccountKey >*
      mutable_keys();
  private:
  const ::TW::Solana::Proto::AccountKey& _internal_keys(int index) const;
  ::TW::Solana::Proto::AccountKey* _internal_add_keys();
  public:
  const ::TW::Solana::Proto::AccountKey& keys(int index) const;
  ::TW::Solana::Proto::AccountKey* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AccountKey >&
      keys() const;

  // string program_id = 2;
  void clear_program_id();
  const std::string& program_id() const;
  void set_program_id(const std::string& value);
  void set_program_id(std::string&& value);
  void set_program_id(const char* value);
  void set_program_id(const char* value, size_t size);
  std::string* mutable_program_id();
  std::string* release_program_id();
  void set_allocated_program_id(std::string* program_id);
  private:
  const std::string& _internal_program_id() const;
  void _internal_set_program_id(const std::string& value);
  std::string* _internal_mutable_program_id();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.Instruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AccountKey > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class MessageHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {}
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumRequiredSignaturesFieldNumber = 1,
    kNumReadonlySignedAccountsFieldNumber = 2,
    kNumReadonlyUnsignedAccountsFieldNumber = 3,
  };
  // uint32 num_required_signatures = 1;
  void clear_num_required_signatures();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_required_signatures() const;
  void set_num_required_signatures(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_required_signatures() const;
  void _internal_set_num_required_signatures(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_readonly_signed_accounts = 2;
  void clear_num_readonly_signed_accounts();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_readonly_signed_accounts() const;
  void set_num_readonly_signed_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_readonly_signed_accounts() const;
  void _internal_set_num_readonly_signed_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_readonly_unsigned_accounts = 3;
  void clear_num_readonly_unsigned_accounts();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_readonly_unsigned_accounts() const;
  void set_num_readonly_unsigned_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_readonly_unsigned_accounts() const;
  void _internal_set_num_readonly_unsigned_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_required_signatures_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_readonly_signed_accounts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_readonly_unsigned_accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class CompiledInstruction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.CompiledInstruction) */ {
 public:
  inline CompiledInstruction() : CompiledInstruction(nullptr) {}
  virtual ~CompiledInstruction();

  CompiledInstruction(const CompiledInstruction& from);
  CompiledInstruction(CompiledInstruction&& from) noexcept
    : CompiledInstruction() {
    *this = ::std::move(from);
  }

  inline CompiledInstruction& operator=(const CompiledInstruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompiledInstruction& operator=(CompiledInstruction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompiledInstruction& default_instance();

  static inline const CompiledInstruction* internal_default_instance() {
    return reinterpret_cast<const CompiledInstruction*>(
               &_CompiledInstruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CompiledInstruction& a, CompiledInstruction& b) {
    a.Swap(&b);
  }
  inline void Swap(CompiledInstruction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompiledInstruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompiledInstruction* New() const final {
    return CreateMaybeMessage<CompiledInstruction>(nullptr);
  }

  CompiledInstruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompiledInstruction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompiledInstruction& from);
  void MergeFrom(const CompiledInstruction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompiledInstruction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.CompiledInstruction";
  }
  protected:
  explicit CompiledInstruction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountKeyIndexesFieldNumber = 2,
    kDataFieldNumber = 3,
    kProgramIdIndexFieldNumber = 1,
  };
  // repeated uint32 account_key_indexes = 2;
  int account_key_indexes_size() const;
  private:
  int _internal_account_key_indexes_size() const;
  public:
  void clear_account_key_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_key_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_account_key_indexes() const;
  void _internal_add_account_key_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_account_key_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 account_key_indexes(int index) const;
  void set_account_key_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_account_key_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      account_key_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_account_key_indexes();

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 program_id_index = 1;
  void clear_program_id_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 program_id_index() const;
  void set_program_id_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program_id_index() const;
  void _internal_set_program_id_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.CompiledInstruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > account_key_indexes_;
  mutable std::atomic<int> _account_key_indexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_id_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class AddressTableLookups PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.AddressTableLookups) */ {
 public:
  inline AddressTableLookups() : AddressTableLookups(nullptr) {}
  virtual ~AddressTableLookups();

  AddressTableLookups(const AddressTableLookups& from);
  AddressTableLookups(AddressTableLookups&& from) noexcept
    : AddressTableLookups() {
    *this = ::std::move(from);
  }

  inline AddressTableLookups& operator=(const AddressTableLookups& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressTableLookups& operator=(AddressTableLookups&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddressTableLookups& default_instance();

  static inline const AddressTableLookups* internal_default_instance() {
    return reinterpret_cast<const AddressTableLookups*>(
               &_AddressTableLookups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AddressTableLookups& a, AddressTableLookups& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressTableLookups* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressTableLookups* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressTableLookups* New() const final {
    return CreateMaybeMessage<AddressTableLookups>(nullptr);
  }

  AddressTableLookups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressTableLookups>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddressTableLookups& from);
  void MergeFrom(const AddressTableLookups& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressTableLookups* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.AddressTableLookups";
  }
  protected:
  explicit AddressTableLookups(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWritableIndexesFieldNumber = 2,
    kReadonlyIndexesFieldNumber = 3,
    kAccountKeyFieldNumber = 1,
  };
  // repeated uint32 writable_indexes = 2;
  int writable_indexes_size() const;
  private:
  int _internal_writable_indexes_size() const;
  public:
  void clear_writable_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_writable_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_writable_indexes() const;
  void _internal_add_writable_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_writable_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 writable_indexes(int index) const;
  void set_writable_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_writable_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      writable_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_writable_indexes();

  // repeated uint32 readonly_indexes = 3;
  int readonly_indexes_size() const;
  private:
  int _internal_readonly_indexes_size() const;
  public:
  void clear_readonly_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_readonly_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_readonly_indexes() const;
  void _internal_add_readonly_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_readonly_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 readonly_indexes(int index) const;
  void set_readonly_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_readonly_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      readonly_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_readonly_indexes();

  // string account_key = 1;
  void clear_account_key();
  const std::string& account_key() const;
  void set_account_key(const std::string& value);
  void set_account_key(std::string&& value);
  void set_account_key(const char* value);
  void set_account_key(const char* value, size_t size);
  std::string* mutable_account_key();
  std::string* release_account_key();
  void set_allocated_account_key(std::string* account_key);
  private:
  const std::string& _internal_account_key() const;
  void _internal_set_account_key(const std::string& value);
  std::string* _internal_mutable_account_key();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.AddressTableLookups)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > writable_indexes_;
  mutable std::atomic<int> _writable_indexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > readonly_indexes_;
  mutable std::atomic<int> _readonly_indexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  enum TransactionTypeCase {
    kTransferTransaction = 3,
    kDelegateStakeTransaction = 4,
    kDeactivateStakeTransaction = 5,
    kDeactivateAllStakeTransaction = 6,
    kWithdrawTransaction = 7,
    kWithdrawAllTransaction = 8,
    kCreateTokenAccountTransaction = 9,
    kTokenTransferTransaction = 10,
    kCreateAndTransferTokenTransaction = 11,
    TRANSACTION_TYPE_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticAccountKeysFieldNumber = 15,
    kCompiledInstructionsFieldNumber = 16,
    kInstructionsFieldNumber = 17,
    kAddressTableLookupsFieldNumber = 18,
    kPrivateKeyFieldNumber = 1,
    kRecentBlockhashFieldNumber = 2,
    kFromAddressFieldNumber = 12,
    kToAddressFieldNumber = 13,
    kHeaderFieldNumber = 14,
    kTransferTransactionFieldNumber = 3,
    kDelegateStakeTransactionFieldNumber = 4,
    kDeactivateStakeTransactionFieldNumber = 5,
    kDeactivateAllStakeTransactionFieldNumber = 6,
    kWithdrawTransactionFieldNumber = 7,
    kWithdrawAllTransactionFieldNumber = 8,
    kCreateTokenAccountTransactionFieldNumber = 9,
    kTokenTransferTransactionFieldNumber = 10,
    kCreateAndTransferTokenTransactionFieldNumber = 11,
  };
  // repeated string static_account_keys = 15;
  int static_account_keys_size() const;
  private:
  int _internal_static_account_keys_size() const;
  public:
  void clear_static_account_keys();
  const std::string& static_account_keys(int index) const;
  std::string* mutable_static_account_keys(int index);
  void set_static_account_keys(int index, const std::string& value);
  void set_static_account_keys(int index, std::string&& value);
  void set_static_account_keys(int index, const char* value);
  void set_static_account_keys(int index, const char* value, size_t size);
  std::string* add_static_account_keys();
  void add_static_account_keys(const std::string& value);
  void add_static_account_keys(std::string&& value);
  void add_static_account_keys(const char* value);
  void add_static_account_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& static_account_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_static_account_keys();
  private:
  const std::string& _internal_static_account_keys(int index) const;
  std::string* _internal_add_static_account_keys();
  public:

  // repeated .TW.Solana.Proto.CompiledInstruction compiled_instructions = 16;
  int compiled_instructions_size() const;
  private:
  int _internal_compiled_instructions_size() const;
  public:
  void clear_compiled_instructions();
  ::TW::Solana::Proto::CompiledInstruction* mutable_compiled_instructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::CompiledInstruction >*
      mutable_compiled_instructions();
  private:
  const ::TW::Solana::Proto::CompiledInstruction& _internal_compiled_instructions(int index) const;
  ::TW::Solana::Proto::CompiledInstruction* _internal_add_compiled_instructions();
  public:
  const ::TW::Solana::Proto::CompiledInstruction& compiled_instructions(int index) const;
  ::TW::Solana::Proto::CompiledInstruction* add_compiled_instructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::CompiledInstruction >&
      compiled_instructions() const;

  // repeated .TW.Solana.Proto.Instruction instructions = 17;
  int instructions_size() const;
  private:
  int _internal_instructions_size() const;
  public:
  void clear_instructions();
  ::TW::Solana::Proto::Instruction* mutable_instructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::Instruction >*
      mutable_instructions();
  private:
  const ::TW::Solana::Proto::Instruction& _internal_instructions(int index) const;
  ::TW::Solana::Proto::Instruction* _internal_add_instructions();
  public:
  const ::TW::Solana::Proto::Instruction& instructions(int index) const;
  ::TW::Solana::Proto::Instruction* add_instructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::Instruction >&
      instructions() const;

  // repeated .TW.Solana.Proto.AddressTableLookups address_table_lookups = 18;
  int address_table_lookups_size() const;
  private:
  int _internal_address_table_lookups_size() const;
  public:
  void clear_address_table_lookups();
  ::TW::Solana::Proto::AddressTableLookups* mutable_address_table_lookups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AddressTableLookups >*
      mutable_address_table_lookups();
  private:
  const ::TW::Solana::Proto::AddressTableLookups& _internal_address_table_lookups(int index) const;
  ::TW::Solana::Proto::AddressTableLookups* _internal_add_address_table_lookups();
  public:
  const ::TW::Solana::Proto::AddressTableLookups& address_table_lookups(int index) const;
  ::TW::Solana::Proto::AddressTableLookups* add_address_table_lookups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AddressTableLookups >&
      address_table_lookups() const;

  // bytes private_key = 1;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // string recent_blockhash = 2;
  void clear_recent_blockhash();
  const std::string& recent_blockhash() const;
  void set_recent_blockhash(const std::string& value);
  void set_recent_blockhash(std::string&& value);
  void set_recent_blockhash(const char* value);
  void set_recent_blockhash(const char* value, size_t size);
  std::string* mutable_recent_blockhash();
  std::string* release_recent_blockhash();
  void set_allocated_recent_blockhash(std::string* recent_blockhash);
  private:
  const std::string& _internal_recent_blockhash() const;
  void _internal_set_recent_blockhash(const std::string& value);
  std::string* _internal_mutable_recent_blockhash();
  public:

  // string from_address = 12;
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // string to_address = 13;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // .TW.Solana.Proto.MessageHeader header = 14;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::TW::Solana::Proto::MessageHeader& header() const;
  ::TW::Solana::Proto::MessageHeader* release_header();
  ::TW::Solana::Proto::MessageHeader* mutable_header();
  void set_allocated_header(::TW::Solana::Proto::MessageHeader* header);
  private:
  const ::TW::Solana::Proto::MessageHeader& _internal_header() const;
  ::TW::Solana::Proto::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::TW::Solana::Proto::MessageHeader* header);
  ::TW::Solana::Proto::MessageHeader* unsafe_arena_release_header();

  // .TW.Solana.Proto.Transfer transfer_transaction = 3;
  bool has_transfer_transaction() const;
  private:
  bool _internal_has_transfer_transaction() const;
  public:
  void clear_transfer_transaction();
  const ::TW::Solana::Proto::Transfer& transfer_transaction() const;
  ::TW::Solana::Proto::Transfer* release_transfer_transaction();
  ::TW::Solana::Proto::Transfer* mutable_transfer_transaction();
  void set_allocated_transfer_transaction(::TW::Solana::Proto::Transfer* transfer_transaction);
  private:
  const ::TW::Solana::Proto::Transfer& _internal_transfer_transaction() const;
  ::TW::Solana::Proto::Transfer* _internal_mutable_transfer_transaction();
  public:
  void unsafe_arena_set_allocated_transfer_transaction(
      ::TW::Solana::Proto::Transfer* transfer_transaction);
  ::TW::Solana::Proto::Transfer* unsafe_arena_release_transfer_transaction();

  // .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 4;
  bool has_delegate_stake_transaction() const;
  private:
  bool _internal_has_delegate_stake_transaction() const;
  public:
  void clear_delegate_stake_transaction();
  const ::TW::Solana::Proto::DelegateStake& delegate_stake_transaction() const;
  ::TW::Solana::Proto::DelegateStake* release_delegate_stake_transaction();
  ::TW::Solana::Proto::DelegateStake* mutable_delegate_stake_transaction();
  void set_allocated_delegate_stake_transaction(::TW::Solana::Proto::DelegateStake* delegate_stake_transaction);
  private:
  const ::TW::Solana::Proto::DelegateStake& _internal_delegate_stake_transaction() const;
  ::TW::Solana::Proto::DelegateStake* _internal_mutable_delegate_stake_transaction();
  public:
  void unsafe_arena_set_allocated_delegate_stake_transaction(
      ::TW::Solana::Proto::DelegateStake* delegate_stake_transaction);
  ::TW::Solana::Proto::DelegateStake* unsafe_arena_release_delegate_stake_transaction();

  // .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 5;
  bool has_deactivate_stake_transaction() const;
  private:
  bool _internal_has_deactivate_stake_transaction() const;
  public:
  void clear_deactivate_stake_transaction();
  const ::TW::Solana::Proto::DeactivateStake& deactivate_stake_transaction() const;
  ::TW::Solana::Proto::DeactivateStake* release_deactivate_stake_transaction();
  ::TW::Solana::Proto::DeactivateStake* mutable_deactivate_stake_transaction();
  void set_allocated_deactivate_stake_transaction(::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction);
  private:
  const ::TW::Solana::Proto::DeactivateStake& _internal_deactivate_stake_transaction() const;
  ::TW::Solana::Proto::DeactivateStake* _internal_mutable_deactivate_stake_transaction();
  public:
  void unsafe_arena_set_allocated_deactivate_stake_transaction(
      ::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction);
  ::TW::Solana::Proto::DeactivateStake* unsafe_arena_release_deactivate_stake_transaction();

  // .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 6;
  bool has_deactivate_all_stake_transaction() const;
  private:
  bool _internal_has_deactivate_all_stake_transaction() const;
  public:
  void clear_deactivate_all_stake_transaction();
  const ::TW::Solana::Proto::DeactivateAllStake& deactivate_all_stake_transaction() const;
  ::TW::Solana::Proto::DeactivateAllStake* release_deactivate_all_stake_transaction();
  ::TW::Solana::Proto::DeactivateAllStake* mutable_deactivate_all_stake_transaction();
  void set_allocated_deactivate_all_stake_transaction(::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction);
  private:
  const ::TW::Solana::Proto::DeactivateAllStake& _internal_deactivate_all_stake_transaction() const;
  ::TW::Solana::Proto::DeactivateAllStake* _internal_mutable_deactivate_all_stake_transaction();
  public:
  void unsafe_arena_set_allocated_deactivate_all_stake_transaction(
      ::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction);
  ::TW::Solana::Proto::DeactivateAllStake* unsafe_arena_release_deactivate_all_stake_transaction();

  // .TW.Solana.Proto.WithdrawStake withdraw_transaction = 7;
  bool has_withdraw_transaction() const;
  private:
  bool _internal_has_withdraw_transaction() const;
  public:
  void clear_withdraw_transaction();
  const ::TW::Solana::Proto::WithdrawStake& withdraw_transaction() const;
  ::TW::Solana::Proto::WithdrawStake* release_withdraw_transaction();
  ::TW::Solana::Proto::WithdrawStake* mutable_withdraw_transaction();
  void set_allocated_withdraw_transaction(::TW::Solana::Proto::WithdrawStake* withdraw_transaction);
  private:
  const ::TW::Solana::Proto::WithdrawStake& _internal_withdraw_transaction() const;
  ::TW::Solana::Proto::WithdrawStake* _internal_mutable_withdraw_transaction();
  public:
  void unsafe_arena_set_allocated_withdraw_transaction(
      ::TW::Solana::Proto::WithdrawStake* withdraw_transaction);
  ::TW::Solana::Proto::WithdrawStake* unsafe_arena_release_withdraw_transaction();

  // .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 8;
  bool has_withdraw_all_transaction() const;
  private:
  bool _internal_has_withdraw_all_transaction() const;
  public:
  void clear_withdraw_all_transaction();
  const ::TW::Solana::Proto::WithdrawAllStake& withdraw_all_transaction() const;
  ::TW::Solana::Proto::WithdrawAllStake* release_withdraw_all_transaction();
  ::TW::Solana::Proto::WithdrawAllStake* mutable_withdraw_all_transaction();
  void set_allocated_withdraw_all_transaction(::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction);
  private:
  const ::TW::Solana::Proto::WithdrawAllStake& _internal_withdraw_all_transaction() const;
  ::TW::Solana::Proto::WithdrawAllStake* _internal_mutable_withdraw_all_transaction();
  public:
  void unsafe_arena_set_allocated_withdraw_all_transaction(
      ::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction);
  ::TW::Solana::Proto::WithdrawAllStake* unsafe_arena_release_withdraw_all_transaction();

  // .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 9;
  bool has_create_token_account_transaction() const;
  private:
  bool _internal_has_create_token_account_transaction() const;
  public:
  void clear_create_token_account_transaction();
  const ::TW::Solana::Proto::CreateTokenAccount& create_token_account_transaction() const;
  ::TW::Solana::Proto::CreateTokenAccount* release_create_token_account_transaction();
  ::TW::Solana::Proto::CreateTokenAccount* mutable_create_token_account_transaction();
  void set_allocated_create_token_account_transaction(::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction);
  private:
  const ::TW::Solana::Proto::CreateTokenAccount& _internal_create_token_account_transaction() const;
  ::TW::Solana::Proto::CreateTokenAccount* _internal_mutable_create_token_account_transaction();
  public:
  void unsafe_arena_set_allocated_create_token_account_transaction(
      ::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction);
  ::TW::Solana::Proto::CreateTokenAccount* unsafe_arena_release_create_token_account_transaction();

  // .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 10;
  bool has_token_transfer_transaction() const;
  private:
  bool _internal_has_token_transfer_transaction() const;
  public:
  void clear_token_transfer_transaction();
  const ::TW::Solana::Proto::TokenTransfer& token_transfer_transaction() const;
  ::TW::Solana::Proto::TokenTransfer* release_token_transfer_transaction();
  ::TW::Solana::Proto::TokenTransfer* mutable_token_transfer_transaction();
  void set_allocated_token_transfer_transaction(::TW::Solana::Proto::TokenTransfer* token_transfer_transaction);
  private:
  const ::TW::Solana::Proto::TokenTransfer& _internal_token_transfer_transaction() const;
  ::TW::Solana::Proto::TokenTransfer* _internal_mutable_token_transfer_transaction();
  public:
  void unsafe_arena_set_allocated_token_transfer_transaction(
      ::TW::Solana::Proto::TokenTransfer* token_transfer_transaction);
  ::TW::Solana::Proto::TokenTransfer* unsafe_arena_release_token_transfer_transaction();

  // .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 11;
  bool has_create_and_transfer_token_transaction() const;
  private:
  bool _internal_has_create_and_transfer_token_transaction() const;
  public:
  void clear_create_and_transfer_token_transaction();
  const ::TW::Solana::Proto::CreateAndTransferToken& create_and_transfer_token_transaction() const;
  ::TW::Solana::Proto::CreateAndTransferToken* release_create_and_transfer_token_transaction();
  ::TW::Solana::Proto::CreateAndTransferToken* mutable_create_and_transfer_token_transaction();
  void set_allocated_create_and_transfer_token_transaction(::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction);
  private:
  const ::TW::Solana::Proto::CreateAndTransferToken& _internal_create_and_transfer_token_transaction() const;
  ::TW::Solana::Proto::CreateAndTransferToken* _internal_mutable_create_and_transfer_token_transaction();
  public:
  void unsafe_arena_set_allocated_create_and_transfer_token_transaction(
      ::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction);
  ::TW::Solana::Proto::CreateAndTransferToken* unsafe_arena_release_create_and_transfer_token_transaction();

  void clear_transaction_type();
  TransactionTypeCase transaction_type_case() const;
  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_transfer_transaction();
  void set_has_delegate_stake_transaction();
  void set_has_deactivate_stake_transaction();
  void set_has_deactivate_all_stake_transaction();
  void set_has_withdraw_transaction();
  void set_has_withdraw_all_transaction();
  void set_has_create_token_account_transaction();
  void set_has_token_transfer_transaction();
  void set_has_create_and_transfer_token_transaction();

  inline bool has_transaction_type() const;
  inline void clear_has_transaction_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> static_account_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::CompiledInstruction > compiled_instructions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::Instruction > instructions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AddressTableLookups > address_table_lookups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recent_blockhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::TW::Solana::Proto::MessageHeader* header_;
  union TransactionTypeUnion {
    TransactionTypeUnion() {}
    ::TW::Solana::Proto::Transfer* transfer_transaction_;
    ::TW::Solana::Proto::DelegateStake* delegate_stake_transaction_;
    ::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction_;
    ::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction_;
    ::TW::Solana::Proto::WithdrawStake* withdraw_transaction_;
    ::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction_;
    ::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction_;
    ::TW::Solana::Proto::TokenTransfer* token_transfer_transaction_;
    ::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction_;
  } transaction_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Solana_2eproto);
    return ::descriptor_table_Solana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
  };
  // string encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const char* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transfer

// string recipient = 1;
inline void Transfer::clear_recipient() {
  recipient_.ClearToEmpty();
}
inline const std::string& Transfer::recipient() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Transfer.recipient)
  return _internal_recipient();
}
inline void Transfer::set_recipient(const std::string& value) {
  _internal_set_recipient(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.recipient)
}
inline std::string* Transfer::mutable_recipient() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.Transfer.recipient)
  return _internal_mutable_recipient();
}
inline const std::string& Transfer::_internal_recipient() const {
  return recipient_.Get();
}
inline void Transfer::_internal_set_recipient(const std::string& value) {
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transfer::set_recipient(std::string&& value) {
  
  recipient_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.Transfer.recipient)
}
inline void Transfer::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.Transfer.recipient)
}
inline void Transfer::set_recipient(const char* value,
    size_t size) {
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.Transfer.recipient)
}
inline std::string* Transfer::_internal_mutable_recipient() {
  
  return recipient_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transfer::release_recipient() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.Transfer.recipient)
  return recipient_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.Transfer.recipient)
}

// uint64 value = 2;
inline void Transfer::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::value() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Transfer.value)
  return _internal_value();
}
inline void Transfer::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void Transfer::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.value)
}

// string memo = 3;
inline void Transfer::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& Transfer::memo() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Transfer.memo)
  return _internal_memo();
}
inline void Transfer::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.memo)
}
inline std::string* Transfer::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.Transfer.memo)
  return _internal_mutable_memo();
}
inline const std::string& Transfer::_internal_memo() const {
  return memo_.Get();
}
inline void Transfer::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transfer::set_memo(std::string&& value) {
  
  memo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.Transfer.memo)
}
inline void Transfer::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.Transfer.memo)
}
inline void Transfer::set_memo(const char* value,
    size_t size) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.Transfer.memo)
}
inline std::string* Transfer::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transfer::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.Transfer.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.Transfer.memo)
}

// repeated string references = 4;
inline int Transfer::_internal_references_size() const {
  return references_.size();
}
inline int Transfer::references_size() const {
  return _internal_references_size();
}
inline void Transfer::clear_references() {
  references_.Clear();
}
inline std::string* Transfer::add_references() {
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.Transfer.references)
  return _internal_add_references();
}
inline const std::string& Transfer::_internal_references(int index) const {
  return references_.Get(index);
}
inline const std::string& Transfer::references(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Transfer.references)
  return _internal_references(index);
}
inline std::string* Transfer::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.Transfer.references)
  return references_.Mutable(index);
}
inline void Transfer::set_references(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.references)
  references_.Mutable(index)->assign(value);
}
inline void Transfer::set_references(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.references)
  references_.Mutable(index)->assign(std::move(value));
}
inline void Transfer::set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::set_references(int index, const char* value, size_t size) {
  references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.Transfer.references)
}
inline std::string* Transfer::_internal_add_references() {
  return references_.Add();
}
inline void Transfer::add_references(const std::string& value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::add_references(std::string&& value) {
  references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::add_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::add_references(const char* value, size_t size) {
  references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.Transfer.references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transfer::references() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.Transfer.references)
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transfer::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.Transfer.references)
  return &references_;
}

// -------------------------------------------------------------------

// DelegateStake

// string validator_pubkey = 1;
inline void DelegateStake::clear_validator_pubkey() {
  validator_pubkey_.ClearToEmpty();
}
inline const std::string& DelegateStake::validator_pubkey() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DelegateStake.validator_pubkey)
  return _internal_validator_pubkey();
}
inline void DelegateStake::set_validator_pubkey(const std::string& value) {
  _internal_set_validator_pubkey(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DelegateStake.validator_pubkey)
}
inline std::string* DelegateStake::mutable_validator_pubkey() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.DelegateStake.validator_pubkey)
  return _internal_mutable_validator_pubkey();
}
inline const std::string& DelegateStake::_internal_validator_pubkey() const {
  return validator_pubkey_.Get();
}
inline void DelegateStake::_internal_set_validator_pubkey(const std::string& value) {
  
  validator_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelegateStake::set_validator_pubkey(std::string&& value) {
  
  validator_pubkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.DelegateStake.validator_pubkey)
}
inline void DelegateStake::set_validator_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.DelegateStake.validator_pubkey)
}
inline void DelegateStake::set_validator_pubkey(const char* value,
    size_t size) {
  
  validator_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.DelegateStake.validator_pubkey)
}
inline std::string* DelegateStake::_internal_mutable_validator_pubkey() {
  
  return validator_pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelegateStake::release_validator_pubkey() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.DelegateStake.validator_pubkey)
  return validator_pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateStake::set_allocated_validator_pubkey(std::string* validator_pubkey) {
  if (validator_pubkey != nullptr) {
    
  } else {
    
  }
  validator_pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_pubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.DelegateStake.validator_pubkey)
}

// uint64 value = 2;
inline void DelegateStake::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelegateStake::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelegateStake::value() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DelegateStake.value)
  return _internal_value();
}
inline void DelegateStake::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void DelegateStake::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DelegateStake.value)
}

// string stake_account = 3;
inline void DelegateStake::clear_stake_account() {
  stake_account_.ClearToEmpty();
}
inline const std::string& DelegateStake::stake_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DelegateStake.stake_account)
  return _internal_stake_account();
}
inline void DelegateStake::set_stake_account(const std::string& value) {
  _internal_set_stake_account(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DelegateStake.stake_account)
}
inline std::string* DelegateStake::mutable_stake_account() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.DelegateStake.stake_account)
  return _internal_mutable_stake_account();
}
inline const std::string& DelegateStake::_internal_stake_account() const {
  return stake_account_.Get();
}
inline void DelegateStake::_internal_set_stake_account(const std::string& value) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelegateStake::set_stake_account(std::string&& value) {
  
  stake_account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.DelegateStake.stake_account)
}
inline void DelegateStake::set_stake_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.DelegateStake.stake_account)
}
inline void DelegateStake::set_stake_account(const char* value,
    size_t size) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.DelegateStake.stake_account)
}
inline std::string* DelegateStake::_internal_mutable_stake_account() {
  
  return stake_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelegateStake::release_stake_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.DelegateStake.stake_account)
  return stake_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateStake::set_allocated_stake_account(std::string* stake_account) {
  if (stake_account != nullptr) {
    
  } else {
    
  }
  stake_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stake_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.DelegateStake.stake_account)
}

// -------------------------------------------------------------------

// DeactivateStake

// string stake_account = 1;
inline void DeactivateStake::clear_stake_account() {
  stake_account_.ClearToEmpty();
}
inline const std::string& DeactivateStake::stake_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DeactivateStake.stake_account)
  return _internal_stake_account();
}
inline void DeactivateStake::set_stake_account(const std::string& value) {
  _internal_set_stake_account(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DeactivateStake.stake_account)
}
inline std::string* DeactivateStake::mutable_stake_account() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.DeactivateStake.stake_account)
  return _internal_mutable_stake_account();
}
inline const std::string& DeactivateStake::_internal_stake_account() const {
  return stake_account_.Get();
}
inline void DeactivateStake::_internal_set_stake_account(const std::string& value) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeactivateStake::set_stake_account(std::string&& value) {
  
  stake_account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.DeactivateStake.stake_account)
}
inline void DeactivateStake::set_stake_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.DeactivateStake.stake_account)
}
inline void DeactivateStake::set_stake_account(const char* value,
    size_t size) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.DeactivateStake.stake_account)
}
inline std::string* DeactivateStake::_internal_mutable_stake_account() {
  
  return stake_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeactivateStake::release_stake_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.DeactivateStake.stake_account)
  return stake_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeactivateStake::set_allocated_stake_account(std::string* stake_account) {
  if (stake_account != nullptr) {
    
  } else {
    
  }
  stake_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stake_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.DeactivateStake.stake_account)
}

// -------------------------------------------------------------------

// DeactivateAllStake

// repeated string stake_accounts = 1;
inline int DeactivateAllStake::_internal_stake_accounts_size() const {
  return stake_accounts_.size();
}
inline int DeactivateAllStake::stake_accounts_size() const {
  return _internal_stake_accounts_size();
}
inline void DeactivateAllStake::clear_stake_accounts() {
  stake_accounts_.Clear();
}
inline std::string* DeactivateAllStake::add_stake_accounts() {
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return _internal_add_stake_accounts();
}
inline const std::string& DeactivateAllStake::_internal_stake_accounts(int index) const {
  return stake_accounts_.Get(index);
}
inline const std::string& DeactivateAllStake::stake_accounts(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return _internal_stake_accounts(index);
}
inline std::string* DeactivateAllStake::mutable_stake_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return stake_accounts_.Mutable(index);
}
inline void DeactivateAllStake::set_stake_accounts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  stake_accounts_.Mutable(index)->assign(value);
}
inline void DeactivateAllStake::set_stake_accounts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  stake_accounts_.Mutable(index)->assign(std::move(value));
}
inline void DeactivateAllStake::set_stake_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stake_accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::set_stake_accounts(int index, const char* value, size_t size) {
  stake_accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline std::string* DeactivateAllStake::_internal_add_stake_accounts() {
  return stake_accounts_.Add();
}
inline void DeactivateAllStake::add_stake_accounts(const std::string& value) {
  stake_accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::add_stake_accounts(std::string&& value) {
  stake_accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::add_stake_accounts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stake_accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::add_stake_accounts(const char* value, size_t size) {
  stake_accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeactivateAllStake::stake_accounts() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return stake_accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeactivateAllStake::mutable_stake_accounts() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return &stake_accounts_;
}

// -------------------------------------------------------------------

// WithdrawStake

// string stake_account = 1;
inline void WithdrawStake::clear_stake_account() {
  stake_account_.ClearToEmpty();
}
inline const std::string& WithdrawStake::stake_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.WithdrawStake.stake_account)
  return _internal_stake_account();
}
inline void WithdrawStake::set_stake_account(const std::string& value) {
  _internal_set_stake_account(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.WithdrawStake.stake_account)
}
inline std::string* WithdrawStake::mutable_stake_account() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.WithdrawStake.stake_account)
  return _internal_mutable_stake_account();
}
inline const std::string& WithdrawStake::_internal_stake_account() const {
  return stake_account_.Get();
}
inline void WithdrawStake::_internal_set_stake_account(const std::string& value) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WithdrawStake::set_stake_account(std::string&& value) {
  
  stake_account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.WithdrawStake.stake_account)
}
inline void WithdrawStake::set_stake_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.WithdrawStake.stake_account)
}
inline void WithdrawStake::set_stake_account(const char* value,
    size_t size) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.WithdrawStake.stake_account)
}
inline std::string* WithdrawStake::_internal_mutable_stake_account() {
  
  return stake_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WithdrawStake::release_stake_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.WithdrawStake.stake_account)
  return stake_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithdrawStake::set_allocated_stake_account(std::string* stake_account) {
  if (stake_account != nullptr) {
    
  } else {
    
  }
  stake_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stake_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.WithdrawStake.stake_account)
}

// uint64 value = 2;
inline void WithdrawStake::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithdrawStake::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithdrawStake::value() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.WithdrawStake.value)
  return _internal_value();
}
inline void WithdrawStake::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void WithdrawStake::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.WithdrawStake.value)
}

// -------------------------------------------------------------------

// StakeAccountValue

// string stake_account = 1;
inline void StakeAccountValue::clear_stake_account() {
  stake_account_.ClearToEmpty();
}
inline const std::string& StakeAccountValue::stake_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.StakeAccountValue.stake_account)
  return _internal_stake_account();
}
inline void StakeAccountValue::set_stake_account(const std::string& value) {
  _internal_set_stake_account(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.StakeAccountValue.stake_account)
}
inline std::string* StakeAccountValue::mutable_stake_account() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.StakeAccountValue.stake_account)
  return _internal_mutable_stake_account();
}
inline const std::string& StakeAccountValue::_internal_stake_account() const {
  return stake_account_.Get();
}
inline void StakeAccountValue::_internal_set_stake_account(const std::string& value) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StakeAccountValue::set_stake_account(std::string&& value) {
  
  stake_account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.StakeAccountValue.stake_account)
}
inline void StakeAccountValue::set_stake_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.StakeAccountValue.stake_account)
}
inline void StakeAccountValue::set_stake_account(const char* value,
    size_t size) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.StakeAccountValue.stake_account)
}
inline std::string* StakeAccountValue::_internal_mutable_stake_account() {
  
  return stake_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StakeAccountValue::release_stake_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.StakeAccountValue.stake_account)
  return stake_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StakeAccountValue::set_allocated_stake_account(std::string* stake_account) {
  if (stake_account != nullptr) {
    
  } else {
    
  }
  stake_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stake_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.StakeAccountValue.stake_account)
}

// uint64 value = 2;
inline void StakeAccountValue::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StakeAccountValue::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StakeAccountValue::value() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.StakeAccountValue.value)
  return _internal_value();
}
inline void StakeAccountValue::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void StakeAccountValue::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.StakeAccountValue.value)
}

// -------------------------------------------------------------------

// WithdrawAllStake

// repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
inline int WithdrawAllStake::_internal_stake_accounts_size() const {
  return stake_accounts_.size();
}
inline int WithdrawAllStake::stake_accounts_size() const {
  return _internal_stake_accounts_size();
}
inline void WithdrawAllStake::clear_stake_accounts() {
  stake_accounts_.Clear();
}
inline ::TW::Solana::Proto::StakeAccountValue* WithdrawAllStake::mutable_stake_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return stake_accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue >*
WithdrawAllStake::mutable_stake_accounts() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return &stake_accounts_;
}
inline const ::TW::Solana::Proto::StakeAccountValue& WithdrawAllStake::_internal_stake_accounts(int index) const {
  return stake_accounts_.Get(index);
}
inline const ::TW::Solana::Proto::StakeAccountValue& WithdrawAllStake::stake_accounts(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return _internal_stake_accounts(index);
}
inline ::TW::Solana::Proto::StakeAccountValue* WithdrawAllStake::_internal_add_stake_accounts() {
  return stake_accounts_.Add();
}
inline ::TW::Solana::Proto::StakeAccountValue* WithdrawAllStake::add_stake_accounts() {
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return _internal_add_stake_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue >&
WithdrawAllStake::stake_accounts() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return stake_accounts_;
}

// -------------------------------------------------------------------

// CreateTokenAccount

// string main_address = 1;
inline void CreateTokenAccount::clear_main_address() {
  main_address_.ClearToEmpty();
}
inline const std::string& CreateTokenAccount::main_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateTokenAccount.main_address)
  return _internal_main_address();
}
inline void CreateTokenAccount::set_main_address(const std::string& value) {
  _internal_set_main_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateTokenAccount.main_address)
}
inline std::string* CreateTokenAccount::mutable_main_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateTokenAccount.main_address)
  return _internal_mutable_main_address();
}
inline const std::string& CreateTokenAccount::_internal_main_address() const {
  return main_address_.Get();
}
inline void CreateTokenAccount::_internal_set_main_address(const std::string& value) {
  
  main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTokenAccount::set_main_address(std::string&& value) {
  
  main_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateTokenAccount.main_address)
}
inline void CreateTokenAccount::set_main_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateTokenAccount.main_address)
}
inline void CreateTokenAccount::set_main_address(const char* value,
    size_t size) {
  
  main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateTokenAccount.main_address)
}
inline std::string* CreateTokenAccount::_internal_mutable_main_address() {
  
  return main_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTokenAccount::release_main_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateTokenAccount.main_address)
  return main_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTokenAccount::set_allocated_main_address(std::string* main_address) {
  if (main_address != nullptr) {
    
  } else {
    
  }
  main_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateTokenAccount.main_address)
}

// string token_mint_address = 2;
inline void CreateTokenAccount::clear_token_mint_address() {
  token_mint_address_.ClearToEmpty();
}
inline const std::string& CreateTokenAccount::token_mint_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
  return _internal_token_mint_address();
}
inline void CreateTokenAccount::set_token_mint_address(const std::string& value) {
  _internal_set_token_mint_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
}
inline std::string* CreateTokenAccount::mutable_token_mint_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
  return _internal_mutable_token_mint_address();
}
inline const std::string& CreateTokenAccount::_internal_token_mint_address() const {
  return token_mint_address_.Get();
}
inline void CreateTokenAccount::_internal_set_token_mint_address(const std::string& value) {
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTokenAccount::set_token_mint_address(std::string&& value) {
  
  token_mint_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
}
inline void CreateTokenAccount::set_token_mint_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
}
inline void CreateTokenAccount::set_token_mint_address(const char* value,
    size_t size) {
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
}
inline std::string* CreateTokenAccount::_internal_mutable_token_mint_address() {
  
  return token_mint_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTokenAccount::release_token_mint_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
  return token_mint_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTokenAccount::set_allocated_token_mint_address(std::string* token_mint_address) {
  if (token_mint_address != nullptr) {
    
  } else {
    
  }
  token_mint_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_mint_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
}

// string token_address = 3;
inline void CreateTokenAccount::clear_token_address() {
  token_address_.ClearToEmpty();
}
inline const std::string& CreateTokenAccount::token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateTokenAccount.token_address)
  return _internal_token_address();
}
inline void CreateTokenAccount::set_token_address(const std::string& value) {
  _internal_set_token_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateTokenAccount.token_address)
}
inline std::string* CreateTokenAccount::mutable_token_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateTokenAccount.token_address)
  return _internal_mutable_token_address();
}
inline const std::string& CreateTokenAccount::_internal_token_address() const {
  return token_address_.Get();
}
inline void CreateTokenAccount::_internal_set_token_address(const std::string& value) {
  
  token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTokenAccount::set_token_address(std::string&& value) {
  
  token_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateTokenAccount.token_address)
}
inline void CreateTokenAccount::set_token_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateTokenAccount.token_address)
}
inline void CreateTokenAccount::set_token_address(const char* value,
    size_t size) {
  
  token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateTokenAccount.token_address)
}
inline std::string* CreateTokenAccount::_internal_mutable_token_address() {
  
  return token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTokenAccount::release_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateTokenAccount.token_address)
  return token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTokenAccount::set_allocated_token_address(std::string* token_address) {
  if (token_address != nullptr) {
    
  } else {
    
  }
  token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateTokenAccount.token_address)
}

// string token = 4;
inline void CreateTokenAccount::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CreateTokenAccount::token() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateTokenAccount.token)
  return _internal_token();
}
inline void CreateTokenAccount::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateTokenAccount.token)
}
inline std::string* CreateTokenAccount::mutable_token() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateTokenAccount.token)
  return _internal_mutable_token();
}
inline const std::string& CreateTokenAccount::_internal_token() const {
  return token_.Get();
}
inline void CreateTokenAccount::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTokenAccount::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateTokenAccount.token)
}
inline void CreateTokenAccount::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateTokenAccount.token)
}
inline void CreateTokenAccount::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateTokenAccount.token)
}
inline std::string* CreateTokenAccount::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTokenAccount::release_token() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateTokenAccount.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTokenAccount::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateTokenAccount.token)
}

// -------------------------------------------------------------------

// TokenTransfer

// string token_mint_address = 1;
inline void TokenTransfer::clear_token_mint_address() {
  token_mint_address_.ClearToEmpty();
}
inline const std::string& TokenTransfer::token_mint_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.token_mint_address)
  return _internal_token_mint_address();
}
inline void TokenTransfer::set_token_mint_address(const std::string& value) {
  _internal_set_token_mint_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.token_mint_address)
}
inline std::string* TokenTransfer::mutable_token_mint_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.token_mint_address)
  return _internal_mutable_token_mint_address();
}
inline const std::string& TokenTransfer::_internal_token_mint_address() const {
  return token_mint_address_.Get();
}
inline void TokenTransfer::_internal_set_token_mint_address(const std::string& value) {
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenTransfer::set_token_mint_address(std::string&& value) {
  
  token_mint_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.TokenTransfer.token_mint_address)
}
inline void TokenTransfer::set_token_mint_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.TokenTransfer.token_mint_address)
}
inline void TokenTransfer::set_token_mint_address(const char* value,
    size_t size) {
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.TokenTransfer.token_mint_address)
}
inline std::string* TokenTransfer::_internal_mutable_token_mint_address() {
  
  return token_mint_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenTransfer::release_token_mint_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.TokenTransfer.token_mint_address)
  return token_mint_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenTransfer::set_allocated_token_mint_address(std::string* token_mint_address) {
  if (token_mint_address != nullptr) {
    
  } else {
    
  }
  token_mint_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_mint_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.TokenTransfer.token_mint_address)
}

// string sender_token_address = 2;
inline void TokenTransfer::clear_sender_token_address() {
  sender_token_address_.ClearToEmpty();
}
inline const std::string& TokenTransfer::sender_token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.sender_token_address)
  return _internal_sender_token_address();
}
inline void TokenTransfer::set_sender_token_address(const std::string& value) {
  _internal_set_sender_token_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.sender_token_address)
}
inline std::string* TokenTransfer::mutable_sender_token_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.sender_token_address)
  return _internal_mutable_sender_token_address();
}
inline const std::string& TokenTransfer::_internal_sender_token_address() const {
  return sender_token_address_.Get();
}
inline void TokenTransfer::_internal_set_sender_token_address(const std::string& value) {
  
  sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenTransfer::set_sender_token_address(std::string&& value) {
  
  sender_token_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.TokenTransfer.sender_token_address)
}
inline void TokenTransfer::set_sender_token_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.TokenTransfer.sender_token_address)
}
inline void TokenTransfer::set_sender_token_address(const char* value,
    size_t size) {
  
  sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.TokenTransfer.sender_token_address)
}
inline std::string* TokenTransfer::_internal_mutable_sender_token_address() {
  
  return sender_token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenTransfer::release_sender_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.TokenTransfer.sender_token_address)
  return sender_token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenTransfer::set_allocated_sender_token_address(std::string* sender_token_address) {
  if (sender_token_address != nullptr) {
    
  } else {
    
  }
  sender_token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_token_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.TokenTransfer.sender_token_address)
}

// string recipient_token_address = 3;
inline void TokenTransfer::clear_recipient_token_address() {
  recipient_token_address_.ClearToEmpty();
}
inline const std::string& TokenTransfer::recipient_token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.recipient_token_address)
  return _internal_recipient_token_address();
}
inline void TokenTransfer::set_recipient_token_address(const std::string& value) {
  _internal_set_recipient_token_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.recipient_token_address)
}
inline std::string* TokenTransfer::mutable_recipient_token_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.recipient_token_address)
  return _internal_mutable_recipient_token_address();
}
inline const std::string& TokenTransfer::_internal_recipient_token_address() const {
  return recipient_token_address_.Get();
}
inline void TokenTransfer::_internal_set_recipient_token_address(const std::string& value) {
  
  recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenTransfer::set_recipient_token_address(std::string&& value) {
  
  recipient_token_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.TokenTransfer.recipient_token_address)
}
inline void TokenTransfer::set_recipient_token_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.TokenTransfer.recipient_token_address)
}
inline void TokenTransfer::set_recipient_token_address(const char* value,
    size_t size) {
  
  recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.TokenTransfer.recipient_token_address)
}
inline std::string* TokenTransfer::_internal_mutable_recipient_token_address() {
  
  return recipient_token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenTransfer::release_recipient_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.TokenTransfer.recipient_token_address)
  return recipient_token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenTransfer::set_allocated_recipient_token_address(std::string* recipient_token_address) {
  if (recipient_token_address != nullptr) {
    
  } else {
    
  }
  recipient_token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_token_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.TokenTransfer.recipient_token_address)
}

// uint64 amount = 4;
inline void TokenTransfer::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TokenTransfer::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TokenTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.amount)
  return _internal_amount();
}
inline void TokenTransfer::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void TokenTransfer::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.amount)
}

// uint32 decimals = 5;
inline void TokenTransfer::clear_decimals() {
  decimals_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TokenTransfer::_internal_decimals() const {
  return decimals_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TokenTransfer::decimals() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.decimals)
  return _internal_decimals();
}
inline void TokenTransfer::_internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  decimals_ = value;
}
inline void TokenTransfer::set_decimals(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.decimals)
}

// string memo = 6;
inline void TokenTransfer::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& TokenTransfer::memo() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.memo)
  return _internal_memo();
}
inline void TokenTransfer::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.memo)
}
inline std::string* TokenTransfer::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.memo)
  return _internal_mutable_memo();
}
inline const std::string& TokenTransfer::_internal_memo() const {
  return memo_.Get();
}
inline void TokenTransfer::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenTransfer::set_memo(std::string&& value) {
  
  memo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.TokenTransfer.memo)
}
inline void TokenTransfer::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.TokenTransfer.memo)
}
inline void TokenTransfer::set_memo(const char* value,
    size_t size) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.TokenTransfer.memo)
}
inline std::string* TokenTransfer::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenTransfer::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.TokenTransfer.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenTransfer::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.TokenTransfer.memo)
}

// repeated string references = 7;
inline int TokenTransfer::_internal_references_size() const {
  return references_.size();
}
inline int TokenTransfer::references_size() const {
  return _internal_references_size();
}
inline void TokenTransfer::clear_references() {
  references_.Clear();
}
inline std::string* TokenTransfer::add_references() {
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.TokenTransfer.references)
  return _internal_add_references();
}
inline const std::string& TokenTransfer::_internal_references(int index) const {
  return references_.Get(index);
}
inline const std::string& TokenTransfer::references(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.references)
  return _internal_references(index);
}
inline std::string* TokenTransfer::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.references)
  return references_.Mutable(index);
}
inline void TokenTransfer::set_references(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.references)
  references_.Mutable(index)->assign(value);
}
inline void TokenTransfer::set_references(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.references)
  references_.Mutable(index)->assign(std::move(value));
}
inline void TokenTransfer::set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::set_references(int index, const char* value, size_t size) {
  references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.TokenTransfer.references)
}
inline std::string* TokenTransfer::_internal_add_references() {
  return references_.Add();
}
inline void TokenTransfer::add_references(const std::string& value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::add_references(std::string&& value) {
  references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::add_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::add_references(const char* value, size_t size) {
  references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.TokenTransfer.references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokenTransfer::references() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.TokenTransfer.references)
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokenTransfer::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.TokenTransfer.references)
  return &references_;
}

// string token = 8;
inline void TokenTransfer::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& TokenTransfer::token() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.token)
  return _internal_token();
}
inline void TokenTransfer::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.token)
}
inline std::string* TokenTransfer::mutable_token() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.token)
  return _internal_mutable_token();
}
inline const std::string& TokenTransfer::_internal_token() const {
  return token_.Get();
}
inline void TokenTransfer::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenTransfer::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.TokenTransfer.token)
}
inline void TokenTransfer::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.TokenTransfer.token)
}
inline void TokenTransfer::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.TokenTransfer.token)
}
inline std::string* TokenTransfer::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenTransfer::release_token() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.TokenTransfer.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenTransfer::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.TokenTransfer.token)
}

// -------------------------------------------------------------------

// CreateAndTransferToken

// string recipient_main_address = 1;
inline void CreateAndTransferToken::clear_recipient_main_address() {
  recipient_main_address_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::recipient_main_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
  return _internal_recipient_main_address();
}
inline void CreateAndTransferToken::set_recipient_main_address(const std::string& value) {
  _internal_set_recipient_main_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
}
inline std::string* CreateAndTransferToken::mutable_recipient_main_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
  return _internal_mutable_recipient_main_address();
}
inline const std::string& CreateAndTransferToken::_internal_recipient_main_address() const {
  return recipient_main_address_.Get();
}
inline void CreateAndTransferToken::_internal_set_recipient_main_address(const std::string& value) {
  
  recipient_main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAndTransferToken::set_recipient_main_address(std::string&& value) {
  
  recipient_main_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
}
inline void CreateAndTransferToken::set_recipient_main_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
}
inline void CreateAndTransferToken::set_recipient_main_address(const char* value,
    size_t size) {
  
  recipient_main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
}
inline std::string* CreateAndTransferToken::_internal_mutable_recipient_main_address() {
  
  return recipient_main_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAndTransferToken::release_recipient_main_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
  return recipient_main_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAndTransferToken::set_allocated_recipient_main_address(std::string* recipient_main_address) {
  if (recipient_main_address != nullptr) {
    
  } else {
    
  }
  recipient_main_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_main_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
}

// string token_mint_address = 2;
inline void CreateAndTransferToken::clear_token_mint_address() {
  token_mint_address_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::token_mint_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
  return _internal_token_mint_address();
}
inline void CreateAndTransferToken::set_token_mint_address(const std::string& value) {
  _internal_set_token_mint_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
}
inline std::string* CreateAndTransferToken::mutable_token_mint_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
  return _internal_mutable_token_mint_address();
}
inline const std::string& CreateAndTransferToken::_internal_token_mint_address() const {
  return token_mint_address_.Get();
}
inline void CreateAndTransferToken::_internal_set_token_mint_address(const std::string& value) {
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAndTransferToken::set_token_mint_address(std::string&& value) {
  
  token_mint_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
}
inline void CreateAndTransferToken::set_token_mint_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
}
inline void CreateAndTransferToken::set_token_mint_address(const char* value,
    size_t size) {
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
}
inline std::string* CreateAndTransferToken::_internal_mutable_token_mint_address() {
  
  return token_mint_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAndTransferToken::release_token_mint_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
  return token_mint_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAndTransferToken::set_allocated_token_mint_address(std::string* token_mint_address) {
  if (token_mint_address != nullptr) {
    
  } else {
    
  }
  token_mint_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_mint_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
}

// string recipient_token_address = 3;
inline void CreateAndTransferToken::clear_recipient_token_address() {
  recipient_token_address_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::recipient_token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
  return _internal_recipient_token_address();
}
inline void CreateAndTransferToken::set_recipient_token_address(const std::string& value) {
  _internal_set_recipient_token_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
}
inline std::string* CreateAndTransferToken::mutable_recipient_token_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
  return _internal_mutable_recipient_token_address();
}
inline const std::string& CreateAndTransferToken::_internal_recipient_token_address() const {
  return recipient_token_address_.Get();
}
inline void CreateAndTransferToken::_internal_set_recipient_token_address(const std::string& value) {
  
  recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAndTransferToken::set_recipient_token_address(std::string&& value) {
  
  recipient_token_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
}
inline void CreateAndTransferToken::set_recipient_token_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
}
inline void CreateAndTransferToken::set_recipient_token_address(const char* value,
    size_t size) {
  
  recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
}
inline std::string* CreateAndTransferToken::_internal_mutable_recipient_token_address() {
  
  return recipient_token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAndTransferToken::release_recipient_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
  return recipient_token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAndTransferToken::set_allocated_recipient_token_address(std::string* recipient_token_address) {
  if (recipient_token_address != nullptr) {
    
  } else {
    
  }
  recipient_token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_token_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
}

// string sender_token_address = 4;
inline void CreateAndTransferToken::clear_sender_token_address() {
  sender_token_address_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::sender_token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
  return _internal_sender_token_address();
}
inline void CreateAndTransferToken::set_sender_token_address(const std::string& value) {
  _internal_set_sender_token_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
}
inline std::string* CreateAndTransferToken::mutable_sender_token_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
  return _internal_mutable_sender_token_address();
}
inline const std::string& CreateAndTransferToken::_internal_sender_token_address() const {
  return sender_token_address_.Get();
}
inline void CreateAndTransferToken::_internal_set_sender_token_address(const std::string& value) {
  
  sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAndTransferToken::set_sender_token_address(std::string&& value) {
  
  sender_token_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
}
inline void CreateAndTransferToken::set_sender_token_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
}
inline void CreateAndTransferToken::set_sender_token_address(const char* value,
    size_t size) {
  
  sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
}
inline std::string* CreateAndTransferToken::_internal_mutable_sender_token_address() {
  
  return sender_token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAndTransferToken::release_sender_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
  return sender_token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAndTransferToken::set_allocated_sender_token_address(std::string* sender_token_address) {
  if (sender_token_address != nullptr) {
    
  } else {
    
  }
  sender_token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_token_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
}

// uint64 amount = 5;
inline void CreateAndTransferToken::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateAndTransferToken::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateAndTransferToken::amount() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.amount)
  return _internal_amount();
}
inline void CreateAndTransferToken::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void CreateAndTransferToken::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.amount)
}

// uint32 decimals = 6;
inline void CreateAndTransferToken::clear_decimals() {
  decimals_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateAndTransferToken::_internal_decimals() const {
  return decimals_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateAndTransferToken::decimals() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.decimals)
  return _internal_decimals();
}
inline void CreateAndTransferToken::_internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  decimals_ = value;
}
inline void CreateAndTransferToken::set_decimals(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.decimals)
}

// string memo = 7;
inline void CreateAndTransferToken::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::memo() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.memo)
  return _internal_memo();
}
inline void CreateAndTransferToken::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.memo)
}
inline std::string* CreateAndTransferToken::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.memo)
  return _internal_mutable_memo();
}
inline const std::string& CreateAndTransferToken::_internal_memo() const {
  return memo_.Get();
}
inline void CreateAndTransferToken::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAndTransferToken::set_memo(std::string&& value) {
  
  memo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateAndTransferToken.memo)
}
inline void CreateAndTransferToken::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateAndTransferToken.memo)
}
inline void CreateAndTransferToken::set_memo(const char* value,
    size_t size) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateAndTransferToken.memo)
}
inline std::string* CreateAndTransferToken::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAndTransferToken::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAndTransferToken::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.memo)
}

// repeated string references = 8;
inline int CreateAndTransferToken::_internal_references_size() const {
  return references_.size();
}
inline int CreateAndTransferToken::references_size() const {
  return _internal_references_size();
}
inline void CreateAndTransferToken::clear_references() {
  references_.Clear();
}
inline std::string* CreateAndTransferToken::add_references() {
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.CreateAndTransferToken.references)
  return _internal_add_references();
}
inline const std::string& CreateAndTransferToken::_internal_references(int index) const {
  return references_.Get(index);
}
inline const std::string& CreateAndTransferToken::references(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.references)
  return _internal_references(index);
}
inline std::string* CreateAndTransferToken::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.references)
  return references_.Mutable(index);
}
inline void CreateAndTransferToken::set_references(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.references)
  references_.Mutable(index)->assign(value);
}
inline void CreateAndTransferToken::set_references(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.references)
  references_.Mutable(index)->assign(std::move(value));
}
inline void CreateAndTransferToken::set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::set_references(int index, const char* value, size_t size) {
  references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline std::string* CreateAndTransferToken::_internal_add_references() {
  return references_.Add();
}
inline void CreateAndTransferToken::add_references(const std::string& value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::add_references(std::string&& value) {
  references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::add_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::add_references(const char* value, size_t size) {
  references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateAndTransferToken::references() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.CreateAndTransferToken.references)
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateAndTransferToken::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.CreateAndTransferToken.references)
  return &references_;
}

// string token = 9;
inline void CreateAndTransferToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::token() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.token)
  return _internal_token();
}
inline void CreateAndTransferToken::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.token)
}
inline std::string* CreateAndTransferToken::mutable_token() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.token)
  return _internal_mutable_token();
}
inline const std::string& CreateAndTransferToken::_internal_token() const {
  return token_.Get();
}
inline void CreateAndTransferToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAndTransferToken::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CreateAndTransferToken.token)
}
inline void CreateAndTransferToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateAndTransferToken.token)
}
inline void CreateAndTransferToken::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateAndTransferToken.token)
}
inline std::string* CreateAndTransferToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAndTransferToken::release_token() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAndTransferToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.token)
}

// -------------------------------------------------------------------

// AccountKey

// string pubkey = 1;
inline void AccountKey::clear_pubkey() {
  pubkey_.ClearToEmpty();
}
inline const std::string& AccountKey::pubkey() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.AccountKey.pubkey)
  return _internal_pubkey();
}
inline void AccountKey::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.AccountKey.pubkey)
}
inline std::string* AccountKey::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.AccountKey.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& AccountKey::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void AccountKey::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountKey::set_pubkey(std::string&& value) {
  
  pubkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.AccountKey.pubkey)
}
inline void AccountKey::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.AccountKey.pubkey)
}
inline void AccountKey::set_pubkey(const char* value,
    size_t size) {
  
  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.AccountKey.pubkey)
}
inline std::string* AccountKey::_internal_mutable_pubkey() {
  
  return pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountKey::release_pubkey() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.AccountKey.pubkey)
  return pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountKey::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.AccountKey.pubkey)
}

// bool is_signer = 2;
inline void AccountKey::clear_is_signer() {
  is_signer_ = false;
}
inline bool AccountKey::_internal_is_signer() const {
  return is_signer_;
}
inline bool AccountKey::is_signer() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.AccountKey.is_signer)
  return _internal_is_signer();
}
inline void AccountKey::_internal_set_is_signer(bool value) {
  
  is_signer_ = value;
}
inline void AccountKey::set_is_signer(bool value) {
  _internal_set_is_signer(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.AccountKey.is_signer)
}

// bool is_writable = 3;
inline void AccountKey::clear_is_writable() {
  is_writable_ = false;
}
inline bool AccountKey::_internal_is_writable() const {
  return is_writable_;
}
inline bool AccountKey::is_writable() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.AccountKey.is_writable)
  return _internal_is_writable();
}
inline void AccountKey::_internal_set_is_writable(bool value) {
  
  is_writable_ = value;
}
inline void AccountKey::set_is_writable(bool value) {
  _internal_set_is_writable(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.AccountKey.is_writable)
}

// -------------------------------------------------------------------

// Instruction

// repeated .TW.Solana.Proto.AccountKey keys = 1;
inline int Instruction::_internal_keys_size() const {
  return keys_.size();
}
inline int Instruction::keys_size() const {
  return _internal_keys_size();
}
inline void Instruction::clear_keys() {
  keys_.Clear();
}
inline ::TW::Solana::Proto::AccountKey* Instruction::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.Instruction.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AccountKey >*
Instruction::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.Instruction.keys)
  return &keys_;
}
inline const ::TW::Solana::Proto::AccountKey& Instruction::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::TW::Solana::Proto::AccountKey& Instruction::keys(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Instruction.keys)
  return _internal_keys(index);
}
inline ::TW::Solana::Proto::AccountKey* Instruction::_internal_add_keys() {
  return keys_.Add();
}
inline ::TW::Solana::Proto::AccountKey* Instruction::add_keys() {
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.Instruction.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AccountKey >&
Instruction::keys() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.Instruction.keys)
  return keys_;
}

// string program_id = 2;
inline void Instruction::clear_program_id() {
  program_id_.ClearToEmpty();
}
inline const std::string& Instruction::program_id() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Instruction.program_id)
  return _internal_program_id();
}
inline void Instruction::set_program_id(const std::string& value) {
  _internal_set_program_id(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Instruction.program_id)
}
inline std::string* Instruction::mutable_program_id() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.Instruction.program_id)
  return _internal_mutable_program_id();
}
inline const std::string& Instruction::_internal_program_id() const {
  return program_id_.Get();
}
inline void Instruction::_internal_set_program_id(const std::string& value) {
  
  program_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Instruction::set_program_id(std::string&& value) {
  
  program_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.Instruction.program_id)
}
inline void Instruction::set_program_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  program_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.Instruction.program_id)
}
inline void Instruction::set_program_id(const char* value,
    size_t size) {
  
  program_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.Instruction.program_id)
}
inline std::string* Instruction::_internal_mutable_program_id() {
  
  return program_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Instruction::release_program_id() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.Instruction.program_id)
  return program_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Instruction::set_allocated_program_id(std::string* program_id) {
  if (program_id != nullptr) {
    
  } else {
    
  }
  program_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.Instruction.program_id)
}

// bytes data = 3;
inline void Instruction::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Instruction::data() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Instruction.data)
  return _internal_data();
}
inline void Instruction::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Instruction.data)
}
inline std::string* Instruction::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.Instruction.data)
  return _internal_mutable_data();
}
inline const std::string& Instruction::_internal_data() const {
  return data_.Get();
}
inline void Instruction::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Instruction::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.Instruction.data)
}
inline void Instruction::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.Instruction.data)
}
inline void Instruction::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.Instruction.data)
}
inline std::string* Instruction::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Instruction::release_data() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.Instruction.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Instruction::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.Instruction.data)
}

// -------------------------------------------------------------------

// MessageHeader

// uint32 num_required_signatures = 1;
inline void MessageHeader::clear_num_required_signatures() {
  num_required_signatures_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::_internal_num_required_signatures() const {
  return num_required_signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::num_required_signatures() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.MessageHeader.num_required_signatures)
  return _internal_num_required_signatures();
}
inline void MessageHeader::_internal_set_num_required_signatures(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_required_signatures_ = value;
}
inline void MessageHeader::set_num_required_signatures(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_required_signatures(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.MessageHeader.num_required_signatures)
}

// uint32 num_readonly_signed_accounts = 2;
inline void MessageHeader::clear_num_readonly_signed_accounts() {
  num_readonly_signed_accounts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::_internal_num_readonly_signed_accounts() const {
  return num_readonly_signed_accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::num_readonly_signed_accounts() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.MessageHeader.num_readonly_signed_accounts)
  return _internal_num_readonly_signed_accounts();
}
inline void MessageHeader::_internal_set_num_readonly_signed_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_readonly_signed_accounts_ = value;
}
inline void MessageHeader::set_num_readonly_signed_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_readonly_signed_accounts(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.MessageHeader.num_readonly_signed_accounts)
}

// uint32 num_readonly_unsigned_accounts = 3;
inline void MessageHeader::clear_num_readonly_unsigned_accounts() {
  num_readonly_unsigned_accounts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::_internal_num_readonly_unsigned_accounts() const {
  return num_readonly_unsigned_accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::num_readonly_unsigned_accounts() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.MessageHeader.num_readonly_unsigned_accounts)
  return _internal_num_readonly_unsigned_accounts();
}
inline void MessageHeader::_internal_set_num_readonly_unsigned_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_readonly_unsigned_accounts_ = value;
}
inline void MessageHeader::set_num_readonly_unsigned_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_readonly_unsigned_accounts(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.MessageHeader.num_readonly_unsigned_accounts)
}

// -------------------------------------------------------------------

// CompiledInstruction

// uint32 program_id_index = 1;
inline void CompiledInstruction::clear_program_id_index() {
  program_id_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompiledInstruction::_internal_program_id_index() const {
  return program_id_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompiledInstruction::program_id_index() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CompiledInstruction.program_id_index)
  return _internal_program_id_index();
}
inline void CompiledInstruction::_internal_set_program_id_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  program_id_index_ = value;
}
inline void CompiledInstruction::set_program_id_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program_id_index(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CompiledInstruction.program_id_index)
}

// repeated uint32 account_key_indexes = 2;
inline int CompiledInstruction::_internal_account_key_indexes_size() const {
  return account_key_indexes_.size();
}
inline int CompiledInstruction::account_key_indexes_size() const {
  return _internal_account_key_indexes_size();
}
inline void CompiledInstruction::clear_account_key_indexes() {
  account_key_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompiledInstruction::_internal_account_key_indexes(int index) const {
  return account_key_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompiledInstruction::account_key_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CompiledInstruction.account_key_indexes)
  return _internal_account_key_indexes(index);
}
inline void CompiledInstruction::set_account_key_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_key_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CompiledInstruction.account_key_indexes)
}
inline void CompiledInstruction::_internal_add_account_key_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_key_indexes_.Add(value);
}
inline void CompiledInstruction::add_account_key_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_account_key_indexes(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.CompiledInstruction.account_key_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CompiledInstruction::_internal_account_key_indexes() const {
  return account_key_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CompiledInstruction::account_key_indexes() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.CompiledInstruction.account_key_indexes)
  return _internal_account_key_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CompiledInstruction::_internal_mutable_account_key_indexes() {
  return &account_key_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CompiledInstruction::mutable_account_key_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.CompiledInstruction.account_key_indexes)
  return _internal_mutable_account_key_indexes();
}

// bytes data = 3;
inline void CompiledInstruction::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& CompiledInstruction::data() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CompiledInstruction.data)
  return _internal_data();
}
inline void CompiledInstruction::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CompiledInstruction.data)
}
inline std::string* CompiledInstruction::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CompiledInstruction.data)
  return _internal_mutable_data();
}
inline const std::string& CompiledInstruction::_internal_data() const {
  return data_.Get();
}
inline void CompiledInstruction::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompiledInstruction::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.CompiledInstruction.data)
}
inline void CompiledInstruction::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CompiledInstruction.data)
}
inline void CompiledInstruction::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CompiledInstruction.data)
}
inline std::string* CompiledInstruction::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompiledInstruction::release_data() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CompiledInstruction.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompiledInstruction::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CompiledInstruction.data)
}

// -------------------------------------------------------------------

// AddressTableLookups

// string account_key = 1;
inline void AddressTableLookups::clear_account_key() {
  account_key_.ClearToEmpty();
}
inline const std::string& AddressTableLookups::account_key() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.AddressTableLookups.account_key)
  return _internal_account_key();
}
inline void AddressTableLookups::set_account_key(const std::string& value) {
  _internal_set_account_key(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.AddressTableLookups.account_key)
}
inline std::string* AddressTableLookups::mutable_account_key() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.AddressTableLookups.account_key)
  return _internal_mutable_account_key();
}
inline const std::string& AddressTableLookups::_internal_account_key() const {
  return account_key_.Get();
}
inline void AddressTableLookups::_internal_set_account_key(const std::string& value) {
  
  account_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddressTableLookups::set_account_key(std::string&& value) {
  
  account_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.AddressTableLookups.account_key)
}
inline void AddressTableLookups::set_account_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.AddressTableLookups.account_key)
}
inline void AddressTableLookups::set_account_key(const char* value,
    size_t size) {
  
  account_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.AddressTableLookups.account_key)
}
inline std::string* AddressTableLookups::_internal_mutable_account_key() {
  
  return account_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddressTableLookups::release_account_key() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.AddressTableLookups.account_key)
  return account_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddressTableLookups::set_allocated_account_key(std::string* account_key) {
  if (account_key != nullptr) {
    
  } else {
    
  }
  account_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.AddressTableLookups.account_key)
}

// repeated uint32 writable_indexes = 2;
inline int AddressTableLookups::_internal_writable_indexes_size() const {
  return writable_indexes_.size();
}
inline int AddressTableLookups::writable_indexes_size() const {
  return _internal_writable_indexes_size();
}
inline void AddressTableLookups::clear_writable_indexes() {
  writable_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddressTableLookups::_internal_writable_indexes(int index) const {
  return writable_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddressTableLookups::writable_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.AddressTableLookups.writable_indexes)
  return _internal_writable_indexes(index);
}
inline void AddressTableLookups::set_writable_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  writable_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.AddressTableLookups.writable_indexes)
}
inline void AddressTableLookups::_internal_add_writable_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  writable_indexes_.Add(value);
}
inline void AddressTableLookups::add_writable_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_writable_indexes(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.AddressTableLookups.writable_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AddressTableLookups::_internal_writable_indexes() const {
  return writable_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AddressTableLookups::writable_indexes() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.AddressTableLookups.writable_indexes)
  return _internal_writable_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AddressTableLookups::_internal_mutable_writable_indexes() {
  return &writable_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AddressTableLookups::mutable_writable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.AddressTableLookups.writable_indexes)
  return _internal_mutable_writable_indexes();
}

// repeated uint32 readonly_indexes = 3;
inline int AddressTableLookups::_internal_readonly_indexes_size() const {
  return readonly_indexes_.size();
}
inline int AddressTableLookups::readonly_indexes_size() const {
  return _internal_readonly_indexes_size();
}
inline void AddressTableLookups::clear_readonly_indexes() {
  readonly_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddressTableLookups::_internal_readonly_indexes(int index) const {
  return readonly_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddressTableLookups::readonly_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.AddressTableLookups.readonly_indexes)
  return _internal_readonly_indexes(index);
}
inline void AddressTableLookups::set_readonly_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  readonly_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.AddressTableLookups.readonly_indexes)
}
inline void AddressTableLookups::_internal_add_readonly_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  readonly_indexes_.Add(value);
}
inline void AddressTableLookups::add_readonly_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_readonly_indexes(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.AddressTableLookups.readonly_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AddressTableLookups::_internal_readonly_indexes() const {
  return readonly_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AddressTableLookups::readonly_indexes() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.AddressTableLookups.readonly_indexes)
  return _internal_readonly_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AddressTableLookups::_internal_mutable_readonly_indexes() {
  return &readonly_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AddressTableLookups::mutable_readonly_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.AddressTableLookups.readonly_indexes)
  return _internal_mutable_readonly_indexes();
}

// -------------------------------------------------------------------

// SigningInput

// bytes private_key = 1;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.private_key)
}

// string recent_blockhash = 2;
inline void SigningInput::clear_recent_blockhash() {
  recent_blockhash_.ClearToEmpty();
}
inline const std::string& SigningInput::recent_blockhash() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.recent_blockhash)
  return _internal_recent_blockhash();
}
inline void SigningInput::set_recent_blockhash(const std::string& value) {
  _internal_set_recent_blockhash(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.recent_blockhash)
}
inline std::string* SigningInput::mutable_recent_blockhash() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.recent_blockhash)
  return _internal_mutable_recent_blockhash();
}
inline const std::string& SigningInput::_internal_recent_blockhash() const {
  return recent_blockhash_.Get();
}
inline void SigningInput::_internal_set_recent_blockhash(const std::string& value) {
  
  recent_blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_recent_blockhash(std::string&& value) {
  
  recent_blockhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.SigningInput.recent_blockhash)
}
inline void SigningInput::set_recent_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recent_blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.SigningInput.recent_blockhash)
}
inline void SigningInput::set_recent_blockhash(const char* value,
    size_t size) {
  
  recent_blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.SigningInput.recent_blockhash)
}
inline std::string* SigningInput::_internal_mutable_recent_blockhash() {
  
  return recent_blockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_recent_blockhash() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.recent_blockhash)
  return recent_blockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_recent_blockhash(std::string* recent_blockhash) {
  if (recent_blockhash != nullptr) {
    
  } else {
    
  }
  recent_blockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recent_blockhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.recent_blockhash)
}

// .TW.Solana.Proto.Transfer transfer_transaction = 3;
inline bool SigningInput::_internal_has_transfer_transaction() const {
  return transaction_type_case() == kTransferTransaction;
}
inline bool SigningInput::has_transfer_transaction() const {
  return _internal_has_transfer_transaction();
}
inline void SigningInput::set_has_transfer_transaction() {
  _oneof_case_[0] = kTransferTransaction;
}
inline void SigningInput::clear_transfer_transaction() {
  if (_internal_has_transfer_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_type_.transfer_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::Transfer* SigningInput::release_transfer_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.transfer_transaction)
  if (_internal_has_transfer_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::Transfer* temp = transaction_type_.transfer_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.transfer_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::Transfer& SigningInput::_internal_transfer_transaction() const {
  return _internal_has_transfer_transaction()
      ? *transaction_type_.transfer_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::Transfer&>(::TW::Solana::Proto::_Transfer_default_instance_);
}
inline const ::TW::Solana::Proto::Transfer& SigningInput::transfer_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.transfer_transaction)
  return _internal_transfer_transaction();
}
inline ::TW::Solana::Proto::Transfer* SigningInput::unsafe_arena_release_transfer_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.transfer_transaction)
  if (_internal_has_transfer_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::Transfer* temp = transaction_type_.transfer_transaction_;
    transaction_type_.transfer_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transfer_transaction(::TW::Solana::Proto::Transfer* transfer_transaction) {
  clear_transaction_type();
  if (transfer_transaction) {
    set_has_transfer_transaction();
    transaction_type_.transfer_transaction_ = transfer_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.transfer_transaction)
}
inline ::TW::Solana::Proto::Transfer* SigningInput::_internal_mutable_transfer_transaction() {
  if (!_internal_has_transfer_transaction()) {
    clear_transaction_type();
    set_has_transfer_transaction();
    transaction_type_.transfer_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::Transfer >(GetArena());
  }
  return transaction_type_.transfer_transaction_;
}
inline ::TW::Solana::Proto::Transfer* SigningInput::mutable_transfer_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.transfer_transaction)
  return _internal_mutable_transfer_transaction();
}

// .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 4;
inline bool SigningInput::_internal_has_delegate_stake_transaction() const {
  return transaction_type_case() == kDelegateStakeTransaction;
}
inline bool SigningInput::has_delegate_stake_transaction() const {
  return _internal_has_delegate_stake_transaction();
}
inline void SigningInput::set_has_delegate_stake_transaction() {
  _oneof_case_[0] = kDelegateStakeTransaction;
}
inline void SigningInput::clear_delegate_stake_transaction() {
  if (_internal_has_delegate_stake_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_type_.delegate_stake_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::DelegateStake* SigningInput::release_delegate_stake_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
  if (_internal_has_delegate_stake_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::DelegateStake* temp = transaction_type_.delegate_stake_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.delegate_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::DelegateStake& SigningInput::_internal_delegate_stake_transaction() const {
  return _internal_has_delegate_stake_transaction()
      ? *transaction_type_.delegate_stake_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::DelegateStake&>(::TW::Solana::Proto::_DelegateStake_default_instance_);
}
inline const ::TW::Solana::Proto::DelegateStake& SigningInput::delegate_stake_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
  return _internal_delegate_stake_transaction();
}
inline ::TW::Solana::Proto::DelegateStake* SigningInput::unsafe_arena_release_delegate_stake_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
  if (_internal_has_delegate_stake_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::DelegateStake* temp = transaction_type_.delegate_stake_transaction_;
    transaction_type_.delegate_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_delegate_stake_transaction(::TW::Solana::Proto::DelegateStake* delegate_stake_transaction) {
  clear_transaction_type();
  if (delegate_stake_transaction) {
    set_has_delegate_stake_transaction();
    transaction_type_.delegate_stake_transaction_ = delegate_stake_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
}
inline ::TW::Solana::Proto::DelegateStake* SigningInput::_internal_mutable_delegate_stake_transaction() {
  if (!_internal_has_delegate_stake_transaction()) {
    clear_transaction_type();
    set_has_delegate_stake_transaction();
    transaction_type_.delegate_stake_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::DelegateStake >(GetArena());
  }
  return transaction_type_.delegate_stake_transaction_;
}
inline ::TW::Solana::Proto::DelegateStake* SigningInput::mutable_delegate_stake_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
  return _internal_mutable_delegate_stake_transaction();
}

// .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 5;
inline bool SigningInput::_internal_has_deactivate_stake_transaction() const {
  return transaction_type_case() == kDeactivateStakeTransaction;
}
inline bool SigningInput::has_deactivate_stake_transaction() const {
  return _internal_has_deactivate_stake_transaction();
}
inline void SigningInput::set_has_deactivate_stake_transaction() {
  _oneof_case_[0] = kDeactivateStakeTransaction;
}
inline void SigningInput::clear_deactivate_stake_transaction() {
  if (_internal_has_deactivate_stake_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_type_.deactivate_stake_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::DeactivateStake* SigningInput::release_deactivate_stake_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
  if (_internal_has_deactivate_stake_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::DeactivateStake* temp = transaction_type_.deactivate_stake_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.deactivate_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::DeactivateStake& SigningInput::_internal_deactivate_stake_transaction() const {
  return _internal_has_deactivate_stake_transaction()
      ? *transaction_type_.deactivate_stake_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::DeactivateStake&>(::TW::Solana::Proto::_DeactivateStake_default_instance_);
}
inline const ::TW::Solana::Proto::DeactivateStake& SigningInput::deactivate_stake_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
  return _internal_deactivate_stake_transaction();
}
inline ::TW::Solana::Proto::DeactivateStake* SigningInput::unsafe_arena_release_deactivate_stake_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
  if (_internal_has_deactivate_stake_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::DeactivateStake* temp = transaction_type_.deactivate_stake_transaction_;
    transaction_type_.deactivate_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_deactivate_stake_transaction(::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction) {
  clear_transaction_type();
  if (deactivate_stake_transaction) {
    set_has_deactivate_stake_transaction();
    transaction_type_.deactivate_stake_transaction_ = deactivate_stake_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
}
inline ::TW::Solana::Proto::DeactivateStake* SigningInput::_internal_mutable_deactivate_stake_transaction() {
  if (!_internal_has_deactivate_stake_transaction()) {
    clear_transaction_type();
    set_has_deactivate_stake_transaction();
    transaction_type_.deactivate_stake_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::DeactivateStake >(GetArena());
  }
  return transaction_type_.deactivate_stake_transaction_;
}
inline ::TW::Solana::Proto::DeactivateStake* SigningInput::mutable_deactivate_stake_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
  return _internal_mutable_deactivate_stake_transaction();
}

// .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 6;
inline bool SigningInput::_internal_has_deactivate_all_stake_transaction() const {
  return transaction_type_case() == kDeactivateAllStakeTransaction;
}
inline bool SigningInput::has_deactivate_all_stake_transaction() const {
  return _internal_has_deactivate_all_stake_transaction();
}
inline void SigningInput::set_has_deactivate_all_stake_transaction() {
  _oneof_case_[0] = kDeactivateAllStakeTransaction;
}
inline void SigningInput::clear_deactivate_all_stake_transaction() {
  if (_internal_has_deactivate_all_stake_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_type_.deactivate_all_stake_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::DeactivateAllStake* SigningInput::release_deactivate_all_stake_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
  if (_internal_has_deactivate_all_stake_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::DeactivateAllStake* temp = transaction_type_.deactivate_all_stake_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.deactivate_all_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::DeactivateAllStake& SigningInput::_internal_deactivate_all_stake_transaction() const {
  return _internal_has_deactivate_all_stake_transaction()
      ? *transaction_type_.deactivate_all_stake_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::DeactivateAllStake&>(::TW::Solana::Proto::_DeactivateAllStake_default_instance_);
}
inline const ::TW::Solana::Proto::DeactivateAllStake& SigningInput::deactivate_all_stake_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
  return _internal_deactivate_all_stake_transaction();
}
inline ::TW::Solana::Proto::DeactivateAllStake* SigningInput::unsafe_arena_release_deactivate_all_stake_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
  if (_internal_has_deactivate_all_stake_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::DeactivateAllStake* temp = transaction_type_.deactivate_all_stake_transaction_;
    transaction_type_.deactivate_all_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_deactivate_all_stake_transaction(::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction) {
  clear_transaction_type();
  if (deactivate_all_stake_transaction) {
    set_has_deactivate_all_stake_transaction();
    transaction_type_.deactivate_all_stake_transaction_ = deactivate_all_stake_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
}
inline ::TW::Solana::Proto::DeactivateAllStake* SigningInput::_internal_mutable_deactivate_all_stake_transaction() {
  if (!_internal_has_deactivate_all_stake_transaction()) {
    clear_transaction_type();
    set_has_deactivate_all_stake_transaction();
    transaction_type_.deactivate_all_stake_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::DeactivateAllStake >(GetArena());
  }
  return transaction_type_.deactivate_all_stake_transaction_;
}
inline ::TW::Solana::Proto::DeactivateAllStake* SigningInput::mutable_deactivate_all_stake_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
  return _internal_mutable_deactivate_all_stake_transaction();
}

// .TW.Solana.Proto.WithdrawStake withdraw_transaction = 7;
inline bool SigningInput::_internal_has_withdraw_transaction() const {
  return transaction_type_case() == kWithdrawTransaction;
}
inline bool SigningInput::has_withdraw_transaction() const {
  return _internal_has_withdraw_transaction();
}
inline void SigningInput::set_has_withdraw_transaction() {
  _oneof_case_[0] = kWithdrawTransaction;
}
inline void SigningInput::clear_withdraw_transaction() {
  if (_internal_has_withdraw_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_type_.withdraw_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::WithdrawStake* SigningInput::release_withdraw_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.withdraw_transaction)
  if (_internal_has_withdraw_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::WithdrawStake* temp = transaction_type_.withdraw_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.withdraw_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::WithdrawStake& SigningInput::_internal_withdraw_transaction() const {
  return _internal_has_withdraw_transaction()
      ? *transaction_type_.withdraw_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::WithdrawStake&>(::TW::Solana::Proto::_WithdrawStake_default_instance_);
}
inline const ::TW::Solana::Proto::WithdrawStake& SigningInput::withdraw_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.withdraw_transaction)
  return _internal_withdraw_transaction();
}
inline ::TW::Solana::Proto::WithdrawStake* SigningInput::unsafe_arena_release_withdraw_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.withdraw_transaction)
  if (_internal_has_withdraw_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::WithdrawStake* temp = transaction_type_.withdraw_transaction_;
    transaction_type_.withdraw_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_withdraw_transaction(::TW::Solana::Proto::WithdrawStake* withdraw_transaction) {
  clear_transaction_type();
  if (withdraw_transaction) {
    set_has_withdraw_transaction();
    transaction_type_.withdraw_transaction_ = withdraw_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.withdraw_transaction)
}
inline ::TW::Solana::Proto::WithdrawStake* SigningInput::_internal_mutable_withdraw_transaction() {
  if (!_internal_has_withdraw_transaction()) {
    clear_transaction_type();
    set_has_withdraw_transaction();
    transaction_type_.withdraw_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::WithdrawStake >(GetArena());
  }
  return transaction_type_.withdraw_transaction_;
}
inline ::TW::Solana::Proto::WithdrawStake* SigningInput::mutable_withdraw_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.withdraw_transaction)
  return _internal_mutable_withdraw_transaction();
}

// .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 8;
inline bool SigningInput::_internal_has_withdraw_all_transaction() const {
  return transaction_type_case() == kWithdrawAllTransaction;
}
inline bool SigningInput::has_withdraw_all_transaction() const {
  return _internal_has_withdraw_all_transaction();
}
inline void SigningInput::set_has_withdraw_all_transaction() {
  _oneof_case_[0] = kWithdrawAllTransaction;
}
inline void SigningInput::clear_withdraw_all_transaction() {
  if (_internal_has_withdraw_all_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_type_.withdraw_all_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::WithdrawAllStake* SigningInput::release_withdraw_all_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
  if (_internal_has_withdraw_all_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::WithdrawAllStake* temp = transaction_type_.withdraw_all_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.withdraw_all_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::WithdrawAllStake& SigningInput::_internal_withdraw_all_transaction() const {
  return _internal_has_withdraw_all_transaction()
      ? *transaction_type_.withdraw_all_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::WithdrawAllStake&>(::TW::Solana::Proto::_WithdrawAllStake_default_instance_);
}
inline const ::TW::Solana::Proto::WithdrawAllStake& SigningInput::withdraw_all_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
  return _internal_withdraw_all_transaction();
}
inline ::TW::Solana::Proto::WithdrawAllStake* SigningInput::unsafe_arena_release_withdraw_all_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
  if (_internal_has_withdraw_all_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::WithdrawAllStake* temp = transaction_type_.withdraw_all_transaction_;
    transaction_type_.withdraw_all_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_withdraw_all_transaction(::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction) {
  clear_transaction_type();
  if (withdraw_all_transaction) {
    set_has_withdraw_all_transaction();
    transaction_type_.withdraw_all_transaction_ = withdraw_all_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
}
inline ::TW::Solana::Proto::WithdrawAllStake* SigningInput::_internal_mutable_withdraw_all_transaction() {
  if (!_internal_has_withdraw_all_transaction()) {
    clear_transaction_type();
    set_has_withdraw_all_transaction();
    transaction_type_.withdraw_all_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::WithdrawAllStake >(GetArena());
  }
  return transaction_type_.withdraw_all_transaction_;
}
inline ::TW::Solana::Proto::WithdrawAllStake* SigningInput::mutable_withdraw_all_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
  return _internal_mutable_withdraw_all_transaction();
}

// .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 9;
inline bool SigningInput::_internal_has_create_token_account_transaction() const {
  return transaction_type_case() == kCreateTokenAccountTransaction;
}
inline bool SigningInput::has_create_token_account_transaction() const {
  return _internal_has_create_token_account_transaction();
}
inline void SigningInput::set_has_create_token_account_transaction() {
  _oneof_case_[0] = kCreateTokenAccountTransaction;
}
inline void SigningInput::clear_create_token_account_transaction() {
  if (_internal_has_create_token_account_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_type_.create_token_account_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::CreateTokenAccount* SigningInput::release_create_token_account_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.create_token_account_transaction)
  if (_internal_has_create_token_account_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::CreateTokenAccount* temp = transaction_type_.create_token_account_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.create_token_account_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::CreateTokenAccount& SigningInput::_internal_create_token_account_transaction() const {
  return _internal_has_create_token_account_transaction()
      ? *transaction_type_.create_token_account_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::CreateTokenAccount&>(::TW::Solana::Proto::_CreateTokenAccount_default_instance_);
}
inline const ::TW::Solana::Proto::CreateTokenAccount& SigningInput::create_token_account_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.create_token_account_transaction)
  return _internal_create_token_account_transaction();
}
inline ::TW::Solana::Proto::CreateTokenAccount* SigningInput::unsafe_arena_release_create_token_account_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.create_token_account_transaction)
  if (_internal_has_create_token_account_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::CreateTokenAccount* temp = transaction_type_.create_token_account_transaction_;
    transaction_type_.create_token_account_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_create_token_account_transaction(::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction) {
  clear_transaction_type();
  if (create_token_account_transaction) {
    set_has_create_token_account_transaction();
    transaction_type_.create_token_account_transaction_ = create_token_account_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.create_token_account_transaction)
}
inline ::TW::Solana::Proto::CreateTokenAccount* SigningInput::_internal_mutable_create_token_account_transaction() {
  if (!_internal_has_create_token_account_transaction()) {
    clear_transaction_type();
    set_has_create_token_account_transaction();
    transaction_type_.create_token_account_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::CreateTokenAccount >(GetArena());
  }
  return transaction_type_.create_token_account_transaction_;
}
inline ::TW::Solana::Proto::CreateTokenAccount* SigningInput::mutable_create_token_account_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.create_token_account_transaction)
  return _internal_mutable_create_token_account_transaction();
}

// .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 10;
inline bool SigningInput::_internal_has_token_transfer_transaction() const {
  return transaction_type_case() == kTokenTransferTransaction;
}
inline bool SigningInput::has_token_transfer_transaction() const {
  return _internal_has_token_transfer_transaction();
}
inline void SigningInput::set_has_token_transfer_transaction() {
  _oneof_case_[0] = kTokenTransferTransaction;
}
inline void SigningInput::clear_token_transfer_transaction() {
  if (_internal_has_token_transfer_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_type_.token_transfer_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::TokenTransfer* SigningInput::release_token_transfer_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.token_transfer_transaction)
  if (_internal_has_token_transfer_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::TokenTransfer* temp = transaction_type_.token_transfer_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.token_transfer_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::TokenTransfer& SigningInput::_internal_token_transfer_transaction() const {
  return _internal_has_token_transfer_transaction()
      ? *transaction_type_.token_transfer_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::TokenTransfer&>(::TW::Solana::Proto::_TokenTransfer_default_instance_);
}
inline const ::TW::Solana::Proto::TokenTransfer& SigningInput::token_transfer_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.token_transfer_transaction)
  return _internal_token_transfer_transaction();
}
inline ::TW::Solana::Proto::TokenTransfer* SigningInput::unsafe_arena_release_token_transfer_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.token_transfer_transaction)
  if (_internal_has_token_transfer_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::TokenTransfer* temp = transaction_type_.token_transfer_transaction_;
    transaction_type_.token_transfer_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_token_transfer_transaction(::TW::Solana::Proto::TokenTransfer* token_transfer_transaction) {
  clear_transaction_type();
  if (token_transfer_transaction) {
    set_has_token_transfer_transaction();
    transaction_type_.token_transfer_transaction_ = token_transfer_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.token_transfer_transaction)
}
inline ::TW::Solana::Proto::TokenTransfer* SigningInput::_internal_mutable_token_transfer_transaction() {
  if (!_internal_has_token_transfer_transaction()) {
    clear_transaction_type();
    set_has_token_transfer_transaction();
    transaction_type_.token_transfer_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::TokenTransfer >(GetArena());
  }
  return transaction_type_.token_transfer_transaction_;
}
inline ::TW::Solana::Proto::TokenTransfer* SigningInput::mutable_token_transfer_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.token_transfer_transaction)
  return _internal_mutable_token_transfer_transaction();
}

// .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 11;
inline bool SigningInput::_internal_has_create_and_transfer_token_transaction() const {
  return transaction_type_case() == kCreateAndTransferTokenTransaction;
}
inline bool SigningInput::has_create_and_transfer_token_transaction() const {
  return _internal_has_create_and_transfer_token_transaction();
}
inline void SigningInput::set_has_create_and_transfer_token_transaction() {
  _oneof_case_[0] = kCreateAndTransferTokenTransaction;
}
inline void SigningInput::clear_create_and_transfer_token_transaction() {
  if (_internal_has_create_and_transfer_token_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_type_.create_and_transfer_token_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::CreateAndTransferToken* SigningInput::release_create_and_transfer_token_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
  if (_internal_has_create_and_transfer_token_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::CreateAndTransferToken* temp = transaction_type_.create_and_transfer_token_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.create_and_transfer_token_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::CreateAndTransferToken& SigningInput::_internal_create_and_transfer_token_transaction() const {
  return _internal_has_create_and_transfer_token_transaction()
      ? *transaction_type_.create_and_transfer_token_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::CreateAndTransferToken&>(::TW::Solana::Proto::_CreateAndTransferToken_default_instance_);
}
inline const ::TW::Solana::Proto::CreateAndTransferToken& SigningInput::create_and_transfer_token_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
  return _internal_create_and_transfer_token_transaction();
}
inline ::TW::Solana::Proto::CreateAndTransferToken* SigningInput::unsafe_arena_release_create_and_transfer_token_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
  if (_internal_has_create_and_transfer_token_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::CreateAndTransferToken* temp = transaction_type_.create_and_transfer_token_transaction_;
    transaction_type_.create_and_transfer_token_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_create_and_transfer_token_transaction(::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction) {
  clear_transaction_type();
  if (create_and_transfer_token_transaction) {
    set_has_create_and_transfer_token_transaction();
    transaction_type_.create_and_transfer_token_transaction_ = create_and_transfer_token_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
}
inline ::TW::Solana::Proto::CreateAndTransferToken* SigningInput::_internal_mutable_create_and_transfer_token_transaction() {
  if (!_internal_has_create_and_transfer_token_transaction()) {
    clear_transaction_type();
    set_has_create_and_transfer_token_transaction();
    transaction_type_.create_and_transfer_token_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::CreateAndTransferToken >(GetArena());
  }
  return transaction_type_.create_and_transfer_token_transaction_;
}
inline ::TW::Solana::Proto::CreateAndTransferToken* SigningInput::mutable_create_and_transfer_token_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
  return _internal_mutable_create_and_transfer_token_transaction();
}

// string from_address = 12;
inline void SigningInput::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& SigningInput::from_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.from_address)
  return _internal_from_address();
}
inline void SigningInput::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.from_address)
}
inline std::string* SigningInput::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& SigningInput::_internal_from_address() const {
  return from_address_.Get();
}
inline void SigningInput::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_from_address(std::string&& value) {
  
  from_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.SigningInput.from_address)
}
inline void SigningInput::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.SigningInput.from_address)
}
inline void SigningInput::set_from_address(const char* value,
    size_t size) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.SigningInput.from_address)
}
inline std::string* SigningInput::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.from_address)
}

// string to_address = 13;
inline void SigningInput::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& SigningInput::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.to_address)
  return _internal_to_address();
}
inline void SigningInput::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.to_address)
}
inline std::string* SigningInput::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& SigningInput::_internal_to_address() const {
  return to_address_.Get();
}
inline void SigningInput::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.SigningInput.to_address)
}
inline void SigningInput::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.SigningInput.to_address)
}
inline void SigningInput::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.SigningInput.to_address)
}
inline std::string* SigningInput::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.to_address)
}

// .TW.Solana.Proto.MessageHeader header = 14;
inline bool SigningInput::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SigningInput::has_header() const {
  return _internal_has_header();
}
inline void SigningInput::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::TW::Solana::Proto::MessageHeader& SigningInput::_internal_header() const {
  const ::TW::Solana::Proto::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Solana::Proto::MessageHeader&>(
      ::TW::Solana::Proto::_MessageHeader_default_instance_);
}
inline const ::TW::Solana::Proto::MessageHeader& SigningInput::header() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.header)
  return _internal_header();
}
inline void SigningInput::unsafe_arena_set_allocated_header(
    ::TW::Solana::Proto::MessageHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.header)
}
inline ::TW::Solana::Proto::MessageHeader* SigningInput::release_header() {
  
  ::TW::Solana::Proto::MessageHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Solana::Proto::MessageHeader* SigningInput::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.header)
  
  ::TW::Solana::Proto::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::TW::Solana::Proto::MessageHeader* SigningInput::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Solana::Proto::MessageHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::TW::Solana::Proto::MessageHeader* SigningInput::mutable_header() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.header)
  return _internal_mutable_header();
}
inline void SigningInput::set_allocated_header(::TW::Solana::Proto::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.header)
}

// repeated string static_account_keys = 15;
inline int SigningInput::_internal_static_account_keys_size() const {
  return static_account_keys_.size();
}
inline int SigningInput::static_account_keys_size() const {
  return _internal_static_account_keys_size();
}
inline void SigningInput::clear_static_account_keys() {
  static_account_keys_.Clear();
}
inline std::string* SigningInput::add_static_account_keys() {
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.SigningInput.static_account_keys)
  return _internal_add_static_account_keys();
}
inline const std::string& SigningInput::_internal_static_account_keys(int index) const {
  return static_account_keys_.Get(index);
}
inline const std::string& SigningInput::static_account_keys(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.static_account_keys)
  return _internal_static_account_keys(index);
}
inline std::string* SigningInput::mutable_static_account_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.static_account_keys)
  return static_account_keys_.Mutable(index);
}
inline void SigningInput::set_static_account_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.static_account_keys)
  static_account_keys_.Mutable(index)->assign(value);
}
inline void SigningInput::set_static_account_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.static_account_keys)
  static_account_keys_.Mutable(index)->assign(std::move(value));
}
inline void SigningInput::set_static_account_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  static_account_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.SigningInput.static_account_keys)
}
inline void SigningInput::set_static_account_keys(int index, const char* value, size_t size) {
  static_account_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.SigningInput.static_account_keys)
}
inline std::string* SigningInput::_internal_add_static_account_keys() {
  return static_account_keys_.Add();
}
inline void SigningInput::add_static_account_keys(const std::string& value) {
  static_account_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.SigningInput.static_account_keys)
}
inline void SigningInput::add_static_account_keys(std::string&& value) {
  static_account_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.SigningInput.static_account_keys)
}
inline void SigningInput::add_static_account_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  static_account_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.SigningInput.static_account_keys)
}
inline void SigningInput::add_static_account_keys(const char* value, size_t size) {
  static_account_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.SigningInput.static_account_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SigningInput::static_account_keys() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.SigningInput.static_account_keys)
  return static_account_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SigningInput::mutable_static_account_keys() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.SigningInput.static_account_keys)
  return &static_account_keys_;
}

// repeated .TW.Solana.Proto.CompiledInstruction compiled_instructions = 16;
inline int SigningInput::_internal_compiled_instructions_size() const {
  return compiled_instructions_.size();
}
inline int SigningInput::compiled_instructions_size() const {
  return _internal_compiled_instructions_size();
}
inline void SigningInput::clear_compiled_instructions() {
  compiled_instructions_.Clear();
}
inline ::TW::Solana::Proto::CompiledInstruction* SigningInput::mutable_compiled_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.compiled_instructions)
  return compiled_instructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::CompiledInstruction >*
SigningInput::mutable_compiled_instructions() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.SigningInput.compiled_instructions)
  return &compiled_instructions_;
}
inline const ::TW::Solana::Proto::CompiledInstruction& SigningInput::_internal_compiled_instructions(int index) const {
  return compiled_instructions_.Get(index);
}
inline const ::TW::Solana::Proto::CompiledInstruction& SigningInput::compiled_instructions(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.compiled_instructions)
  return _internal_compiled_instructions(index);
}
inline ::TW::Solana::Proto::CompiledInstruction* SigningInput::_internal_add_compiled_instructions() {
  return compiled_instructions_.Add();
}
inline ::TW::Solana::Proto::CompiledInstruction* SigningInput::add_compiled_instructions() {
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.SigningInput.compiled_instructions)
  return _internal_add_compiled_instructions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::CompiledInstruction >&
SigningInput::compiled_instructions() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.SigningInput.compiled_instructions)
  return compiled_instructions_;
}

// repeated .TW.Solana.Proto.Instruction instructions = 17;
inline int SigningInput::_internal_instructions_size() const {
  return instructions_.size();
}
inline int SigningInput::instructions_size() const {
  return _internal_instructions_size();
}
inline void SigningInput::clear_instructions() {
  instructions_.Clear();
}
inline ::TW::Solana::Proto::Instruction* SigningInput::mutable_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.instructions)
  return instructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::Instruction >*
SigningInput::mutable_instructions() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.SigningInput.instructions)
  return &instructions_;
}
inline const ::TW::Solana::Proto::Instruction& SigningInput::_internal_instructions(int index) const {
  return instructions_.Get(index);
}
inline const ::TW::Solana::Proto::Instruction& SigningInput::instructions(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.instructions)
  return _internal_instructions(index);
}
inline ::TW::Solana::Proto::Instruction* SigningInput::_internal_add_instructions() {
  return instructions_.Add();
}
inline ::TW::Solana::Proto::Instruction* SigningInput::add_instructions() {
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.SigningInput.instructions)
  return _internal_add_instructions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::Instruction >&
SigningInput::instructions() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.SigningInput.instructions)
  return instructions_;
}

// repeated .TW.Solana.Proto.AddressTableLookups address_table_lookups = 18;
inline int SigningInput::_internal_address_table_lookups_size() const {
  return address_table_lookups_.size();
}
inline int SigningInput::address_table_lookups_size() const {
  return _internal_address_table_lookups_size();
}
inline void SigningInput::clear_address_table_lookups() {
  address_table_lookups_.Clear();
}
inline ::TW::Solana::Proto::AddressTableLookups* SigningInput::mutable_address_table_lookups(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.address_table_lookups)
  return address_table_lookups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AddressTableLookups >*
SigningInput::mutable_address_table_lookups() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.SigningInput.address_table_lookups)
  return &address_table_lookups_;
}
inline const ::TW::Solana::Proto::AddressTableLookups& SigningInput::_internal_address_table_lookups(int index) const {
  return address_table_lookups_.Get(index);
}
inline const ::TW::Solana::Proto::AddressTableLookups& SigningInput::address_table_lookups(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.address_table_lookups)
  return _internal_address_table_lookups(index);
}
inline ::TW::Solana::Proto::AddressTableLookups* SigningInput::_internal_add_address_table_lookups() {
  return address_table_lookups_.Add();
}
inline ::TW::Solana::Proto::AddressTableLookups* SigningInput::add_address_table_lookups() {
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.SigningInput.address_table_lookups)
  return _internal_add_address_table_lookups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::AddressTableLookups >&
SigningInput::address_table_lookups() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.SigningInput.address_table_lookups)
  return address_table_lookups_;
}

inline bool SigningInput::has_transaction_type() const {
  return transaction_type_case() != TRANSACTION_TYPE_NOT_SET;
}
inline void SigningInput::clear_has_transaction_type() {
  _oneof_case_[0] = TRANSACTION_TYPE_NOT_SET;
}
inline SigningInput::TransactionTypeCase SigningInput::transaction_type_case() const {
  return SigningInput::TransactionTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// string encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Solana.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningOutput.encoded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Solana
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Solana_2eproto
