// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ethereum.proto

#include "Ethereum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Transaction_Ethereum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ContractGeneric_Ethereum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC1155Transfer_Ethereum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC20Approve_Ethereum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC20Transfer_Ethereum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC721Approve_Ethereum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC721Transfer_Ethereum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_Transfer_Ethereum_2eproto;
namespace TW {
namespace Ethereum {
namespace Proto {
class Transaction_TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_Transfer> _instance;
} _Transaction_Transfer_default_instance_;
class Transaction_ERC20TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_ERC20Transfer> _instance;
} _Transaction_ERC20Transfer_default_instance_;
class Transaction_ERC20ApproveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_ERC20Approve> _instance;
} _Transaction_ERC20Approve_default_instance_;
class Transaction_ERC721ApproveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_ERC721Approve> _instance;
} _Transaction_ERC721Approve_default_instance_;
class Transaction_ERC721TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_ERC721Transfer> _instance;
} _Transaction_ERC721Transfer_default_instance_;
class Transaction_ERC1155TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_ERC1155Transfer> _instance;
} _Transaction_ERC1155Transfer_default_instance_;
class Transaction_ContractGenericDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_ContractGeneric> _instance;
} _Transaction_ContractGeneric_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Ethereum
}  // namespace TW
static void InitDefaultsscc_info_SigningInput_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SigningInput_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SigningInput_Ethereum_2eproto}, {
      &scc_info_Transaction_Ethereum_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Ethereum_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_Transaction_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Transaction_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Transaction_Ethereum_2eproto}, {
      &scc_info_Transaction_Transfer_Ethereum_2eproto.base,
      &scc_info_Transaction_ERC20Transfer_Ethereum_2eproto.base,
      &scc_info_Transaction_ERC20Approve_Ethereum_2eproto.base,
      &scc_info_Transaction_ERC721Transfer_Ethereum_2eproto.base,
      &scc_info_Transaction_ERC1155Transfer_Ethereum_2eproto.base,
      &scc_info_Transaction_ContractGeneric_Ethereum_2eproto.base,
      &scc_info_Transaction_ERC721Approve_Ethereum_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_ContractGeneric_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_Transaction_ContractGeneric_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::Transaction_ContractGeneric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ContractGeneric_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_ContractGeneric_Ethereum_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_ERC1155Transfer_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_Transaction_ERC1155Transfer_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::Transaction_ERC1155Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC1155Transfer_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_ERC1155Transfer_Ethereum_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_ERC20Approve_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_Transaction_ERC20Approve_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::Transaction_ERC20Approve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC20Approve_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_ERC20Approve_Ethereum_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_ERC20Transfer_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_Transaction_ERC20Transfer_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::Transaction_ERC20Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC20Transfer_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_ERC20Transfer_Ethereum_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_ERC721Approve_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_Transaction_ERC721Approve_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::Transaction_ERC721Approve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC721Approve_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_ERC721Approve_Ethereum_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_ERC721Transfer_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_Transaction_ERC721Transfer_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::Transaction_ERC721Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ERC721Transfer_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_ERC721Transfer_Ethereum_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_Transfer_Ethereum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ethereum::Proto::_Transaction_Transfer_default_instance_;
    new (ptr) ::TW::Ethereum::Proto::Transaction_Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_Transfer_Ethereum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_Transfer_Ethereum_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Ethereum_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Ethereum_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Ethereum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Ethereum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Transfer, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Transfer, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Transfer, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Approve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Approve, spender_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Approve, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Approve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Approve, spender_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Approve, approved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Transfer, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Transfer, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Transfer, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, token_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ContractGeneric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ContractGeneric, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ContractGeneric, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction, transaction_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, chain_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, tx_mode_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, max_inclusion_fee_per_gas_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, max_fee_per_gas_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, v_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, r_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, s_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Ethereum::Proto::Transaction_Transfer)},
  { 7, -1, sizeof(::TW::Ethereum::Proto::Transaction_ERC20Transfer)},
  { 14, -1, sizeof(::TW::Ethereum::Proto::Transaction_ERC20Approve)},
  { 21, -1, sizeof(::TW::Ethereum::Proto::Transaction_ERC721Approve)},
  { 28, -1, sizeof(::TW::Ethereum::Proto::Transaction_ERC721Transfer)},
  { 36, -1, sizeof(::TW::Ethereum::Proto::Transaction_ERC1155Transfer)},
  { 46, -1, sizeof(::TW::Ethereum::Proto::Transaction_ContractGeneric)},
  { 53, -1, sizeof(::TW::Ethereum::Proto::Transaction)},
  { 66, -1, sizeof(::TW::Ethereum::Proto::SigningInput)},
  { 81, -1, sizeof(::TW::Ethereum::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ERC20Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ERC20Approve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ERC721Approve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ERC721Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ERC1155Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ContractGeneric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Ethereum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Ethereum.proto\022\021TW.Ethereum.Proto\"\236\007\n\013"
  "Transaction\022;\n\010transfer\030\001 \001(\0132\'.TW.Ether"
  "eum.Proto.Transaction.TransferH\000\022F\n\016erc2"
  "0_transfer\030\002 \001(\0132,.TW.Ethereum.Proto.Tra"
  "nsaction.ERC20TransferH\000\022D\n\rerc20_approv"
  "e\030\003 \001(\0132+.TW.Ethereum.Proto.Transaction."
  "ERC20ApproveH\000\022H\n\017erc721_transfer\030\004 \001(\0132"
  "-.TW.Ethereum.Proto.Transaction.ERC721Tr"
  "ansferH\000\022J\n\020erc1155_transfer\030\005 \001(\0132..TW."
  "Ethereum.Proto.Transaction.ERC1155Transf"
  "erH\000\022J\n\020contract_generic\030\006 \001(\0132..TW.Ethe"
  "reum.Proto.Transaction.ContractGenericH\000"
  "\022F\n\016erc721_approve\030\007 \001(\0132,.TW.Ethereum.P"
  "roto.Transaction.ERC721ApproveH\000\032(\n\010Tran"
  "sfer\022\016\n\006amount\030\001 \001(\014\022\014\n\004data\030\002 \001(\014\032+\n\rER"
  "C20Transfer\022\n\n\002to\030\001 \001(\t\022\016\n\006amount\030\002 \001(\014\032"
  "/\n\014ERC20Approve\022\017\n\007spender\030\001 \001(\t\022\016\n\006amou"
  "nt\030\002 \001(\014\0322\n\rERC721Approve\022\017\n\007spender\030\001 \001"
  "(\t\022\020\n\010approved\030\002 \001(\010\032<\n\016ERC721Transfer\022\014"
  "\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022\020\n\010token_id\030\003 \001"
  "(\014\032Z\n\017ERC1155Transfer\022\014\n\004from\030\001 \001(\t\022\n\n\002t"
  "o\030\002 \001(\t\022\020\n\010token_id\030\003 \001(\014\022\r\n\005value\030\004 \001(\014"
  "\022\014\n\004data\030\005 \001(\014\032/\n\017ContractGeneric\022\016\n\006amo"
  "unt\030\001 \001(\014\022\014\n\004data\030\002 \001(\014B\023\n\021transaction_o"
  "neof\"\244\002\n\014SigningInput\022\020\n\010chain_id\030\001 \001(\014\022"
  "\r\n\005nonce\030\002 \001(\014\0223\n\007tx_mode\030\003 \001(\0162\".TW.Eth"
  "ereum.Proto.TransactionMode\022\021\n\tgas_price"
  "\030\004 \001(\014\022\021\n\tgas_limit\030\005 \001(\014\022!\n\031max_inclusi"
  "on_fee_per_gas\030\006 \001(\014\022\027\n\017max_fee_per_gas\030"
  "\007 \001(\014\022\022\n\nto_address\030\010 \001(\t\022\023\n\013private_key"
  "\030\t \001(\014\0223\n\013transaction\030\n \001(\0132\036.TW.Ethereu"
  "m.Proto.Transaction\"O\n\rSigningOutput\022\017\n\007"
  "encoded\030\001 \001(\014\022\t\n\001v\030\002 \001(\014\022\t\n\001r\030\003 \001(\014\022\t\n\001s"
  "\030\004 \001(\014\022\014\n\004data\030\005 \001(\014*,\n\017TransactionMode\022"
  "\n\n\006Legacy\020\000\022\r\n\tEnveloped\020\001B\027\n\025wallet.cor"
  "e.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Ethereum_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Ethereum_2eproto_sccs[10] = {
  &scc_info_SigningInput_Ethereum_2eproto.base,
  &scc_info_SigningOutput_Ethereum_2eproto.base,
  &scc_info_Transaction_Ethereum_2eproto.base,
  &scc_info_Transaction_ContractGeneric_Ethereum_2eproto.base,
  &scc_info_Transaction_ERC1155Transfer_Ethereum_2eproto.base,
  &scc_info_Transaction_ERC20Approve_Ethereum_2eproto.base,
  &scc_info_Transaction_ERC20Transfer_Ethereum_2eproto.base,
  &scc_info_Transaction_ERC721Approve_Ethereum_2eproto.base,
  &scc_info_Transaction_ERC721Transfer_Ethereum_2eproto.base,
  &scc_info_Transaction_Transfer_Ethereum_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Ethereum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ethereum_2eproto = {
  false, false, descriptor_table_protodef_Ethereum_2eproto, "Ethereum.proto", 1419,
  &descriptor_table_Ethereum_2eproto_once, descriptor_table_Ethereum_2eproto_sccs, descriptor_table_Ethereum_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_Ethereum_2eproto::offsets,
  file_level_metadata_Ethereum_2eproto, 10, file_level_enum_descriptors_Ethereum_2eproto, file_level_service_descriptors_Ethereum_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Ethereum_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Ethereum_2eproto)), true);
namespace TW {
namespace Ethereum {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ethereum_2eproto);
  return file_level_enum_descriptors_Ethereum_2eproto[0];
}
bool TransactionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Transaction_Transfer::_Internal {
 public:
};

Transaction_Transfer::Transaction_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.Transfer)
}
Transaction_Transfer::Transaction_Transfer(const Transaction_Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.Transfer)
}

void Transaction_Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Transfer_Ethereum_2eproto.base);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transaction_Transfer::~Transaction_Transfer() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_Transfer::ArenaDtor(void* object) {
  Transaction_Transfer* _this = reinterpret_cast< Transaction_Transfer* >(object);
  (void)_this;
}
void Transaction_Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_Transfer& Transaction_Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Transfer_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void Transaction_Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes amount = 1;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_amount(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.Transfer)
  return target;
}

size_t Transaction_Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes amount = 1;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.Transaction.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.Transaction.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.Transaction.Transfer)
    MergeFrom(*source);
  }
}

void Transaction_Transfer::MergeFrom(const Transaction_Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void Transaction_Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.Transaction.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Transfer::CopyFrom(const Transaction_Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Transfer::IsInitialized() const {
  return true;
}

void Transaction_Transfer::InternalSwap(Transaction_Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction_ERC20Transfer::_Internal {
 public:
};

Transaction_ERC20Transfer::Transaction_ERC20Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ERC20Transfer)
}
Transaction_ERC20Transfer::Transaction_ERC20Transfer(const Transaction_ERC20Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ERC20Transfer)
}

void Transaction_ERC20Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_ERC20Transfer_Ethereum_2eproto.base);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transaction_ERC20Transfer::~Transaction_ERC20Transfer() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_ERC20Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ERC20Transfer::ArenaDtor(void* object) {
  Transaction_ERC20Transfer* _this = reinterpret_cast< Transaction_ERC20Transfer* >(object);
  (void)_this;
}
void Transaction_ERC20Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ERC20Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_ERC20Transfer& Transaction_ERC20Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_ERC20Transfer_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void Transaction_ERC20Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ERC20Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC20Transfer.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_ERC20Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC20Transfer.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  return target;
}

size_t Transaction_ERC20Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_ERC20Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_ERC20Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_ERC20Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.Transaction.ERC20Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.Transaction.ERC20Transfer)
    MergeFrom(*source);
  }
}

void Transaction_ERC20Transfer::MergeFrom(const Transaction_ERC20Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void Transaction_ERC20Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_ERC20Transfer::CopyFrom(const Transaction_ERC20Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ERC20Transfer::IsInitialized() const {
  return true;
}

void Transaction_ERC20Transfer::InternalSwap(Transaction_ERC20Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ERC20Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction_ERC20Approve::_Internal {
 public:
};

Transaction_ERC20Approve::Transaction_ERC20Approve(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ERC20Approve)
}
Transaction_ERC20Approve::Transaction_ERC20Approve(const Transaction_ERC20Approve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spender().empty()) {
    spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spender(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ERC20Approve)
}

void Transaction_ERC20Approve::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_ERC20Approve_Ethereum_2eproto.base);
  spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transaction_ERC20Approve::~Transaction_ERC20Approve() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ERC20Approve)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_ERC20Approve::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  spender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ERC20Approve::ArenaDtor(void* object) {
  Transaction_ERC20Approve* _this = reinterpret_cast< Transaction_ERC20Approve* >(object);
  (void)_this;
}
void Transaction_ERC20Approve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ERC20Approve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_ERC20Approve& Transaction_ERC20Approve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_ERC20Approve_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void Transaction_ERC20Approve::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spender_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ERC20Approve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string spender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC20Approve.spender"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_ERC20Approve::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spender = 1;
  if (this->spender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spender().data(), static_cast<int>(this->_internal_spender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC20Approve.spender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spender(), target);
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ERC20Approve)
  return target;
}

size_t Transaction_ERC20Approve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spender = 1;
  if (this->spender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spender());
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_ERC20Approve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_ERC20Approve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_ERC20Approve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.Transaction.ERC20Approve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.Transaction.ERC20Approve)
    MergeFrom(*source);
  }
}

void Transaction_ERC20Approve::MergeFrom(const Transaction_ERC20Approve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spender().size() > 0) {
    _internal_set_spender(from._internal_spender());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void Transaction_ERC20Approve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_ERC20Approve::CopyFrom(const Transaction_ERC20Approve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ERC20Approve::IsInitialized() const {
  return true;
}

void Transaction_ERC20Approve::InternalSwap(Transaction_ERC20Approve* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spender_.Swap(&other->spender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ERC20Approve::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction_ERC721Approve::_Internal {
 public:
};

Transaction_ERC721Approve::Transaction_ERC721Approve(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ERC721Approve)
}
Transaction_ERC721Approve::Transaction_ERC721Approve(const Transaction_ERC721Approve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spender().empty()) {
    spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spender(), 
      GetArena());
  }
  approved_ = from.approved_;
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ERC721Approve)
}

void Transaction_ERC721Approve::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_ERC721Approve_Ethereum_2eproto.base);
  spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  approved_ = false;
}

Transaction_ERC721Approve::~Transaction_ERC721Approve() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ERC721Approve)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_ERC721Approve::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  spender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ERC721Approve::ArenaDtor(void* object) {
  Transaction_ERC721Approve* _this = reinterpret_cast< Transaction_ERC721Approve* >(object);
  (void)_this;
}
void Transaction_ERC721Approve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ERC721Approve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_ERC721Approve& Transaction_ERC721Approve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_ERC721Approve_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void Transaction_ERC721Approve::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ERC721Approve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spender_.ClearToEmpty();
  approved_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ERC721Approve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string spender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC721Approve.spender"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool approved = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_ERC721Approve::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ERC721Approve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spender = 1;
  if (this->spender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spender().data(), static_cast<int>(this->_internal_spender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC721Approve.spender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spender(), target);
  }

  // bool approved = 2;
  if (this->approved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_approved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ERC721Approve)
  return target;
}

size_t Transaction_ERC721Approve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ERC721Approve)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spender = 1;
  if (this->spender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spender());
  }

  // bool approved = 2;
  if (this->approved() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_ERC721Approve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.Transaction.ERC721Approve)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_ERC721Approve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_ERC721Approve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.Transaction.ERC721Approve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.Transaction.ERC721Approve)
    MergeFrom(*source);
  }
}

void Transaction_ERC721Approve::MergeFrom(const Transaction_ERC721Approve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ERC721Approve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spender().size() > 0) {
    _internal_set_spender(from._internal_spender());
  }
  if (from.approved() != 0) {
    _internal_set_approved(from._internal_approved());
  }
}

void Transaction_ERC721Approve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.Transaction.ERC721Approve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_ERC721Approve::CopyFrom(const Transaction_ERC721Approve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ERC721Approve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ERC721Approve::IsInitialized() const {
  return true;
}

void Transaction_ERC721Approve::InternalSwap(Transaction_ERC721Approve* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spender_.Swap(&other->spender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(approved_, other->approved_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ERC721Approve::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction_ERC721Transfer::_Internal {
 public:
};

Transaction_ERC721Transfer::Transaction_ERC721Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ERC721Transfer)
}
Transaction_ERC721Transfer::Transaction_ERC721Transfer(const Transaction_ERC721Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArena());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ERC721Transfer)
}

void Transaction_ERC721Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_ERC721Transfer_Ethereum_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transaction_ERC721Transfer::~Transaction_ERC721Transfer() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_ERC721Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ERC721Transfer::ArenaDtor(void* object) {
  Transaction_ERC721Transfer* _this = reinterpret_cast< Transaction_ERC721Transfer* >(object);
  (void)_this;
}
void Transaction_ERC721Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ERC721Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_ERC721Transfer& Transaction_ERC721Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_ERC721Transfer_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void Transaction_ERC721Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ERC721Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC721Transfer.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC721Transfer.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_ERC721Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC721Transfer.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC721Transfer.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes token_id = 3;
  if (this->token_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  return target;
}

size_t Transaction_ERC721Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes token_id = 3;
  if (this->token_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_ERC721Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_ERC721Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_ERC721Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.Transaction.ERC721Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.Transaction.ERC721Transfer)
    MergeFrom(*source);
  }
}

void Transaction_ERC721Transfer::MergeFrom(const Transaction_ERC721Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.token_id().size() > 0) {
    _internal_set_token_id(from._internal_token_id());
  }
}

void Transaction_ERC721Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_ERC721Transfer::CopyFrom(const Transaction_ERC721Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ERC721Transfer::IsInitialized() const {
  return true;
}

void Transaction_ERC721Transfer::InternalSwap(Transaction_ERC721Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_id_.Swap(&other->token_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ERC721Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction_ERC1155Transfer::_Internal {
 public:
};

Transaction_ERC1155Transfer::Transaction_ERC1155Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
}
Transaction_ERC1155Transfer::Transaction_ERC1155Transfer(const Transaction_ERC1155Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArena());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
}

void Transaction_ERC1155Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_ERC1155Transfer_Ethereum_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transaction_ERC1155Transfer::~Transaction_ERC1155Transfer() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_ERC1155Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ERC1155Transfer::ArenaDtor(void* object) {
  Transaction_ERC1155Transfer* _this = reinterpret_cast< Transaction_ERC1155Transfer* >(object);
  (void)_this;
}
void Transaction_ERC1155Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ERC1155Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_ERC1155Transfer& Transaction_ERC1155Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_ERC1155Transfer_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void Transaction_ERC1155Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  value_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ERC1155Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC1155Transfer.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC1155Transfer.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_ERC1155Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC1155Transfer.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC1155Transfer.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes token_id = 3;
  if (this->token_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_value(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  return target;
}

size_t Transaction_ERC1155Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes token_id = 3;
  if (this->token_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_ERC1155Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_ERC1155Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_ERC1155Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
    MergeFrom(*source);
  }
}

void Transaction_ERC1155Transfer::MergeFrom(const Transaction_ERC1155Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.token_id().size() > 0) {
    _internal_set_token_id(from._internal_token_id());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void Transaction_ERC1155Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_ERC1155Transfer::CopyFrom(const Transaction_ERC1155Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ERC1155Transfer::IsInitialized() const {
  return true;
}

void Transaction_ERC1155Transfer::InternalSwap(Transaction_ERC1155Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_id_.Swap(&other->token_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ERC1155Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction_ContractGeneric::_Internal {
 public:
};

Transaction_ContractGeneric::Transaction_ContractGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ContractGeneric)
}
Transaction_ContractGeneric::Transaction_ContractGeneric(const Transaction_ContractGeneric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ContractGeneric)
}

void Transaction_ContractGeneric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_ContractGeneric_Ethereum_2eproto.base);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transaction_ContractGeneric::~Transaction_ContractGeneric() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ContractGeneric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_ContractGeneric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ContractGeneric::ArenaDtor(void* object) {
  Transaction_ContractGeneric* _this = reinterpret_cast< Transaction_ContractGeneric* >(object);
  (void)_this;
}
void Transaction_ContractGeneric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ContractGeneric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_ContractGeneric& Transaction_ContractGeneric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_ContractGeneric_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void Transaction_ContractGeneric::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ContractGeneric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_ContractGeneric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes amount = 1;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_amount(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ContractGeneric)
  return target;
}

size_t Transaction_ContractGeneric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes amount = 1;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_ContractGeneric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_ContractGeneric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_ContractGeneric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.Transaction.ContractGeneric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.Transaction.ContractGeneric)
    MergeFrom(*source);
  }
}

void Transaction_ContractGeneric::MergeFrom(const Transaction_ContractGeneric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void Transaction_ContractGeneric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_ContractGeneric::CopyFrom(const Transaction_ContractGeneric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ContractGeneric::IsInitialized() const {
  return true;
}

void Transaction_ContractGeneric::InternalSwap(Transaction_ContractGeneric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ContractGeneric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction::_Internal {
 public:
  static const ::TW::Ethereum::Proto::Transaction_Transfer& transfer(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& erc20_transfer(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ERC20Approve& erc20_approve(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& erc721_transfer(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& erc1155_transfer(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ContractGeneric& contract_generic(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ERC721Approve& erc721_approve(const Transaction* msg);
};

const ::TW::Ethereum::Proto::Transaction_Transfer&
Transaction::_Internal::transfer(const Transaction* msg) {
  return *msg->transaction_oneof_.transfer_;
}
const ::TW::Ethereum::Proto::Transaction_ERC20Transfer&
Transaction::_Internal::erc20_transfer(const Transaction* msg) {
  return *msg->transaction_oneof_.erc20_transfer_;
}
const ::TW::Ethereum::Proto::Transaction_ERC20Approve&
Transaction::_Internal::erc20_approve(const Transaction* msg) {
  return *msg->transaction_oneof_.erc20_approve_;
}
const ::TW::Ethereum::Proto::Transaction_ERC721Transfer&
Transaction::_Internal::erc721_transfer(const Transaction* msg) {
  return *msg->transaction_oneof_.erc721_transfer_;
}
const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer&
Transaction::_Internal::erc1155_transfer(const Transaction* msg) {
  return *msg->transaction_oneof_.erc1155_transfer_;
}
const ::TW::Ethereum::Proto::Transaction_ContractGeneric&
Transaction::_Internal::contract_generic(const Transaction* msg) {
  return *msg->transaction_oneof_.contract_generic_;
}
const ::TW::Ethereum::Proto::Transaction_ERC721Approve&
Transaction::_Internal::erc721_approve(const Transaction* msg) {
  return *msg->transaction_oneof_.erc721_approve_;
}
void Transaction::set_allocated_transfer(::TW::Ethereum::Proto::Transaction_Transfer* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_oneof();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    transaction_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.transfer)
}
void Transaction::set_allocated_erc20_transfer(::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_oneof();
  if (erc20_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(erc20_transfer);
    if (message_arena != submessage_arena) {
      erc20_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc20_transfer, submessage_arena);
    }
    set_has_erc20_transfer();
    transaction_oneof_.erc20_transfer_ = erc20_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.erc20_transfer)
}
void Transaction::set_allocated_erc20_approve(::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_oneof();
  if (erc20_approve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(erc20_approve);
    if (message_arena != submessage_arena) {
      erc20_approve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc20_approve, submessage_arena);
    }
    set_has_erc20_approve();
    transaction_oneof_.erc20_approve_ = erc20_approve;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.erc20_approve)
}
void Transaction::set_allocated_erc721_transfer(::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_oneof();
  if (erc721_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(erc721_transfer);
    if (message_arena != submessage_arena) {
      erc721_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc721_transfer, submessage_arena);
    }
    set_has_erc721_transfer();
    transaction_oneof_.erc721_transfer_ = erc721_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.erc721_transfer)
}
void Transaction::set_allocated_erc1155_transfer(::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_oneof();
  if (erc1155_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(erc1155_transfer);
    if (message_arena != submessage_arena) {
      erc1155_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc1155_transfer, submessage_arena);
    }
    set_has_erc1155_transfer();
    transaction_oneof_.erc1155_transfer_ = erc1155_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.erc1155_transfer)
}
void Transaction::set_allocated_contract_generic(::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_oneof();
  if (contract_generic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contract_generic);
    if (message_arena != submessage_arena) {
      contract_generic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_generic, submessage_arena);
    }
    set_has_contract_generic();
    transaction_oneof_.contract_generic_ = contract_generic;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.contract_generic)
}
void Transaction::set_allocated_erc721_approve(::TW::Ethereum::Proto::Transaction_ERC721Approve* erc721_approve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_oneof();
  if (erc721_approve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(erc721_approve);
    if (message_arena != submessage_arena) {
      erc721_approve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc721_approve, submessage_arena);
    }
    set_has_erc721_approve();
    transaction_oneof_.erc721_approve_ = erc721_approve;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.erc721_approve)
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_transaction_oneof();
  switch (from.transaction_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Ethereum::Proto::Transaction_Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kErc20Transfer: {
      _internal_mutable_erc20_transfer()->::TW::Ethereum::Proto::Transaction_ERC20Transfer::MergeFrom(from._internal_erc20_transfer());
      break;
    }
    case kErc20Approve: {
      _internal_mutable_erc20_approve()->::TW::Ethereum::Proto::Transaction_ERC20Approve::MergeFrom(from._internal_erc20_approve());
      break;
    }
    case kErc721Transfer: {
      _internal_mutable_erc721_transfer()->::TW::Ethereum::Proto::Transaction_ERC721Transfer::MergeFrom(from._internal_erc721_transfer());
      break;
    }
    case kErc1155Transfer: {
      _internal_mutable_erc1155_transfer()->::TW::Ethereum::Proto::Transaction_ERC1155Transfer::MergeFrom(from._internal_erc1155_transfer());
      break;
    }
    case kContractGeneric: {
      _internal_mutable_contract_generic()->::TW::Ethereum::Proto::Transaction_ContractGeneric::MergeFrom(from._internal_contract_generic());
      break;
    }
    case kErc721Approve: {
      _internal_mutable_erc721_approve()->::TW::Ethereum::Proto::Transaction_ERC721Approve::MergeFrom(from._internal_erc721_approve());
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Ethereum_2eproto.base);
  clear_has_transaction_oneof();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_transaction_oneof()) {
    clear_transaction_oneof();
  }
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void Transaction::clear_transaction_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Ethereum.Proto.Transaction)
  switch (transaction_oneof_case()) {
    case kTransfer: {
      if (GetArena() == nullptr) {
        delete transaction_oneof_.transfer_;
      }
      break;
    }
    case kErc20Transfer: {
      if (GetArena() == nullptr) {
        delete transaction_oneof_.erc20_transfer_;
      }
      break;
    }
    case kErc20Approve: {
      if (GetArena() == nullptr) {
        delete transaction_oneof_.erc20_approve_;
      }
      break;
    }
    case kErc721Transfer: {
      if (GetArena() == nullptr) {
        delete transaction_oneof_.erc721_transfer_;
      }
      break;
    }
    case kErc1155Transfer: {
      if (GetArena() == nullptr) {
        delete transaction_oneof_.erc1155_transfer_;
      }
      break;
    }
    case kContractGeneric: {
      if (GetArena() == nullptr) {
        delete transaction_oneof_.contract_generic_;
      }
      break;
    }
    case kErc721Approve: {
      if (GetArena() == nullptr) {
        delete transaction_oneof_.erc721_approve_;
      }
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_ONEOF_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_transaction_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc20_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc20_approve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc721_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc1155_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_generic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ERC721Approve erc721_approve = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc721_approve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transfer(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
  if (_internal_has_erc20_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::erc20_transfer(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
  if (_internal_has_erc20_approve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::erc20_approve(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
  if (_internal_has_erc721_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::erc721_transfer(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
  if (_internal_has_erc1155_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::erc1155_transfer(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
  if (_internal_has_contract_generic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::contract_generic(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ERC721Approve erc721_approve = 7;
  if (_internal_has_erc721_approve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::erc721_approve(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (transaction_oneof_case()) {
    // .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.transfer_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
    case kErc20Transfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.erc20_transfer_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
    case kErc20Approve: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.erc20_approve_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
    case kErc721Transfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.erc721_transfer_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
    case kErc1155Transfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.erc1155_transfer_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
    case kContractGeneric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.contract_generic_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ERC721Approve erc721_approve = 7;
    case kErc721Approve: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.erc721_approve_);
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.transaction_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Ethereum::Proto::Transaction_Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kErc20Transfer: {
      _internal_mutable_erc20_transfer()->::TW::Ethereum::Proto::Transaction_ERC20Transfer::MergeFrom(from._internal_erc20_transfer());
      break;
    }
    case kErc20Approve: {
      _internal_mutable_erc20_approve()->::TW::Ethereum::Proto::Transaction_ERC20Approve::MergeFrom(from._internal_erc20_approve());
      break;
    }
    case kErc721Transfer: {
      _internal_mutable_erc721_transfer()->::TW::Ethereum::Proto::Transaction_ERC721Transfer::MergeFrom(from._internal_erc721_transfer());
      break;
    }
    case kErc1155Transfer: {
      _internal_mutable_erc1155_transfer()->::TW::Ethereum::Proto::Transaction_ERC1155Transfer::MergeFrom(from._internal_erc1155_transfer());
      break;
    }
    case kContractGeneric: {
      _internal_mutable_contract_generic()->::TW::Ethereum::Proto::Transaction_ContractGeneric::MergeFrom(from._internal_contract_generic());
      break;
    }
    case kErc721Approve: {
      _internal_mutable_erc721_approve()->::TW::Ethereum::Proto::Transaction_ERC721Approve::MergeFrom(from._internal_erc721_approve());
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transaction_oneof_, other->transaction_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Ethereum::Proto::Transaction& transaction(const SigningInput* msg);
};

const ::TW::Ethereum::Proto::Transaction&
SigningInput::_Internal::transaction(const SigningInput* msg) {
  return *msg->transaction_;
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArena());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArena());
  }
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_price().empty()) {
    gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_price(), 
      GetArena());
  }
  gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_limit().empty()) {
    gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_limit(), 
      GetArena());
  }
  max_inclusion_fee_per_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_inclusion_fee_per_gas().empty()) {
    max_inclusion_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_inclusion_fee_per_gas(), 
      GetArena());
  }
  max_fee_per_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_fee_per_gas().empty()) {
    max_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_fee_per_gas(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::TW::Ethereum::Proto::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  tx_mode_ = from.tx_mode_;
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Ethereum_2eproto.base);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_inclusion_fee_per_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_fee_per_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tx_mode_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(tx_mode_));
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_inclusion_fee_per_gas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_fee_per_gas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  nonce_.ClearToEmpty();
  gas_price_.ClearToEmpty();
  gas_limit_.ClearToEmpty();
  max_inclusion_fee_per_gas_.ClearToEmpty();
  max_fee_per_gas_.ClearToEmpty();
  to_address_.ClearToEmpty();
  private_key_.ClearToEmpty();
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  tx_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tx_mode(static_cast<::TW::Ethereum::Proto::TransactionMode>(val));
        } else goto handle_unusual;
        continue;
      // bytes gas_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gas_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_gas_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes max_inclusion_fee_per_gas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_max_inclusion_fee_per_gas();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes max_fee_per_gas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_max_fee_per_gas();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.SigningInput.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes private_key = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction transaction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (this->chain_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  // bytes nonce = 2;
  if (this->nonce().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nonce(), target);
  }

  // .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
  if (this->tx_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tx_mode(), target);
  }

  // bytes gas_price = 4;
  if (this->gas_price().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_gas_price(), target);
  }

  // bytes gas_limit = 5;
  if (this->gas_limit().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_gas_limit(), target);
  }

  // bytes max_inclusion_fee_per_gas = 6;
  if (this->max_inclusion_fee_per_gas().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_max_inclusion_fee_per_gas(), target);
  }

  // bytes max_fee_per_gas = 7;
  if (this->max_fee_per_gas().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_max_fee_per_gas(), target);
  }

  // string to_address = 8;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.SigningInput.to_address");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_to_address(), target);
  }

  // bytes private_key = 9;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_private_key(), target);
  }

  // .TW.Ethereum.Proto.Transaction transaction = 10;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_id());
  }

  // bytes nonce = 2;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // bytes gas_price = 4;
  if (this->gas_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gas_price());
  }

  // bytes gas_limit = 5;
  if (this->gas_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gas_limit());
  }

  // bytes max_inclusion_fee_per_gas = 6;
  if (this->max_inclusion_fee_per_gas().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_max_inclusion_fee_per_gas());
  }

  // bytes max_fee_per_gas = 7;
  if (this->max_fee_per_gas().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_max_fee_per_gas());
  }

  // string to_address = 8;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // bytes private_key = 9;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // .TW.Ethereum.Proto.Transaction transaction = 10;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
  if (this->tx_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tx_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.nonce().size() > 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.gas_price().size() > 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from.gas_limit().size() > 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from.max_inclusion_fee_per_gas().size() > 0) {
    _internal_set_max_inclusion_fee_per_gas(from._internal_max_inclusion_fee_per_gas());
  }
  if (from.max_fee_per_gas().size() > 0) {
    _internal_set_max_fee_per_gas(from._internal_max_fee_per_gas());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.has_transaction()) {
    _internal_mutable_transaction()->::TW::Ethereum::Proto::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from.tx_mode() != 0) {
    _internal_set_tx_mode(from._internal_tx_mode());
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_price_.Swap(&other->gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_limit_.Swap(&other->gas_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_inclusion_fee_per_gas_.Swap(&other->max_inclusion_fee_per_gas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_fee_per_gas_.Swap(&other->max_fee_per_gas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, tx_mode_)
      + sizeof(SigningInput::tx_mode_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArena());
  }
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r().empty()) {
    r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_r(), 
      GetArena());
  }
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s().empty()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Ethereum_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Ethereum_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  v_.ClearToEmpty();
  r_.ClearToEmpty();
  s_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_r();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // bytes v = 2;
  if (this->v().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_v(), target);
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_r(), target);
  }

  // bytes s = 4;
  if (this->s().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_s(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // bytes v = 2;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r());
  }

  // bytes s = 4;
  if (this->s().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_s());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ethereum.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ethereum.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ethereum.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (from.v().size() > 0) {
    _internal_set_v(from._internal_v());
  }
  if (from.r().size() > 0) {
    _internal_set_r(from._internal_r());
  }
  if (from.s().size() > 0) {
    _internal_set_s(from._internal_s());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ethereum.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  r_.Swap(&other->r_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s_.Swap(&other->s_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Ethereum
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_Transfer* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC20Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ERC20Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ERC20Approve* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC20Approve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ERC20Approve >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ERC721Approve* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC721Approve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ERC721Approve >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC721Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ERC721Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC1155Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ERC1155Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ContractGeneric* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ContractGeneric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ContractGeneric >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
