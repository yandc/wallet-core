// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Solana.proto

#include "Solana.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountKey_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddressTableLookups_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompiledInstruction_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAndTransferToken_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateTokenAccount_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeactivateAllStake_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeactivateStake_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateStake_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Instruction_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageHeader_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StakeAccountValue_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenTransfer_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawAllStake_Solana_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Solana_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawStake_Solana_2eproto;
namespace TW {
namespace Solana {
namespace Proto {
class TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class DelegateStakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegateStake> _instance;
} _DelegateStake_default_instance_;
class DeactivateStakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeactivateStake> _instance;
} _DeactivateStake_default_instance_;
class DeactivateAllStakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeactivateAllStake> _instance;
} _DeactivateAllStake_default_instance_;
class WithdrawStakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawStake> _instance;
} _WithdrawStake_default_instance_;
class StakeAccountValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StakeAccountValue> _instance;
} _StakeAccountValue_default_instance_;
class WithdrawAllStakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawAllStake> _instance;
} _WithdrawAllStake_default_instance_;
class CreateTokenAccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTokenAccount> _instance;
} _CreateTokenAccount_default_instance_;
class TokenTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenTransfer> _instance;
} _TokenTransfer_default_instance_;
class CreateAndTransferTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAndTransferToken> _instance;
} _CreateAndTransferToken_default_instance_;
class AccountKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountKey> _instance;
} _AccountKey_default_instance_;
class InstructionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Instruction> _instance;
} _Instruction_default_instance_;
class MessageHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageHeader> _instance;
} _MessageHeader_default_instance_;
class CompiledInstructionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompiledInstruction> _instance;
} _CompiledInstruction_default_instance_;
class AddressTableLookupsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddressTableLookups> _instance;
} _AddressTableLookups_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Solana
}  // namespace TW
static void InitDefaultsscc_info_AccountKey_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_AccountKey_default_instance_;
    new (ptr) ::TW::Solana::Proto::AccountKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountKey_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountKey_Solana_2eproto}, {}};

static void InitDefaultsscc_info_AddressTableLookups_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_AddressTableLookups_default_instance_;
    new (ptr) ::TW::Solana::Proto::AddressTableLookups();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddressTableLookups_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddressTableLookups_Solana_2eproto}, {}};

static void InitDefaultsscc_info_CompiledInstruction_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_CompiledInstruction_default_instance_;
    new (ptr) ::TW::Solana::Proto::CompiledInstruction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompiledInstruction_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompiledInstruction_Solana_2eproto}, {}};

static void InitDefaultsscc_info_CreateAndTransferToken_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_CreateAndTransferToken_default_instance_;
    new (ptr) ::TW::Solana::Proto::CreateAndTransferToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAndTransferToken_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateAndTransferToken_Solana_2eproto}, {}};

static void InitDefaultsscc_info_CreateTokenAccount_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_CreateTokenAccount_default_instance_;
    new (ptr) ::TW::Solana::Proto::CreateTokenAccount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateTokenAccount_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateTokenAccount_Solana_2eproto}, {}};

static void InitDefaultsscc_info_DeactivateAllStake_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_DeactivateAllStake_default_instance_;
    new (ptr) ::TW::Solana::Proto::DeactivateAllStake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeactivateAllStake_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeactivateAllStake_Solana_2eproto}, {}};

static void InitDefaultsscc_info_DeactivateStake_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_DeactivateStake_default_instance_;
    new (ptr) ::TW::Solana::Proto::DeactivateStake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeactivateStake_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeactivateStake_Solana_2eproto}, {}};

static void InitDefaultsscc_info_DelegateStake_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_DelegateStake_default_instance_;
    new (ptr) ::TW::Solana::Proto::DelegateStake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateStake_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelegateStake_Solana_2eproto}, {}};

static void InitDefaultsscc_info_Instruction_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_Instruction_default_instance_;
    new (ptr) ::TW::Solana::Proto::Instruction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Instruction_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Instruction_Solana_2eproto}, {
      &scc_info_AccountKey_Solana_2eproto.base,}};

static void InitDefaultsscc_info_MessageHeader_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_MessageHeader_default_instance_;
    new (ptr) ::TW::Solana::Proto::MessageHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageHeader_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageHeader_Solana_2eproto}, {}};

static void InitDefaultsscc_info_SigningInput_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Solana::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_SigningInput_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_SigningInput_Solana_2eproto}, {
      &scc_info_Transfer_Solana_2eproto.base,
      &scc_info_DelegateStake_Solana_2eproto.base,
      &scc_info_DeactivateStake_Solana_2eproto.base,
      &scc_info_DeactivateAllStake_Solana_2eproto.base,
      &scc_info_WithdrawStake_Solana_2eproto.base,
      &scc_info_WithdrawAllStake_Solana_2eproto.base,
      &scc_info_CreateTokenAccount_Solana_2eproto.base,
      &scc_info_TokenTransfer_Solana_2eproto.base,
      &scc_info_CreateAndTransferToken_Solana_2eproto.base,
      &scc_info_MessageHeader_Solana_2eproto.base,
      &scc_info_CompiledInstruction_Solana_2eproto.base,
      &scc_info_Instruction_Solana_2eproto.base,
      &scc_info_AddressTableLookups_Solana_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Solana::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Solana_2eproto}, {}};

static void InitDefaultsscc_info_StakeAccountValue_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_StakeAccountValue_default_instance_;
    new (ptr) ::TW::Solana::Proto::StakeAccountValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StakeAccountValue_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StakeAccountValue_Solana_2eproto}, {}};

static void InitDefaultsscc_info_TokenTransfer_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_TokenTransfer_default_instance_;
    new (ptr) ::TW::Solana::Proto::TokenTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenTransfer_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokenTransfer_Solana_2eproto}, {}};

static void InitDefaultsscc_info_Transfer_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_Transfer_default_instance_;
    new (ptr) ::TW::Solana::Proto::Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transfer_Solana_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawAllStake_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_WithdrawAllStake_default_instance_;
    new (ptr) ::TW::Solana::Proto::WithdrawAllStake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawAllStake_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithdrawAllStake_Solana_2eproto}, {
      &scc_info_StakeAccountValue_Solana_2eproto.base,}};

static void InitDefaultsscc_info_WithdrawStake_Solana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Solana::Proto::_WithdrawStake_default_instance_;
    new (ptr) ::TW::Solana::Proto::WithdrawStake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawStake_Solana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WithdrawStake_Solana_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Solana_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Solana_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Solana_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Solana_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, recipient_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DelegateStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DelegateStake, validator_pubkey_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DelegateStake, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DelegateStake, stake_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DeactivateStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DeactivateStake, stake_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DeactivateAllStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DeactivateAllStake, stake_accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawStake, stake_account_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawStake, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::StakeAccountValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::StakeAccountValue, stake_account_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::StakeAccountValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawAllStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawAllStake, stake_accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateTokenAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateTokenAccount, main_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateTokenAccount, token_mint_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateTokenAccount, token_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateTokenAccount, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, token_mint_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, sender_token_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, recipient_token_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, decimals_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, references_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, recipient_main_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, token_mint_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, recipient_token_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, sender_token_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, decimals_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, references_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AccountKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AccountKey, pubkey_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AccountKey, is_signer_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AccountKey, is_writable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Instruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Instruction, keys_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Instruction, program_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Instruction, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::MessageHeader, num_required_signatures_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::MessageHeader, num_readonly_signed_accounts_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::MessageHeader, num_readonly_unsigned_accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CompiledInstruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CompiledInstruction, program_id_index_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CompiledInstruction, account_key_indexes_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CompiledInstruction, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AddressTableLookups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AddressTableLookups, account_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AddressTableLookups, writable_indexes_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AddressTableLookups, readonly_indexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, recent_blockhash_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, from_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, header_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, static_account_keys_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, compiled_instructions_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, instructions_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, address_table_lookups_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, transaction_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningOutput, encoded_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Solana::Proto::Transfer)},
  { 9, -1, sizeof(::TW::Solana::Proto::DelegateStake)},
  { 17, -1, sizeof(::TW::Solana::Proto::DeactivateStake)},
  { 23, -1, sizeof(::TW::Solana::Proto::DeactivateAllStake)},
  { 29, -1, sizeof(::TW::Solana::Proto::WithdrawStake)},
  { 36, -1, sizeof(::TW::Solana::Proto::StakeAccountValue)},
  { 43, -1, sizeof(::TW::Solana::Proto::WithdrawAllStake)},
  { 49, -1, sizeof(::TW::Solana::Proto::CreateTokenAccount)},
  { 58, -1, sizeof(::TW::Solana::Proto::TokenTransfer)},
  { 71, -1, sizeof(::TW::Solana::Proto::CreateAndTransferToken)},
  { 85, -1, sizeof(::TW::Solana::Proto::AccountKey)},
  { 93, -1, sizeof(::TW::Solana::Proto::Instruction)},
  { 101, -1, sizeof(::TW::Solana::Proto::MessageHeader)},
  { 109, -1, sizeof(::TW::Solana::Proto::CompiledInstruction)},
  { 117, -1, sizeof(::TW::Solana::Proto::AddressTableLookups)},
  { 125, -1, sizeof(::TW::Solana::Proto::SigningInput)},
  { 149, -1, sizeof(::TW::Solana::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_DelegateStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_DeactivateStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_DeactivateAllStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_WithdrawStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_StakeAccountValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_WithdrawAllStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_CreateTokenAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_TokenTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_CreateAndTransferToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_AccountKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_Instruction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_MessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_CompiledInstruction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_AddressTableLookups_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Solana_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Solana.proto\022\017TW.Solana.Proto\"N\n\010Trans"
  "fer\022\021\n\trecipient\030\001 \001(\t\022\r\n\005value\030\002 \001(\004\022\014\n"
  "\004memo\030\003 \001(\t\022\022\n\nreferences\030\004 \003(\t\"O\n\rDeleg"
  "ateStake\022\030\n\020validator_pubkey\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\004\022\025\n\rstake_account\030\003 \001(\t\"(\n\017Deac"
  "tivateStake\022\025\n\rstake_account\030\001 \001(\t\",\n\022De"
  "activateAllStake\022\026\n\016stake_accounts\030\001 \003(\t"
  "\"5\n\rWithdrawStake\022\025\n\rstake_account\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\004\"9\n\021StakeAccountValue\022\025\n\r"
  "stake_account\030\001 \001(\t\022\r\n\005value\030\002 \001(\004\"N\n\020Wi"
  "thdrawAllStake\022:\n\016stake_accounts\030\001 \003(\0132\""
  ".TW.Solana.Proto.StakeAccountValue\"l\n\022Cr"
  "eateTokenAccount\022\024\n\014main_address\030\001 \001(\t\022\032"
  "\n\022token_mint_address\030\002 \001(\t\022\025\n\rtoken_addr"
  "ess\030\003 \001(\t\022\r\n\005token\030\004 \001(\t\"\275\001\n\rTokenTransf"
  "er\022\032\n\022token_mint_address\030\001 \001(\t\022\034\n\024sender"
  "_token_address\030\002 \001(\t\022\037\n\027recipient_token_"
  "address\030\003 \001(\t\022\016\n\006amount\030\004 \001(\004\022\020\n\010decimal"
  "s\030\005 \001(\r\022\014\n\004memo\030\006 \001(\t\022\022\n\nreferences\030\007 \003("
  "\t\022\r\n\005token\030\010 \001(\t\"\346\001\n\026CreateAndTransferTo"
  "ken\022\036\n\026recipient_main_address\030\001 \001(\t\022\032\n\022t"
  "oken_mint_address\030\002 \001(\t\022\037\n\027recipient_tok"
  "en_address\030\003 \001(\t\022\034\n\024sender_token_address"
  "\030\004 \001(\t\022\016\n\006amount\030\005 \001(\004\022\020\n\010decimals\030\006 \001(\r"
  "\022\014\n\004memo\030\007 \001(\t\022\022\n\nreferences\030\010 \003(\t\022\r\n\005to"
  "ken\030\t \001(\t\"D\n\nAccountKey\022\016\n\006pubkey\030\001 \001(\t\022"
  "\021\n\tis_signer\030\002 \001(\010\022\023\n\013is_writable\030\003 \001(\010\""
  "Z\n\013Instruction\022)\n\004keys\030\001 \003(\0132\033.TW.Solana"
  ".Proto.AccountKey\022\022\n\nprogram_id\030\002 \001(\t\022\014\n"
  "\004data\030\003 \001(\014\"~\n\rMessageHeader\022\037\n\027num_requ"
  "ired_signatures\030\001 \001(\r\022$\n\034num_readonly_si"
  "gned_accounts\030\002 \001(\r\022&\n\036num_readonly_unsi"
  "gned_accounts\030\003 \001(\r\"Z\n\023CompiledInstructi"
  "on\022\030\n\020program_id_index\030\001 \001(\r\022\033\n\023account_"
  "key_indexes\030\002 \003(\r\022\014\n\004data\030\003 \001(\014\"^\n\023Addre"
  "ssTableLookups\022\023\n\013account_key\030\001 \001(\t\022\030\n\020w"
  "ritable_indexes\030\002 \003(\r\022\030\n\020readonly_indexe"
  "s\030\003 \003(\r\"\232\010\n\014SigningInput\022\023\n\013private_key\030"
  "\001 \001(\014\022\030\n\020recent_blockhash\030\002 \001(\t\0229\n\024trans"
  "fer_transaction\030\003 \001(\0132\031.TW.Solana.Proto."
  "TransferH\000\022D\n\032delegate_stake_transaction"
  "\030\004 \001(\0132\036.TW.Solana.Proto.DelegateStakeH\000"
  "\022H\n\034deactivate_stake_transaction\030\005 \001(\0132 "
  ".TW.Solana.Proto.DeactivateStakeH\000\022O\n de"
  "activate_all_stake_transaction\030\006 \001(\0132#.T"
  "W.Solana.Proto.DeactivateAllStakeH\000\022>\n\024w"
  "ithdraw_transaction\030\007 \001(\0132\036.TW.Solana.Pr"
  "oto.WithdrawStakeH\000\022E\n\030withdraw_all_tran"
  "saction\030\010 \001(\0132!.TW.Solana.Proto.Withdraw"
  "AllStakeH\000\022O\n create_token_account_trans"
  "action\030\t \001(\0132#.TW.Solana.Proto.CreateTok"
  "enAccountH\000\022D\n\032token_transfer_transactio"
  "n\030\n \001(\0132\036.TW.Solana.Proto.TokenTransferH"
  "\000\022X\n%create_and_transfer_token_transacti"
  "on\030\013 \001(\0132\'.TW.Solana.Proto.CreateAndTran"
  "sferTokenH\000\022\024\n\014from_address\030\014 \001(\t\022\022\n\nto_"
  "address\030\r \001(\t\022.\n\006header\030\016 \001(\0132\036.TW.Solan"
  "a.Proto.MessageHeader\022\033\n\023static_account_"
  "keys\030\017 \003(\t\022C\n\025compiled_instructions\030\020 \003("
  "\0132$.TW.Solana.Proto.CompiledInstruction\022"
  "2\n\014instructions\030\021 \003(\0132\034.TW.Solana.Proto."
  "Instruction\022C\n\025address_table_lookups\030\022 \003"
  "(\0132$.TW.Solana.Proto.AddressTableLookups"
  "B\022\n\020transaction_type\" \n\rSigningOutput\022\017\n"
  "\007encoded\030\001 \001(\tB\027\n\025wallet.core.jni.protob"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Solana_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Solana_2eproto_sccs[17] = {
  &scc_info_AccountKey_Solana_2eproto.base,
  &scc_info_AddressTableLookups_Solana_2eproto.base,
  &scc_info_CompiledInstruction_Solana_2eproto.base,
  &scc_info_CreateAndTransferToken_Solana_2eproto.base,
  &scc_info_CreateTokenAccount_Solana_2eproto.base,
  &scc_info_DeactivateAllStake_Solana_2eproto.base,
  &scc_info_DeactivateStake_Solana_2eproto.base,
  &scc_info_DelegateStake_Solana_2eproto.base,
  &scc_info_Instruction_Solana_2eproto.base,
  &scc_info_MessageHeader_Solana_2eproto.base,
  &scc_info_SigningInput_Solana_2eproto.base,
  &scc_info_SigningOutput_Solana_2eproto.base,
  &scc_info_StakeAccountValue_Solana_2eproto.base,
  &scc_info_TokenTransfer_Solana_2eproto.base,
  &scc_info_Transfer_Solana_2eproto.base,
  &scc_info_WithdrawAllStake_Solana_2eproto.base,
  &scc_info_WithdrawStake_Solana_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Solana_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Solana_2eproto = {
  false, false, descriptor_table_protodef_Solana_2eproto, "Solana.proto", 2607,
  &descriptor_table_Solana_2eproto_once, descriptor_table_Solana_2eproto_sccs, descriptor_table_Solana_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_Solana_2eproto::offsets,
  file_level_metadata_Solana_2eproto, 17, file_level_enum_descriptors_Solana_2eproto, file_level_service_descriptors_Solana_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Solana_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Solana_2eproto)), true);
namespace TW {
namespace Solana {
namespace Proto {

// ===================================================================

class Transfer::_Internal {
 public:
};

Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  references_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      references_(from.references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient().empty()) {
    recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient(), 
      GetArena());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.Transfer)
}

void Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transfer_Solana_2eproto.base);
  recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_ULONGLONG(0);
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recipient_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transfer_Solana_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  recipient_.ClearToEmpty();
  memo_.ClearToEmpty();
  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string recipient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recipient();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.Transfer.recipient"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.Transfer.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string references = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.Transfer.references"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string recipient = 1;
  if (this->recipient().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient().data(), static_cast<int>(this->_internal_recipient().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.Transfer.recipient");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recipient(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  // string memo = 3;
  if (this->memo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.Transfer.memo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memo(), target);
  }

  // repeated string references = 4;
  for (int i = 0, n = this->_internal_references_size(); i < n; i++) {
    const auto& s = this->_internal_references(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.Transfer.references");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string references = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(references_.size());
  for (int i = 0, n = references_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      references_.Get(i));
  }

  // string recipient = 1;
  if (this->recipient().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient());
  }

  // string memo = 3;
  if (this->memo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  if (from.recipient().size() > 0) {
    _internal_set_recipient(from._internal_recipient());
  }
  if (from.memo().size() > 0) {
    _internal_set_memo(from._internal_memo());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  references_.InternalSwap(&other->references_);
  recipient_.Swap(&other->recipient_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memo_.Swap(&other->memo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DelegateStake::_Internal {
 public:
};

DelegateStake::DelegateStake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.DelegateStake)
}
DelegateStake::DelegateStake(const DelegateStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  validator_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_pubkey().empty()) {
    validator_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_pubkey(), 
      GetArena());
  }
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stake_account().empty()) {
    stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake_account(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.DelegateStake)
}

void DelegateStake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegateStake_Solana_2eproto.base);
  validator_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_ULONGLONG(0);
}

DelegateStake::~DelegateStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.DelegateStake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegateStake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  validator_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stake_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegateStake::ArenaDtor(void* object) {
  DelegateStake* _this = reinterpret_cast< DelegateStake* >(object);
  (void)_this;
}
void DelegateStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegateStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegateStake& DelegateStake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegateStake_Solana_2eproto.base);
  return *internal_default_instance();
}


void DelegateStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.DelegateStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validator_pubkey_.ClearToEmpty();
  stake_account_.ClearToEmpty();
  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string validator_pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_validator_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.DelegateStake.validator_pubkey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stake_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stake_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.DelegateStake.stake_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegateStake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.DelegateStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_pubkey = 1;
  if (this->validator_pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_pubkey().data(), static_cast<int>(this->_internal_validator_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.DelegateStake.validator_pubkey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_validator_pubkey(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  // string stake_account = 3;
  if (this->stake_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stake_account().data(), static_cast<int>(this->_internal_stake_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.DelegateStake.stake_account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stake_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.DelegateStake)
  return target;
}

size_t DelegateStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.DelegateStake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validator_pubkey = 1;
  if (this->validator_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_pubkey());
  }

  // string stake_account = 3;
  if (this->stake_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stake_account());
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegateStake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.DelegateStake)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegateStake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegateStake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.DelegateStake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.DelegateStake)
    MergeFrom(*source);
  }
}

void DelegateStake::MergeFrom(const DelegateStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.DelegateStake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.validator_pubkey().size() > 0) {
    _internal_set_validator_pubkey(from._internal_validator_pubkey());
  }
  if (from.stake_account().size() > 0) {
    _internal_set_stake_account(from._internal_stake_account());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void DelegateStake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.DelegateStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegateStake::CopyFrom(const DelegateStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.DelegateStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateStake::IsInitialized() const {
  return true;
}

void DelegateStake::InternalSwap(DelegateStake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validator_pubkey_.Swap(&other->validator_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stake_account_.Swap(&other->stake_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateStake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeactivateStake::_Internal {
 public:
};

DeactivateStake::DeactivateStake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.DeactivateStake)
}
DeactivateStake::DeactivateStake(const DeactivateStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stake_account().empty()) {
    stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake_account(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.DeactivateStake)
}

void DeactivateStake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeactivateStake_Solana_2eproto.base);
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeactivateStake::~DeactivateStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.DeactivateStake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeactivateStake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stake_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeactivateStake::ArenaDtor(void* object) {
  DeactivateStake* _this = reinterpret_cast< DeactivateStake* >(object);
  (void)_this;
}
void DeactivateStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeactivateStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeactivateStake& DeactivateStake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeactivateStake_Solana_2eproto.base);
  return *internal_default_instance();
}


void DeactivateStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.DeactivateStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeactivateStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stake_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stake_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.DeactivateStake.stake_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeactivateStake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.DeactivateStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stake_account = 1;
  if (this->stake_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stake_account().data(), static_cast<int>(this->_internal_stake_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.DeactivateStake.stake_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stake_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.DeactivateStake)
  return target;
}

size_t DeactivateStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.DeactivateStake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stake_account = 1;
  if (this->stake_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stake_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeactivateStake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.DeactivateStake)
  GOOGLE_DCHECK_NE(&from, this);
  const DeactivateStake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeactivateStake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.DeactivateStake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.DeactivateStake)
    MergeFrom(*source);
  }
}

void DeactivateStake::MergeFrom(const DeactivateStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.DeactivateStake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stake_account().size() > 0) {
    _internal_set_stake_account(from._internal_stake_account());
  }
}

void DeactivateStake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.DeactivateStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeactivateStake::CopyFrom(const DeactivateStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.DeactivateStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeactivateStake::IsInitialized() const {
  return true;
}

void DeactivateStake::InternalSwap(DeactivateStake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stake_account_.Swap(&other->stake_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeactivateStake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeactivateAllStake::_Internal {
 public:
};

DeactivateAllStake::DeactivateAllStake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stake_accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.DeactivateAllStake)
}
DeactivateAllStake::DeactivateAllStake(const DeactivateAllStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stake_accounts_(from.stake_accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.DeactivateAllStake)
}

void DeactivateAllStake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeactivateAllStake_Solana_2eproto.base);
}

DeactivateAllStake::~DeactivateAllStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.DeactivateAllStake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeactivateAllStake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeactivateAllStake::ArenaDtor(void* object) {
  DeactivateAllStake* _this = reinterpret_cast< DeactivateAllStake* >(object);
  (void)_this;
}
void DeactivateAllStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeactivateAllStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeactivateAllStake& DeactivateAllStake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeactivateAllStake_Solana_2eproto.base);
  return *internal_default_instance();
}


void DeactivateAllStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.DeactivateAllStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeactivateAllStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string stake_accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stake_accounts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.DeactivateAllStake.stake_accounts"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeactivateAllStake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.DeactivateAllStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string stake_accounts = 1;
  for (int i = 0, n = this->_internal_stake_accounts_size(); i < n; i++) {
    const auto& s = this->_internal_stake_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.DeactivateAllStake.stake_accounts");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.DeactivateAllStake)
  return target;
}

size_t DeactivateAllStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.DeactivateAllStake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stake_accounts = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stake_accounts_.size());
  for (int i = 0, n = stake_accounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stake_accounts_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeactivateAllStake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.DeactivateAllStake)
  GOOGLE_DCHECK_NE(&from, this);
  const DeactivateAllStake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeactivateAllStake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.DeactivateAllStake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.DeactivateAllStake)
    MergeFrom(*source);
  }
}

void DeactivateAllStake::MergeFrom(const DeactivateAllStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.DeactivateAllStake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stake_accounts_.MergeFrom(from.stake_accounts_);
}

void DeactivateAllStake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.DeactivateAllStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeactivateAllStake::CopyFrom(const DeactivateAllStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.DeactivateAllStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeactivateAllStake::IsInitialized() const {
  return true;
}

void DeactivateAllStake::InternalSwap(DeactivateAllStake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stake_accounts_.InternalSwap(&other->stake_accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeactivateAllStake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawStake::_Internal {
 public:
};

WithdrawStake::WithdrawStake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.WithdrawStake)
}
WithdrawStake::WithdrawStake(const WithdrawStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stake_account().empty()) {
    stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake_account(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.WithdrawStake)
}

void WithdrawStake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawStake_Solana_2eproto.base);
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_ULONGLONG(0);
}

WithdrawStake::~WithdrawStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.WithdrawStake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawStake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stake_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawStake::ArenaDtor(void* object) {
  WithdrawStake* _this = reinterpret_cast< WithdrawStake* >(object);
  (void)_this;
}
void WithdrawStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawStake& WithdrawStake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawStake_Solana_2eproto.base);
  return *internal_default_instance();
}


void WithdrawStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.WithdrawStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_account_.ClearToEmpty();
  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stake_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stake_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.WithdrawStake.stake_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawStake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.WithdrawStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stake_account = 1;
  if (this->stake_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stake_account().data(), static_cast<int>(this->_internal_stake_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.WithdrawStake.stake_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stake_account(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.WithdrawStake)
  return target;
}

size_t WithdrawStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.WithdrawStake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stake_account = 1;
  if (this->stake_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stake_account());
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawStake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.WithdrawStake)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawStake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawStake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.WithdrawStake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.WithdrawStake)
    MergeFrom(*source);
  }
}

void WithdrawStake::MergeFrom(const WithdrawStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.WithdrawStake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stake_account().size() > 0) {
    _internal_set_stake_account(from._internal_stake_account());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void WithdrawStake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.WithdrawStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawStake::CopyFrom(const WithdrawStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.WithdrawStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawStake::IsInitialized() const {
  return true;
}

void WithdrawStake::InternalSwap(WithdrawStake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stake_account_.Swap(&other->stake_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawStake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StakeAccountValue::_Internal {
 public:
};

StakeAccountValue::StakeAccountValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.StakeAccountValue)
}
StakeAccountValue::StakeAccountValue(const StakeAccountValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stake_account().empty()) {
    stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake_account(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.StakeAccountValue)
}

void StakeAccountValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StakeAccountValue_Solana_2eproto.base);
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_ULONGLONG(0);
}

StakeAccountValue::~StakeAccountValue() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.StakeAccountValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StakeAccountValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stake_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StakeAccountValue::ArenaDtor(void* object) {
  StakeAccountValue* _this = reinterpret_cast< StakeAccountValue* >(object);
  (void)_this;
}
void StakeAccountValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StakeAccountValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StakeAccountValue& StakeAccountValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StakeAccountValue_Solana_2eproto.base);
  return *internal_default_instance();
}


void StakeAccountValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.StakeAccountValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_account_.ClearToEmpty();
  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakeAccountValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stake_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stake_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.StakeAccountValue.stake_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StakeAccountValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.StakeAccountValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stake_account = 1;
  if (this->stake_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stake_account().data(), static_cast<int>(this->_internal_stake_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.StakeAccountValue.stake_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stake_account(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.StakeAccountValue)
  return target;
}

size_t StakeAccountValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.StakeAccountValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stake_account = 1;
  if (this->stake_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stake_account());
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StakeAccountValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.StakeAccountValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StakeAccountValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StakeAccountValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.StakeAccountValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.StakeAccountValue)
    MergeFrom(*source);
  }
}

void StakeAccountValue::MergeFrom(const StakeAccountValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.StakeAccountValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stake_account().size() > 0) {
    _internal_set_stake_account(from._internal_stake_account());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void StakeAccountValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.StakeAccountValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StakeAccountValue::CopyFrom(const StakeAccountValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.StakeAccountValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakeAccountValue::IsInitialized() const {
  return true;
}

void StakeAccountValue::InternalSwap(StakeAccountValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stake_account_.Swap(&other->stake_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StakeAccountValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawAllStake::_Internal {
 public:
};

WithdrawAllStake::WithdrawAllStake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stake_accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.WithdrawAllStake)
}
WithdrawAllStake::WithdrawAllStake(const WithdrawAllStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stake_accounts_(from.stake_accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.WithdrawAllStake)
}

void WithdrawAllStake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawAllStake_Solana_2eproto.base);
}

WithdrawAllStake::~WithdrawAllStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.WithdrawAllStake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawAllStake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WithdrawAllStake::ArenaDtor(void* object) {
  WithdrawAllStake* _this = reinterpret_cast< WithdrawAllStake* >(object);
  (void)_this;
}
void WithdrawAllStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawAllStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawAllStake& WithdrawAllStake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawAllStake_Solana_2eproto.base);
  return *internal_default_instance();
}


void WithdrawAllStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.WithdrawAllStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawAllStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stake_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawAllStake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.WithdrawAllStake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stake_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stake_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.WithdrawAllStake)
  return target;
}

size_t WithdrawAllStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.WithdrawAllStake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
  total_size += 1UL * this->_internal_stake_accounts_size();
  for (const auto& msg : this->stake_accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawAllStake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.WithdrawAllStake)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawAllStake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawAllStake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.WithdrawAllStake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.WithdrawAllStake)
    MergeFrom(*source);
  }
}

void WithdrawAllStake::MergeFrom(const WithdrawAllStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.WithdrawAllStake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stake_accounts_.MergeFrom(from.stake_accounts_);
}

void WithdrawAllStake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.WithdrawAllStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawAllStake::CopyFrom(const WithdrawAllStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.WithdrawAllStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawAllStake::IsInitialized() const {
  return true;
}

void WithdrawAllStake::InternalSwap(WithdrawAllStake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stake_accounts_.InternalSwap(&other->stake_accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawAllStake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateTokenAccount::_Internal {
 public:
};

CreateTokenAccount::CreateTokenAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.CreateTokenAccount)
}
CreateTokenAccount::CreateTokenAccount(const CreateTokenAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  main_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_main_address().empty()) {
    main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_main_address(), 
      GetArena());
  }
  token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_mint_address().empty()) {
    token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_mint_address(), 
      GetArena());
  }
  token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_address().empty()) {
    token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_address(), 
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.CreateTokenAccount)
}

void CreateTokenAccount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTokenAccount_Solana_2eproto.base);
  main_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateTokenAccount::~CreateTokenAccount() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.CreateTokenAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTokenAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  main_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_mint_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateTokenAccount::ArenaDtor(void* object) {
  CreateTokenAccount* _this = reinterpret_cast< CreateTokenAccount* >(object);
  (void)_this;
}
void CreateTokenAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTokenAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTokenAccount& CreateTokenAccount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTokenAccount_Solana_2eproto.base);
  return *internal_default_instance();
}


void CreateTokenAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.CreateTokenAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  main_address_.ClearToEmpty();
  token_mint_address_.ClearToEmpty();
  token_address_.ClearToEmpty();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTokenAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string main_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_main_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateTokenAccount.main_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_mint_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_mint_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateTokenAccount.token_mint_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateTokenAccount.token_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateTokenAccount.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTokenAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.CreateTokenAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string main_address = 1;
  if (this->main_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_main_address().data(), static_cast<int>(this->_internal_main_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateTokenAccount.main_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_main_address(), target);
  }

  // string token_mint_address = 2;
  if (this->token_mint_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_mint_address().data(), static_cast<int>(this->_internal_token_mint_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateTokenAccount.token_mint_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_mint_address(), target);
  }

  // string token_address = 3;
  if (this->token_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_address().data(), static_cast<int>(this->_internal_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateTokenAccount.token_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token_address(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateTokenAccount.token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.CreateTokenAccount)
  return target;
}

size_t CreateTokenAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.CreateTokenAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string main_address = 1;
  if (this->main_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main_address());
  }

  // string token_mint_address = 2;
  if (this->token_mint_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_mint_address());
  }

  // string token_address = 3;
  if (this->token_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_address());
  }

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTokenAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.CreateTokenAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTokenAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTokenAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.CreateTokenAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.CreateTokenAccount)
    MergeFrom(*source);
  }
}

void CreateTokenAccount::MergeFrom(const CreateTokenAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.CreateTokenAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.main_address().size() > 0) {
    _internal_set_main_address(from._internal_main_address());
  }
  if (from.token_mint_address().size() > 0) {
    _internal_set_token_mint_address(from._internal_token_mint_address());
  }
  if (from.token_address().size() > 0) {
    _internal_set_token_address(from._internal_token_address());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void CreateTokenAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.CreateTokenAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTokenAccount::CopyFrom(const CreateTokenAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.CreateTokenAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTokenAccount::IsInitialized() const {
  return true;
}

void CreateTokenAccount::InternalSwap(CreateTokenAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  main_address_.Swap(&other->main_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_mint_address_.Swap(&other->token_mint_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_address_.Swap(&other->token_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTokenAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TokenTransfer::_Internal {
 public:
};

TokenTransfer::TokenTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  references_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.TokenTransfer)
}
TokenTransfer::TokenTransfer(const TokenTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      references_(from.references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_mint_address().empty()) {
    token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_mint_address(), 
      GetArena());
  }
  sender_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_token_address().empty()) {
    sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_token_address(), 
      GetArena());
  }
  recipient_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_token_address().empty()) {
    recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient_token_address(), 
      GetArena());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&decimals_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.TokenTransfer)
}

void TokenTransfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenTransfer_Solana_2eproto.base);
  token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&decimals_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
}

TokenTransfer::~TokenTransfer() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.TokenTransfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_mint_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenTransfer::ArenaDtor(void* object) {
  TokenTransfer* _this = reinterpret_cast< TokenTransfer* >(object);
  (void)_this;
}
void TokenTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenTransfer& TokenTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenTransfer_Solana_2eproto.base);
  return *internal_default_instance();
}


void TokenTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.TokenTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  token_mint_address_.ClearToEmpty();
  sender_token_address_.ClearToEmpty();
  recipient_token_address_.ClearToEmpty();
  memo_.ClearToEmpty();
  token_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decimals_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token_mint_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token_mint_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.token_mint_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_token_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sender_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.sender_token_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient_token_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recipient_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.recipient_token_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 decimals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string references = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.references"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.TokenTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token_mint_address = 1;
  if (this->token_mint_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_mint_address().data(), static_cast<int>(this->_internal_token_mint_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.token_mint_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_mint_address(), target);
  }

  // string sender_token_address = 2;
  if (this->sender_token_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_token_address().data(), static_cast<int>(this->_internal_sender_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.sender_token_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender_token_address(), target);
  }

  // string recipient_token_address = 3;
  if (this->recipient_token_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_token_address().data(), static_cast<int>(this->_internal_recipient_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.recipient_token_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recipient_token_address(), target);
  }

  // uint64 amount = 4;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount(), target);
  }

  // uint32 decimals = 5;
  if (this->decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_decimals(), target);
  }

  // string memo = 6;
  if (this->memo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.memo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_memo(), target);
  }

  // repeated string references = 7;
  for (int i = 0, n = this->_internal_references_size(); i < n; i++) {
    const auto& s = this->_internal_references(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.references");
    target = stream->WriteString(7, s, target);
  }

  // string token = 8;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.token");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.TokenTransfer)
  return target;
}

size_t TokenTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.TokenTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string references = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(references_.size());
  for (int i = 0, n = references_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      references_.Get(i));
  }

  // string token_mint_address = 1;
  if (this->token_mint_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_mint_address());
  }

  // string sender_token_address = 2;
  if (this->sender_token_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_token_address());
  }

  // string recipient_token_address = 3;
  if (this->recipient_token_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_token_address());
  }

  // string memo = 6;
  if (this->memo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // string token = 8;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 amount = 4;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // uint32 decimals = 5;
  if (this->decimals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimals());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.TokenTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.TokenTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.TokenTransfer)
    MergeFrom(*source);
  }
}

void TokenTransfer::MergeFrom(const TokenTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.TokenTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  if (from.token_mint_address().size() > 0) {
    _internal_set_token_mint_address(from._internal_token_mint_address());
  }
  if (from.sender_token_address().size() > 0) {
    _internal_set_sender_token_address(from._internal_sender_token_address());
  }
  if (from.recipient_token_address().size() > 0) {
    _internal_set_recipient_token_address(from._internal_recipient_token_address());
  }
  if (from.memo().size() > 0) {
    _internal_set_memo(from._internal_memo());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.decimals() != 0) {
    _internal_set_decimals(from._internal_decimals());
  }
}

void TokenTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.TokenTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenTransfer::CopyFrom(const TokenTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.TokenTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenTransfer::IsInitialized() const {
  return true;
}

void TokenTransfer::InternalSwap(TokenTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  references_.InternalSwap(&other->references_);
  token_mint_address_.Swap(&other->token_mint_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_token_address_.Swap(&other->sender_token_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_token_address_.Swap(&other->recipient_token_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memo_.Swap(&other->memo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenTransfer, decimals_)
      + sizeof(TokenTransfer::decimals_)
      - PROTOBUF_FIELD_OFFSET(TokenTransfer, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateAndTransferToken::_Internal {
 public:
};

CreateAndTransferToken::CreateAndTransferToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  references_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.CreateAndTransferToken)
}
CreateAndTransferToken::CreateAndTransferToken(const CreateAndTransferToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      references_(from.references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_main_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_main_address().empty()) {
    recipient_main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient_main_address(), 
      GetArena());
  }
  token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_mint_address().empty()) {
    token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_mint_address(), 
      GetArena());
  }
  recipient_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_token_address().empty()) {
    recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient_token_address(), 
      GetArena());
  }
  sender_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_token_address().empty()) {
    sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_token_address(), 
      GetArena());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&decimals_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.CreateAndTransferToken)
}

void CreateAndTransferToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAndTransferToken_Solana_2eproto.base);
  recipient_main_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&decimals_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
}

CreateAndTransferToken::~CreateAndTransferToken() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.CreateAndTransferToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAndTransferToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recipient_main_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_mint_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAndTransferToken::ArenaDtor(void* object) {
  CreateAndTransferToken* _this = reinterpret_cast< CreateAndTransferToken* >(object);
  (void)_this;
}
void CreateAndTransferToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAndTransferToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAndTransferToken& CreateAndTransferToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAndTransferToken_Solana_2eproto.base);
  return *internal_default_instance();
}


void CreateAndTransferToken::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.CreateAndTransferToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  recipient_main_address_.ClearToEmpty();
  token_mint_address_.ClearToEmpty();
  recipient_token_address_.ClearToEmpty();
  sender_token_address_.ClearToEmpty();
  memo_.ClearToEmpty();
  token_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decimals_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAndTransferToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string recipient_main_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recipient_main_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.recipient_main_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_mint_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_mint_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.token_mint_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient_token_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recipient_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.recipient_token_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_token_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sender_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.sender_token_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 decimals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string references = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.references"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAndTransferToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.CreateAndTransferToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string recipient_main_address = 1;
  if (this->recipient_main_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_main_address().data(), static_cast<int>(this->_internal_recipient_main_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.recipient_main_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recipient_main_address(), target);
  }

  // string token_mint_address = 2;
  if (this->token_mint_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_mint_address().data(), static_cast<int>(this->_internal_token_mint_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.token_mint_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_mint_address(), target);
  }

  // string recipient_token_address = 3;
  if (this->recipient_token_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_token_address().data(), static_cast<int>(this->_internal_recipient_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.recipient_token_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recipient_token_address(), target);
  }

  // string sender_token_address = 4;
  if (this->sender_token_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_token_address().data(), static_cast<int>(this->_internal_sender_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.sender_token_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_token_address(), target);
  }

  // uint64 amount = 5;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_amount(), target);
  }

  // uint32 decimals = 6;
  if (this->decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_decimals(), target);
  }

  // string memo = 7;
  if (this->memo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.memo");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_memo(), target);
  }

  // repeated string references = 8;
  for (int i = 0, n = this->_internal_references_size(); i < n; i++) {
    const auto& s = this->_internal_references(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.references");
    target = stream->WriteString(8, s, target);
  }

  // string token = 9;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.token");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.CreateAndTransferToken)
  return target;
}

size_t CreateAndTransferToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.CreateAndTransferToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string references = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(references_.size());
  for (int i = 0, n = references_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      references_.Get(i));
  }

  // string recipient_main_address = 1;
  if (this->recipient_main_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_main_address());
  }

  // string token_mint_address = 2;
  if (this->token_mint_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_mint_address());
  }

  // string recipient_token_address = 3;
  if (this->recipient_token_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_token_address());
  }

  // string sender_token_address = 4;
  if (this->sender_token_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_token_address());
  }

  // string memo = 7;
  if (this->memo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // string token = 9;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 amount = 5;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // uint32 decimals = 6;
  if (this->decimals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimals());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAndTransferToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.CreateAndTransferToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAndTransferToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAndTransferToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.CreateAndTransferToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.CreateAndTransferToken)
    MergeFrom(*source);
  }
}

void CreateAndTransferToken::MergeFrom(const CreateAndTransferToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.CreateAndTransferToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  if (from.recipient_main_address().size() > 0) {
    _internal_set_recipient_main_address(from._internal_recipient_main_address());
  }
  if (from.token_mint_address().size() > 0) {
    _internal_set_token_mint_address(from._internal_token_mint_address());
  }
  if (from.recipient_token_address().size() > 0) {
    _internal_set_recipient_token_address(from._internal_recipient_token_address());
  }
  if (from.sender_token_address().size() > 0) {
    _internal_set_sender_token_address(from._internal_sender_token_address());
  }
  if (from.memo().size() > 0) {
    _internal_set_memo(from._internal_memo());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.decimals() != 0) {
    _internal_set_decimals(from._internal_decimals());
  }
}

void CreateAndTransferToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.CreateAndTransferToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAndTransferToken::CopyFrom(const CreateAndTransferToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.CreateAndTransferToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAndTransferToken::IsInitialized() const {
  return true;
}

void CreateAndTransferToken::InternalSwap(CreateAndTransferToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  references_.InternalSwap(&other->references_);
  recipient_main_address_.Swap(&other->recipient_main_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_mint_address_.Swap(&other->token_mint_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_token_address_.Swap(&other->recipient_token_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_token_address_.Swap(&other->sender_token_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memo_.Swap(&other->memo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateAndTransferToken, decimals_)
      + sizeof(CreateAndTransferToken::decimals_)
      - PROTOBUF_FIELD_OFFSET(CreateAndTransferToken, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAndTransferToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountKey::_Internal {
 public:
};

AccountKey::AccountKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.AccountKey)
}
AccountKey::AccountKey(const AccountKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pubkey(), 
      GetArena());
  }
  ::memcpy(&is_signer_, &from.is_signer_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_writable_) -
    reinterpret_cast<char*>(&is_signer_)) + sizeof(is_writable_));
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.AccountKey)
}

void AccountKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountKey_Solana_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_signer_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_writable_) -
      reinterpret_cast<char*>(&is_signer_)) + sizeof(is_writable_));
}

AccountKey::~AccountKey() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.AccountKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountKey::ArenaDtor(void* object) {
  AccountKey* _this = reinterpret_cast< AccountKey* >(object);
  (void)_this;
}
void AccountKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountKey& AccountKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountKey_Solana_2eproto.base);
  return *internal_default_instance();
}


void AccountKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.AccountKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmpty();
  ::memset(&is_signer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_writable_) -
      reinterpret_cast<char*>(&is_signer_)) + sizeof(is_writable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.AccountKey.pubkey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_signer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_signer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_writable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_writable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.AccountKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pubkey = 1;
  if (this->pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pubkey().data(), static_cast<int>(this->_internal_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.AccountKey.pubkey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // bool is_signer = 2;
  if (this->is_signer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_signer(), target);
  }

  // bool is_writable = 3;
  if (this->is_writable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_writable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.AccountKey)
  return target;
}

size_t AccountKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.AccountKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pubkey());
  }

  // bool is_signer = 2;
  if (this->is_signer() != 0) {
    total_size += 1 + 1;
  }

  // bool is_writable = 3;
  if (this->is_writable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.AccountKey)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.AccountKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.AccountKey)
    MergeFrom(*source);
  }
}

void AccountKey::MergeFrom(const AccountKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.AccountKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {
    _internal_set_pubkey(from._internal_pubkey());
  }
  if (from.is_signer() != 0) {
    _internal_set_is_signer(from._internal_is_signer());
  }
  if (from.is_writable() != 0) {
    _internal_set_is_writable(from._internal_is_writable());
  }
}

void AccountKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.AccountKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountKey::CopyFrom(const AccountKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.AccountKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountKey::IsInitialized() const {
  return true;
}

void AccountKey::InternalSwap(AccountKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountKey, is_writable_)
      + sizeof(AccountKey::is_writable_)
      - PROTOBUF_FIELD_OFFSET(AccountKey, is_signer_)>(
          reinterpret_cast<char*>(&is_signer_),
          reinterpret_cast<char*>(&other->is_signer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Instruction::_Internal {
 public:
};

Instruction::Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.Instruction)
}
Instruction::Instruction(const Instruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  program_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_program_id().empty()) {
    program_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_program_id(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.Instruction)
}

void Instruction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Instruction_Solana_2eproto.base);
  program_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Instruction::~Instruction() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.Instruction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Instruction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  program_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Instruction::ArenaDtor(void* object) {
  Instruction* _this = reinterpret_cast< Instruction* >(object);
  (void)_this;
}
void Instruction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Instruction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Instruction& Instruction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Instruction_Solana_2eproto.base);
  return *internal_default_instance();
}


void Instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.Instruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  program_id_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instruction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TW.Solana.Proto.AccountKey keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string program_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_program_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.Instruction.program_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Instruction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.Instruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.Solana.Proto.AccountKey keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_keys(i), target, stream);
  }

  // string program_id = 2;
  if (this->program_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_program_id().data(), static_cast<int>(this->_internal_program_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.Instruction.program_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_program_id(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.Instruction)
  return target;
}

size_t Instruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.Instruction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Solana.Proto.AccountKey keys = 1;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string program_id = 2;
  if (this->program_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_program_id());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Instruction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.Instruction)
  GOOGLE_DCHECK_NE(&from, this);
  const Instruction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Instruction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.Instruction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.Instruction)
    MergeFrom(*source);
  }
}

void Instruction::MergeFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.Instruction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.program_id().size() > 0) {
    _internal_set_program_id(from._internal_program_id());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void Instruction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.Instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instruction::CopyFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.Instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instruction::IsInitialized() const {
  return true;
}

void Instruction::InternalSwap(Instruction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  program_id_.Swap(&other->program_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Instruction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageHeader::_Internal {
 public:
};

MessageHeader::MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_required_signatures_, &from.num_required_signatures_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_readonly_unsigned_accounts_) -
    reinterpret_cast<char*>(&num_required_signatures_)) + sizeof(num_readonly_unsigned_accounts_));
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.MessageHeader)
}

void MessageHeader::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_required_signatures_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_readonly_unsigned_accounts_) -
      reinterpret_cast<char*>(&num_required_signatures_)) + sizeof(num_readonly_unsigned_accounts_));
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.MessageHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessageHeader::ArenaDtor(void* object) {
  MessageHeader* _this = reinterpret_cast< MessageHeader* >(object);
  (void)_this;
}
void MessageHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageHeader& MessageHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageHeader_Solana_2eproto.base);
  return *internal_default_instance();
}


void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_required_signatures_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_readonly_unsigned_accounts_) -
      reinterpret_cast<char*>(&num_required_signatures_)) + sizeof(num_readonly_unsigned_accounts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_required_signatures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_required_signatures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_readonly_signed_accounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_readonly_signed_accounts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_readonly_unsigned_accounts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_readonly_unsigned_accounts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_required_signatures = 1;
  if (this->num_required_signatures() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_required_signatures(), target);
  }

  // uint32 num_readonly_signed_accounts = 2;
  if (this->num_readonly_signed_accounts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_readonly_signed_accounts(), target);
  }

  // uint32 num_readonly_unsigned_accounts = 3;
  if (this->num_readonly_unsigned_accounts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_readonly_unsigned_accounts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.MessageHeader)
  return target;
}

size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.MessageHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_required_signatures = 1;
  if (this->num_required_signatures() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_required_signatures());
  }

  // uint32 num_readonly_signed_accounts = 2;
  if (this->num_readonly_signed_accounts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_readonly_signed_accounts());
  }

  // uint32 num_readonly_unsigned_accounts = 3;
  if (this->num_readonly_unsigned_accounts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_readonly_unsigned_accounts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.MessageHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.MessageHeader)
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_required_signatures() != 0) {
    _internal_set_num_required_signatures(from._internal_num_required_signatures());
  }
  if (from.num_readonly_signed_accounts() != 0) {
    _internal_set_num_readonly_signed_accounts(from._internal_num_readonly_signed_accounts());
  }
  if (from.num_readonly_unsigned_accounts() != 0) {
    _internal_set_num_readonly_unsigned_accounts(from._internal_num_readonly_unsigned_accounts());
  }
}

void MessageHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  return true;
}

void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageHeader, num_readonly_unsigned_accounts_)
      + sizeof(MessageHeader::num_readonly_unsigned_accounts_)
      - PROTOBUF_FIELD_OFFSET(MessageHeader, num_required_signatures_)>(
          reinterpret_cast<char*>(&num_required_signatures_),
          reinterpret_cast<char*>(&other->num_required_signatures_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompiledInstruction::_Internal {
 public:
};

CompiledInstruction::CompiledInstruction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_key_indexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.CompiledInstruction)
}
CompiledInstruction::CompiledInstruction(const CompiledInstruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_key_indexes_(from.account_key_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  program_id_index_ = from.program_id_index_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.CompiledInstruction)
}

void CompiledInstruction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompiledInstruction_Solana_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_id_index_ = 0u;
}

CompiledInstruction::~CompiledInstruction() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.CompiledInstruction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompiledInstruction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompiledInstruction::ArenaDtor(void* object) {
  CompiledInstruction* _this = reinterpret_cast< CompiledInstruction* >(object);
  (void)_this;
}
void CompiledInstruction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompiledInstruction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompiledInstruction& CompiledInstruction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompiledInstruction_Solana_2eproto.base);
  return *internal_default_instance();
}


void CompiledInstruction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.CompiledInstruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_key_indexes_.Clear();
  data_.ClearToEmpty();
  program_id_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompiledInstruction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 program_id_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          program_id_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_key_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_key_indexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_account_key_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompiledInstruction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.CompiledInstruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 program_id_index = 1;
  if (this->program_id_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_program_id_index(), target);
  }

  // repeated uint32 account_key_indexes = 2;
  {
    int byte_size = _account_key_indexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_account_key_indexes(), byte_size, target);
    }
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.CompiledInstruction)
  return target;
}

size_t CompiledInstruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.CompiledInstruction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_key_indexes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_key_indexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _account_key_indexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 program_id_index = 1;
  if (this->program_id_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_program_id_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompiledInstruction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.CompiledInstruction)
  GOOGLE_DCHECK_NE(&from, this);
  const CompiledInstruction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompiledInstruction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.CompiledInstruction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.CompiledInstruction)
    MergeFrom(*source);
  }
}

void CompiledInstruction::MergeFrom(const CompiledInstruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.CompiledInstruction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_key_indexes_.MergeFrom(from.account_key_indexes_);
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.program_id_index() != 0) {
    _internal_set_program_id_index(from._internal_program_id_index());
  }
}

void CompiledInstruction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.CompiledInstruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompiledInstruction::CopyFrom(const CompiledInstruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.CompiledInstruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompiledInstruction::IsInitialized() const {
  return true;
}

void CompiledInstruction::InternalSwap(CompiledInstruction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_key_indexes_.InternalSwap(&other->account_key_indexes_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(program_id_index_, other->program_id_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompiledInstruction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddressTableLookups::_Internal {
 public:
};

AddressTableLookups::AddressTableLookups(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  writable_indexes_(arena),
  readonly_indexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.AddressTableLookups)
}
AddressTableLookups::AddressTableLookups(const AddressTableLookups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      writable_indexes_(from.writable_indexes_),
      readonly_indexes_(from.readonly_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_key().empty()) {
    account_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.AddressTableLookups)
}

void AddressTableLookups::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddressTableLookups_Solana_2eproto.base);
  account_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddressTableLookups::~AddressTableLookups() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.AddressTableLookups)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddressTableLookups::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddressTableLookups::ArenaDtor(void* object) {
  AddressTableLookups* _this = reinterpret_cast< AddressTableLookups* >(object);
  (void)_this;
}
void AddressTableLookups::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressTableLookups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddressTableLookups& AddressTableLookups::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddressTableLookups_Solana_2eproto.base);
  return *internal_default_instance();
}


void AddressTableLookups::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.AddressTableLookups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  writable_indexes_.Clear();
  readonly_indexes_.Clear();
  account_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressTableLookups::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.AddressTableLookups.account_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 writable_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_writable_indexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_writable_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 readonly_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_readonly_indexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_readonly_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressTableLookups::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.AddressTableLookups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_key = 1;
  if (this->account_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_key().data(), static_cast<int>(this->_internal_account_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.AddressTableLookups.account_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_key(), target);
  }

  // repeated uint32 writable_indexes = 2;
  {
    int byte_size = _writable_indexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_writable_indexes(), byte_size, target);
    }
  }

  // repeated uint32 readonly_indexes = 3;
  {
    int byte_size = _readonly_indexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_readonly_indexes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.AddressTableLookups)
  return target;
}

size_t AddressTableLookups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.AddressTableLookups)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 writable_indexes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->writable_indexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _writable_indexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 readonly_indexes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->readonly_indexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _readonly_indexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string account_key = 1;
  if (this->account_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddressTableLookups::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.AddressTableLookups)
  GOOGLE_DCHECK_NE(&from, this);
  const AddressTableLookups* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddressTableLookups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.AddressTableLookups)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.AddressTableLookups)
    MergeFrom(*source);
  }
}

void AddressTableLookups::MergeFrom(const AddressTableLookups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.AddressTableLookups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  writable_indexes_.MergeFrom(from.writable_indexes_);
  readonly_indexes_.MergeFrom(from.readonly_indexes_);
  if (from.account_key().size() > 0) {
    _internal_set_account_key(from._internal_account_key());
  }
}

void AddressTableLookups::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.AddressTableLookups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressTableLookups::CopyFrom(const AddressTableLookups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.AddressTableLookups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressTableLookups::IsInitialized() const {
  return true;
}

void AddressTableLookups::InternalSwap(AddressTableLookups* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  writable_indexes_.InternalSwap(&other->writable_indexes_);
  readonly_indexes_.InternalSwap(&other->readonly_indexes_);
  account_key_.Swap(&other->account_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressTableLookups::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Solana::Proto::Transfer& transfer_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::DelegateStake& delegate_stake_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::DeactivateStake& deactivate_stake_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::DeactivateAllStake& deactivate_all_stake_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::WithdrawStake& withdraw_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::WithdrawAllStake& withdraw_all_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::CreateTokenAccount& create_token_account_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::TokenTransfer& token_transfer_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::CreateAndTransferToken& create_and_transfer_token_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::MessageHeader& header(const SigningInput* msg);
};

const ::TW::Solana::Proto::Transfer&
SigningInput::_Internal::transfer_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.transfer_transaction_;
}
const ::TW::Solana::Proto::DelegateStake&
SigningInput::_Internal::delegate_stake_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.delegate_stake_transaction_;
}
const ::TW::Solana::Proto::DeactivateStake&
SigningInput::_Internal::deactivate_stake_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.deactivate_stake_transaction_;
}
const ::TW::Solana::Proto::DeactivateAllStake&
SigningInput::_Internal::deactivate_all_stake_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.deactivate_all_stake_transaction_;
}
const ::TW::Solana::Proto::WithdrawStake&
SigningInput::_Internal::withdraw_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.withdraw_transaction_;
}
const ::TW::Solana::Proto::WithdrawAllStake&
SigningInput::_Internal::withdraw_all_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.withdraw_all_transaction_;
}
const ::TW::Solana::Proto::CreateTokenAccount&
SigningInput::_Internal::create_token_account_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.create_token_account_transaction_;
}
const ::TW::Solana::Proto::TokenTransfer&
SigningInput::_Internal::token_transfer_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.token_transfer_transaction_;
}
const ::TW::Solana::Proto::CreateAndTransferToken&
SigningInput::_Internal::create_and_transfer_token_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.create_and_transfer_token_transaction_;
}
const ::TW::Solana::Proto::MessageHeader&
SigningInput::_Internal::header(const SigningInput* msg) {
  return *msg->header_;
}
void SigningInput::set_allocated_transfer_transaction(::TW::Solana::Proto::Transfer* transfer_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_type();
  if (transfer_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer_transaction);
    if (message_arena != submessage_arena) {
      transfer_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_transaction, submessage_arena);
    }
    set_has_transfer_transaction();
    transaction_type_.transfer_transaction_ = transfer_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.transfer_transaction)
}
void SigningInput::set_allocated_delegate_stake_transaction(::TW::Solana::Proto::DelegateStake* delegate_stake_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_type();
  if (delegate_stake_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delegate_stake_transaction);
    if (message_arena != submessage_arena) {
      delegate_stake_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegate_stake_transaction, submessage_arena);
    }
    set_has_delegate_stake_transaction();
    transaction_type_.delegate_stake_transaction_ = delegate_stake_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
}
void SigningInput::set_allocated_deactivate_stake_transaction(::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_type();
  if (deactivate_stake_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deactivate_stake_transaction);
    if (message_arena != submessage_arena) {
      deactivate_stake_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deactivate_stake_transaction, submessage_arena);
    }
    set_has_deactivate_stake_transaction();
    transaction_type_.deactivate_stake_transaction_ = deactivate_stake_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
}
void SigningInput::set_allocated_deactivate_all_stake_transaction(::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_type();
  if (deactivate_all_stake_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deactivate_all_stake_transaction);
    if (message_arena != submessage_arena) {
      deactivate_all_stake_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deactivate_all_stake_transaction, submessage_arena);
    }
    set_has_deactivate_all_stake_transaction();
    transaction_type_.deactivate_all_stake_transaction_ = deactivate_all_stake_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
}
void SigningInput::set_allocated_withdraw_transaction(::TW::Solana::Proto::WithdrawStake* withdraw_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_type();
  if (withdraw_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(withdraw_transaction);
    if (message_arena != submessage_arena) {
      withdraw_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_transaction, submessage_arena);
    }
    set_has_withdraw_transaction();
    transaction_type_.withdraw_transaction_ = withdraw_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.withdraw_transaction)
}
void SigningInput::set_allocated_withdraw_all_transaction(::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_type();
  if (withdraw_all_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(withdraw_all_transaction);
    if (message_arena != submessage_arena) {
      withdraw_all_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_all_transaction, submessage_arena);
    }
    set_has_withdraw_all_transaction();
    transaction_type_.withdraw_all_transaction_ = withdraw_all_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
}
void SigningInput::set_allocated_create_token_account_transaction(::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_type();
  if (create_token_account_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_token_account_transaction);
    if (message_arena != submessage_arena) {
      create_token_account_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_token_account_transaction, submessage_arena);
    }
    set_has_create_token_account_transaction();
    transaction_type_.create_token_account_transaction_ = create_token_account_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.create_token_account_transaction)
}
void SigningInput::set_allocated_token_transfer_transaction(::TW::Solana::Proto::TokenTransfer* token_transfer_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_type();
  if (token_transfer_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(token_transfer_transaction);
    if (message_arena != submessage_arena) {
      token_transfer_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_transfer_transaction, submessage_arena);
    }
    set_has_token_transfer_transaction();
    transaction_type_.token_transfer_transaction_ = token_transfer_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.token_transfer_transaction)
}
void SigningInput::set_allocated_create_and_transfer_token_transaction(::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction_type();
  if (create_and_transfer_token_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_and_transfer_token_transaction);
    if (message_arena != submessage_arena) {
      create_and_transfer_token_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_and_transfer_token_transaction, submessage_arena);
    }
    set_has_create_and_transfer_token_transaction();
    transaction_type_.create_and_transfer_token_transaction_ = create_and_transfer_token_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  static_account_keys_(arena),
  compiled_instructions_(arena),
  instructions_(arena),
  address_table_lookups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      static_account_keys_(from.static_account_keys_),
      compiled_instructions_(from.compiled_instructions_),
      instructions_(from.instructions_),
      address_table_lookups_(from.address_table_lookups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  recent_blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recent_blockhash().empty()) {
    recent_blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recent_blockhash(), 
      GetArena());
  }
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_address().empty()) {
    from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_address(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::TW::Solana::Proto::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_transaction_type();
  switch (from.transaction_type_case()) {
    case kTransferTransaction: {
      _internal_mutable_transfer_transaction()->::TW::Solana::Proto::Transfer::MergeFrom(from._internal_transfer_transaction());
      break;
    }
    case kDelegateStakeTransaction: {
      _internal_mutable_delegate_stake_transaction()->::TW::Solana::Proto::DelegateStake::MergeFrom(from._internal_delegate_stake_transaction());
      break;
    }
    case kDeactivateStakeTransaction: {
      _internal_mutable_deactivate_stake_transaction()->::TW::Solana::Proto::DeactivateStake::MergeFrom(from._internal_deactivate_stake_transaction());
      break;
    }
    case kDeactivateAllStakeTransaction: {
      _internal_mutable_deactivate_all_stake_transaction()->::TW::Solana::Proto::DeactivateAllStake::MergeFrom(from._internal_deactivate_all_stake_transaction());
      break;
    }
    case kWithdrawTransaction: {
      _internal_mutable_withdraw_transaction()->::TW::Solana::Proto::WithdrawStake::MergeFrom(from._internal_withdraw_transaction());
      break;
    }
    case kWithdrawAllTransaction: {
      _internal_mutable_withdraw_all_transaction()->::TW::Solana::Proto::WithdrawAllStake::MergeFrom(from._internal_withdraw_all_transaction());
      break;
    }
    case kCreateTokenAccountTransaction: {
      _internal_mutable_create_token_account_transaction()->::TW::Solana::Proto::CreateTokenAccount::MergeFrom(from._internal_create_token_account_transaction());
      break;
    }
    case kTokenTransferTransaction: {
      _internal_mutable_token_transfer_transaction()->::TW::Solana::Proto::TokenTransfer::MergeFrom(from._internal_token_transfer_transaction());
      break;
    }
    case kCreateAndTransferTokenTransaction: {
      _internal_mutable_create_and_transfer_token_transaction()->::TW::Solana::Proto::CreateAndTransferToken::MergeFrom(from._internal_create_and_transfer_token_transaction());
      break;
    }
    case TRANSACTION_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Solana_2eproto.base);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recent_blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
  clear_has_transaction_type();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recent_blockhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (has_transaction_type()) {
    clear_transaction_type();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Solana_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::clear_transaction_type() {
// @@protoc_insertion_point(one_of_clear_start:TW.Solana.Proto.SigningInput)
  switch (transaction_type_case()) {
    case kTransferTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_type_.transfer_transaction_;
      }
      break;
    }
    case kDelegateStakeTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_type_.delegate_stake_transaction_;
      }
      break;
    }
    case kDeactivateStakeTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_type_.deactivate_stake_transaction_;
      }
      break;
    }
    case kDeactivateAllStakeTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_type_.deactivate_all_stake_transaction_;
      }
      break;
    }
    case kWithdrawTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_type_.withdraw_transaction_;
      }
      break;
    }
    case kWithdrawAllTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_type_.withdraw_all_transaction_;
      }
      break;
    }
    case kCreateTokenAccountTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_type_.create_token_account_transaction_;
      }
      break;
    }
    case kTokenTransferTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_type_.token_transfer_transaction_;
      }
      break;
    }
    case kCreateAndTransferTokenTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_type_.create_and_transfer_token_transaction_;
      }
      break;
    }
    case TRANSACTION_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_TYPE_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  static_account_keys_.Clear();
  compiled_instructions_.Clear();
  instructions_.Clear();
  address_table_lookups_.Clear();
  private_key_.ClearToEmpty();
  recent_blockhash_.ClearToEmpty();
  from_address_.ClearToEmpty();
  to_address_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_transaction_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recent_blockhash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recent_blockhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningInput.recent_blockhash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.Transfer transfer_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegate_stake_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deactivate_stake_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deactivate_all_stake_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.WithdrawStake withdraw_transaction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_all_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_token_account_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_transfer_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_and_transfer_token_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from_address = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningInput.from_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningInput.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Solana.Proto.MessageHeader header = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string static_account_keys = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_static_account_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningInput.static_account_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.Solana.Proto.CompiledInstruction compiled_instructions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_compiled_instructions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.Solana.Proto.Instruction instructions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_instructions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.Solana.Proto.AddressTableLookups address_table_lookups = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_address_table_lookups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // string recent_blockhash = 2;
  if (this->recent_blockhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recent_blockhash().data(), static_cast<int>(this->_internal_recent_blockhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningInput.recent_blockhash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recent_blockhash(), target);
  }

  // .TW.Solana.Proto.Transfer transfer_transaction = 3;
  if (_internal_has_transfer_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transfer_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 4;
  if (_internal_has_delegate_stake_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::delegate_stake_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 5;
  if (_internal_has_deactivate_stake_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::deactivate_stake_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 6;
  if (_internal_has_deactivate_all_stake_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::deactivate_all_stake_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.WithdrawStake withdraw_transaction = 7;
  if (_internal_has_withdraw_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::withdraw_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 8;
  if (_internal_has_withdraw_all_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::withdraw_all_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 9;
  if (_internal_has_create_token_account_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::create_token_account_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 10;
  if (_internal_has_token_transfer_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::token_transfer_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 11;
  if (_internal_has_create_and_transfer_token_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::create_and_transfer_token_transaction(this), target, stream);
  }

  // string from_address = 12;
  if (this->from_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningInput.from_address");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_from_address(), target);
  }

  // string to_address = 13;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningInput.to_address");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_to_address(), target);
  }

  // .TW.Solana.Proto.MessageHeader header = 14;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::header(this), target, stream);
  }

  // repeated string static_account_keys = 15;
  for (int i = 0, n = this->_internal_static_account_keys_size(); i < n; i++) {
    const auto& s = this->_internal_static_account_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningInput.static_account_keys");
    target = stream->WriteString(15, s, target);
  }

  // repeated .TW.Solana.Proto.CompiledInstruction compiled_instructions = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compiled_instructions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_compiled_instructions(i), target, stream);
  }

  // repeated .TW.Solana.Proto.Instruction instructions = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instructions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_instructions(i), target, stream);
  }

  // repeated .TW.Solana.Proto.AddressTableLookups address_table_lookups = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_address_table_lookups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_address_table_lookups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string static_account_keys = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(static_account_keys_.size());
  for (int i = 0, n = static_account_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      static_account_keys_.Get(i));
  }

  // repeated .TW.Solana.Proto.CompiledInstruction compiled_instructions = 16;
  total_size += 2UL * this->_internal_compiled_instructions_size();
  for (const auto& msg : this->compiled_instructions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.Solana.Proto.Instruction instructions = 17;
  total_size += 2UL * this->_internal_instructions_size();
  for (const auto& msg : this->instructions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.Solana.Proto.AddressTableLookups address_table_lookups = 18;
  total_size += 2UL * this->_internal_address_table_lookups_size();
  for (const auto& msg : this->address_table_lookups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes private_key = 1;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string recent_blockhash = 2;
  if (this->recent_blockhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recent_blockhash());
  }

  // string from_address = 12;
  if (this->from_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_address());
  }

  // string to_address = 13;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // .TW.Solana.Proto.MessageHeader header = 14;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (transaction_type_case()) {
    // .TW.Solana.Proto.Transfer transfer_transaction = 3;
    case kTransferTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.transfer_transaction_);
      break;
    }
    // .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 4;
    case kDelegateStakeTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.delegate_stake_transaction_);
      break;
    }
    // .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 5;
    case kDeactivateStakeTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.deactivate_stake_transaction_);
      break;
    }
    // .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 6;
    case kDeactivateAllStakeTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.deactivate_all_stake_transaction_);
      break;
    }
    // .TW.Solana.Proto.WithdrawStake withdraw_transaction = 7;
    case kWithdrawTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.withdraw_transaction_);
      break;
    }
    // .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 8;
    case kWithdrawAllTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.withdraw_all_transaction_);
      break;
    }
    // .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 9;
    case kCreateTokenAccountTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.create_token_account_transaction_);
      break;
    }
    // .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 10;
    case kTokenTransferTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.token_transfer_transaction_);
      break;
    }
    // .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 11;
    case kCreateAndTransferTokenTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.create_and_transfer_token_transaction_);
      break;
    }
    case TRANSACTION_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  static_account_keys_.MergeFrom(from.static_account_keys_);
  compiled_instructions_.MergeFrom(from.compiled_instructions_);
  instructions_.MergeFrom(from.instructions_);
  address_table_lookups_.MergeFrom(from.address_table_lookups_);
  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.recent_blockhash().size() > 0) {
    _internal_set_recent_blockhash(from._internal_recent_blockhash());
  }
  if (from.from_address().size() > 0) {
    _internal_set_from_address(from._internal_from_address());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::TW::Solana::Proto::MessageHeader::MergeFrom(from._internal_header());
  }
  switch (from.transaction_type_case()) {
    case kTransferTransaction: {
      _internal_mutable_transfer_transaction()->::TW::Solana::Proto::Transfer::MergeFrom(from._internal_transfer_transaction());
      break;
    }
    case kDelegateStakeTransaction: {
      _internal_mutable_delegate_stake_transaction()->::TW::Solana::Proto::DelegateStake::MergeFrom(from._internal_delegate_stake_transaction());
      break;
    }
    case kDeactivateStakeTransaction: {
      _internal_mutable_deactivate_stake_transaction()->::TW::Solana::Proto::DeactivateStake::MergeFrom(from._internal_deactivate_stake_transaction());
      break;
    }
    case kDeactivateAllStakeTransaction: {
      _internal_mutable_deactivate_all_stake_transaction()->::TW::Solana::Proto::DeactivateAllStake::MergeFrom(from._internal_deactivate_all_stake_transaction());
      break;
    }
    case kWithdrawTransaction: {
      _internal_mutable_withdraw_transaction()->::TW::Solana::Proto::WithdrawStake::MergeFrom(from._internal_withdraw_transaction());
      break;
    }
    case kWithdrawAllTransaction: {
      _internal_mutable_withdraw_all_transaction()->::TW::Solana::Proto::WithdrawAllStake::MergeFrom(from._internal_withdraw_all_transaction());
      break;
    }
    case kCreateTokenAccountTransaction: {
      _internal_mutable_create_token_account_transaction()->::TW::Solana::Proto::CreateTokenAccount::MergeFrom(from._internal_create_token_account_transaction());
      break;
    }
    case kTokenTransferTransaction: {
      _internal_mutable_token_transfer_transaction()->::TW::Solana::Proto::TokenTransfer::MergeFrom(from._internal_token_transfer_transaction());
      break;
    }
    case kCreateAndTransferTokenTransaction: {
      _internal_mutable_create_and_transfer_token_transaction()->::TW::Solana::Proto::CreateAndTransferToken::MergeFrom(from._internal_create_and_transfer_token_transaction());
      break;
    }
    case TRANSACTION_TYPE_NOT_SET: {
      break;
    }
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  static_account_keys_.InternalSwap(&other->static_account_keys_);
  compiled_instructions_.InternalSwap(&other->compiled_instructions_);
  instructions_.InternalSwap(&other->instructions_);
  address_table_lookups_.InternalSwap(&other->address_table_lookups_);
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recent_blockhash_.Swap(&other->recent_blockhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
  swap(transaction_type_, other->transaction_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Solana_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Solana_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningOutput.encoded"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string encoded = 1;
  if (this->encoded().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoded().data(), static_cast<int>(this->_internal_encoded().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningOutput.encoded");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoded());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Solana.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Solana.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Solana.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Solana.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Solana
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::Transfer* Arena::CreateMaybeMessage< ::TW::Solana::Proto::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::DelegateStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::DelegateStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::DelegateStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::DeactivateStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::DeactivateStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::DeactivateStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::DeactivateAllStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::DeactivateAllStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::DeactivateAllStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::WithdrawStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::WithdrawStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::WithdrawStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::StakeAccountValue* Arena::CreateMaybeMessage< ::TW::Solana::Proto::StakeAccountValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::StakeAccountValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::WithdrawAllStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::WithdrawAllStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::WithdrawAllStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::CreateTokenAccount* Arena::CreateMaybeMessage< ::TW::Solana::Proto::CreateTokenAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::CreateTokenAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::TokenTransfer* Arena::CreateMaybeMessage< ::TW::Solana::Proto::TokenTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::TokenTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::CreateAndTransferToken* Arena::CreateMaybeMessage< ::TW::Solana::Proto::CreateAndTransferToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::CreateAndTransferToken >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::AccountKey* Arena::CreateMaybeMessage< ::TW::Solana::Proto::AccountKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::AccountKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::Instruction* Arena::CreateMaybeMessage< ::TW::Solana::Proto::Instruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::Instruction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::MessageHeader* Arena::CreateMaybeMessage< ::TW::Solana::Proto::MessageHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::MessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::CompiledInstruction* Arena::CreateMaybeMessage< ::TW::Solana::Proto::CompiledInstruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::CompiledInstruction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::AddressTableLookups* Arena::CreateMaybeMessage< ::TW::Solana::Proto::AddressTableLookups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::AddressTableLookups >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Solana::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Solana::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
