// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Binance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Binance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Binance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Binance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Binance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Binance_2eproto;
namespace TW {
namespace Binance {
namespace Proto {
class CancelTradeOrder;
class CancelTradeOrderDefaultTypeInternal;
extern CancelTradeOrderDefaultTypeInternal _CancelTradeOrder_default_instance_;
class ClaimHTLOrder;
class ClaimHTLOrderDefaultTypeInternal;
extern ClaimHTLOrderDefaultTypeInternal _ClaimHTLOrder_default_instance_;
class DepositHTLTOrder;
class DepositHTLTOrderDefaultTypeInternal;
extern DepositHTLTOrderDefaultTypeInternal _DepositHTLTOrder_default_instance_;
class HTLTOrder;
class HTLTOrderDefaultTypeInternal;
extern HTLTOrderDefaultTypeInternal _HTLTOrder_default_instance_;
class RefundHTLTOrder;
class RefundHTLTOrderDefaultTypeInternal;
extern RefundHTLTOrderDefaultTypeInternal _RefundHTLTOrder_default_instance_;
class SendOrder;
class SendOrderDefaultTypeInternal;
extern SendOrderDefaultTypeInternal _SendOrder_default_instance_;
class SendOrder_Input;
class SendOrder_InputDefaultTypeInternal;
extern SendOrder_InputDefaultTypeInternal _SendOrder_Input_default_instance_;
class SendOrder_Output;
class SendOrder_OutputDefaultTypeInternal;
extern SendOrder_OutputDefaultTypeInternal _SendOrder_Output_default_instance_;
class SendOrder_Token;
class SendOrder_TokenDefaultTypeInternal;
extern SendOrder_TokenDefaultTypeInternal _SendOrder_Token_default_instance_;
class SideChainDelegate;
class SideChainDelegateDefaultTypeInternal;
extern SideChainDelegateDefaultTypeInternal _SideChainDelegate_default_instance_;
class SideChainRedelegate;
class SideChainRedelegateDefaultTypeInternal;
extern SideChainRedelegateDefaultTypeInternal _SideChainRedelegate_default_instance_;
class SideChainUndelegate;
class SideChainUndelegateDefaultTypeInternal;
extern SideChainUndelegateDefaultTypeInternal _SideChainUndelegate_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class Signature_PubKey;
class Signature_PubKeyDefaultTypeInternal;
extern Signature_PubKeyDefaultTypeInternal _Signature_PubKey_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class TimeLockOrder;
class TimeLockOrderDefaultTypeInternal;
extern TimeLockOrderDefaultTypeInternal _TimeLockOrder_default_instance_;
class TimeRelockOrder;
class TimeRelockOrderDefaultTypeInternal;
extern TimeRelockOrderDefaultTypeInternal _TimeRelockOrder_default_instance_;
class TimeUnlockOrder;
class TimeUnlockOrderDefaultTypeInternal;
extern TimeUnlockOrderDefaultTypeInternal _TimeUnlockOrder_default_instance_;
class TokenBurnOrder;
class TokenBurnOrderDefaultTypeInternal;
extern TokenBurnOrderDefaultTypeInternal _TokenBurnOrder_default_instance_;
class TokenFreezeOrder;
class TokenFreezeOrderDefaultTypeInternal;
extern TokenFreezeOrderDefaultTypeInternal _TokenFreezeOrder_default_instance_;
class TokenIssueOrder;
class TokenIssueOrderDefaultTypeInternal;
extern TokenIssueOrderDefaultTypeInternal _TokenIssueOrder_default_instance_;
class TokenMintOrder;
class TokenMintOrderDefaultTypeInternal;
extern TokenMintOrderDefaultTypeInternal _TokenMintOrder_default_instance_;
class TokenUnfreezeOrder;
class TokenUnfreezeOrderDefaultTypeInternal;
extern TokenUnfreezeOrderDefaultTypeInternal _TokenUnfreezeOrder_default_instance_;
class TradeOrder;
class TradeOrderDefaultTypeInternal;
extern TradeOrderDefaultTypeInternal _TradeOrder_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransferOut;
class TransferOutDefaultTypeInternal;
extern TransferOutDefaultTypeInternal _TransferOut_default_instance_;
}  // namespace Proto
}  // namespace Binance
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Binance::Proto::CancelTradeOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::CancelTradeOrder>(Arena*);
template<> ::TW::Binance::Proto::ClaimHTLOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::ClaimHTLOrder>(Arena*);
template<> ::TW::Binance::Proto::DepositHTLTOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::DepositHTLTOrder>(Arena*);
template<> ::TW::Binance::Proto::HTLTOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::HTLTOrder>(Arena*);
template<> ::TW::Binance::Proto::RefundHTLTOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::RefundHTLTOrder>(Arena*);
template<> ::TW::Binance::Proto::SendOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::SendOrder>(Arena*);
template<> ::TW::Binance::Proto::SendOrder_Input* Arena::CreateMaybeMessage<::TW::Binance::Proto::SendOrder_Input>(Arena*);
template<> ::TW::Binance::Proto::SendOrder_Output* Arena::CreateMaybeMessage<::TW::Binance::Proto::SendOrder_Output>(Arena*);
template<> ::TW::Binance::Proto::SendOrder_Token* Arena::CreateMaybeMessage<::TW::Binance::Proto::SendOrder_Token>(Arena*);
template<> ::TW::Binance::Proto::SideChainDelegate* Arena::CreateMaybeMessage<::TW::Binance::Proto::SideChainDelegate>(Arena*);
template<> ::TW::Binance::Proto::SideChainRedelegate* Arena::CreateMaybeMessage<::TW::Binance::Proto::SideChainRedelegate>(Arena*);
template<> ::TW::Binance::Proto::SideChainUndelegate* Arena::CreateMaybeMessage<::TW::Binance::Proto::SideChainUndelegate>(Arena*);
template<> ::TW::Binance::Proto::Signature* Arena::CreateMaybeMessage<::TW::Binance::Proto::Signature>(Arena*);
template<> ::TW::Binance::Proto::Signature_PubKey* Arena::CreateMaybeMessage<::TW::Binance::Proto::Signature_PubKey>(Arena*);
template<> ::TW::Binance::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Binance::Proto::SigningInput>(Arena*);
template<> ::TW::Binance::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Binance::Proto::SigningOutput>(Arena*);
template<> ::TW::Binance::Proto::TimeLockOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::TimeLockOrder>(Arena*);
template<> ::TW::Binance::Proto::TimeRelockOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::TimeRelockOrder>(Arena*);
template<> ::TW::Binance::Proto::TimeUnlockOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::TimeUnlockOrder>(Arena*);
template<> ::TW::Binance::Proto::TokenBurnOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::TokenBurnOrder>(Arena*);
template<> ::TW::Binance::Proto::TokenFreezeOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::TokenFreezeOrder>(Arena*);
template<> ::TW::Binance::Proto::TokenIssueOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::TokenIssueOrder>(Arena*);
template<> ::TW::Binance::Proto::TokenMintOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::TokenMintOrder>(Arena*);
template<> ::TW::Binance::Proto::TokenUnfreezeOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::TokenUnfreezeOrder>(Arena*);
template<> ::TW::Binance::Proto::TradeOrder* Arena::CreateMaybeMessage<::TW::Binance::Proto::TradeOrder>(Arena*);
template<> ::TW::Binance::Proto::Transaction* Arena::CreateMaybeMessage<::TW::Binance::Proto::Transaction>(Arena*);
template<> ::TW::Binance::Proto::TransferOut* Arena::CreateMaybeMessage<::TW::Binance::Proto::TransferOut>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Binance {
namespace Proto {

// ===================================================================

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
    kSignaturesFieldNumber = 2,
    kMemoFieldNumber = 3,
    kDataFieldNumber = 5,
    kSourceFieldNumber = 4,
  };
  // repeated bytes msgs = 1;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  const std::string& msgs(int index) const;
  std::string* mutable_msgs(int index);
  void set_msgs(int index, const std::string& value);
  void set_msgs(int index, std::string&& value);
  void set_msgs(int index, const char* value);
  void set_msgs(int index, const void* value, size_t size);
  std::string* add_msgs();
  void add_msgs(const std::string& value);
  void add_msgs(std::string&& value);
  void add_msgs(const char* value);
  void add_msgs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msgs();
  private:
  const std::string& _internal_msgs(int index) const;
  std::string* _internal_add_msgs();
  public:

  // repeated bytes signatures = 2;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, size_t size);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();
  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  public:

  // string memo = 3;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 source = 4;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::int64 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msgs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class Signature_PubKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.Signature.PubKey) */ {
 public:
  inline Signature_PubKey() : Signature_PubKey(nullptr) {}
  virtual ~Signature_PubKey();

  Signature_PubKey(const Signature_PubKey& from);
  Signature_PubKey(Signature_PubKey&& from) noexcept
    : Signature_PubKey() {
    *this = ::std::move(from);
  }

  inline Signature_PubKey& operator=(const Signature_PubKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature_PubKey& operator=(Signature_PubKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signature_PubKey& default_instance();

  static inline const Signature_PubKey* internal_default_instance() {
    return reinterpret_cast<const Signature_PubKey*>(
               &_Signature_PubKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Signature_PubKey& a, Signature_PubKey& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature_PubKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature_PubKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signature_PubKey* New() const final {
    return CreateMaybeMessage<Signature_PubKey>(nullptr);
  }

  Signature_PubKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signature_PubKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signature_PubKey& from);
  void MergeFrom(const Signature_PubKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature_PubKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.Signature.PubKey";
  }
  protected:
  explicit Signature_PubKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.Signature.PubKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class Signature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  virtual ~Signature();

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signature& default_instance();

  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(nullptr);
  }

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.Signature";
  }
  protected:
  explicit Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Signature_PubKey PubKey;

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kAccountNumberFieldNumber = 3,
    kSequenceFieldNumber = 4,
  };
  // bytes pub_key = 1;
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const void* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // int64 account_number = 3;
  void clear_account_number();
  ::PROTOBUF_NAMESPACE_ID::int64 account_number() const;
  void set_account_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_account_number() const;
  void _internal_set_account_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sequence = 4;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.Signature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::int64 account_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TradeOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TradeOrder) */ {
 public:
  inline TradeOrder() : TradeOrder(nullptr) {}
  virtual ~TradeOrder();

  TradeOrder(const TradeOrder& from);
  TradeOrder(TradeOrder&& from) noexcept
    : TradeOrder() {
    *this = ::std::move(from);
  }

  inline TradeOrder& operator=(const TradeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeOrder& operator=(TradeOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeOrder& default_instance();

  static inline const TradeOrder* internal_default_instance() {
    return reinterpret_cast<const TradeOrder*>(
               &_TradeOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TradeOrder& a, TradeOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeOrder* New() const final {
    return CreateMaybeMessage<TradeOrder>(nullptr);
  }

  TradeOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeOrder& from);
  void MergeFrom(const TradeOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TradeOrder";
  }
  protected:
  explicit TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kIdFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kOrdertypeFieldNumber = 4,
    kSideFieldNumber = 5,
    kPriceFieldNumber = 6,
    kQuantityFieldNumber = 7,
    kTimeinforceFieldNumber = 8,
  };
  // bytes sender = 1;
  void clear_sender();
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const void* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int64 ordertype = 4;
  void clear_ordertype();
  ::PROTOBUF_NAMESPACE_ID::int64 ordertype() const;
  void set_ordertype(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ordertype() const;
  void _internal_set_ordertype(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 side = 5;
  void clear_side();
  ::PROTOBUF_NAMESPACE_ID::int64 side() const;
  void set_side(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_side() const;
  void _internal_set_side(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 price = 6;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 quantity = 7;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timeinforce = 8;
  void clear_timeinforce();
  ::PROTOBUF_NAMESPACE_ID::int64 timeinforce() const;
  void set_timeinforce(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timeinforce() const;
  void _internal_set_timeinforce(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TradeOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int64 ordertype_;
  ::PROTOBUF_NAMESPACE_ID::int64 side_;
  ::PROTOBUF_NAMESPACE_ID::int64 price_;
  ::PROTOBUF_NAMESPACE_ID::int64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::int64 timeinforce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class CancelTradeOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.CancelTradeOrder) */ {
 public:
  inline CancelTradeOrder() : CancelTradeOrder(nullptr) {}
  virtual ~CancelTradeOrder();

  CancelTradeOrder(const CancelTradeOrder& from);
  CancelTradeOrder(CancelTradeOrder&& from) noexcept
    : CancelTradeOrder() {
    *this = ::std::move(from);
  }

  inline CancelTradeOrder& operator=(const CancelTradeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelTradeOrder& operator=(CancelTradeOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelTradeOrder& default_instance();

  static inline const CancelTradeOrder* internal_default_instance() {
    return reinterpret_cast<const CancelTradeOrder*>(
               &_CancelTradeOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CancelTradeOrder& a, CancelTradeOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelTradeOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelTradeOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelTradeOrder* New() const final {
    return CreateMaybeMessage<CancelTradeOrder>(nullptr);
  }

  CancelTradeOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelTradeOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelTradeOrder& from);
  void MergeFrom(const CancelTradeOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelTradeOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.CancelTradeOrder";
  }
  protected:
  explicit CancelTradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kRefidFieldNumber = 3,
  };
  // bytes sender = 1;
  void clear_sender();
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const void* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string refid = 3;
  void clear_refid();
  const std::string& refid() const;
  void set_refid(const std::string& value);
  void set_refid(std::string&& value);
  void set_refid(const char* value);
  void set_refid(const char* value, size_t size);
  std::string* mutable_refid();
  std::string* release_refid();
  void set_allocated_refid(std::string* refid);
  private:
  const std::string& _internal_refid() const;
  void _internal_set_refid(const std::string& value);
  std::string* _internal_mutable_refid();
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.CancelTradeOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class SendOrder_Token PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.SendOrder.Token) */ {
 public:
  inline SendOrder_Token() : SendOrder_Token(nullptr) {}
  virtual ~SendOrder_Token();

  SendOrder_Token(const SendOrder_Token& from);
  SendOrder_Token(SendOrder_Token&& from) noexcept
    : SendOrder_Token() {
    *this = ::std::move(from);
  }

  inline SendOrder_Token& operator=(const SendOrder_Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOrder_Token& operator=(SendOrder_Token&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendOrder_Token& default_instance();

  static inline const SendOrder_Token* internal_default_instance() {
    return reinterpret_cast<const SendOrder_Token*>(
               &_SendOrder_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendOrder_Token& a, SendOrder_Token& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOrder_Token* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOrder_Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOrder_Token* New() const final {
    return CreateMaybeMessage<SendOrder_Token>(nullptr);
  }

  SendOrder_Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOrder_Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOrder_Token& from);
  void MergeFrom(const SendOrder_Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOrder_Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.SendOrder.Token";
  }
  protected:
  explicit SendOrder_Token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string denom = 1;
  void clear_denom();
  const std::string& denom() const;
  void set_denom(const std::string& value);
  void set_denom(std::string&& value);
  void set_denom(const char* value);
  void set_denom(const char* value, size_t size);
  std::string* mutable_denom();
  std::string* release_denom();
  void set_allocated_denom(std::string* denom);
  private:
  const std::string& _internal_denom() const;
  void _internal_set_denom(const std::string& value);
  std::string* _internal_mutable_denom();
  public:

  // int64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.SendOrder.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class SendOrder_Input PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.SendOrder.Input) */ {
 public:
  inline SendOrder_Input() : SendOrder_Input(nullptr) {}
  virtual ~SendOrder_Input();

  SendOrder_Input(const SendOrder_Input& from);
  SendOrder_Input(SendOrder_Input&& from) noexcept
    : SendOrder_Input() {
    *this = ::std::move(from);
  }

  inline SendOrder_Input& operator=(const SendOrder_Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOrder_Input& operator=(SendOrder_Input&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendOrder_Input& default_instance();

  static inline const SendOrder_Input* internal_default_instance() {
    return reinterpret_cast<const SendOrder_Input*>(
               &_SendOrder_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SendOrder_Input& a, SendOrder_Input& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOrder_Input* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOrder_Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOrder_Input* New() const final {
    return CreateMaybeMessage<SendOrder_Input>(nullptr);
  }

  SendOrder_Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOrder_Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOrder_Input& from);
  void MergeFrom(const SendOrder_Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOrder_Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.SendOrder.Input";
  }
  protected:
  explicit SendOrder_Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
  int coins_size() const;
  private:
  int _internal_coins_size() const;
  public:
  void clear_coins();
  ::TW::Binance::Proto::SendOrder_Token* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
      mutable_coins();
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_coins(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_add_coins();
  public:
  const ::TW::Binance::Proto::SendOrder_Token& coins(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
      coins() const;

  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.SendOrder.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token > coins_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class SendOrder_Output PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.SendOrder.Output) */ {
 public:
  inline SendOrder_Output() : SendOrder_Output(nullptr) {}
  virtual ~SendOrder_Output();

  SendOrder_Output(const SendOrder_Output& from);
  SendOrder_Output(SendOrder_Output&& from) noexcept
    : SendOrder_Output() {
    *this = ::std::move(from);
  }

  inline SendOrder_Output& operator=(const SendOrder_Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOrder_Output& operator=(SendOrder_Output&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendOrder_Output& default_instance();

  static inline const SendOrder_Output* internal_default_instance() {
    return reinterpret_cast<const SendOrder_Output*>(
               &_SendOrder_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SendOrder_Output& a, SendOrder_Output& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOrder_Output* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOrder_Output* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOrder_Output* New() const final {
    return CreateMaybeMessage<SendOrder_Output>(nullptr);
  }

  SendOrder_Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOrder_Output>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOrder_Output& from);
  void MergeFrom(const SendOrder_Output& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOrder_Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.SendOrder.Output";
  }
  protected:
  explicit SendOrder_Output(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
  int coins_size() const;
  private:
  int _internal_coins_size() const;
  public:
  void clear_coins();
  ::TW::Binance::Proto::SendOrder_Token* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
      mutable_coins();
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_coins(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_add_coins();
  public:
  const ::TW::Binance::Proto::SendOrder_Token& coins(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
      coins() const;

  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.SendOrder.Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token > coins_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class SendOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.SendOrder) */ {
 public:
  inline SendOrder() : SendOrder(nullptr) {}
  virtual ~SendOrder();

  SendOrder(const SendOrder& from);
  SendOrder(SendOrder&& from) noexcept
    : SendOrder() {
    *this = ::std::move(from);
  }

  inline SendOrder& operator=(const SendOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOrder& operator=(SendOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendOrder& default_instance();

  static inline const SendOrder* internal_default_instance() {
    return reinterpret_cast<const SendOrder*>(
               &_SendOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SendOrder& a, SendOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOrder* New() const final {
    return CreateMaybeMessage<SendOrder>(nullptr);
  }

  SendOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOrder& from);
  void MergeFrom(const SendOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.SendOrder";
  }
  protected:
  explicit SendOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SendOrder_Token Token;
  typedef SendOrder_Input Input;
  typedef SendOrder_Output Output;

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
  };
  // repeated .TW.Binance.Proto.SendOrder.Input inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::TW::Binance::Proto::SendOrder_Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Input >*
      mutable_inputs();
  private:
  const ::TW::Binance::Proto::SendOrder_Input& _internal_inputs(int index) const;
  ::TW::Binance::Proto::SendOrder_Input* _internal_add_inputs();
  public:
  const ::TW::Binance::Proto::SendOrder_Input& inputs(int index) const;
  ::TW::Binance::Proto::SendOrder_Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Input >&
      inputs() const;

  // repeated .TW.Binance.Proto.SendOrder.Output outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::TW::Binance::Proto::SendOrder_Output* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Output >*
      mutable_outputs();
  private:
  const ::TW::Binance::Proto::SendOrder_Output& _internal_outputs(int index) const;
  ::TW::Binance::Proto::SendOrder_Output* _internal_add_outputs();
  public:
  const ::TW::Binance::Proto::SendOrder_Output& outputs(int index) const;
  ::TW::Binance::Proto::SendOrder_Output* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Output >&
      outputs() const;

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.SendOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Input > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Output > outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TokenIssueOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TokenIssueOrder) */ {
 public:
  inline TokenIssueOrder() : TokenIssueOrder(nullptr) {}
  virtual ~TokenIssueOrder();

  TokenIssueOrder(const TokenIssueOrder& from);
  TokenIssueOrder(TokenIssueOrder&& from) noexcept
    : TokenIssueOrder() {
    *this = ::std::move(from);
  }

  inline TokenIssueOrder& operator=(const TokenIssueOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenIssueOrder& operator=(TokenIssueOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenIssueOrder& default_instance();

  static inline const TokenIssueOrder* internal_default_instance() {
    return reinterpret_cast<const TokenIssueOrder*>(
               &_TokenIssueOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TokenIssueOrder& a, TokenIssueOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenIssueOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenIssueOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenIssueOrder* New() const final {
    return CreateMaybeMessage<TokenIssueOrder>(nullptr);
  }

  TokenIssueOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenIssueOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenIssueOrder& from);
  void MergeFrom(const TokenIssueOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenIssueOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TokenIssueOrder";
  }
  protected:
  explicit TokenIssueOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kNameFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kTotalSupplyFieldNumber = 4,
    kMintableFieldNumber = 5,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int64 total_supply = 4;
  void clear_total_supply();
  ::PROTOBUF_NAMESPACE_ID::int64 total_supply() const;
  void set_total_supply(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_supply() const;
  void _internal_set_total_supply(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool mintable = 5;
  void clear_mintable();
  bool mintable() const;
  void set_mintable(bool value);
  private:
  bool _internal_mintable() const;
  void _internal_set_mintable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TokenIssueOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_supply_;
  bool mintable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TokenMintOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TokenMintOrder) */ {
 public:
  inline TokenMintOrder() : TokenMintOrder(nullptr) {}
  virtual ~TokenMintOrder();

  TokenMintOrder(const TokenMintOrder& from);
  TokenMintOrder(TokenMintOrder&& from) noexcept
    : TokenMintOrder() {
    *this = ::std::move(from);
  }

  inline TokenMintOrder& operator=(const TokenMintOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenMintOrder& operator=(TokenMintOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenMintOrder& default_instance();

  static inline const TokenMintOrder* internal_default_instance() {
    return reinterpret_cast<const TokenMintOrder*>(
               &_TokenMintOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TokenMintOrder& a, TokenMintOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenMintOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenMintOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenMintOrder* New() const final {
    return CreateMaybeMessage<TokenMintOrder>(nullptr);
  }

  TokenMintOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenMintOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenMintOrder& from);
  void MergeFrom(const TokenMintOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenMintOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TokenMintOrder";
  }
  protected:
  explicit TokenMintOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TokenMintOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TokenBurnOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TokenBurnOrder) */ {
 public:
  inline TokenBurnOrder() : TokenBurnOrder(nullptr) {}
  virtual ~TokenBurnOrder();

  TokenBurnOrder(const TokenBurnOrder& from);
  TokenBurnOrder(TokenBurnOrder&& from) noexcept
    : TokenBurnOrder() {
    *this = ::std::move(from);
  }

  inline TokenBurnOrder& operator=(const TokenBurnOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenBurnOrder& operator=(TokenBurnOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenBurnOrder& default_instance();

  static inline const TokenBurnOrder* internal_default_instance() {
    return reinterpret_cast<const TokenBurnOrder*>(
               &_TokenBurnOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TokenBurnOrder& a, TokenBurnOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenBurnOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenBurnOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenBurnOrder* New() const final {
    return CreateMaybeMessage<TokenBurnOrder>(nullptr);
  }

  TokenBurnOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenBurnOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenBurnOrder& from);
  void MergeFrom(const TokenBurnOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenBurnOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TokenBurnOrder";
  }
  protected:
  explicit TokenBurnOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TokenBurnOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TokenFreezeOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TokenFreezeOrder) */ {
 public:
  inline TokenFreezeOrder() : TokenFreezeOrder(nullptr) {}
  virtual ~TokenFreezeOrder();

  TokenFreezeOrder(const TokenFreezeOrder& from);
  TokenFreezeOrder(TokenFreezeOrder&& from) noexcept
    : TokenFreezeOrder() {
    *this = ::std::move(from);
  }

  inline TokenFreezeOrder& operator=(const TokenFreezeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenFreezeOrder& operator=(TokenFreezeOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenFreezeOrder& default_instance();

  static inline const TokenFreezeOrder* internal_default_instance() {
    return reinterpret_cast<const TokenFreezeOrder*>(
               &_TokenFreezeOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TokenFreezeOrder& a, TokenFreezeOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenFreezeOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenFreezeOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenFreezeOrder* New() const final {
    return CreateMaybeMessage<TokenFreezeOrder>(nullptr);
  }

  TokenFreezeOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenFreezeOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenFreezeOrder& from);
  void MergeFrom(const TokenFreezeOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenFreezeOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TokenFreezeOrder";
  }
  protected:
  explicit TokenFreezeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TokenFreezeOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TokenUnfreezeOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TokenUnfreezeOrder) */ {
 public:
  inline TokenUnfreezeOrder() : TokenUnfreezeOrder(nullptr) {}
  virtual ~TokenUnfreezeOrder();

  TokenUnfreezeOrder(const TokenUnfreezeOrder& from);
  TokenUnfreezeOrder(TokenUnfreezeOrder&& from) noexcept
    : TokenUnfreezeOrder() {
    *this = ::std::move(from);
  }

  inline TokenUnfreezeOrder& operator=(const TokenUnfreezeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenUnfreezeOrder& operator=(TokenUnfreezeOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenUnfreezeOrder& default_instance();

  static inline const TokenUnfreezeOrder* internal_default_instance() {
    return reinterpret_cast<const TokenUnfreezeOrder*>(
               &_TokenUnfreezeOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TokenUnfreezeOrder& a, TokenUnfreezeOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenUnfreezeOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenUnfreezeOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenUnfreezeOrder* New() const final {
    return CreateMaybeMessage<TokenUnfreezeOrder>(nullptr);
  }

  TokenUnfreezeOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenUnfreezeOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenUnfreezeOrder& from);
  void MergeFrom(const TokenUnfreezeOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenUnfreezeOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TokenUnfreezeOrder";
  }
  protected:
  explicit TokenUnfreezeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TokenUnfreezeOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class HTLTOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.HTLTOrder) */ {
 public:
  inline HTLTOrder() : HTLTOrder(nullptr) {}
  virtual ~HTLTOrder();

  HTLTOrder(const HTLTOrder& from);
  HTLTOrder(HTLTOrder&& from) noexcept
    : HTLTOrder() {
    *this = ::std::move(from);
  }

  inline HTLTOrder& operator=(const HTLTOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTLTOrder& operator=(HTLTOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTLTOrder& default_instance();

  static inline const HTLTOrder* internal_default_instance() {
    return reinterpret_cast<const HTLTOrder*>(
               &_HTLTOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HTLTOrder& a, HTLTOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(HTLTOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTLTOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTLTOrder* New() const final {
    return CreateMaybeMessage<HTLTOrder>(nullptr);
  }

  HTLTOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTLTOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTLTOrder& from);
  void MergeFrom(const HTLTOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTLTOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.HTLTOrder";
  }
  protected:
  explicit HTLTOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 7,
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kRecipientOtherChainFieldNumber = 3,
    kSenderOtherChainFieldNumber = 4,
    kRandomNumberHashFieldNumber = 5,
    kExpectedIncomeFieldNumber = 8,
    kTimestampFieldNumber = 6,
    kHeightSpanFieldNumber = 9,
    kCrossChainFieldNumber = 10,
  };
  // repeated .TW.Binance.Proto.SendOrder.Token amount = 7;
  int amount_size() const;
  private:
  int _internal_amount_size() const;
  public:
  void clear_amount();
  ::TW::Binance::Proto::SendOrder_Token* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
      mutable_amount();
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_amount(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_add_amount();
  public:
  const ::TW::Binance::Proto::SendOrder_Token& amount(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
      amount() const;

  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string recipient_other_chain = 3;
  void clear_recipient_other_chain();
  const std::string& recipient_other_chain() const;
  void set_recipient_other_chain(const std::string& value);
  void set_recipient_other_chain(std::string&& value);
  void set_recipient_other_chain(const char* value);
  void set_recipient_other_chain(const char* value, size_t size);
  std::string* mutable_recipient_other_chain();
  std::string* release_recipient_other_chain();
  void set_allocated_recipient_other_chain(std::string* recipient_other_chain);
  private:
  const std::string& _internal_recipient_other_chain() const;
  void _internal_set_recipient_other_chain(const std::string& value);
  std::string* _internal_mutable_recipient_other_chain();
  public:

  // string sender_other_chain = 4;
  void clear_sender_other_chain();
  const std::string& sender_other_chain() const;
  void set_sender_other_chain(const std::string& value);
  void set_sender_other_chain(std::string&& value);
  void set_sender_other_chain(const char* value);
  void set_sender_other_chain(const char* value, size_t size);
  std::string* mutable_sender_other_chain();
  std::string* release_sender_other_chain();
  void set_allocated_sender_other_chain(std::string* sender_other_chain);
  private:
  const std::string& _internal_sender_other_chain() const;
  void _internal_set_sender_other_chain(const std::string& value);
  std::string* _internal_mutable_sender_other_chain();
  public:

  // bytes random_number_hash = 5;
  void clear_random_number_hash();
  const std::string& random_number_hash() const;
  void set_random_number_hash(const std::string& value);
  void set_random_number_hash(std::string&& value);
  void set_random_number_hash(const char* value);
  void set_random_number_hash(const void* value, size_t size);
  std::string* mutable_random_number_hash();
  std::string* release_random_number_hash();
  void set_allocated_random_number_hash(std::string* random_number_hash);
  private:
  const std::string& _internal_random_number_hash() const;
  void _internal_set_random_number_hash(const std::string& value);
  std::string* _internal_mutable_random_number_hash();
  public:

  // string expected_income = 8;
  void clear_expected_income();
  const std::string& expected_income() const;
  void set_expected_income(const std::string& value);
  void set_expected_income(std::string&& value);
  void set_expected_income(const char* value);
  void set_expected_income(const char* value, size_t size);
  std::string* mutable_expected_income();
  std::string* release_expected_income();
  void set_allocated_expected_income(std::string* expected_income);
  private:
  const std::string& _internal_expected_income() const;
  void _internal_set_expected_income(const std::string& value);
  std::string* _internal_mutable_expected_income();
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 height_span = 9;
  void clear_height_span();
  ::PROTOBUF_NAMESPACE_ID::int64 height_span() const;
  void set_height_span(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height_span() const;
  void _internal_set_height_span(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool cross_chain = 10;
  void clear_cross_chain();
  bool cross_chain() const;
  void set_cross_chain(bool value);
  private:
  bool _internal_cross_chain() const;
  void _internal_set_cross_chain(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.HTLTOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token > amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_other_chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_other_chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr random_number_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expected_income_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_span_;
  bool cross_chain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class DepositHTLTOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.DepositHTLTOrder) */ {
 public:
  inline DepositHTLTOrder() : DepositHTLTOrder(nullptr) {}
  virtual ~DepositHTLTOrder();

  DepositHTLTOrder(const DepositHTLTOrder& from);
  DepositHTLTOrder(DepositHTLTOrder&& from) noexcept
    : DepositHTLTOrder() {
    *this = ::std::move(from);
  }

  inline DepositHTLTOrder& operator=(const DepositHTLTOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositHTLTOrder& operator=(DepositHTLTOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositHTLTOrder& default_instance();

  static inline const DepositHTLTOrder* internal_default_instance() {
    return reinterpret_cast<const DepositHTLTOrder*>(
               &_DepositHTLTOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DepositHTLTOrder& a, DepositHTLTOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositHTLTOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositHTLTOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositHTLTOrder* New() const final {
    return CreateMaybeMessage<DepositHTLTOrder>(nullptr);
  }

  DepositHTLTOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositHTLTOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositHTLTOrder& from);
  void MergeFrom(const DepositHTLTOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositHTLTOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.DepositHTLTOrder";
  }
  protected:
  explicit DepositHTLTOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kFromFieldNumber = 1,
    kSwapIdFieldNumber = 3,
  };
  // repeated .TW.Binance.Proto.SendOrder.Token amount = 2;
  int amount_size() const;
  private:
  int _internal_amount_size() const;
  public:
  void clear_amount();
  ::TW::Binance::Proto::SendOrder_Token* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
      mutable_amount();
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_amount(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_add_amount();
  public:
  const ::TW::Binance::Proto::SendOrder_Token& amount(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
      amount() const;

  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes swap_id = 3;
  void clear_swap_id();
  const std::string& swap_id() const;
  void set_swap_id(const std::string& value);
  void set_swap_id(std::string&& value);
  void set_swap_id(const char* value);
  void set_swap_id(const void* value, size_t size);
  std::string* mutable_swap_id();
  std::string* release_swap_id();
  void set_allocated_swap_id(std::string* swap_id);
  private:
  const std::string& _internal_swap_id() const;
  void _internal_set_swap_id(const std::string& value);
  std::string* _internal_mutable_swap_id();
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.DepositHTLTOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token > amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swap_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class ClaimHTLOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.ClaimHTLOrder) */ {
 public:
  inline ClaimHTLOrder() : ClaimHTLOrder(nullptr) {}
  virtual ~ClaimHTLOrder();

  ClaimHTLOrder(const ClaimHTLOrder& from);
  ClaimHTLOrder(ClaimHTLOrder&& from) noexcept
    : ClaimHTLOrder() {
    *this = ::std::move(from);
  }

  inline ClaimHTLOrder& operator=(const ClaimHTLOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClaimHTLOrder& operator=(ClaimHTLOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClaimHTLOrder& default_instance();

  static inline const ClaimHTLOrder* internal_default_instance() {
    return reinterpret_cast<const ClaimHTLOrder*>(
               &_ClaimHTLOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ClaimHTLOrder& a, ClaimHTLOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(ClaimHTLOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClaimHTLOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClaimHTLOrder* New() const final {
    return CreateMaybeMessage<ClaimHTLOrder>(nullptr);
  }

  ClaimHTLOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClaimHTLOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClaimHTLOrder& from);
  void MergeFrom(const ClaimHTLOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClaimHTLOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.ClaimHTLOrder";
  }
  protected:
  explicit ClaimHTLOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kSwapIdFieldNumber = 2,
    kRandomNumberFieldNumber = 3,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes swap_id = 2;
  void clear_swap_id();
  const std::string& swap_id() const;
  void set_swap_id(const std::string& value);
  void set_swap_id(std::string&& value);
  void set_swap_id(const char* value);
  void set_swap_id(const void* value, size_t size);
  std::string* mutable_swap_id();
  std::string* release_swap_id();
  void set_allocated_swap_id(std::string* swap_id);
  private:
  const std::string& _internal_swap_id() const;
  void _internal_set_swap_id(const std::string& value);
  std::string* _internal_mutable_swap_id();
  public:

  // bytes random_number = 3;
  void clear_random_number();
  const std::string& random_number() const;
  void set_random_number(const std::string& value);
  void set_random_number(std::string&& value);
  void set_random_number(const char* value);
  void set_random_number(const void* value, size_t size);
  std::string* mutable_random_number();
  std::string* release_random_number();
  void set_allocated_random_number(std::string* random_number);
  private:
  const std::string& _internal_random_number() const;
  void _internal_set_random_number(const std::string& value);
  std::string* _internal_mutable_random_number();
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.ClaimHTLOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swap_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr random_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class RefundHTLTOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.RefundHTLTOrder) */ {
 public:
  inline RefundHTLTOrder() : RefundHTLTOrder(nullptr) {}
  virtual ~RefundHTLTOrder();

  RefundHTLTOrder(const RefundHTLTOrder& from);
  RefundHTLTOrder(RefundHTLTOrder&& from) noexcept
    : RefundHTLTOrder() {
    *this = ::std::move(from);
  }

  inline RefundHTLTOrder& operator=(const RefundHTLTOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefundHTLTOrder& operator=(RefundHTLTOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefundHTLTOrder& default_instance();

  static inline const RefundHTLTOrder* internal_default_instance() {
    return reinterpret_cast<const RefundHTLTOrder*>(
               &_RefundHTLTOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RefundHTLTOrder& a, RefundHTLTOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(RefundHTLTOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefundHTLTOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefundHTLTOrder* New() const final {
    return CreateMaybeMessage<RefundHTLTOrder>(nullptr);
  }

  RefundHTLTOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefundHTLTOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefundHTLTOrder& from);
  void MergeFrom(const RefundHTLTOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefundHTLTOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.RefundHTLTOrder";
  }
  protected:
  explicit RefundHTLTOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kSwapIdFieldNumber = 2,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes swap_id = 2;
  void clear_swap_id();
  const std::string& swap_id() const;
  void set_swap_id(const std::string& value);
  void set_swap_id(std::string&& value);
  void set_swap_id(const char* value);
  void set_swap_id(const void* value, size_t size);
  std::string* mutable_swap_id();
  std::string* release_swap_id();
  void set_allocated_swap_id(std::string* swap_id);
  private:
  const std::string& _internal_swap_id() const;
  void _internal_set_swap_id(const std::string& value);
  std::string* _internal_mutable_swap_id();
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.RefundHTLTOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swap_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TransferOut PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TransferOut) */ {
 public:
  inline TransferOut() : TransferOut(nullptr) {}
  virtual ~TransferOut();

  TransferOut(const TransferOut& from);
  TransferOut(TransferOut&& from) noexcept
    : TransferOut() {
    *this = ::std::move(from);
  }

  inline TransferOut& operator=(const TransferOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferOut& operator=(TransferOut&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferOut& default_instance();

  static inline const TransferOut* internal_default_instance() {
    return reinterpret_cast<const TransferOut*>(
               &_TransferOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TransferOut& a, TransferOut& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferOut* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferOut* New() const final {
    return CreateMaybeMessage<TransferOut>(nullptr);
  }

  TransferOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferOut& from);
  void MergeFrom(const TransferOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TransferOut";
  }
  protected:
  explicit TransferOut(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kAmountFieldNumber = 3,
    kExpireTimeFieldNumber = 4,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // .TW.Binance.Proto.SendOrder.Token amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::TW::Binance::Proto::SendOrder_Token& amount() const;
  ::TW::Binance::Proto::SendOrder_Token* release_amount();
  ::TW::Binance::Proto::SendOrder_Token* mutable_amount();
  void set_allocated_amount(::TW::Binance::Proto::SendOrder_Token* amount);
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_amount() const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::TW::Binance::Proto::SendOrder_Token* amount);
  ::TW::Binance::Proto::SendOrder_Token* unsafe_arena_release_amount();

  // int64 expire_time = 4;
  void clear_expire_time();
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time() const;
  void set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expire_time() const;
  void _internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TransferOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::TW::Binance::Proto::SendOrder_Token* amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class SideChainDelegate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.SideChainDelegate) */ {
 public:
  inline SideChainDelegate() : SideChainDelegate(nullptr) {}
  virtual ~SideChainDelegate();

  SideChainDelegate(const SideChainDelegate& from);
  SideChainDelegate(SideChainDelegate&& from) noexcept
    : SideChainDelegate() {
    *this = ::std::move(from);
  }

  inline SideChainDelegate& operator=(const SideChainDelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideChainDelegate& operator=(SideChainDelegate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SideChainDelegate& default_instance();

  static inline const SideChainDelegate* internal_default_instance() {
    return reinterpret_cast<const SideChainDelegate*>(
               &_SideChainDelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SideChainDelegate& a, SideChainDelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(SideChainDelegate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideChainDelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SideChainDelegate* New() const final {
    return CreateMaybeMessage<SideChainDelegate>(nullptr);
  }

  SideChainDelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SideChainDelegate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SideChainDelegate& from);
  void MergeFrom(const SideChainDelegate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideChainDelegate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.SideChainDelegate";
  }
  protected:
  explicit SideChainDelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddrFieldNumber = 1,
    kValidatorAddrFieldNumber = 2,
    kChainIdFieldNumber = 4,
    kDelegationFieldNumber = 3,
  };
  // bytes delegator_addr = 1;
  void clear_delegator_addr();
  const std::string& delegator_addr() const;
  void set_delegator_addr(const std::string& value);
  void set_delegator_addr(std::string&& value);
  void set_delegator_addr(const char* value);
  void set_delegator_addr(const void* value, size_t size);
  std::string* mutable_delegator_addr();
  std::string* release_delegator_addr();
  void set_allocated_delegator_addr(std::string* delegator_addr);
  private:
  const std::string& _internal_delegator_addr() const;
  void _internal_set_delegator_addr(const std::string& value);
  std::string* _internal_mutable_delegator_addr();
  public:

  // bytes validator_addr = 2;
  void clear_validator_addr();
  const std::string& validator_addr() const;
  void set_validator_addr(const std::string& value);
  void set_validator_addr(std::string&& value);
  void set_validator_addr(const char* value);
  void set_validator_addr(const void* value, size_t size);
  std::string* mutable_validator_addr();
  std::string* release_validator_addr();
  void set_allocated_validator_addr(std::string* validator_addr);
  private:
  const std::string& _internal_validator_addr() const;
  void _internal_set_validator_addr(const std::string& value);
  std::string* _internal_mutable_validator_addr();
  public:

  // string chain_id = 4;
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // .TW.Binance.Proto.SendOrder.Token delegation = 3;
  bool has_delegation() const;
  private:
  bool _internal_has_delegation() const;
  public:
  void clear_delegation();
  const ::TW::Binance::Proto::SendOrder_Token& delegation() const;
  ::TW::Binance::Proto::SendOrder_Token* release_delegation();
  ::TW::Binance::Proto::SendOrder_Token* mutable_delegation();
  void set_allocated_delegation(::TW::Binance::Proto::SendOrder_Token* delegation);
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_delegation() const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_mutable_delegation();
  public:
  void unsafe_arena_set_allocated_delegation(
      ::TW::Binance::Proto::SendOrder_Token* delegation);
  ::TW::Binance::Proto::SendOrder_Token* unsafe_arena_release_delegation();

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.SideChainDelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::TW::Binance::Proto::SendOrder_Token* delegation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class SideChainRedelegate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.SideChainRedelegate) */ {
 public:
  inline SideChainRedelegate() : SideChainRedelegate(nullptr) {}
  virtual ~SideChainRedelegate();

  SideChainRedelegate(const SideChainRedelegate& from);
  SideChainRedelegate(SideChainRedelegate&& from) noexcept
    : SideChainRedelegate() {
    *this = ::std::move(from);
  }

  inline SideChainRedelegate& operator=(const SideChainRedelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideChainRedelegate& operator=(SideChainRedelegate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SideChainRedelegate& default_instance();

  static inline const SideChainRedelegate* internal_default_instance() {
    return reinterpret_cast<const SideChainRedelegate*>(
               &_SideChainRedelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SideChainRedelegate& a, SideChainRedelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(SideChainRedelegate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideChainRedelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SideChainRedelegate* New() const final {
    return CreateMaybeMessage<SideChainRedelegate>(nullptr);
  }

  SideChainRedelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SideChainRedelegate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SideChainRedelegate& from);
  void MergeFrom(const SideChainRedelegate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideChainRedelegate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.SideChainRedelegate";
  }
  protected:
  explicit SideChainRedelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddrFieldNumber = 1,
    kValidatorSrcAddrFieldNumber = 2,
    kValidatorDstAddrFieldNumber = 3,
    kChainIdFieldNumber = 5,
    kAmountFieldNumber = 4,
  };
  // bytes delegator_addr = 1;
  void clear_delegator_addr();
  const std::string& delegator_addr() const;
  void set_delegator_addr(const std::string& value);
  void set_delegator_addr(std::string&& value);
  void set_delegator_addr(const char* value);
  void set_delegator_addr(const void* value, size_t size);
  std::string* mutable_delegator_addr();
  std::string* release_delegator_addr();
  void set_allocated_delegator_addr(std::string* delegator_addr);
  private:
  const std::string& _internal_delegator_addr() const;
  void _internal_set_delegator_addr(const std::string& value);
  std::string* _internal_mutable_delegator_addr();
  public:

  // bytes validator_src_addr = 2;
  void clear_validator_src_addr();
  const std::string& validator_src_addr() const;
  void set_validator_src_addr(const std::string& value);
  void set_validator_src_addr(std::string&& value);
  void set_validator_src_addr(const char* value);
  void set_validator_src_addr(const void* value, size_t size);
  std::string* mutable_validator_src_addr();
  std::string* release_validator_src_addr();
  void set_allocated_validator_src_addr(std::string* validator_src_addr);
  private:
  const std::string& _internal_validator_src_addr() const;
  void _internal_set_validator_src_addr(const std::string& value);
  std::string* _internal_mutable_validator_src_addr();
  public:

  // bytes validator_dst_addr = 3;
  void clear_validator_dst_addr();
  const std::string& validator_dst_addr() const;
  void set_validator_dst_addr(const std::string& value);
  void set_validator_dst_addr(std::string&& value);
  void set_validator_dst_addr(const char* value);
  void set_validator_dst_addr(const void* value, size_t size);
  std::string* mutable_validator_dst_addr();
  std::string* release_validator_dst_addr();
  void set_allocated_validator_dst_addr(std::string* validator_dst_addr);
  private:
  const std::string& _internal_validator_dst_addr() const;
  void _internal_set_validator_dst_addr(const std::string& value);
  std::string* _internal_mutable_validator_dst_addr();
  public:

  // string chain_id = 5;
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // .TW.Binance.Proto.SendOrder.Token amount = 4;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::TW::Binance::Proto::SendOrder_Token& amount() const;
  ::TW::Binance::Proto::SendOrder_Token* release_amount();
  ::TW::Binance::Proto::SendOrder_Token* mutable_amount();
  void set_allocated_amount(::TW::Binance::Proto::SendOrder_Token* amount);
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_amount() const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::TW::Binance::Proto::SendOrder_Token* amount);
  ::TW::Binance::Proto::SendOrder_Token* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.SideChainRedelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_src_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_dst_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::TW::Binance::Proto::SendOrder_Token* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class SideChainUndelegate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.SideChainUndelegate) */ {
 public:
  inline SideChainUndelegate() : SideChainUndelegate(nullptr) {}
  virtual ~SideChainUndelegate();

  SideChainUndelegate(const SideChainUndelegate& from);
  SideChainUndelegate(SideChainUndelegate&& from) noexcept
    : SideChainUndelegate() {
    *this = ::std::move(from);
  }

  inline SideChainUndelegate& operator=(const SideChainUndelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideChainUndelegate& operator=(SideChainUndelegate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SideChainUndelegate& default_instance();

  static inline const SideChainUndelegate* internal_default_instance() {
    return reinterpret_cast<const SideChainUndelegate*>(
               &_SideChainUndelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SideChainUndelegate& a, SideChainUndelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(SideChainUndelegate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideChainUndelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SideChainUndelegate* New() const final {
    return CreateMaybeMessage<SideChainUndelegate>(nullptr);
  }

  SideChainUndelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SideChainUndelegate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SideChainUndelegate& from);
  void MergeFrom(const SideChainUndelegate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideChainUndelegate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.SideChainUndelegate";
  }
  protected:
  explicit SideChainUndelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddrFieldNumber = 1,
    kValidatorAddrFieldNumber = 2,
    kChainIdFieldNumber = 4,
    kAmountFieldNumber = 3,
  };
  // bytes delegator_addr = 1;
  void clear_delegator_addr();
  const std::string& delegator_addr() const;
  void set_delegator_addr(const std::string& value);
  void set_delegator_addr(std::string&& value);
  void set_delegator_addr(const char* value);
  void set_delegator_addr(const void* value, size_t size);
  std::string* mutable_delegator_addr();
  std::string* release_delegator_addr();
  void set_allocated_delegator_addr(std::string* delegator_addr);
  private:
  const std::string& _internal_delegator_addr() const;
  void _internal_set_delegator_addr(const std::string& value);
  std::string* _internal_mutable_delegator_addr();
  public:

  // bytes validator_addr = 2;
  void clear_validator_addr();
  const std::string& validator_addr() const;
  void set_validator_addr(const std::string& value);
  void set_validator_addr(std::string&& value);
  void set_validator_addr(const char* value);
  void set_validator_addr(const void* value, size_t size);
  std::string* mutable_validator_addr();
  std::string* release_validator_addr();
  void set_allocated_validator_addr(std::string* validator_addr);
  private:
  const std::string& _internal_validator_addr() const;
  void _internal_set_validator_addr(const std::string& value);
  std::string* _internal_mutable_validator_addr();
  public:

  // string chain_id = 4;
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // .TW.Binance.Proto.SendOrder.Token amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::TW::Binance::Proto::SendOrder_Token& amount() const;
  ::TW::Binance::Proto::SendOrder_Token* release_amount();
  ::TW::Binance::Proto::SendOrder_Token* mutable_amount();
  void set_allocated_amount(::TW::Binance::Proto::SendOrder_Token* amount);
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_amount() const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::TW::Binance::Proto::SendOrder_Token* amount);
  ::TW::Binance::Proto::SendOrder_Token* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.SideChainUndelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::TW::Binance::Proto::SendOrder_Token* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TimeLockOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TimeLockOrder) */ {
 public:
  inline TimeLockOrder() : TimeLockOrder(nullptr) {}
  virtual ~TimeLockOrder();

  TimeLockOrder(const TimeLockOrder& from);
  TimeLockOrder(TimeLockOrder&& from) noexcept
    : TimeLockOrder() {
    *this = ::std::move(from);
  }

  inline TimeLockOrder& operator=(const TimeLockOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeLockOrder& operator=(TimeLockOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeLockOrder& default_instance();

  static inline const TimeLockOrder* internal_default_instance() {
    return reinterpret_cast<const TimeLockOrder*>(
               &_TimeLockOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TimeLockOrder& a, TimeLockOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeLockOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeLockOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeLockOrder* New() const final {
    return CreateMaybeMessage<TimeLockOrder>(nullptr);
  }

  TimeLockOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeLockOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeLockOrder& from);
  void MergeFrom(const TimeLockOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeLockOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TimeLockOrder";
  }
  protected:
  explicit TimeLockOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 3,
    kFromAddressFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kLockTimeFieldNumber = 4,
  };
  // repeated .TW.Binance.Proto.SendOrder.Token amount = 3;
  int amount_size() const;
  private:
  int _internal_amount_size() const;
  public:
  void clear_amount();
  ::TW::Binance::Proto::SendOrder_Token* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
      mutable_amount();
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_amount(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_add_amount();
  public:
  const ::TW::Binance::Proto::SendOrder_Token& amount(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
      amount() const;

  // bytes from_address = 1;
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const void* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 lock_time = 4;
  void clear_lock_time();
  ::PROTOBUF_NAMESPACE_ID::int64 lock_time() const;
  void set_lock_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lock_time() const;
  void _internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TimeLockOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token > amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int64 lock_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TimeRelockOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TimeRelockOrder) */ {
 public:
  inline TimeRelockOrder() : TimeRelockOrder(nullptr) {}
  virtual ~TimeRelockOrder();

  TimeRelockOrder(const TimeRelockOrder& from);
  TimeRelockOrder(TimeRelockOrder&& from) noexcept
    : TimeRelockOrder() {
    *this = ::std::move(from);
  }

  inline TimeRelockOrder& operator=(const TimeRelockOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRelockOrder& operator=(TimeRelockOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeRelockOrder& default_instance();

  static inline const TimeRelockOrder* internal_default_instance() {
    return reinterpret_cast<const TimeRelockOrder*>(
               &_TimeRelockOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TimeRelockOrder& a, TimeRelockOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeRelockOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeRelockOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeRelockOrder* New() const final {
    return CreateMaybeMessage<TimeRelockOrder>(nullptr);
  }

  TimeRelockOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeRelockOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeRelockOrder& from);
  void MergeFrom(const TimeRelockOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeRelockOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TimeRelockOrder";
  }
  protected:
  explicit TimeRelockOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 4,
    kFromAddressFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kIdFieldNumber = 2,
    kLockTimeFieldNumber = 5,
  };
  // repeated .TW.Binance.Proto.SendOrder.Token amount = 4;
  int amount_size() const;
  private:
  int _internal_amount_size() const;
  public:
  void clear_amount();
  ::TW::Binance::Proto::SendOrder_Token* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
      mutable_amount();
  private:
  const ::TW::Binance::Proto::SendOrder_Token& _internal_amount(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* _internal_add_amount();
  public:
  const ::TW::Binance::Proto::SendOrder_Token& amount(int index) const;
  ::TW::Binance::Proto::SendOrder_Token* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
      amount() const;

  // bytes from_address = 1;
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const void* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 lock_time = 5;
  void clear_lock_time();
  ::PROTOBUF_NAMESPACE_ID::int64 lock_time() const;
  void set_lock_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lock_time() const;
  void _internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TimeRelockOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token > amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 lock_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class TimeUnlockOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.TimeUnlockOrder) */ {
 public:
  inline TimeUnlockOrder() : TimeUnlockOrder(nullptr) {}
  virtual ~TimeUnlockOrder();

  TimeUnlockOrder(const TimeUnlockOrder& from);
  TimeUnlockOrder(TimeUnlockOrder&& from) noexcept
    : TimeUnlockOrder() {
    *this = ::std::move(from);
  }

  inline TimeUnlockOrder& operator=(const TimeUnlockOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeUnlockOrder& operator=(TimeUnlockOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeUnlockOrder& default_instance();

  static inline const TimeUnlockOrder* internal_default_instance() {
    return reinterpret_cast<const TimeUnlockOrder*>(
               &_TimeUnlockOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TimeUnlockOrder& a, TimeUnlockOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeUnlockOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeUnlockOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeUnlockOrder* New() const final {
    return CreateMaybeMessage<TimeUnlockOrder>(nullptr);
  }

  TimeUnlockOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeUnlockOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeUnlockOrder& from);
  void MergeFrom(const TimeUnlockOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeUnlockOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.TimeUnlockOrder";
  }
  protected:
  explicit TimeUnlockOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // bytes from_address = 1;
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const void* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.TimeUnlockOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  enum OrderOneofCase {
    kTradeOrder = 8,
    kCancelTradeOrder = 9,
    kSendOrder = 10,
    kFreezeOrder = 11,
    kUnfreezeOrder = 12,
    kHtltOrder = 13,
    kDepositHTLTOrder = 14,
    kClaimHTLTOrder = 15,
    kRefundHTLTOrder = 16,
    kIssueOrder = 17,
    kMintOrder = 18,
    kBurnOrder = 19,
    kTransferOutOrder = 20,
    kSideDelegateOrder = 21,
    kSideRedelegateOrder = 22,
    kSideUndelegateOrder = 23,
    kTimeLockOrder = 24,
    kTimeRelockOrder = 25,
    kTimeUnlockOrder = 26,
    ORDER_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 1,
    kMemoFieldNumber = 5,
    kPrivateKeyFieldNumber = 6,
    kAccountNumberFieldNumber = 2,
    kSequenceFieldNumber = 3,
    kSourceFieldNumber = 4,
    kTradeOrderFieldNumber = 8,
    kCancelTradeOrderFieldNumber = 9,
    kSendOrderFieldNumber = 10,
    kFreezeOrderFieldNumber = 11,
    kUnfreezeOrderFieldNumber = 12,
    kHtltOrderFieldNumber = 13,
    kDepositHTLTOrderFieldNumber = 14,
    kClaimHTLTOrderFieldNumber = 15,
    kRefundHTLTOrderFieldNumber = 16,
    kIssueOrderFieldNumber = 17,
    kMintOrderFieldNumber = 18,
    kBurnOrderFieldNumber = 19,
    kTransferOutOrderFieldNumber = 20,
    kSideDelegateOrderFieldNumber = 21,
    kSideRedelegateOrderFieldNumber = 22,
    kSideUndelegateOrderFieldNumber = 23,
    kTimeLockOrderFieldNumber = 24,
    kTimeRelockOrderFieldNumber = 25,
    kTimeUnlockOrderFieldNumber = 26,
  };
  // string chain_id = 1;
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // string memo = 5;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes private_key = 6;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // int64 account_number = 2;
  void clear_account_number();
  ::PROTOBUF_NAMESPACE_ID::int64 account_number() const;
  void set_account_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_account_number() const;
  void _internal_set_account_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 source = 4;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::int64 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .TW.Binance.Proto.TradeOrder trade_order = 8;
  bool has_trade_order() const;
  private:
  bool _internal_has_trade_order() const;
  public:
  void clear_trade_order();
  const ::TW::Binance::Proto::TradeOrder& trade_order() const;
  ::TW::Binance::Proto::TradeOrder* release_trade_order();
  ::TW::Binance::Proto::TradeOrder* mutable_trade_order();
  void set_allocated_trade_order(::TW::Binance::Proto::TradeOrder* trade_order);
  private:
  const ::TW::Binance::Proto::TradeOrder& _internal_trade_order() const;
  ::TW::Binance::Proto::TradeOrder* _internal_mutable_trade_order();
  public:
  void unsafe_arena_set_allocated_trade_order(
      ::TW::Binance::Proto::TradeOrder* trade_order);
  ::TW::Binance::Proto::TradeOrder* unsafe_arena_release_trade_order();

  // .TW.Binance.Proto.CancelTradeOrder cancel_trade_order = 9;
  bool has_cancel_trade_order() const;
  private:
  bool _internal_has_cancel_trade_order() const;
  public:
  void clear_cancel_trade_order();
  const ::TW::Binance::Proto::CancelTradeOrder& cancel_trade_order() const;
  ::TW::Binance::Proto::CancelTradeOrder* release_cancel_trade_order();
  ::TW::Binance::Proto::CancelTradeOrder* mutable_cancel_trade_order();
  void set_allocated_cancel_trade_order(::TW::Binance::Proto::CancelTradeOrder* cancel_trade_order);
  private:
  const ::TW::Binance::Proto::CancelTradeOrder& _internal_cancel_trade_order() const;
  ::TW::Binance::Proto::CancelTradeOrder* _internal_mutable_cancel_trade_order();
  public:
  void unsafe_arena_set_allocated_cancel_trade_order(
      ::TW::Binance::Proto::CancelTradeOrder* cancel_trade_order);
  ::TW::Binance::Proto::CancelTradeOrder* unsafe_arena_release_cancel_trade_order();

  // .TW.Binance.Proto.SendOrder send_order = 10;
  bool has_send_order() const;
  private:
  bool _internal_has_send_order() const;
  public:
  void clear_send_order();
  const ::TW::Binance::Proto::SendOrder& send_order() const;
  ::TW::Binance::Proto::SendOrder* release_send_order();
  ::TW::Binance::Proto::SendOrder* mutable_send_order();
  void set_allocated_send_order(::TW::Binance::Proto::SendOrder* send_order);
  private:
  const ::TW::Binance::Proto::SendOrder& _internal_send_order() const;
  ::TW::Binance::Proto::SendOrder* _internal_mutable_send_order();
  public:
  void unsafe_arena_set_allocated_send_order(
      ::TW::Binance::Proto::SendOrder* send_order);
  ::TW::Binance::Proto::SendOrder* unsafe_arena_release_send_order();

  // .TW.Binance.Proto.TokenFreezeOrder freeze_order = 11;
  bool has_freeze_order() const;
  private:
  bool _internal_has_freeze_order() const;
  public:
  void clear_freeze_order();
  const ::TW::Binance::Proto::TokenFreezeOrder& freeze_order() const;
  ::TW::Binance::Proto::TokenFreezeOrder* release_freeze_order();
  ::TW::Binance::Proto::TokenFreezeOrder* mutable_freeze_order();
  void set_allocated_freeze_order(::TW::Binance::Proto::TokenFreezeOrder* freeze_order);
  private:
  const ::TW::Binance::Proto::TokenFreezeOrder& _internal_freeze_order() const;
  ::TW::Binance::Proto::TokenFreezeOrder* _internal_mutable_freeze_order();
  public:
  void unsafe_arena_set_allocated_freeze_order(
      ::TW::Binance::Proto::TokenFreezeOrder* freeze_order);
  ::TW::Binance::Proto::TokenFreezeOrder* unsafe_arena_release_freeze_order();

  // .TW.Binance.Proto.TokenUnfreezeOrder unfreeze_order = 12;
  bool has_unfreeze_order() const;
  private:
  bool _internal_has_unfreeze_order() const;
  public:
  void clear_unfreeze_order();
  const ::TW::Binance::Proto::TokenUnfreezeOrder& unfreeze_order() const;
  ::TW::Binance::Proto::TokenUnfreezeOrder* release_unfreeze_order();
  ::TW::Binance::Proto::TokenUnfreezeOrder* mutable_unfreeze_order();
  void set_allocated_unfreeze_order(::TW::Binance::Proto::TokenUnfreezeOrder* unfreeze_order);
  private:
  const ::TW::Binance::Proto::TokenUnfreezeOrder& _internal_unfreeze_order() const;
  ::TW::Binance::Proto::TokenUnfreezeOrder* _internal_mutable_unfreeze_order();
  public:
  void unsafe_arena_set_allocated_unfreeze_order(
      ::TW::Binance::Proto::TokenUnfreezeOrder* unfreeze_order);
  ::TW::Binance::Proto::TokenUnfreezeOrder* unsafe_arena_release_unfreeze_order();

  // .TW.Binance.Proto.HTLTOrder htlt_order = 13;
  bool has_htlt_order() const;
  private:
  bool _internal_has_htlt_order() const;
  public:
  void clear_htlt_order();
  const ::TW::Binance::Proto::HTLTOrder& htlt_order() const;
  ::TW::Binance::Proto::HTLTOrder* release_htlt_order();
  ::TW::Binance::Proto::HTLTOrder* mutable_htlt_order();
  void set_allocated_htlt_order(::TW::Binance::Proto::HTLTOrder* htlt_order);
  private:
  const ::TW::Binance::Proto::HTLTOrder& _internal_htlt_order() const;
  ::TW::Binance::Proto::HTLTOrder* _internal_mutable_htlt_order();
  public:
  void unsafe_arena_set_allocated_htlt_order(
      ::TW::Binance::Proto::HTLTOrder* htlt_order);
  ::TW::Binance::Proto::HTLTOrder* unsafe_arena_release_htlt_order();

  // .TW.Binance.Proto.DepositHTLTOrder depositHTLT_order = 14;
  bool has_deposithtlt_order() const;
  private:
  bool _internal_has_deposithtlt_order() const;
  public:
  void clear_deposithtlt_order();
  const ::TW::Binance::Proto::DepositHTLTOrder& deposithtlt_order() const;
  ::TW::Binance::Proto::DepositHTLTOrder* release_deposithtlt_order();
  ::TW::Binance::Proto::DepositHTLTOrder* mutable_deposithtlt_order();
  void set_allocated_deposithtlt_order(::TW::Binance::Proto::DepositHTLTOrder* deposithtlt_order);
  private:
  const ::TW::Binance::Proto::DepositHTLTOrder& _internal_deposithtlt_order() const;
  ::TW::Binance::Proto::DepositHTLTOrder* _internal_mutable_deposithtlt_order();
  public:
  void unsafe_arena_set_allocated_deposithtlt_order(
      ::TW::Binance::Proto::DepositHTLTOrder* deposithtlt_order);
  ::TW::Binance::Proto::DepositHTLTOrder* unsafe_arena_release_deposithtlt_order();

  // .TW.Binance.Proto.ClaimHTLOrder claimHTLT_order = 15;
  bool has_claimhtlt_order() const;
  private:
  bool _internal_has_claimhtlt_order() const;
  public:
  void clear_claimhtlt_order();
  const ::TW::Binance::Proto::ClaimHTLOrder& claimhtlt_order() const;
  ::TW::Binance::Proto::ClaimHTLOrder* release_claimhtlt_order();
  ::TW::Binance::Proto::ClaimHTLOrder* mutable_claimhtlt_order();
  void set_allocated_claimhtlt_order(::TW::Binance::Proto::ClaimHTLOrder* claimhtlt_order);
  private:
  const ::TW::Binance::Proto::ClaimHTLOrder& _internal_claimhtlt_order() const;
  ::TW::Binance::Proto::ClaimHTLOrder* _internal_mutable_claimhtlt_order();
  public:
  void unsafe_arena_set_allocated_claimhtlt_order(
      ::TW::Binance::Proto::ClaimHTLOrder* claimhtlt_order);
  ::TW::Binance::Proto::ClaimHTLOrder* unsafe_arena_release_claimhtlt_order();

  // .TW.Binance.Proto.RefundHTLTOrder refundHTLT_order = 16;
  bool has_refundhtlt_order() const;
  private:
  bool _internal_has_refundhtlt_order() const;
  public:
  void clear_refundhtlt_order();
  const ::TW::Binance::Proto::RefundHTLTOrder& refundhtlt_order() const;
  ::TW::Binance::Proto::RefundHTLTOrder* release_refundhtlt_order();
  ::TW::Binance::Proto::RefundHTLTOrder* mutable_refundhtlt_order();
  void set_allocated_refundhtlt_order(::TW::Binance::Proto::RefundHTLTOrder* refundhtlt_order);
  private:
  const ::TW::Binance::Proto::RefundHTLTOrder& _internal_refundhtlt_order() const;
  ::TW::Binance::Proto::RefundHTLTOrder* _internal_mutable_refundhtlt_order();
  public:
  void unsafe_arena_set_allocated_refundhtlt_order(
      ::TW::Binance::Proto::RefundHTLTOrder* refundhtlt_order);
  ::TW::Binance::Proto::RefundHTLTOrder* unsafe_arena_release_refundhtlt_order();

  // .TW.Binance.Proto.TokenIssueOrder issue_order = 17;
  bool has_issue_order() const;
  private:
  bool _internal_has_issue_order() const;
  public:
  void clear_issue_order();
  const ::TW::Binance::Proto::TokenIssueOrder& issue_order() const;
  ::TW::Binance::Proto::TokenIssueOrder* release_issue_order();
  ::TW::Binance::Proto::TokenIssueOrder* mutable_issue_order();
  void set_allocated_issue_order(::TW::Binance::Proto::TokenIssueOrder* issue_order);
  private:
  const ::TW::Binance::Proto::TokenIssueOrder& _internal_issue_order() const;
  ::TW::Binance::Proto::TokenIssueOrder* _internal_mutable_issue_order();
  public:
  void unsafe_arena_set_allocated_issue_order(
      ::TW::Binance::Proto::TokenIssueOrder* issue_order);
  ::TW::Binance::Proto::TokenIssueOrder* unsafe_arena_release_issue_order();

  // .TW.Binance.Proto.TokenMintOrder mint_order = 18;
  bool has_mint_order() const;
  private:
  bool _internal_has_mint_order() const;
  public:
  void clear_mint_order();
  const ::TW::Binance::Proto::TokenMintOrder& mint_order() const;
  ::TW::Binance::Proto::TokenMintOrder* release_mint_order();
  ::TW::Binance::Proto::TokenMintOrder* mutable_mint_order();
  void set_allocated_mint_order(::TW::Binance::Proto::TokenMintOrder* mint_order);
  private:
  const ::TW::Binance::Proto::TokenMintOrder& _internal_mint_order() const;
  ::TW::Binance::Proto::TokenMintOrder* _internal_mutable_mint_order();
  public:
  void unsafe_arena_set_allocated_mint_order(
      ::TW::Binance::Proto::TokenMintOrder* mint_order);
  ::TW::Binance::Proto::TokenMintOrder* unsafe_arena_release_mint_order();

  // .TW.Binance.Proto.TokenBurnOrder burn_order = 19;
  bool has_burn_order() const;
  private:
  bool _internal_has_burn_order() const;
  public:
  void clear_burn_order();
  const ::TW::Binance::Proto::TokenBurnOrder& burn_order() const;
  ::TW::Binance::Proto::TokenBurnOrder* release_burn_order();
  ::TW::Binance::Proto::TokenBurnOrder* mutable_burn_order();
  void set_allocated_burn_order(::TW::Binance::Proto::TokenBurnOrder* burn_order);
  private:
  const ::TW::Binance::Proto::TokenBurnOrder& _internal_burn_order() const;
  ::TW::Binance::Proto::TokenBurnOrder* _internal_mutable_burn_order();
  public:
  void unsafe_arena_set_allocated_burn_order(
      ::TW::Binance::Proto::TokenBurnOrder* burn_order);
  ::TW::Binance::Proto::TokenBurnOrder* unsafe_arena_release_burn_order();

  // .TW.Binance.Proto.TransferOut transfer_out_order = 20;
  bool has_transfer_out_order() const;
  private:
  bool _internal_has_transfer_out_order() const;
  public:
  void clear_transfer_out_order();
  const ::TW::Binance::Proto::TransferOut& transfer_out_order() const;
  ::TW::Binance::Proto::TransferOut* release_transfer_out_order();
  ::TW::Binance::Proto::TransferOut* mutable_transfer_out_order();
  void set_allocated_transfer_out_order(::TW::Binance::Proto::TransferOut* transfer_out_order);
  private:
  const ::TW::Binance::Proto::TransferOut& _internal_transfer_out_order() const;
  ::TW::Binance::Proto::TransferOut* _internal_mutable_transfer_out_order();
  public:
  void unsafe_arena_set_allocated_transfer_out_order(
      ::TW::Binance::Proto::TransferOut* transfer_out_order);
  ::TW::Binance::Proto::TransferOut* unsafe_arena_release_transfer_out_order();

  // .TW.Binance.Proto.SideChainDelegate side_delegate_order = 21;
  bool has_side_delegate_order() const;
  private:
  bool _internal_has_side_delegate_order() const;
  public:
  void clear_side_delegate_order();
  const ::TW::Binance::Proto::SideChainDelegate& side_delegate_order() const;
  ::TW::Binance::Proto::SideChainDelegate* release_side_delegate_order();
  ::TW::Binance::Proto::SideChainDelegate* mutable_side_delegate_order();
  void set_allocated_side_delegate_order(::TW::Binance::Proto::SideChainDelegate* side_delegate_order);
  private:
  const ::TW::Binance::Proto::SideChainDelegate& _internal_side_delegate_order() const;
  ::TW::Binance::Proto::SideChainDelegate* _internal_mutable_side_delegate_order();
  public:
  void unsafe_arena_set_allocated_side_delegate_order(
      ::TW::Binance::Proto::SideChainDelegate* side_delegate_order);
  ::TW::Binance::Proto::SideChainDelegate* unsafe_arena_release_side_delegate_order();

  // .TW.Binance.Proto.SideChainRedelegate side_redelegate_order = 22;
  bool has_side_redelegate_order() const;
  private:
  bool _internal_has_side_redelegate_order() const;
  public:
  void clear_side_redelegate_order();
  const ::TW::Binance::Proto::SideChainRedelegate& side_redelegate_order() const;
  ::TW::Binance::Proto::SideChainRedelegate* release_side_redelegate_order();
  ::TW::Binance::Proto::SideChainRedelegate* mutable_side_redelegate_order();
  void set_allocated_side_redelegate_order(::TW::Binance::Proto::SideChainRedelegate* side_redelegate_order);
  private:
  const ::TW::Binance::Proto::SideChainRedelegate& _internal_side_redelegate_order() const;
  ::TW::Binance::Proto::SideChainRedelegate* _internal_mutable_side_redelegate_order();
  public:
  void unsafe_arena_set_allocated_side_redelegate_order(
      ::TW::Binance::Proto::SideChainRedelegate* side_redelegate_order);
  ::TW::Binance::Proto::SideChainRedelegate* unsafe_arena_release_side_redelegate_order();

  // .TW.Binance.Proto.SideChainUndelegate side_undelegate_order = 23;
  bool has_side_undelegate_order() const;
  private:
  bool _internal_has_side_undelegate_order() const;
  public:
  void clear_side_undelegate_order();
  const ::TW::Binance::Proto::SideChainUndelegate& side_undelegate_order() const;
  ::TW::Binance::Proto::SideChainUndelegate* release_side_undelegate_order();
  ::TW::Binance::Proto::SideChainUndelegate* mutable_side_undelegate_order();
  void set_allocated_side_undelegate_order(::TW::Binance::Proto::SideChainUndelegate* side_undelegate_order);
  private:
  const ::TW::Binance::Proto::SideChainUndelegate& _internal_side_undelegate_order() const;
  ::TW::Binance::Proto::SideChainUndelegate* _internal_mutable_side_undelegate_order();
  public:
  void unsafe_arena_set_allocated_side_undelegate_order(
      ::TW::Binance::Proto::SideChainUndelegate* side_undelegate_order);
  ::TW::Binance::Proto::SideChainUndelegate* unsafe_arena_release_side_undelegate_order();

  // .TW.Binance.Proto.TimeLockOrder time_lock_order = 24;
  bool has_time_lock_order() const;
  private:
  bool _internal_has_time_lock_order() const;
  public:
  void clear_time_lock_order();
  const ::TW::Binance::Proto::TimeLockOrder& time_lock_order() const;
  ::TW::Binance::Proto::TimeLockOrder* release_time_lock_order();
  ::TW::Binance::Proto::TimeLockOrder* mutable_time_lock_order();
  void set_allocated_time_lock_order(::TW::Binance::Proto::TimeLockOrder* time_lock_order);
  private:
  const ::TW::Binance::Proto::TimeLockOrder& _internal_time_lock_order() const;
  ::TW::Binance::Proto::TimeLockOrder* _internal_mutable_time_lock_order();
  public:
  void unsafe_arena_set_allocated_time_lock_order(
      ::TW::Binance::Proto::TimeLockOrder* time_lock_order);
  ::TW::Binance::Proto::TimeLockOrder* unsafe_arena_release_time_lock_order();

  // .TW.Binance.Proto.TimeRelockOrder time_relock_order = 25;
  bool has_time_relock_order() const;
  private:
  bool _internal_has_time_relock_order() const;
  public:
  void clear_time_relock_order();
  const ::TW::Binance::Proto::TimeRelockOrder& time_relock_order() const;
  ::TW::Binance::Proto::TimeRelockOrder* release_time_relock_order();
  ::TW::Binance::Proto::TimeRelockOrder* mutable_time_relock_order();
  void set_allocated_time_relock_order(::TW::Binance::Proto::TimeRelockOrder* time_relock_order);
  private:
  const ::TW::Binance::Proto::TimeRelockOrder& _internal_time_relock_order() const;
  ::TW::Binance::Proto::TimeRelockOrder* _internal_mutable_time_relock_order();
  public:
  void unsafe_arena_set_allocated_time_relock_order(
      ::TW::Binance::Proto::TimeRelockOrder* time_relock_order);
  ::TW::Binance::Proto::TimeRelockOrder* unsafe_arena_release_time_relock_order();

  // .TW.Binance.Proto.TimeUnlockOrder time_unlock_order = 26;
  bool has_time_unlock_order() const;
  private:
  bool _internal_has_time_unlock_order() const;
  public:
  void clear_time_unlock_order();
  const ::TW::Binance::Proto::TimeUnlockOrder& time_unlock_order() const;
  ::TW::Binance::Proto::TimeUnlockOrder* release_time_unlock_order();
  ::TW::Binance::Proto::TimeUnlockOrder* mutable_time_unlock_order();
  void set_allocated_time_unlock_order(::TW::Binance::Proto::TimeUnlockOrder* time_unlock_order);
  private:
  const ::TW::Binance::Proto::TimeUnlockOrder& _internal_time_unlock_order() const;
  ::TW::Binance::Proto::TimeUnlockOrder* _internal_mutable_time_unlock_order();
  public:
  void unsafe_arena_set_allocated_time_unlock_order(
      ::TW::Binance::Proto::TimeUnlockOrder* time_unlock_order);
  ::TW::Binance::Proto::TimeUnlockOrder* unsafe_arena_release_time_unlock_order();

  void clear_order_oneof();
  OrderOneofCase order_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_trade_order();
  void set_has_cancel_trade_order();
  void set_has_send_order();
  void set_has_freeze_order();
  void set_has_unfreeze_order();
  void set_has_htlt_order();
  void set_has_deposithtlt_order();
  void set_has_claimhtlt_order();
  void set_has_refundhtlt_order();
  void set_has_issue_order();
  void set_has_mint_order();
  void set_has_burn_order();
  void set_has_transfer_out_order();
  void set_has_side_delegate_order();
  void set_has_side_redelegate_order();
  void set_has_side_undelegate_order();
  void set_has_time_lock_order();
  void set_has_time_relock_order();
  void set_has_time_unlock_order();

  inline bool has_order_oneof() const;
  inline void clear_has_order_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::int64 account_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 source_;
  union OrderOneofUnion {
    OrderOneofUnion() {}
    ::TW::Binance::Proto::TradeOrder* trade_order_;
    ::TW::Binance::Proto::CancelTradeOrder* cancel_trade_order_;
    ::TW::Binance::Proto::SendOrder* send_order_;
    ::TW::Binance::Proto::TokenFreezeOrder* freeze_order_;
    ::TW::Binance::Proto::TokenUnfreezeOrder* unfreeze_order_;
    ::TW::Binance::Proto::HTLTOrder* htlt_order_;
    ::TW::Binance::Proto::DepositHTLTOrder* deposithtlt_order_;
    ::TW::Binance::Proto::ClaimHTLOrder* claimhtlt_order_;
    ::TW::Binance::Proto::RefundHTLTOrder* refundhtlt_order_;
    ::TW::Binance::Proto::TokenIssueOrder* issue_order_;
    ::TW::Binance::Proto::TokenMintOrder* mint_order_;
    ::TW::Binance::Proto::TokenBurnOrder* burn_order_;
    ::TW::Binance::Proto::TransferOut* transfer_out_order_;
    ::TW::Binance::Proto::SideChainDelegate* side_delegate_order_;
    ::TW::Binance::Proto::SideChainRedelegate* side_redelegate_order_;
    ::TW::Binance::Proto::SideChainUndelegate* side_undelegate_order_;
    ::TW::Binance::Proto::TimeLockOrder* time_lock_order_;
    ::TW::Binance::Proto::TimeRelockOrder* time_relock_order_;
    ::TW::Binance::Proto::TimeUnlockOrder* time_unlock_order_;
  } order_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Binance_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Binance.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Binance.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Binance_2eproto);
    return ::descriptor_table_Binance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // @@protoc_insertion_point(class_scope:TW.Binance.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Binance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// repeated bytes msgs = 1;
inline int Transaction::_internal_msgs_size() const {
  return msgs_.size();
}
inline int Transaction::msgs_size() const {
  return _internal_msgs_size();
}
inline void Transaction::clear_msgs() {
  msgs_.Clear();
}
inline std::string* Transaction::add_msgs() {
  // @@protoc_insertion_point(field_add_mutable:TW.Binance.Proto.Transaction.msgs)
  return _internal_add_msgs();
}
inline const std::string& Transaction::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const std::string& Transaction::msgs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.Transaction.msgs)
  return _internal_msgs(index);
}
inline std::string* Transaction::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.Transaction.msgs)
  return msgs_.Mutable(index);
}
inline void Transaction::set_msgs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Transaction.msgs)
  msgs_.Mutable(index)->assign(value);
}
inline void Transaction::set_msgs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Transaction.msgs)
  msgs_.Mutable(index)->assign(std::move(value));
}
inline void Transaction::set_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.Transaction.msgs)
}
inline void Transaction::set_msgs(int index, const void* value, size_t size) {
  msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.Transaction.msgs)
}
inline std::string* Transaction::_internal_add_msgs() {
  return msgs_.Add();
}
inline void Transaction::add_msgs(const std::string& value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.Transaction.msgs)
}
inline void Transaction::add_msgs(std::string&& value) {
  msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.Transaction.msgs)
}
inline void Transaction::add_msgs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Binance.Proto.Transaction.msgs)
}
inline void Transaction::add_msgs(const void* value, size_t size) {
  msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Binance.Proto.Transaction.msgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::msgs() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.Transaction.msgs)
  return msgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.Transaction.msgs)
  return &msgs_;
}

// repeated bytes signatures = 2;
inline int Transaction::_internal_signatures_size() const {
  return signatures_.size();
}
inline int Transaction::signatures_size() const {
  return _internal_signatures_size();
}
inline void Transaction::clear_signatures() {
  signatures_.Clear();
}
inline std::string* Transaction::add_signatures() {
  // @@protoc_insertion_point(field_add_mutable:TW.Binance.Proto.Transaction.signatures)
  return _internal_add_signatures();
}
inline const std::string& Transaction::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const std::string& Transaction::signatures(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.Transaction.signatures)
  return _internal_signatures(index);
}
inline std::string* Transaction::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.Transaction.signatures)
  return signatures_.Mutable(index);
}
inline void Transaction::set_signatures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Transaction.signatures)
  signatures_.Mutable(index)->assign(value);
}
inline void Transaction::set_signatures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Transaction.signatures)
  signatures_.Mutable(index)->assign(std::move(value));
}
inline void Transaction::set_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.Transaction.signatures)
}
inline void Transaction::set_signatures(int index, const void* value, size_t size) {
  signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.Transaction.signatures)
}
inline std::string* Transaction::_internal_add_signatures() {
  return signatures_.Add();
}
inline void Transaction::add_signatures(const std::string& value) {
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.Transaction.signatures)
}
inline void Transaction::add_signatures(std::string&& value) {
  signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.Transaction.signatures)
}
inline void Transaction::add_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Binance.Proto.Transaction.signatures)
}
inline void Transaction::add_signatures(const void* value, size_t size) {
  signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Binance.Proto.Transaction.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::signatures() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.Transaction.signatures)
  return signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.Transaction.signatures)
  return &signatures_;
}

// string memo = 3;
inline void Transaction::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& Transaction::memo() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.Transaction.memo)
  return _internal_memo();
}
inline void Transaction::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Transaction.memo)
}
inline std::string* Transaction::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.Transaction.memo)
  return _internal_mutable_memo();
}
inline const std::string& Transaction::_internal_memo() const {
  return memo_.Get();
}
inline void Transaction::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_memo(std::string&& value) {
  
  memo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.Transaction.memo)
}
inline void Transaction::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.Transaction.memo)
}
inline void Transaction::set_memo(const char* value,
    size_t size) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.Transaction.memo)
}
inline std::string* Transaction::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.Transaction.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.Transaction.memo)
}

// int64 source = 4;
inline void Transaction::clear_source() {
  source_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::source() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.Transaction.source)
  return _internal_source();
}
inline void Transaction::_internal_set_source(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  source_ = value;
}
inline void Transaction::set_source(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Transaction.source)
}

// bytes data = 5;
inline void Transaction::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Transaction::data() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.Transaction.data)
  return _internal_data();
}
inline void Transaction::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Transaction.data)
}
inline std::string* Transaction::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.Transaction.data)
  return _internal_mutable_data();
}
inline const std::string& Transaction::_internal_data() const {
  return data_.Get();
}
inline void Transaction::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.Transaction.data)
}
inline void Transaction::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.Transaction.data)
}
inline void Transaction::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.Transaction.data)
}
inline std::string* Transaction::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_data() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.Transaction.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.Transaction.data)
}

// -------------------------------------------------------------------

// Signature_PubKey

// -------------------------------------------------------------------

// Signature

// bytes pub_key = 1;
inline void Signature::clear_pub_key() {
  pub_key_.ClearToEmpty();
}
inline const std::string& Signature::pub_key() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.Signature.pub_key)
  return _internal_pub_key();
}
inline void Signature::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Signature.pub_key)
}
inline std::string* Signature::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.Signature.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& Signature::_internal_pub_key() const {
  return pub_key_.Get();
}
inline void Signature::_internal_set_pub_key(const std::string& value) {
  
  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Signature::set_pub_key(std::string&& value) {
  
  pub_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.Signature.pub_key)
}
inline void Signature::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.Signature.pub_key)
}
inline void Signature::set_pub_key(const void* value,
    size_t size) {
  
  pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.Signature.pub_key)
}
inline std::string* Signature::_internal_mutable_pub_key() {
  
  return pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Signature::release_pub_key() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.Signature.pub_key)
  return pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {
    
  } else {
    
  }
  pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.Signature.pub_key)
}

// bytes signature = 2;
inline void Signature::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.Signature.signature)
  return _internal_signature();
}
inline void Signature::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Signature.signature)
}
inline std::string* Signature::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.Signature.signature)
  return _internal_mutable_signature();
}
inline const std::string& Signature::_internal_signature() const {
  return signature_.Get();
}
inline void Signature::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Signature::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.Signature.signature)
}
inline void Signature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.Signature.signature)
}
inline void Signature::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.Signature.signature)
}
inline std::string* Signature::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.Signature.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.Signature.signature)
}

// int64 account_number = 3;
inline void Signature::clear_account_number() {
  account_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Signature::_internal_account_number() const {
  return account_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Signature::account_number() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.Signature.account_number)
  return _internal_account_number();
}
inline void Signature::_internal_set_account_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  account_number_ = value;
}
inline void Signature::set_account_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Signature.account_number)
}

// int64 sequence = 4;
inline void Signature::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Signature::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Signature::sequence() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.Signature.sequence)
  return _internal_sequence();
}
inline void Signature::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void Signature::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.Signature.sequence)
}

// -------------------------------------------------------------------

// TradeOrder

// bytes sender = 1;
inline void TradeOrder::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& TradeOrder::sender() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TradeOrder.sender)
  return _internal_sender();
}
inline void TradeOrder::set_sender(const std::string& value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TradeOrder.sender)
}
inline std::string* TradeOrder::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TradeOrder.sender)
  return _internal_mutable_sender();
}
inline const std::string& TradeOrder::_internal_sender() const {
  return sender_.Get();
}
inline void TradeOrder::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradeOrder::set_sender(std::string&& value) {
  
  sender_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TradeOrder.sender)
}
inline void TradeOrder::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TradeOrder.sender)
}
inline void TradeOrder::set_sender(const void* value,
    size_t size) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TradeOrder.sender)
}
inline std::string* TradeOrder::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradeOrder::release_sender() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TradeOrder.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TradeOrder.sender)
}

// string id = 2;
inline void TradeOrder::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& TradeOrder::id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TradeOrder.id)
  return _internal_id();
}
inline void TradeOrder::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TradeOrder.id)
}
inline std::string* TradeOrder::mutable_id() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TradeOrder.id)
  return _internal_mutable_id();
}
inline const std::string& TradeOrder::_internal_id() const {
  return id_.Get();
}
inline void TradeOrder::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradeOrder::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TradeOrder.id)
}
inline void TradeOrder::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TradeOrder.id)
}
inline void TradeOrder::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TradeOrder.id)
}
inline std::string* TradeOrder::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradeOrder::release_id() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TradeOrder.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TradeOrder.id)
}

// string symbol = 3;
inline void TradeOrder::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& TradeOrder::symbol() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TradeOrder.symbol)
  return _internal_symbol();
}
inline void TradeOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TradeOrder.symbol)
}
inline std::string* TradeOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TradeOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradeOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TradeOrder.symbol)
}
inline void TradeOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TradeOrder.symbol)
}
inline void TradeOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TradeOrder.symbol)
}
inline std::string* TradeOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradeOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TradeOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TradeOrder.symbol)
}

// int64 ordertype = 4;
inline void TradeOrder::clear_ordertype() {
  ordertype_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_ordertype() const {
  return ordertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::ordertype() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TradeOrder.ordertype)
  return _internal_ordertype();
}
inline void TradeOrder::_internal_set_ordertype(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ordertype_ = value;
}
inline void TradeOrder::set_ordertype(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ordertype(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TradeOrder.ordertype)
}

// int64 side = 5;
inline void TradeOrder::clear_side() {
  side_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_side() const {
  return side_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::side() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TradeOrder.side)
  return _internal_side();
}
inline void TradeOrder::_internal_set_side(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  side_ = value;
}
inline void TradeOrder::set_side(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TradeOrder.side)
}

// int64 price = 6;
inline void TradeOrder::clear_price() {
  price_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::price() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TradeOrder.price)
  return _internal_price();
}
inline void TradeOrder::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  price_ = value;
}
inline void TradeOrder::set_price(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TradeOrder.price)
}

// int64 quantity = 7;
inline void TradeOrder::clear_quantity() {
  quantity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::quantity() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TradeOrder.quantity)
  return _internal_quantity();
}
inline void TradeOrder::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  quantity_ = value;
}
inline void TradeOrder::set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TradeOrder.quantity)
}

// int64 timeinforce = 8;
inline void TradeOrder::clear_timeinforce() {
  timeinforce_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_timeinforce() const {
  return timeinforce_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::timeinforce() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TradeOrder.timeinforce)
  return _internal_timeinforce();
}
inline void TradeOrder::_internal_set_timeinforce(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timeinforce_ = value;
}
inline void TradeOrder::set_timeinforce(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timeinforce(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TradeOrder.timeinforce)
}

// -------------------------------------------------------------------

// CancelTradeOrder

// bytes sender = 1;
inline void CancelTradeOrder::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& CancelTradeOrder::sender() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.CancelTradeOrder.sender)
  return _internal_sender();
}
inline void CancelTradeOrder::set_sender(const std::string& value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.CancelTradeOrder.sender)
}
inline std::string* CancelTradeOrder::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.CancelTradeOrder.sender)
  return _internal_mutable_sender();
}
inline const std::string& CancelTradeOrder::_internal_sender() const {
  return sender_.Get();
}
inline void CancelTradeOrder::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CancelTradeOrder::set_sender(std::string&& value) {
  
  sender_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.CancelTradeOrder.sender)
}
inline void CancelTradeOrder::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.CancelTradeOrder.sender)
}
inline void CancelTradeOrder::set_sender(const void* value,
    size_t size) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.CancelTradeOrder.sender)
}
inline std::string* CancelTradeOrder::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CancelTradeOrder::release_sender() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.CancelTradeOrder.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelTradeOrder::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.CancelTradeOrder.sender)
}

// string symbol = 2;
inline void CancelTradeOrder::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& CancelTradeOrder::symbol() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.CancelTradeOrder.symbol)
  return _internal_symbol();
}
inline void CancelTradeOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.CancelTradeOrder.symbol)
}
inline std::string* CancelTradeOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.CancelTradeOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& CancelTradeOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void CancelTradeOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CancelTradeOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.CancelTradeOrder.symbol)
}
inline void CancelTradeOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.CancelTradeOrder.symbol)
}
inline void CancelTradeOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.CancelTradeOrder.symbol)
}
inline std::string* CancelTradeOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CancelTradeOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.CancelTradeOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelTradeOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.CancelTradeOrder.symbol)
}

// string refid = 3;
inline void CancelTradeOrder::clear_refid() {
  refid_.ClearToEmpty();
}
inline const std::string& CancelTradeOrder::refid() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.CancelTradeOrder.refid)
  return _internal_refid();
}
inline void CancelTradeOrder::set_refid(const std::string& value) {
  _internal_set_refid(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.CancelTradeOrder.refid)
}
inline std::string* CancelTradeOrder::mutable_refid() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.CancelTradeOrder.refid)
  return _internal_mutable_refid();
}
inline const std::string& CancelTradeOrder::_internal_refid() const {
  return refid_.Get();
}
inline void CancelTradeOrder::_internal_set_refid(const std::string& value) {
  
  refid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CancelTradeOrder::set_refid(std::string&& value) {
  
  refid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.CancelTradeOrder.refid)
}
inline void CancelTradeOrder::set_refid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.CancelTradeOrder.refid)
}
inline void CancelTradeOrder::set_refid(const char* value,
    size_t size) {
  
  refid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.CancelTradeOrder.refid)
}
inline std::string* CancelTradeOrder::_internal_mutable_refid() {
  
  return refid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CancelTradeOrder::release_refid() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.CancelTradeOrder.refid)
  return refid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelTradeOrder::set_allocated_refid(std::string* refid) {
  if (refid != nullptr) {
    
  } else {
    
  }
  refid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.CancelTradeOrder.refid)
}

// -------------------------------------------------------------------

// SendOrder_Token

// string denom = 1;
inline void SendOrder_Token::clear_denom() {
  denom_.ClearToEmpty();
}
inline const std::string& SendOrder_Token::denom() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SendOrder.Token.denom)
  return _internal_denom();
}
inline void SendOrder_Token::set_denom(const std::string& value) {
  _internal_set_denom(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SendOrder.Token.denom)
}
inline std::string* SendOrder_Token::mutable_denom() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SendOrder.Token.denom)
  return _internal_mutable_denom();
}
inline const std::string& SendOrder_Token::_internal_denom() const {
  return denom_.Get();
}
inline void SendOrder_Token::_internal_set_denom(const std::string& value) {
  
  denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendOrder_Token::set_denom(std::string&& value) {
  
  denom_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SendOrder.Token.denom)
}
inline void SendOrder_Token::set_denom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SendOrder.Token.denom)
}
inline void SendOrder_Token::set_denom(const char* value,
    size_t size) {
  
  denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SendOrder.Token.denom)
}
inline std::string* SendOrder_Token::_internal_mutable_denom() {
  
  return denom_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendOrder_Token::release_denom() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SendOrder.Token.denom)
  return denom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendOrder_Token::set_allocated_denom(std::string* denom) {
  if (denom != nullptr) {
    
  } else {
    
  }
  denom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denom,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SendOrder.Token.denom)
}

// int64 amount = 2;
inline void SendOrder_Token::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendOrder_Token::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendOrder_Token::amount() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SendOrder.Token.amount)
  return _internal_amount();
}
inline void SendOrder_Token::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void SendOrder_Token::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SendOrder.Token.amount)
}

// -------------------------------------------------------------------

// SendOrder_Input

// bytes address = 1;
inline void SendOrder_Input::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& SendOrder_Input::address() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SendOrder.Input.address)
  return _internal_address();
}
inline void SendOrder_Input::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SendOrder.Input.address)
}
inline std::string* SendOrder_Input::mutable_address() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SendOrder.Input.address)
  return _internal_mutable_address();
}
inline const std::string& SendOrder_Input::_internal_address() const {
  return address_.Get();
}
inline void SendOrder_Input::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendOrder_Input::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SendOrder.Input.address)
}
inline void SendOrder_Input::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SendOrder.Input.address)
}
inline void SendOrder_Input::set_address(const void* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SendOrder.Input.address)
}
inline std::string* SendOrder_Input::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendOrder_Input::release_address() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SendOrder.Input.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendOrder_Input::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SendOrder.Input.address)
}

// repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
inline int SendOrder_Input::_internal_coins_size() const {
  return coins_.size();
}
inline int SendOrder_Input::coins_size() const {
  return _internal_coins_size();
}
inline void SendOrder_Input::clear_coins() {
  coins_.Clear();
}
inline ::TW::Binance::Proto::SendOrder_Token* SendOrder_Input::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SendOrder.Input.coins)
  return coins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
SendOrder_Input::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.SendOrder.Input.coins)
  return &coins_;
}
inline const ::TW::Binance::Proto::SendOrder_Token& SendOrder_Input::_internal_coins(int index) const {
  return coins_.Get(index);
}
inline const ::TW::Binance::Proto::SendOrder_Token& SendOrder_Input::coins(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SendOrder.Input.coins)
  return _internal_coins(index);
}
inline ::TW::Binance::Proto::SendOrder_Token* SendOrder_Input::_internal_add_coins() {
  return coins_.Add();
}
inline ::TW::Binance::Proto::SendOrder_Token* SendOrder_Input::add_coins() {
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.SendOrder.Input.coins)
  return _internal_add_coins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
SendOrder_Input::coins() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.SendOrder.Input.coins)
  return coins_;
}

// -------------------------------------------------------------------

// SendOrder_Output

// bytes address = 1;
inline void SendOrder_Output::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& SendOrder_Output::address() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SendOrder.Output.address)
  return _internal_address();
}
inline void SendOrder_Output::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SendOrder.Output.address)
}
inline std::string* SendOrder_Output::mutable_address() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SendOrder.Output.address)
  return _internal_mutable_address();
}
inline const std::string& SendOrder_Output::_internal_address() const {
  return address_.Get();
}
inline void SendOrder_Output::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendOrder_Output::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SendOrder.Output.address)
}
inline void SendOrder_Output::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SendOrder.Output.address)
}
inline void SendOrder_Output::set_address(const void* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SendOrder.Output.address)
}
inline std::string* SendOrder_Output::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendOrder_Output::release_address() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SendOrder.Output.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendOrder_Output::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SendOrder.Output.address)
}

// repeated .TW.Binance.Proto.SendOrder.Token coins = 2;
inline int SendOrder_Output::_internal_coins_size() const {
  return coins_.size();
}
inline int SendOrder_Output::coins_size() const {
  return _internal_coins_size();
}
inline void SendOrder_Output::clear_coins() {
  coins_.Clear();
}
inline ::TW::Binance::Proto::SendOrder_Token* SendOrder_Output::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SendOrder.Output.coins)
  return coins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
SendOrder_Output::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.SendOrder.Output.coins)
  return &coins_;
}
inline const ::TW::Binance::Proto::SendOrder_Token& SendOrder_Output::_internal_coins(int index) const {
  return coins_.Get(index);
}
inline const ::TW::Binance::Proto::SendOrder_Token& SendOrder_Output::coins(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SendOrder.Output.coins)
  return _internal_coins(index);
}
inline ::TW::Binance::Proto::SendOrder_Token* SendOrder_Output::_internal_add_coins() {
  return coins_.Add();
}
inline ::TW::Binance::Proto::SendOrder_Token* SendOrder_Output::add_coins() {
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.SendOrder.Output.coins)
  return _internal_add_coins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
SendOrder_Output::coins() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.SendOrder.Output.coins)
  return coins_;
}

// -------------------------------------------------------------------

// SendOrder

// repeated .TW.Binance.Proto.SendOrder.Input inputs = 1;
inline int SendOrder::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SendOrder::inputs_size() const {
  return _internal_inputs_size();
}
inline void SendOrder::clear_inputs() {
  inputs_.Clear();
}
inline ::TW::Binance::Proto::SendOrder_Input* SendOrder::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SendOrder.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Input >*
SendOrder::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.SendOrder.inputs)
  return &inputs_;
}
inline const ::TW::Binance::Proto::SendOrder_Input& SendOrder::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::TW::Binance::Proto::SendOrder_Input& SendOrder::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SendOrder.inputs)
  return _internal_inputs(index);
}
inline ::TW::Binance::Proto::SendOrder_Input* SendOrder::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::TW::Binance::Proto::SendOrder_Input* SendOrder::add_inputs() {
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.SendOrder.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Input >&
SendOrder::inputs() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.SendOrder.inputs)
  return inputs_;
}

// repeated .TW.Binance.Proto.SendOrder.Output outputs = 2;
inline int SendOrder::_internal_outputs_size() const {
  return outputs_.size();
}
inline int SendOrder::outputs_size() const {
  return _internal_outputs_size();
}
inline void SendOrder::clear_outputs() {
  outputs_.Clear();
}
inline ::TW::Binance::Proto::SendOrder_Output* SendOrder::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SendOrder.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Output >*
SendOrder::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.SendOrder.outputs)
  return &outputs_;
}
inline const ::TW::Binance::Proto::SendOrder_Output& SendOrder::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::TW::Binance::Proto::SendOrder_Output& SendOrder::outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SendOrder.outputs)
  return _internal_outputs(index);
}
inline ::TW::Binance::Proto::SendOrder_Output* SendOrder::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::TW::Binance::Proto::SendOrder_Output* SendOrder::add_outputs() {
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.SendOrder.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Output >&
SendOrder::outputs() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.SendOrder.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// TokenIssueOrder

// bytes from = 1;
inline void TokenIssueOrder::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TokenIssueOrder::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenIssueOrder.from)
  return _internal_from();
}
inline void TokenIssueOrder::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenIssueOrder.from)
}
inline std::string* TokenIssueOrder::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenIssueOrder.from)
  return _internal_mutable_from();
}
inline const std::string& TokenIssueOrder::_internal_from() const {
  return from_.Get();
}
inline void TokenIssueOrder::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenIssueOrder::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenIssueOrder.from)
}
inline void TokenIssueOrder::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenIssueOrder.from)
}
inline void TokenIssueOrder::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenIssueOrder.from)
}
inline std::string* TokenIssueOrder::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenIssueOrder::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenIssueOrder.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenIssueOrder::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenIssueOrder.from)
}

// string name = 2;
inline void TokenIssueOrder::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TokenIssueOrder::name() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenIssueOrder.name)
  return _internal_name();
}
inline void TokenIssueOrder::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenIssueOrder.name)
}
inline std::string* TokenIssueOrder::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenIssueOrder.name)
  return _internal_mutable_name();
}
inline const std::string& TokenIssueOrder::_internal_name() const {
  return name_.Get();
}
inline void TokenIssueOrder::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenIssueOrder::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenIssueOrder.name)
}
inline void TokenIssueOrder::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenIssueOrder.name)
}
inline void TokenIssueOrder::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenIssueOrder.name)
}
inline std::string* TokenIssueOrder::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenIssueOrder::release_name() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenIssueOrder.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenIssueOrder::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenIssueOrder.name)
}

// string symbol = 3;
inline void TokenIssueOrder::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& TokenIssueOrder::symbol() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenIssueOrder.symbol)
  return _internal_symbol();
}
inline void TokenIssueOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenIssueOrder.symbol)
}
inline std::string* TokenIssueOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenIssueOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TokenIssueOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void TokenIssueOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenIssueOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenIssueOrder.symbol)
}
inline void TokenIssueOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenIssueOrder.symbol)
}
inline void TokenIssueOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenIssueOrder.symbol)
}
inline std::string* TokenIssueOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenIssueOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenIssueOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenIssueOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenIssueOrder.symbol)
}

// int64 total_supply = 4;
inline void TokenIssueOrder::clear_total_supply() {
  total_supply_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenIssueOrder::_internal_total_supply() const {
  return total_supply_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenIssueOrder::total_supply() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenIssueOrder.total_supply)
  return _internal_total_supply();
}
inline void TokenIssueOrder::_internal_set_total_supply(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_supply_ = value;
}
inline void TokenIssueOrder::set_total_supply(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_supply(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenIssueOrder.total_supply)
}

// bool mintable = 5;
inline void TokenIssueOrder::clear_mintable() {
  mintable_ = false;
}
inline bool TokenIssueOrder::_internal_mintable() const {
  return mintable_;
}
inline bool TokenIssueOrder::mintable() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenIssueOrder.mintable)
  return _internal_mintable();
}
inline void TokenIssueOrder::_internal_set_mintable(bool value) {
  
  mintable_ = value;
}
inline void TokenIssueOrder::set_mintable(bool value) {
  _internal_set_mintable(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenIssueOrder.mintable)
}

// -------------------------------------------------------------------

// TokenMintOrder

// bytes from = 1;
inline void TokenMintOrder::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TokenMintOrder::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenMintOrder.from)
  return _internal_from();
}
inline void TokenMintOrder::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenMintOrder.from)
}
inline std::string* TokenMintOrder::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenMintOrder.from)
  return _internal_mutable_from();
}
inline const std::string& TokenMintOrder::_internal_from() const {
  return from_.Get();
}
inline void TokenMintOrder::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenMintOrder::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenMintOrder.from)
}
inline void TokenMintOrder::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenMintOrder.from)
}
inline void TokenMintOrder::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenMintOrder.from)
}
inline std::string* TokenMintOrder::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenMintOrder::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenMintOrder.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenMintOrder::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenMintOrder.from)
}

// string symbol = 2;
inline void TokenMintOrder::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& TokenMintOrder::symbol() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenMintOrder.symbol)
  return _internal_symbol();
}
inline void TokenMintOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenMintOrder.symbol)
}
inline std::string* TokenMintOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenMintOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TokenMintOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void TokenMintOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenMintOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenMintOrder.symbol)
}
inline void TokenMintOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenMintOrder.symbol)
}
inline void TokenMintOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenMintOrder.symbol)
}
inline std::string* TokenMintOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenMintOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenMintOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenMintOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenMintOrder.symbol)
}

// int64 amount = 3;
inline void TokenMintOrder::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenMintOrder::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenMintOrder::amount() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenMintOrder.amount)
  return _internal_amount();
}
inline void TokenMintOrder::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void TokenMintOrder::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenMintOrder.amount)
}

// -------------------------------------------------------------------

// TokenBurnOrder

// bytes from = 1;
inline void TokenBurnOrder::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TokenBurnOrder::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenBurnOrder.from)
  return _internal_from();
}
inline void TokenBurnOrder::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenBurnOrder.from)
}
inline std::string* TokenBurnOrder::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenBurnOrder.from)
  return _internal_mutable_from();
}
inline const std::string& TokenBurnOrder::_internal_from() const {
  return from_.Get();
}
inline void TokenBurnOrder::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenBurnOrder::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenBurnOrder.from)
}
inline void TokenBurnOrder::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenBurnOrder.from)
}
inline void TokenBurnOrder::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenBurnOrder.from)
}
inline std::string* TokenBurnOrder::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenBurnOrder::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenBurnOrder.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenBurnOrder::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenBurnOrder.from)
}

// string symbol = 2;
inline void TokenBurnOrder::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& TokenBurnOrder::symbol() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenBurnOrder.symbol)
  return _internal_symbol();
}
inline void TokenBurnOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenBurnOrder.symbol)
}
inline std::string* TokenBurnOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenBurnOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TokenBurnOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void TokenBurnOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenBurnOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenBurnOrder.symbol)
}
inline void TokenBurnOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenBurnOrder.symbol)
}
inline void TokenBurnOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenBurnOrder.symbol)
}
inline std::string* TokenBurnOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenBurnOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenBurnOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenBurnOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenBurnOrder.symbol)
}

// int64 amount = 3;
inline void TokenBurnOrder::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenBurnOrder::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenBurnOrder::amount() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenBurnOrder.amount)
  return _internal_amount();
}
inline void TokenBurnOrder::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void TokenBurnOrder::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenBurnOrder.amount)
}

// -------------------------------------------------------------------

// TokenFreezeOrder

// bytes from = 1;
inline void TokenFreezeOrder::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TokenFreezeOrder::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenFreezeOrder.from)
  return _internal_from();
}
inline void TokenFreezeOrder::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenFreezeOrder.from)
}
inline std::string* TokenFreezeOrder::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenFreezeOrder.from)
  return _internal_mutable_from();
}
inline const std::string& TokenFreezeOrder::_internal_from() const {
  return from_.Get();
}
inline void TokenFreezeOrder::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenFreezeOrder::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenFreezeOrder.from)
}
inline void TokenFreezeOrder::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenFreezeOrder.from)
}
inline void TokenFreezeOrder::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenFreezeOrder.from)
}
inline std::string* TokenFreezeOrder::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenFreezeOrder::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenFreezeOrder.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenFreezeOrder::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenFreezeOrder.from)
}

// string symbol = 2;
inline void TokenFreezeOrder::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& TokenFreezeOrder::symbol() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenFreezeOrder.symbol)
  return _internal_symbol();
}
inline void TokenFreezeOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenFreezeOrder.symbol)
}
inline std::string* TokenFreezeOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenFreezeOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TokenFreezeOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void TokenFreezeOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenFreezeOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenFreezeOrder.symbol)
}
inline void TokenFreezeOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenFreezeOrder.symbol)
}
inline void TokenFreezeOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenFreezeOrder.symbol)
}
inline std::string* TokenFreezeOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenFreezeOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenFreezeOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenFreezeOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenFreezeOrder.symbol)
}

// int64 amount = 3;
inline void TokenFreezeOrder::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenFreezeOrder::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenFreezeOrder::amount() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenFreezeOrder.amount)
  return _internal_amount();
}
inline void TokenFreezeOrder::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void TokenFreezeOrder::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenFreezeOrder.amount)
}

// -------------------------------------------------------------------

// TokenUnfreezeOrder

// bytes from = 1;
inline void TokenUnfreezeOrder::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TokenUnfreezeOrder::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenUnfreezeOrder.from)
  return _internal_from();
}
inline void TokenUnfreezeOrder::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenUnfreezeOrder.from)
}
inline std::string* TokenUnfreezeOrder::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenUnfreezeOrder.from)
  return _internal_mutable_from();
}
inline const std::string& TokenUnfreezeOrder::_internal_from() const {
  return from_.Get();
}
inline void TokenUnfreezeOrder::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenUnfreezeOrder::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenUnfreezeOrder.from)
}
inline void TokenUnfreezeOrder::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenUnfreezeOrder.from)
}
inline void TokenUnfreezeOrder::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenUnfreezeOrder.from)
}
inline std::string* TokenUnfreezeOrder::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenUnfreezeOrder::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenUnfreezeOrder.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenUnfreezeOrder::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenUnfreezeOrder.from)
}

// string symbol = 2;
inline void TokenUnfreezeOrder::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& TokenUnfreezeOrder::symbol() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenUnfreezeOrder.symbol)
  return _internal_symbol();
}
inline void TokenUnfreezeOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenUnfreezeOrder.symbol)
}
inline std::string* TokenUnfreezeOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TokenUnfreezeOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TokenUnfreezeOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void TokenUnfreezeOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TokenUnfreezeOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TokenUnfreezeOrder.symbol)
}
inline void TokenUnfreezeOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TokenUnfreezeOrder.symbol)
}
inline void TokenUnfreezeOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TokenUnfreezeOrder.symbol)
}
inline std::string* TokenUnfreezeOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TokenUnfreezeOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TokenUnfreezeOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenUnfreezeOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TokenUnfreezeOrder.symbol)
}

// int64 amount = 3;
inline void TokenUnfreezeOrder::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenUnfreezeOrder::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenUnfreezeOrder::amount() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TokenUnfreezeOrder.amount)
  return _internal_amount();
}
inline void TokenUnfreezeOrder::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void TokenUnfreezeOrder::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TokenUnfreezeOrder.amount)
}

// -------------------------------------------------------------------

// HTLTOrder

// bytes from = 1;
inline void HTLTOrder::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& HTLTOrder::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.from)
  return _internal_from();
}
inline void HTLTOrder::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.HTLTOrder.from)
}
inline std::string* HTLTOrder::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.HTLTOrder.from)
  return _internal_mutable_from();
}
inline const std::string& HTLTOrder::_internal_from() const {
  return from_.Get();
}
inline void HTLTOrder::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HTLTOrder::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.HTLTOrder.from)
}
inline void HTLTOrder::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.HTLTOrder.from)
}
inline void HTLTOrder::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.HTLTOrder.from)
}
inline std::string* HTLTOrder::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HTLTOrder::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.HTLTOrder.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTLTOrder::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.HTLTOrder.from)
}

// bytes to = 2;
inline void HTLTOrder::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& HTLTOrder::to() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.to)
  return _internal_to();
}
inline void HTLTOrder::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.HTLTOrder.to)
}
inline std::string* HTLTOrder::mutable_to() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.HTLTOrder.to)
  return _internal_mutable_to();
}
inline const std::string& HTLTOrder::_internal_to() const {
  return to_.Get();
}
inline void HTLTOrder::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HTLTOrder::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.HTLTOrder.to)
}
inline void HTLTOrder::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.HTLTOrder.to)
}
inline void HTLTOrder::set_to(const void* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.HTLTOrder.to)
}
inline std::string* HTLTOrder::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HTLTOrder::release_to() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.HTLTOrder.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTLTOrder::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.HTLTOrder.to)
}

// string recipient_other_chain = 3;
inline void HTLTOrder::clear_recipient_other_chain() {
  recipient_other_chain_.ClearToEmpty();
}
inline const std::string& HTLTOrder::recipient_other_chain() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.recipient_other_chain)
  return _internal_recipient_other_chain();
}
inline void HTLTOrder::set_recipient_other_chain(const std::string& value) {
  _internal_set_recipient_other_chain(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.HTLTOrder.recipient_other_chain)
}
inline std::string* HTLTOrder::mutable_recipient_other_chain() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.HTLTOrder.recipient_other_chain)
  return _internal_mutable_recipient_other_chain();
}
inline const std::string& HTLTOrder::_internal_recipient_other_chain() const {
  return recipient_other_chain_.Get();
}
inline void HTLTOrder::_internal_set_recipient_other_chain(const std::string& value) {
  
  recipient_other_chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HTLTOrder::set_recipient_other_chain(std::string&& value) {
  
  recipient_other_chain_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.HTLTOrder.recipient_other_chain)
}
inline void HTLTOrder::set_recipient_other_chain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_other_chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.HTLTOrder.recipient_other_chain)
}
inline void HTLTOrder::set_recipient_other_chain(const char* value,
    size_t size) {
  
  recipient_other_chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.HTLTOrder.recipient_other_chain)
}
inline std::string* HTLTOrder::_internal_mutable_recipient_other_chain() {
  
  return recipient_other_chain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HTLTOrder::release_recipient_other_chain() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.HTLTOrder.recipient_other_chain)
  return recipient_other_chain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTLTOrder::set_allocated_recipient_other_chain(std::string* recipient_other_chain) {
  if (recipient_other_chain != nullptr) {
    
  } else {
    
  }
  recipient_other_chain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_other_chain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.HTLTOrder.recipient_other_chain)
}

// string sender_other_chain = 4;
inline void HTLTOrder::clear_sender_other_chain() {
  sender_other_chain_.ClearToEmpty();
}
inline const std::string& HTLTOrder::sender_other_chain() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.sender_other_chain)
  return _internal_sender_other_chain();
}
inline void HTLTOrder::set_sender_other_chain(const std::string& value) {
  _internal_set_sender_other_chain(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.HTLTOrder.sender_other_chain)
}
inline std::string* HTLTOrder::mutable_sender_other_chain() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.HTLTOrder.sender_other_chain)
  return _internal_mutable_sender_other_chain();
}
inline const std::string& HTLTOrder::_internal_sender_other_chain() const {
  return sender_other_chain_.Get();
}
inline void HTLTOrder::_internal_set_sender_other_chain(const std::string& value) {
  
  sender_other_chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HTLTOrder::set_sender_other_chain(std::string&& value) {
  
  sender_other_chain_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.HTLTOrder.sender_other_chain)
}
inline void HTLTOrder::set_sender_other_chain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_other_chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.HTLTOrder.sender_other_chain)
}
inline void HTLTOrder::set_sender_other_chain(const char* value,
    size_t size) {
  
  sender_other_chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.HTLTOrder.sender_other_chain)
}
inline std::string* HTLTOrder::_internal_mutable_sender_other_chain() {
  
  return sender_other_chain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HTLTOrder::release_sender_other_chain() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.HTLTOrder.sender_other_chain)
  return sender_other_chain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTLTOrder::set_allocated_sender_other_chain(std::string* sender_other_chain) {
  if (sender_other_chain != nullptr) {
    
  } else {
    
  }
  sender_other_chain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_other_chain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.HTLTOrder.sender_other_chain)
}

// bytes random_number_hash = 5;
inline void HTLTOrder::clear_random_number_hash() {
  random_number_hash_.ClearToEmpty();
}
inline const std::string& HTLTOrder::random_number_hash() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.random_number_hash)
  return _internal_random_number_hash();
}
inline void HTLTOrder::set_random_number_hash(const std::string& value) {
  _internal_set_random_number_hash(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.HTLTOrder.random_number_hash)
}
inline std::string* HTLTOrder::mutable_random_number_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.HTLTOrder.random_number_hash)
  return _internal_mutable_random_number_hash();
}
inline const std::string& HTLTOrder::_internal_random_number_hash() const {
  return random_number_hash_.Get();
}
inline void HTLTOrder::_internal_set_random_number_hash(const std::string& value) {
  
  random_number_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HTLTOrder::set_random_number_hash(std::string&& value) {
  
  random_number_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.HTLTOrder.random_number_hash)
}
inline void HTLTOrder::set_random_number_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  random_number_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.HTLTOrder.random_number_hash)
}
inline void HTLTOrder::set_random_number_hash(const void* value,
    size_t size) {
  
  random_number_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.HTLTOrder.random_number_hash)
}
inline std::string* HTLTOrder::_internal_mutable_random_number_hash() {
  
  return random_number_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HTLTOrder::release_random_number_hash() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.HTLTOrder.random_number_hash)
  return random_number_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTLTOrder::set_allocated_random_number_hash(std::string* random_number_hash) {
  if (random_number_hash != nullptr) {
    
  } else {
    
  }
  random_number_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), random_number_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.HTLTOrder.random_number_hash)
}

// int64 timestamp = 6;
inline void HTLTOrder::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLTOrder::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLTOrder::timestamp() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.timestamp)
  return _internal_timestamp();
}
inline void HTLTOrder::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void HTLTOrder::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.HTLTOrder.timestamp)
}

// repeated .TW.Binance.Proto.SendOrder.Token amount = 7;
inline int HTLTOrder::_internal_amount_size() const {
  return amount_.size();
}
inline int HTLTOrder::amount_size() const {
  return _internal_amount_size();
}
inline void HTLTOrder::clear_amount() {
  amount_.Clear();
}
inline ::TW::Binance::Proto::SendOrder_Token* HTLTOrder::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.HTLTOrder.amount)
  return amount_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
HTLTOrder::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.HTLTOrder.amount)
  return &amount_;
}
inline const ::TW::Binance::Proto::SendOrder_Token& HTLTOrder::_internal_amount(int index) const {
  return amount_.Get(index);
}
inline const ::TW::Binance::Proto::SendOrder_Token& HTLTOrder::amount(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.amount)
  return _internal_amount(index);
}
inline ::TW::Binance::Proto::SendOrder_Token* HTLTOrder::_internal_add_amount() {
  return amount_.Add();
}
inline ::TW::Binance::Proto::SendOrder_Token* HTLTOrder::add_amount() {
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.HTLTOrder.amount)
  return _internal_add_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
HTLTOrder::amount() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.HTLTOrder.amount)
  return amount_;
}

// string expected_income = 8;
inline void HTLTOrder::clear_expected_income() {
  expected_income_.ClearToEmpty();
}
inline const std::string& HTLTOrder::expected_income() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.expected_income)
  return _internal_expected_income();
}
inline void HTLTOrder::set_expected_income(const std::string& value) {
  _internal_set_expected_income(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.HTLTOrder.expected_income)
}
inline std::string* HTLTOrder::mutable_expected_income() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.HTLTOrder.expected_income)
  return _internal_mutable_expected_income();
}
inline const std::string& HTLTOrder::_internal_expected_income() const {
  return expected_income_.Get();
}
inline void HTLTOrder::_internal_set_expected_income(const std::string& value) {
  
  expected_income_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HTLTOrder::set_expected_income(std::string&& value) {
  
  expected_income_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.HTLTOrder.expected_income)
}
inline void HTLTOrder::set_expected_income(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expected_income_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.HTLTOrder.expected_income)
}
inline void HTLTOrder::set_expected_income(const char* value,
    size_t size) {
  
  expected_income_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.HTLTOrder.expected_income)
}
inline std::string* HTLTOrder::_internal_mutable_expected_income() {
  
  return expected_income_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HTLTOrder::release_expected_income() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.HTLTOrder.expected_income)
  return expected_income_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTLTOrder::set_allocated_expected_income(std::string* expected_income) {
  if (expected_income != nullptr) {
    
  } else {
    
  }
  expected_income_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expected_income,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.HTLTOrder.expected_income)
}

// int64 height_span = 9;
inline void HTLTOrder::clear_height_span() {
  height_span_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLTOrder::_internal_height_span() const {
  return height_span_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLTOrder::height_span() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.height_span)
  return _internal_height_span();
}
inline void HTLTOrder::_internal_set_height_span(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_span_ = value;
}
inline void HTLTOrder::set_height_span(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height_span(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.HTLTOrder.height_span)
}

// bool cross_chain = 10;
inline void HTLTOrder::clear_cross_chain() {
  cross_chain_ = false;
}
inline bool HTLTOrder::_internal_cross_chain() const {
  return cross_chain_;
}
inline bool HTLTOrder::cross_chain() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.HTLTOrder.cross_chain)
  return _internal_cross_chain();
}
inline void HTLTOrder::_internal_set_cross_chain(bool value) {
  
  cross_chain_ = value;
}
inline void HTLTOrder::set_cross_chain(bool value) {
  _internal_set_cross_chain(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.HTLTOrder.cross_chain)
}

// -------------------------------------------------------------------

// DepositHTLTOrder

// bytes from = 1;
inline void DepositHTLTOrder::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& DepositHTLTOrder::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.DepositHTLTOrder.from)
  return _internal_from();
}
inline void DepositHTLTOrder::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.DepositHTLTOrder.from)
}
inline std::string* DepositHTLTOrder::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.DepositHTLTOrder.from)
  return _internal_mutable_from();
}
inline const std::string& DepositHTLTOrder::_internal_from() const {
  return from_.Get();
}
inline void DepositHTLTOrder::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DepositHTLTOrder::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.DepositHTLTOrder.from)
}
inline void DepositHTLTOrder::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.DepositHTLTOrder.from)
}
inline void DepositHTLTOrder::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.DepositHTLTOrder.from)
}
inline std::string* DepositHTLTOrder::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DepositHTLTOrder::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.DepositHTLTOrder.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepositHTLTOrder::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.DepositHTLTOrder.from)
}

// repeated .TW.Binance.Proto.SendOrder.Token amount = 2;
inline int DepositHTLTOrder::_internal_amount_size() const {
  return amount_.size();
}
inline int DepositHTLTOrder::amount_size() const {
  return _internal_amount_size();
}
inline void DepositHTLTOrder::clear_amount() {
  amount_.Clear();
}
inline ::TW::Binance::Proto::SendOrder_Token* DepositHTLTOrder::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.DepositHTLTOrder.amount)
  return amount_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
DepositHTLTOrder::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.DepositHTLTOrder.amount)
  return &amount_;
}
inline const ::TW::Binance::Proto::SendOrder_Token& DepositHTLTOrder::_internal_amount(int index) const {
  return amount_.Get(index);
}
inline const ::TW::Binance::Proto::SendOrder_Token& DepositHTLTOrder::amount(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.DepositHTLTOrder.amount)
  return _internal_amount(index);
}
inline ::TW::Binance::Proto::SendOrder_Token* DepositHTLTOrder::_internal_add_amount() {
  return amount_.Add();
}
inline ::TW::Binance::Proto::SendOrder_Token* DepositHTLTOrder::add_amount() {
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.DepositHTLTOrder.amount)
  return _internal_add_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
DepositHTLTOrder::amount() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.DepositHTLTOrder.amount)
  return amount_;
}

// bytes swap_id = 3;
inline void DepositHTLTOrder::clear_swap_id() {
  swap_id_.ClearToEmpty();
}
inline const std::string& DepositHTLTOrder::swap_id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.DepositHTLTOrder.swap_id)
  return _internal_swap_id();
}
inline void DepositHTLTOrder::set_swap_id(const std::string& value) {
  _internal_set_swap_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.DepositHTLTOrder.swap_id)
}
inline std::string* DepositHTLTOrder::mutable_swap_id() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.DepositHTLTOrder.swap_id)
  return _internal_mutable_swap_id();
}
inline const std::string& DepositHTLTOrder::_internal_swap_id() const {
  return swap_id_.Get();
}
inline void DepositHTLTOrder::_internal_set_swap_id(const std::string& value) {
  
  swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DepositHTLTOrder::set_swap_id(std::string&& value) {
  
  swap_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.DepositHTLTOrder.swap_id)
}
inline void DepositHTLTOrder::set_swap_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.DepositHTLTOrder.swap_id)
}
inline void DepositHTLTOrder::set_swap_id(const void* value,
    size_t size) {
  
  swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.DepositHTLTOrder.swap_id)
}
inline std::string* DepositHTLTOrder::_internal_mutable_swap_id() {
  
  return swap_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DepositHTLTOrder::release_swap_id() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.DepositHTLTOrder.swap_id)
  return swap_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepositHTLTOrder::set_allocated_swap_id(std::string* swap_id) {
  if (swap_id != nullptr) {
    
  } else {
    
  }
  swap_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), swap_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.DepositHTLTOrder.swap_id)
}

// -------------------------------------------------------------------

// ClaimHTLOrder

// bytes from = 1;
inline void ClaimHTLOrder::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& ClaimHTLOrder::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.ClaimHTLOrder.from)
  return _internal_from();
}
inline void ClaimHTLOrder::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.ClaimHTLOrder.from)
}
inline std::string* ClaimHTLOrder::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.ClaimHTLOrder.from)
  return _internal_mutable_from();
}
inline const std::string& ClaimHTLOrder::_internal_from() const {
  return from_.Get();
}
inline void ClaimHTLOrder::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClaimHTLOrder::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.ClaimHTLOrder.from)
}
inline void ClaimHTLOrder::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.ClaimHTLOrder.from)
}
inline void ClaimHTLOrder::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.ClaimHTLOrder.from)
}
inline std::string* ClaimHTLOrder::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClaimHTLOrder::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.ClaimHTLOrder.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClaimHTLOrder::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.ClaimHTLOrder.from)
}

// bytes swap_id = 2;
inline void ClaimHTLOrder::clear_swap_id() {
  swap_id_.ClearToEmpty();
}
inline const std::string& ClaimHTLOrder::swap_id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.ClaimHTLOrder.swap_id)
  return _internal_swap_id();
}
inline void ClaimHTLOrder::set_swap_id(const std::string& value) {
  _internal_set_swap_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.ClaimHTLOrder.swap_id)
}
inline std::string* ClaimHTLOrder::mutable_swap_id() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.ClaimHTLOrder.swap_id)
  return _internal_mutable_swap_id();
}
inline const std::string& ClaimHTLOrder::_internal_swap_id() const {
  return swap_id_.Get();
}
inline void ClaimHTLOrder::_internal_set_swap_id(const std::string& value) {
  
  swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClaimHTLOrder::set_swap_id(std::string&& value) {
  
  swap_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.ClaimHTLOrder.swap_id)
}
inline void ClaimHTLOrder::set_swap_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.ClaimHTLOrder.swap_id)
}
inline void ClaimHTLOrder::set_swap_id(const void* value,
    size_t size) {
  
  swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.ClaimHTLOrder.swap_id)
}
inline std::string* ClaimHTLOrder::_internal_mutable_swap_id() {
  
  return swap_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClaimHTLOrder::release_swap_id() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.ClaimHTLOrder.swap_id)
  return swap_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClaimHTLOrder::set_allocated_swap_id(std::string* swap_id) {
  if (swap_id != nullptr) {
    
  } else {
    
  }
  swap_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), swap_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.ClaimHTLOrder.swap_id)
}

// bytes random_number = 3;
inline void ClaimHTLOrder::clear_random_number() {
  random_number_.ClearToEmpty();
}
inline const std::string& ClaimHTLOrder::random_number() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.ClaimHTLOrder.random_number)
  return _internal_random_number();
}
inline void ClaimHTLOrder::set_random_number(const std::string& value) {
  _internal_set_random_number(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.ClaimHTLOrder.random_number)
}
inline std::string* ClaimHTLOrder::mutable_random_number() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.ClaimHTLOrder.random_number)
  return _internal_mutable_random_number();
}
inline const std::string& ClaimHTLOrder::_internal_random_number() const {
  return random_number_.Get();
}
inline void ClaimHTLOrder::_internal_set_random_number(const std::string& value) {
  
  random_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClaimHTLOrder::set_random_number(std::string&& value) {
  
  random_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.ClaimHTLOrder.random_number)
}
inline void ClaimHTLOrder::set_random_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  random_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.ClaimHTLOrder.random_number)
}
inline void ClaimHTLOrder::set_random_number(const void* value,
    size_t size) {
  
  random_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.ClaimHTLOrder.random_number)
}
inline std::string* ClaimHTLOrder::_internal_mutable_random_number() {
  
  return random_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClaimHTLOrder::release_random_number() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.ClaimHTLOrder.random_number)
  return random_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClaimHTLOrder::set_allocated_random_number(std::string* random_number) {
  if (random_number != nullptr) {
    
  } else {
    
  }
  random_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), random_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.ClaimHTLOrder.random_number)
}

// -------------------------------------------------------------------

// RefundHTLTOrder

// bytes from = 1;
inline void RefundHTLTOrder::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& RefundHTLTOrder::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.RefundHTLTOrder.from)
  return _internal_from();
}
inline void RefundHTLTOrder::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.RefundHTLTOrder.from)
}
inline std::string* RefundHTLTOrder::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.RefundHTLTOrder.from)
  return _internal_mutable_from();
}
inline const std::string& RefundHTLTOrder::_internal_from() const {
  return from_.Get();
}
inline void RefundHTLTOrder::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefundHTLTOrder::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.RefundHTLTOrder.from)
}
inline void RefundHTLTOrder::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.RefundHTLTOrder.from)
}
inline void RefundHTLTOrder::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.RefundHTLTOrder.from)
}
inline std::string* RefundHTLTOrder::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefundHTLTOrder::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.RefundHTLTOrder.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefundHTLTOrder::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.RefundHTLTOrder.from)
}

// bytes swap_id = 2;
inline void RefundHTLTOrder::clear_swap_id() {
  swap_id_.ClearToEmpty();
}
inline const std::string& RefundHTLTOrder::swap_id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.RefundHTLTOrder.swap_id)
  return _internal_swap_id();
}
inline void RefundHTLTOrder::set_swap_id(const std::string& value) {
  _internal_set_swap_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.RefundHTLTOrder.swap_id)
}
inline std::string* RefundHTLTOrder::mutable_swap_id() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.RefundHTLTOrder.swap_id)
  return _internal_mutable_swap_id();
}
inline const std::string& RefundHTLTOrder::_internal_swap_id() const {
  return swap_id_.Get();
}
inline void RefundHTLTOrder::_internal_set_swap_id(const std::string& value) {
  
  swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefundHTLTOrder::set_swap_id(std::string&& value) {
  
  swap_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.RefundHTLTOrder.swap_id)
}
inline void RefundHTLTOrder::set_swap_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.RefundHTLTOrder.swap_id)
}
inline void RefundHTLTOrder::set_swap_id(const void* value,
    size_t size) {
  
  swap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.RefundHTLTOrder.swap_id)
}
inline std::string* RefundHTLTOrder::_internal_mutable_swap_id() {
  
  return swap_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefundHTLTOrder::release_swap_id() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.RefundHTLTOrder.swap_id)
  return swap_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefundHTLTOrder::set_allocated_swap_id(std::string* swap_id) {
  if (swap_id != nullptr) {
    
  } else {
    
  }
  swap_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), swap_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.RefundHTLTOrder.swap_id)
}

// -------------------------------------------------------------------

// TransferOut

// bytes from = 1;
inline void TransferOut::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TransferOut::from() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TransferOut.from)
  return _internal_from();
}
inline void TransferOut::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TransferOut.from)
}
inline std::string* TransferOut::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TransferOut.from)
  return _internal_mutable_from();
}
inline const std::string& TransferOut::_internal_from() const {
  return from_.Get();
}
inline void TransferOut::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferOut::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TransferOut.from)
}
inline void TransferOut::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TransferOut.from)
}
inline void TransferOut::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TransferOut.from)
}
inline std::string* TransferOut::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferOut::release_from() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TransferOut.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferOut::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TransferOut.from)
}

// bytes to = 2;
inline void TransferOut::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& TransferOut::to() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TransferOut.to)
  return _internal_to();
}
inline void TransferOut::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TransferOut.to)
}
inline std::string* TransferOut::mutable_to() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TransferOut.to)
  return _internal_mutable_to();
}
inline const std::string& TransferOut::_internal_to() const {
  return to_.Get();
}
inline void TransferOut::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferOut::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TransferOut.to)
}
inline void TransferOut::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TransferOut.to)
}
inline void TransferOut::set_to(const void* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TransferOut.to)
}
inline std::string* TransferOut::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferOut::release_to() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TransferOut.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferOut::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TransferOut.to)
}

// .TW.Binance.Proto.SendOrder.Token amount = 3;
inline bool TransferOut::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool TransferOut::has_amount() const {
  return _internal_has_amount();
}
inline void TransferOut::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::TW::Binance::Proto::SendOrder_Token& TransferOut::_internal_amount() const {
  const ::TW::Binance::Proto::SendOrder_Token* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Binance::Proto::SendOrder_Token&>(
      ::TW::Binance::Proto::_SendOrder_Token_default_instance_);
}
inline const ::TW::Binance::Proto::SendOrder_Token& TransferOut::amount() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TransferOut.amount)
  return _internal_amount();
}
inline void TransferOut::unsafe_arena_set_allocated_amount(
    ::TW::Binance::Proto::SendOrder_Token* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.TransferOut.amount)
}
inline ::TW::Binance::Proto::SendOrder_Token* TransferOut::release_amount() {
  
  ::TW::Binance::Proto::SendOrder_Token* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Binance::Proto::SendOrder_Token* TransferOut::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TransferOut.amount)
  
  ::TW::Binance::Proto::SendOrder_Token* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::TW::Binance::Proto::SendOrder_Token* TransferOut::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Binance::Proto::SendOrder_Token>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::TW::Binance::Proto::SendOrder_Token* TransferOut::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TransferOut.amount)
  return _internal_mutable_amount();
}
inline void TransferOut::set_allocated_amount(::TW::Binance::Proto::SendOrder_Token* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TransferOut.amount)
}

// int64 expire_time = 4;
inline void TransferOut::clear_expire_time() {
  expire_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransferOut::_internal_expire_time() const {
  return expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransferOut::expire_time() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TransferOut.expire_time)
  return _internal_expire_time();
}
inline void TransferOut::_internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expire_time_ = value;
}
inline void TransferOut::set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expire_time(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TransferOut.expire_time)
}

// -------------------------------------------------------------------

// SideChainDelegate

// bytes delegator_addr = 1;
inline void SideChainDelegate::clear_delegator_addr() {
  delegator_addr_.ClearToEmpty();
}
inline const std::string& SideChainDelegate::delegator_addr() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainDelegate.delegator_addr)
  return _internal_delegator_addr();
}
inline void SideChainDelegate::set_delegator_addr(const std::string& value) {
  _internal_set_delegator_addr(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainDelegate.delegator_addr)
}
inline std::string* SideChainDelegate::mutable_delegator_addr() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainDelegate.delegator_addr)
  return _internal_mutable_delegator_addr();
}
inline const std::string& SideChainDelegate::_internal_delegator_addr() const {
  return delegator_addr_.Get();
}
inline void SideChainDelegate::_internal_set_delegator_addr(const std::string& value) {
  
  delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainDelegate::set_delegator_addr(std::string&& value) {
  
  delegator_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainDelegate.delegator_addr)
}
inline void SideChainDelegate::set_delegator_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainDelegate.delegator_addr)
}
inline void SideChainDelegate::set_delegator_addr(const void* value,
    size_t size) {
  
  delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainDelegate.delegator_addr)
}
inline std::string* SideChainDelegate::_internal_mutable_delegator_addr() {
  
  return delegator_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainDelegate::release_delegator_addr() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainDelegate.delegator_addr)
  return delegator_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainDelegate::set_allocated_delegator_addr(std::string* delegator_addr) {
  if (delegator_addr != nullptr) {
    
  } else {
    
  }
  delegator_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainDelegate.delegator_addr)
}

// bytes validator_addr = 2;
inline void SideChainDelegate::clear_validator_addr() {
  validator_addr_.ClearToEmpty();
}
inline const std::string& SideChainDelegate::validator_addr() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainDelegate.validator_addr)
  return _internal_validator_addr();
}
inline void SideChainDelegate::set_validator_addr(const std::string& value) {
  _internal_set_validator_addr(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainDelegate.validator_addr)
}
inline std::string* SideChainDelegate::mutable_validator_addr() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainDelegate.validator_addr)
  return _internal_mutable_validator_addr();
}
inline const std::string& SideChainDelegate::_internal_validator_addr() const {
  return validator_addr_.Get();
}
inline void SideChainDelegate::_internal_set_validator_addr(const std::string& value) {
  
  validator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainDelegate::set_validator_addr(std::string&& value) {
  
  validator_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainDelegate.validator_addr)
}
inline void SideChainDelegate::set_validator_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainDelegate.validator_addr)
}
inline void SideChainDelegate::set_validator_addr(const void* value,
    size_t size) {
  
  validator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainDelegate.validator_addr)
}
inline std::string* SideChainDelegate::_internal_mutable_validator_addr() {
  
  return validator_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainDelegate::release_validator_addr() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainDelegate.validator_addr)
  return validator_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainDelegate::set_allocated_validator_addr(std::string* validator_addr) {
  if (validator_addr != nullptr) {
    
  } else {
    
  }
  validator_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainDelegate.validator_addr)
}

// .TW.Binance.Proto.SendOrder.Token delegation = 3;
inline bool SideChainDelegate::_internal_has_delegation() const {
  return this != internal_default_instance() && delegation_ != nullptr;
}
inline bool SideChainDelegate::has_delegation() const {
  return _internal_has_delegation();
}
inline void SideChainDelegate::clear_delegation() {
  if (GetArena() == nullptr && delegation_ != nullptr) {
    delete delegation_;
  }
  delegation_ = nullptr;
}
inline const ::TW::Binance::Proto::SendOrder_Token& SideChainDelegate::_internal_delegation() const {
  const ::TW::Binance::Proto::SendOrder_Token* p = delegation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Binance::Proto::SendOrder_Token&>(
      ::TW::Binance::Proto::_SendOrder_Token_default_instance_);
}
inline const ::TW::Binance::Proto::SendOrder_Token& SideChainDelegate::delegation() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainDelegate.delegation)
  return _internal_delegation();
}
inline void SideChainDelegate::unsafe_arena_set_allocated_delegation(
    ::TW::Binance::Proto::SendOrder_Token* delegation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delegation_);
  }
  delegation_ = delegation;
  if (delegation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SideChainDelegate.delegation)
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainDelegate::release_delegation() {
  
  ::TW::Binance::Proto::SendOrder_Token* temp = delegation_;
  delegation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainDelegate::unsafe_arena_release_delegation() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainDelegate.delegation)
  
  ::TW::Binance::Proto::SendOrder_Token* temp = delegation_;
  delegation_ = nullptr;
  return temp;
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainDelegate::_internal_mutable_delegation() {
  
  if (delegation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Binance::Proto::SendOrder_Token>(GetArena());
    delegation_ = p;
  }
  return delegation_;
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainDelegate::mutable_delegation() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainDelegate.delegation)
  return _internal_mutable_delegation();
}
inline void SideChainDelegate::set_allocated_delegation(::TW::Binance::Proto::SendOrder_Token* delegation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delegation_;
  }
  if (delegation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delegation);
    if (message_arena != submessage_arena) {
      delegation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegation, submessage_arena);
    }
    
  } else {
    
  }
  delegation_ = delegation;
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainDelegate.delegation)
}

// string chain_id = 4;
inline void SideChainDelegate::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& SideChainDelegate::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainDelegate.chain_id)
  return _internal_chain_id();
}
inline void SideChainDelegate::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainDelegate.chain_id)
}
inline std::string* SideChainDelegate::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainDelegate.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& SideChainDelegate::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void SideChainDelegate::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainDelegate::set_chain_id(std::string&& value) {
  
  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainDelegate.chain_id)
}
inline void SideChainDelegate::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainDelegate.chain_id)
}
inline void SideChainDelegate::set_chain_id(const char* value,
    size_t size) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainDelegate.chain_id)
}
inline std::string* SideChainDelegate::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainDelegate::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainDelegate.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainDelegate::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainDelegate.chain_id)
}

// -------------------------------------------------------------------

// SideChainRedelegate

// bytes delegator_addr = 1;
inline void SideChainRedelegate::clear_delegator_addr() {
  delegator_addr_.ClearToEmpty();
}
inline const std::string& SideChainRedelegate::delegator_addr() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainRedelegate.delegator_addr)
  return _internal_delegator_addr();
}
inline void SideChainRedelegate::set_delegator_addr(const std::string& value) {
  _internal_set_delegator_addr(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainRedelegate.delegator_addr)
}
inline std::string* SideChainRedelegate::mutable_delegator_addr() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainRedelegate.delegator_addr)
  return _internal_mutable_delegator_addr();
}
inline const std::string& SideChainRedelegate::_internal_delegator_addr() const {
  return delegator_addr_.Get();
}
inline void SideChainRedelegate::_internal_set_delegator_addr(const std::string& value) {
  
  delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainRedelegate::set_delegator_addr(std::string&& value) {
  
  delegator_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainRedelegate.delegator_addr)
}
inline void SideChainRedelegate::set_delegator_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainRedelegate.delegator_addr)
}
inline void SideChainRedelegate::set_delegator_addr(const void* value,
    size_t size) {
  
  delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainRedelegate.delegator_addr)
}
inline std::string* SideChainRedelegate::_internal_mutable_delegator_addr() {
  
  return delegator_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainRedelegate::release_delegator_addr() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainRedelegate.delegator_addr)
  return delegator_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainRedelegate::set_allocated_delegator_addr(std::string* delegator_addr) {
  if (delegator_addr != nullptr) {
    
  } else {
    
  }
  delegator_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainRedelegate.delegator_addr)
}

// bytes validator_src_addr = 2;
inline void SideChainRedelegate::clear_validator_src_addr() {
  validator_src_addr_.ClearToEmpty();
}
inline const std::string& SideChainRedelegate::validator_src_addr() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainRedelegate.validator_src_addr)
  return _internal_validator_src_addr();
}
inline void SideChainRedelegate::set_validator_src_addr(const std::string& value) {
  _internal_set_validator_src_addr(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainRedelegate.validator_src_addr)
}
inline std::string* SideChainRedelegate::mutable_validator_src_addr() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainRedelegate.validator_src_addr)
  return _internal_mutable_validator_src_addr();
}
inline const std::string& SideChainRedelegate::_internal_validator_src_addr() const {
  return validator_src_addr_.Get();
}
inline void SideChainRedelegate::_internal_set_validator_src_addr(const std::string& value) {
  
  validator_src_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainRedelegate::set_validator_src_addr(std::string&& value) {
  
  validator_src_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainRedelegate.validator_src_addr)
}
inline void SideChainRedelegate::set_validator_src_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_src_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainRedelegate.validator_src_addr)
}
inline void SideChainRedelegate::set_validator_src_addr(const void* value,
    size_t size) {
  
  validator_src_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainRedelegate.validator_src_addr)
}
inline std::string* SideChainRedelegate::_internal_mutable_validator_src_addr() {
  
  return validator_src_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainRedelegate::release_validator_src_addr() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainRedelegate.validator_src_addr)
  return validator_src_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainRedelegate::set_allocated_validator_src_addr(std::string* validator_src_addr) {
  if (validator_src_addr != nullptr) {
    
  } else {
    
  }
  validator_src_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_src_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainRedelegate.validator_src_addr)
}

// bytes validator_dst_addr = 3;
inline void SideChainRedelegate::clear_validator_dst_addr() {
  validator_dst_addr_.ClearToEmpty();
}
inline const std::string& SideChainRedelegate::validator_dst_addr() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainRedelegate.validator_dst_addr)
  return _internal_validator_dst_addr();
}
inline void SideChainRedelegate::set_validator_dst_addr(const std::string& value) {
  _internal_set_validator_dst_addr(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainRedelegate.validator_dst_addr)
}
inline std::string* SideChainRedelegate::mutable_validator_dst_addr() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainRedelegate.validator_dst_addr)
  return _internal_mutable_validator_dst_addr();
}
inline const std::string& SideChainRedelegate::_internal_validator_dst_addr() const {
  return validator_dst_addr_.Get();
}
inline void SideChainRedelegate::_internal_set_validator_dst_addr(const std::string& value) {
  
  validator_dst_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainRedelegate::set_validator_dst_addr(std::string&& value) {
  
  validator_dst_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainRedelegate.validator_dst_addr)
}
inline void SideChainRedelegate::set_validator_dst_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_dst_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainRedelegate.validator_dst_addr)
}
inline void SideChainRedelegate::set_validator_dst_addr(const void* value,
    size_t size) {
  
  validator_dst_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainRedelegate.validator_dst_addr)
}
inline std::string* SideChainRedelegate::_internal_mutable_validator_dst_addr() {
  
  return validator_dst_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainRedelegate::release_validator_dst_addr() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainRedelegate.validator_dst_addr)
  return validator_dst_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainRedelegate::set_allocated_validator_dst_addr(std::string* validator_dst_addr) {
  if (validator_dst_addr != nullptr) {
    
  } else {
    
  }
  validator_dst_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_dst_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainRedelegate.validator_dst_addr)
}

// .TW.Binance.Proto.SendOrder.Token amount = 4;
inline bool SideChainRedelegate::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool SideChainRedelegate::has_amount() const {
  return _internal_has_amount();
}
inline void SideChainRedelegate::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::TW::Binance::Proto::SendOrder_Token& SideChainRedelegate::_internal_amount() const {
  const ::TW::Binance::Proto::SendOrder_Token* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Binance::Proto::SendOrder_Token&>(
      ::TW::Binance::Proto::_SendOrder_Token_default_instance_);
}
inline const ::TW::Binance::Proto::SendOrder_Token& SideChainRedelegate::amount() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainRedelegate.amount)
  return _internal_amount();
}
inline void SideChainRedelegate::unsafe_arena_set_allocated_amount(
    ::TW::Binance::Proto::SendOrder_Token* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SideChainRedelegate.amount)
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainRedelegate::release_amount() {
  
  ::TW::Binance::Proto::SendOrder_Token* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainRedelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainRedelegate.amount)
  
  ::TW::Binance::Proto::SendOrder_Token* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainRedelegate::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Binance::Proto::SendOrder_Token>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainRedelegate::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainRedelegate.amount)
  return _internal_mutable_amount();
}
inline void SideChainRedelegate::set_allocated_amount(::TW::Binance::Proto::SendOrder_Token* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainRedelegate.amount)
}

// string chain_id = 5;
inline void SideChainRedelegate::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& SideChainRedelegate::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainRedelegate.chain_id)
  return _internal_chain_id();
}
inline void SideChainRedelegate::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainRedelegate.chain_id)
}
inline std::string* SideChainRedelegate::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainRedelegate.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& SideChainRedelegate::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void SideChainRedelegate::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainRedelegate::set_chain_id(std::string&& value) {
  
  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainRedelegate.chain_id)
}
inline void SideChainRedelegate::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainRedelegate.chain_id)
}
inline void SideChainRedelegate::set_chain_id(const char* value,
    size_t size) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainRedelegate.chain_id)
}
inline std::string* SideChainRedelegate::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainRedelegate::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainRedelegate.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainRedelegate::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainRedelegate.chain_id)
}

// -------------------------------------------------------------------

// SideChainUndelegate

// bytes delegator_addr = 1;
inline void SideChainUndelegate::clear_delegator_addr() {
  delegator_addr_.ClearToEmpty();
}
inline const std::string& SideChainUndelegate::delegator_addr() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainUndelegate.delegator_addr)
  return _internal_delegator_addr();
}
inline void SideChainUndelegate::set_delegator_addr(const std::string& value) {
  _internal_set_delegator_addr(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainUndelegate.delegator_addr)
}
inline std::string* SideChainUndelegate::mutable_delegator_addr() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainUndelegate.delegator_addr)
  return _internal_mutable_delegator_addr();
}
inline const std::string& SideChainUndelegate::_internal_delegator_addr() const {
  return delegator_addr_.Get();
}
inline void SideChainUndelegate::_internal_set_delegator_addr(const std::string& value) {
  
  delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainUndelegate::set_delegator_addr(std::string&& value) {
  
  delegator_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainUndelegate.delegator_addr)
}
inline void SideChainUndelegate::set_delegator_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainUndelegate.delegator_addr)
}
inline void SideChainUndelegate::set_delegator_addr(const void* value,
    size_t size) {
  
  delegator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainUndelegate.delegator_addr)
}
inline std::string* SideChainUndelegate::_internal_mutable_delegator_addr() {
  
  return delegator_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainUndelegate::release_delegator_addr() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainUndelegate.delegator_addr)
  return delegator_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainUndelegate::set_allocated_delegator_addr(std::string* delegator_addr) {
  if (delegator_addr != nullptr) {
    
  } else {
    
  }
  delegator_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainUndelegate.delegator_addr)
}

// bytes validator_addr = 2;
inline void SideChainUndelegate::clear_validator_addr() {
  validator_addr_.ClearToEmpty();
}
inline const std::string& SideChainUndelegate::validator_addr() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainUndelegate.validator_addr)
  return _internal_validator_addr();
}
inline void SideChainUndelegate::set_validator_addr(const std::string& value) {
  _internal_set_validator_addr(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainUndelegate.validator_addr)
}
inline std::string* SideChainUndelegate::mutable_validator_addr() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainUndelegate.validator_addr)
  return _internal_mutable_validator_addr();
}
inline const std::string& SideChainUndelegate::_internal_validator_addr() const {
  return validator_addr_.Get();
}
inline void SideChainUndelegate::_internal_set_validator_addr(const std::string& value) {
  
  validator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainUndelegate::set_validator_addr(std::string&& value) {
  
  validator_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainUndelegate.validator_addr)
}
inline void SideChainUndelegate::set_validator_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainUndelegate.validator_addr)
}
inline void SideChainUndelegate::set_validator_addr(const void* value,
    size_t size) {
  
  validator_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainUndelegate.validator_addr)
}
inline std::string* SideChainUndelegate::_internal_mutable_validator_addr() {
  
  return validator_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainUndelegate::release_validator_addr() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainUndelegate.validator_addr)
  return validator_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainUndelegate::set_allocated_validator_addr(std::string* validator_addr) {
  if (validator_addr != nullptr) {
    
  } else {
    
  }
  validator_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainUndelegate.validator_addr)
}

// .TW.Binance.Proto.SendOrder.Token amount = 3;
inline bool SideChainUndelegate::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool SideChainUndelegate::has_amount() const {
  return _internal_has_amount();
}
inline void SideChainUndelegate::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::TW::Binance::Proto::SendOrder_Token& SideChainUndelegate::_internal_amount() const {
  const ::TW::Binance::Proto::SendOrder_Token* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Binance::Proto::SendOrder_Token&>(
      ::TW::Binance::Proto::_SendOrder_Token_default_instance_);
}
inline const ::TW::Binance::Proto::SendOrder_Token& SideChainUndelegate::amount() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainUndelegate.amount)
  return _internal_amount();
}
inline void SideChainUndelegate::unsafe_arena_set_allocated_amount(
    ::TW::Binance::Proto::SendOrder_Token* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SideChainUndelegate.amount)
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainUndelegate::release_amount() {
  
  ::TW::Binance::Proto::SendOrder_Token* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainUndelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainUndelegate.amount)
  
  ::TW::Binance::Proto::SendOrder_Token* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainUndelegate::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Binance::Proto::SendOrder_Token>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::TW::Binance::Proto::SendOrder_Token* SideChainUndelegate::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainUndelegate.amount)
  return _internal_mutable_amount();
}
inline void SideChainUndelegate::set_allocated_amount(::TW::Binance::Proto::SendOrder_Token* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainUndelegate.amount)
}

// string chain_id = 4;
inline void SideChainUndelegate::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& SideChainUndelegate::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SideChainUndelegate.chain_id)
  return _internal_chain_id();
}
inline void SideChainUndelegate::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SideChainUndelegate.chain_id)
}
inline std::string* SideChainUndelegate::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SideChainUndelegate.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& SideChainUndelegate::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void SideChainUndelegate::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SideChainUndelegate::set_chain_id(std::string&& value) {
  
  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SideChainUndelegate.chain_id)
}
inline void SideChainUndelegate::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SideChainUndelegate.chain_id)
}
inline void SideChainUndelegate::set_chain_id(const char* value,
    size_t size) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SideChainUndelegate.chain_id)
}
inline std::string* SideChainUndelegate::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SideChainUndelegate::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SideChainUndelegate.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SideChainUndelegate::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SideChainUndelegate.chain_id)
}

// -------------------------------------------------------------------

// TimeLockOrder

// bytes from_address = 1;
inline void TimeLockOrder::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& TimeLockOrder::from_address() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeLockOrder.from_address)
  return _internal_from_address();
}
inline void TimeLockOrder::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TimeLockOrder.from_address)
}
inline std::string* TimeLockOrder::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TimeLockOrder.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& TimeLockOrder::_internal_from_address() const {
  return from_address_.Get();
}
inline void TimeLockOrder::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeLockOrder::set_from_address(std::string&& value) {
  
  from_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TimeLockOrder.from_address)
}
inline void TimeLockOrder::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TimeLockOrder.from_address)
}
inline void TimeLockOrder::set_from_address(const void* value,
    size_t size) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TimeLockOrder.from_address)
}
inline std::string* TimeLockOrder::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeLockOrder::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TimeLockOrder.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeLockOrder::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TimeLockOrder.from_address)
}

// string description = 2;
inline void TimeLockOrder::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& TimeLockOrder::description() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeLockOrder.description)
  return _internal_description();
}
inline void TimeLockOrder::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TimeLockOrder.description)
}
inline std::string* TimeLockOrder::mutable_description() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TimeLockOrder.description)
  return _internal_mutable_description();
}
inline const std::string& TimeLockOrder::_internal_description() const {
  return description_.Get();
}
inline void TimeLockOrder::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeLockOrder::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TimeLockOrder.description)
}
inline void TimeLockOrder::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TimeLockOrder.description)
}
inline void TimeLockOrder::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TimeLockOrder.description)
}
inline std::string* TimeLockOrder::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeLockOrder::release_description() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TimeLockOrder.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeLockOrder::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TimeLockOrder.description)
}

// repeated .TW.Binance.Proto.SendOrder.Token amount = 3;
inline int TimeLockOrder::_internal_amount_size() const {
  return amount_.size();
}
inline int TimeLockOrder::amount_size() const {
  return _internal_amount_size();
}
inline void TimeLockOrder::clear_amount() {
  amount_.Clear();
}
inline ::TW::Binance::Proto::SendOrder_Token* TimeLockOrder::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TimeLockOrder.amount)
  return amount_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
TimeLockOrder::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.TimeLockOrder.amount)
  return &amount_;
}
inline const ::TW::Binance::Proto::SendOrder_Token& TimeLockOrder::_internal_amount(int index) const {
  return amount_.Get(index);
}
inline const ::TW::Binance::Proto::SendOrder_Token& TimeLockOrder::amount(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeLockOrder.amount)
  return _internal_amount(index);
}
inline ::TW::Binance::Proto::SendOrder_Token* TimeLockOrder::_internal_add_amount() {
  return amount_.Add();
}
inline ::TW::Binance::Proto::SendOrder_Token* TimeLockOrder::add_amount() {
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.TimeLockOrder.amount)
  return _internal_add_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
TimeLockOrder::amount() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.TimeLockOrder.amount)
  return amount_;
}

// int64 lock_time = 4;
inline void TimeLockOrder::clear_lock_time() {
  lock_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeLockOrder::_internal_lock_time() const {
  return lock_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeLockOrder::lock_time() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeLockOrder.lock_time)
  return _internal_lock_time();
}
inline void TimeLockOrder::_internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lock_time_ = value;
}
inline void TimeLockOrder::set_lock_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lock_time(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TimeLockOrder.lock_time)
}

// -------------------------------------------------------------------

// TimeRelockOrder

// bytes from_address = 1;
inline void TimeRelockOrder::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& TimeRelockOrder::from_address() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeRelockOrder.from_address)
  return _internal_from_address();
}
inline void TimeRelockOrder::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TimeRelockOrder.from_address)
}
inline std::string* TimeRelockOrder::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TimeRelockOrder.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& TimeRelockOrder::_internal_from_address() const {
  return from_address_.Get();
}
inline void TimeRelockOrder::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeRelockOrder::set_from_address(std::string&& value) {
  
  from_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TimeRelockOrder.from_address)
}
inline void TimeRelockOrder::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TimeRelockOrder.from_address)
}
inline void TimeRelockOrder::set_from_address(const void* value,
    size_t size) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TimeRelockOrder.from_address)
}
inline std::string* TimeRelockOrder::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeRelockOrder::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TimeRelockOrder.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeRelockOrder::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TimeRelockOrder.from_address)
}

// int64 id = 2;
inline void TimeRelockOrder::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRelockOrder::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRelockOrder::id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeRelockOrder.id)
  return _internal_id();
}
inline void TimeRelockOrder::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void TimeRelockOrder::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TimeRelockOrder.id)
}

// string description = 3;
inline void TimeRelockOrder::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& TimeRelockOrder::description() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeRelockOrder.description)
  return _internal_description();
}
inline void TimeRelockOrder::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TimeRelockOrder.description)
}
inline std::string* TimeRelockOrder::mutable_description() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TimeRelockOrder.description)
  return _internal_mutable_description();
}
inline const std::string& TimeRelockOrder::_internal_description() const {
  return description_.Get();
}
inline void TimeRelockOrder::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeRelockOrder::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TimeRelockOrder.description)
}
inline void TimeRelockOrder::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TimeRelockOrder.description)
}
inline void TimeRelockOrder::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TimeRelockOrder.description)
}
inline std::string* TimeRelockOrder::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeRelockOrder::release_description() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TimeRelockOrder.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeRelockOrder::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TimeRelockOrder.description)
}

// repeated .TW.Binance.Proto.SendOrder.Token amount = 4;
inline int TimeRelockOrder::_internal_amount_size() const {
  return amount_.size();
}
inline int TimeRelockOrder::amount_size() const {
  return _internal_amount_size();
}
inline void TimeRelockOrder::clear_amount() {
  amount_.Clear();
}
inline ::TW::Binance::Proto::SendOrder_Token* TimeRelockOrder::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TimeRelockOrder.amount)
  return amount_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >*
TimeRelockOrder::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:TW.Binance.Proto.TimeRelockOrder.amount)
  return &amount_;
}
inline const ::TW::Binance::Proto::SendOrder_Token& TimeRelockOrder::_internal_amount(int index) const {
  return amount_.Get(index);
}
inline const ::TW::Binance::Proto::SendOrder_Token& TimeRelockOrder::amount(int index) const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeRelockOrder.amount)
  return _internal_amount(index);
}
inline ::TW::Binance::Proto::SendOrder_Token* TimeRelockOrder::_internal_add_amount() {
  return amount_.Add();
}
inline ::TW::Binance::Proto::SendOrder_Token* TimeRelockOrder::add_amount() {
  // @@protoc_insertion_point(field_add:TW.Binance.Proto.TimeRelockOrder.amount)
  return _internal_add_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Binance::Proto::SendOrder_Token >&
TimeRelockOrder::amount() const {
  // @@protoc_insertion_point(field_list:TW.Binance.Proto.TimeRelockOrder.amount)
  return amount_;
}

// int64 lock_time = 5;
inline void TimeRelockOrder::clear_lock_time() {
  lock_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRelockOrder::_internal_lock_time() const {
  return lock_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRelockOrder::lock_time() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeRelockOrder.lock_time)
  return _internal_lock_time();
}
inline void TimeRelockOrder::_internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lock_time_ = value;
}
inline void TimeRelockOrder::set_lock_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lock_time(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TimeRelockOrder.lock_time)
}

// -------------------------------------------------------------------

// TimeUnlockOrder

// bytes from_address = 1;
inline void TimeUnlockOrder::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& TimeUnlockOrder::from_address() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeUnlockOrder.from_address)
  return _internal_from_address();
}
inline void TimeUnlockOrder::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TimeUnlockOrder.from_address)
}
inline std::string* TimeUnlockOrder::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.TimeUnlockOrder.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& TimeUnlockOrder::_internal_from_address() const {
  return from_address_.Get();
}
inline void TimeUnlockOrder::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeUnlockOrder::set_from_address(std::string&& value) {
  
  from_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.TimeUnlockOrder.from_address)
}
inline void TimeUnlockOrder::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.TimeUnlockOrder.from_address)
}
inline void TimeUnlockOrder::set_from_address(const void* value,
    size_t size) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.TimeUnlockOrder.from_address)
}
inline std::string* TimeUnlockOrder::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeUnlockOrder::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.TimeUnlockOrder.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeUnlockOrder::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.TimeUnlockOrder.from_address)
}

// int64 id = 2;
inline void TimeUnlockOrder::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeUnlockOrder::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeUnlockOrder::id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.TimeUnlockOrder.id)
  return _internal_id();
}
inline void TimeUnlockOrder::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void TimeUnlockOrder::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.TimeUnlockOrder.id)
}

// -------------------------------------------------------------------

// SigningInput

// string chain_id = 1;
inline void SigningInput::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& SigningInput::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.chain_id)
  return _internal_chain_id();
}
inline void SigningInput::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SigningInput.chain_id)
}
inline std::string* SigningInput::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& SigningInput::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void SigningInput::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_chain_id(std::string&& value) {
  
  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SigningInput.chain_id)
}
inline void SigningInput::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SigningInput.chain_id)
}
inline void SigningInput::set_chain_id(const char* value,
    size_t size) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SigningInput.chain_id)
}
inline std::string* SigningInput::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.chain_id)
}

// int64 account_number = 2;
inline void SigningInput::clear_account_number() {
  account_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::_internal_account_number() const {
  return account_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::account_number() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.account_number)
  return _internal_account_number();
}
inline void SigningInput::_internal_set_account_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  account_number_ = value;
}
inline void SigningInput::set_account_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SigningInput.account_number)
}

// int64 sequence = 3;
inline void SigningInput::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::sequence() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.sequence)
  return _internal_sequence();
}
inline void SigningInput::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void SigningInput::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SigningInput.sequence)
}

// int64 source = 4;
inline void SigningInput::clear_source() {
  source_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::source() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.source)
  return _internal_source();
}
inline void SigningInput::_internal_set_source(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  source_ = value;
}
inline void SigningInput::set_source(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SigningInput.source)
}

// string memo = 5;
inline void SigningInput::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& SigningInput::memo() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.memo)
  return _internal_memo();
}
inline void SigningInput::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SigningInput.memo)
}
inline std::string* SigningInput::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.memo)
  return _internal_mutable_memo();
}
inline const std::string& SigningInput::_internal_memo() const {
  return memo_.Get();
}
inline void SigningInput::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_memo(std::string&& value) {
  
  memo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SigningInput.memo)
}
inline void SigningInput::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SigningInput.memo)
}
inline void SigningInput::set_memo(const char* value,
    size_t size) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SigningInput.memo)
}
inline std::string* SigningInput::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.memo)
}

// bytes private_key = 6;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningInput.private_key)
}

// .TW.Binance.Proto.TradeOrder trade_order = 8;
inline bool SigningInput::_internal_has_trade_order() const {
  return order_oneof_case() == kTradeOrder;
}
inline bool SigningInput::has_trade_order() const {
  return _internal_has_trade_order();
}
inline void SigningInput::set_has_trade_order() {
  _oneof_case_[0] = kTradeOrder;
}
inline void SigningInput::clear_trade_order() {
  if (_internal_has_trade_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.trade_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TradeOrder* SigningInput::release_trade_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.trade_order)
  if (_internal_has_trade_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TradeOrder* temp = order_oneof_.trade_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.trade_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TradeOrder& SigningInput::_internal_trade_order() const {
  return _internal_has_trade_order()
      ? *order_oneof_.trade_order_
      : reinterpret_cast< ::TW::Binance::Proto::TradeOrder&>(::TW::Binance::Proto::_TradeOrder_default_instance_);
}
inline const ::TW::Binance::Proto::TradeOrder& SigningInput::trade_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.trade_order)
  return _internal_trade_order();
}
inline ::TW::Binance::Proto::TradeOrder* SigningInput::unsafe_arena_release_trade_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.trade_order)
  if (_internal_has_trade_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TradeOrder* temp = order_oneof_.trade_order_;
    order_oneof_.trade_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_trade_order(::TW::Binance::Proto::TradeOrder* trade_order) {
  clear_order_oneof();
  if (trade_order) {
    set_has_trade_order();
    order_oneof_.trade_order_ = trade_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.trade_order)
}
inline ::TW::Binance::Proto::TradeOrder* SigningInput::_internal_mutable_trade_order() {
  if (!_internal_has_trade_order()) {
    clear_order_oneof();
    set_has_trade_order();
    order_oneof_.trade_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TradeOrder >(GetArena());
  }
  return order_oneof_.trade_order_;
}
inline ::TW::Binance::Proto::TradeOrder* SigningInput::mutable_trade_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.trade_order)
  return _internal_mutable_trade_order();
}

// .TW.Binance.Proto.CancelTradeOrder cancel_trade_order = 9;
inline bool SigningInput::_internal_has_cancel_trade_order() const {
  return order_oneof_case() == kCancelTradeOrder;
}
inline bool SigningInput::has_cancel_trade_order() const {
  return _internal_has_cancel_trade_order();
}
inline void SigningInput::set_has_cancel_trade_order() {
  _oneof_case_[0] = kCancelTradeOrder;
}
inline void SigningInput::clear_cancel_trade_order() {
  if (_internal_has_cancel_trade_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.cancel_trade_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::CancelTradeOrder* SigningInput::release_cancel_trade_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.cancel_trade_order)
  if (_internal_has_cancel_trade_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::CancelTradeOrder* temp = order_oneof_.cancel_trade_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.cancel_trade_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::CancelTradeOrder& SigningInput::_internal_cancel_trade_order() const {
  return _internal_has_cancel_trade_order()
      ? *order_oneof_.cancel_trade_order_
      : reinterpret_cast< ::TW::Binance::Proto::CancelTradeOrder&>(::TW::Binance::Proto::_CancelTradeOrder_default_instance_);
}
inline const ::TW::Binance::Proto::CancelTradeOrder& SigningInput::cancel_trade_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.cancel_trade_order)
  return _internal_cancel_trade_order();
}
inline ::TW::Binance::Proto::CancelTradeOrder* SigningInput::unsafe_arena_release_cancel_trade_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.cancel_trade_order)
  if (_internal_has_cancel_trade_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::CancelTradeOrder* temp = order_oneof_.cancel_trade_order_;
    order_oneof_.cancel_trade_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_cancel_trade_order(::TW::Binance::Proto::CancelTradeOrder* cancel_trade_order) {
  clear_order_oneof();
  if (cancel_trade_order) {
    set_has_cancel_trade_order();
    order_oneof_.cancel_trade_order_ = cancel_trade_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.cancel_trade_order)
}
inline ::TW::Binance::Proto::CancelTradeOrder* SigningInput::_internal_mutable_cancel_trade_order() {
  if (!_internal_has_cancel_trade_order()) {
    clear_order_oneof();
    set_has_cancel_trade_order();
    order_oneof_.cancel_trade_order_ = CreateMaybeMessage< ::TW::Binance::Proto::CancelTradeOrder >(GetArena());
  }
  return order_oneof_.cancel_trade_order_;
}
inline ::TW::Binance::Proto::CancelTradeOrder* SigningInput::mutable_cancel_trade_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.cancel_trade_order)
  return _internal_mutable_cancel_trade_order();
}

// .TW.Binance.Proto.SendOrder send_order = 10;
inline bool SigningInput::_internal_has_send_order() const {
  return order_oneof_case() == kSendOrder;
}
inline bool SigningInput::has_send_order() const {
  return _internal_has_send_order();
}
inline void SigningInput::set_has_send_order() {
  _oneof_case_[0] = kSendOrder;
}
inline void SigningInput::clear_send_order() {
  if (_internal_has_send_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.send_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::SendOrder* SigningInput::release_send_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.send_order)
  if (_internal_has_send_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::SendOrder* temp = order_oneof_.send_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.send_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::SendOrder& SigningInput::_internal_send_order() const {
  return _internal_has_send_order()
      ? *order_oneof_.send_order_
      : reinterpret_cast< ::TW::Binance::Proto::SendOrder&>(::TW::Binance::Proto::_SendOrder_default_instance_);
}
inline const ::TW::Binance::Proto::SendOrder& SigningInput::send_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.send_order)
  return _internal_send_order();
}
inline ::TW::Binance::Proto::SendOrder* SigningInput::unsafe_arena_release_send_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.send_order)
  if (_internal_has_send_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::SendOrder* temp = order_oneof_.send_order_;
    order_oneof_.send_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_send_order(::TW::Binance::Proto::SendOrder* send_order) {
  clear_order_oneof();
  if (send_order) {
    set_has_send_order();
    order_oneof_.send_order_ = send_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.send_order)
}
inline ::TW::Binance::Proto::SendOrder* SigningInput::_internal_mutable_send_order() {
  if (!_internal_has_send_order()) {
    clear_order_oneof();
    set_has_send_order();
    order_oneof_.send_order_ = CreateMaybeMessage< ::TW::Binance::Proto::SendOrder >(GetArena());
  }
  return order_oneof_.send_order_;
}
inline ::TW::Binance::Proto::SendOrder* SigningInput::mutable_send_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.send_order)
  return _internal_mutable_send_order();
}

// .TW.Binance.Proto.TokenFreezeOrder freeze_order = 11;
inline bool SigningInput::_internal_has_freeze_order() const {
  return order_oneof_case() == kFreezeOrder;
}
inline bool SigningInput::has_freeze_order() const {
  return _internal_has_freeze_order();
}
inline void SigningInput::set_has_freeze_order() {
  _oneof_case_[0] = kFreezeOrder;
}
inline void SigningInput::clear_freeze_order() {
  if (_internal_has_freeze_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.freeze_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TokenFreezeOrder* SigningInput::release_freeze_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.freeze_order)
  if (_internal_has_freeze_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TokenFreezeOrder* temp = order_oneof_.freeze_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.freeze_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TokenFreezeOrder& SigningInput::_internal_freeze_order() const {
  return _internal_has_freeze_order()
      ? *order_oneof_.freeze_order_
      : reinterpret_cast< ::TW::Binance::Proto::TokenFreezeOrder&>(::TW::Binance::Proto::_TokenFreezeOrder_default_instance_);
}
inline const ::TW::Binance::Proto::TokenFreezeOrder& SigningInput::freeze_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.freeze_order)
  return _internal_freeze_order();
}
inline ::TW::Binance::Proto::TokenFreezeOrder* SigningInput::unsafe_arena_release_freeze_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.freeze_order)
  if (_internal_has_freeze_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TokenFreezeOrder* temp = order_oneof_.freeze_order_;
    order_oneof_.freeze_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_freeze_order(::TW::Binance::Proto::TokenFreezeOrder* freeze_order) {
  clear_order_oneof();
  if (freeze_order) {
    set_has_freeze_order();
    order_oneof_.freeze_order_ = freeze_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.freeze_order)
}
inline ::TW::Binance::Proto::TokenFreezeOrder* SigningInput::_internal_mutable_freeze_order() {
  if (!_internal_has_freeze_order()) {
    clear_order_oneof();
    set_has_freeze_order();
    order_oneof_.freeze_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TokenFreezeOrder >(GetArena());
  }
  return order_oneof_.freeze_order_;
}
inline ::TW::Binance::Proto::TokenFreezeOrder* SigningInput::mutable_freeze_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.freeze_order)
  return _internal_mutable_freeze_order();
}

// .TW.Binance.Proto.TokenUnfreezeOrder unfreeze_order = 12;
inline bool SigningInput::_internal_has_unfreeze_order() const {
  return order_oneof_case() == kUnfreezeOrder;
}
inline bool SigningInput::has_unfreeze_order() const {
  return _internal_has_unfreeze_order();
}
inline void SigningInput::set_has_unfreeze_order() {
  _oneof_case_[0] = kUnfreezeOrder;
}
inline void SigningInput::clear_unfreeze_order() {
  if (_internal_has_unfreeze_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.unfreeze_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TokenUnfreezeOrder* SigningInput::release_unfreeze_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.unfreeze_order)
  if (_internal_has_unfreeze_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TokenUnfreezeOrder* temp = order_oneof_.unfreeze_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.unfreeze_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TokenUnfreezeOrder& SigningInput::_internal_unfreeze_order() const {
  return _internal_has_unfreeze_order()
      ? *order_oneof_.unfreeze_order_
      : reinterpret_cast< ::TW::Binance::Proto::TokenUnfreezeOrder&>(::TW::Binance::Proto::_TokenUnfreezeOrder_default_instance_);
}
inline const ::TW::Binance::Proto::TokenUnfreezeOrder& SigningInput::unfreeze_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.unfreeze_order)
  return _internal_unfreeze_order();
}
inline ::TW::Binance::Proto::TokenUnfreezeOrder* SigningInput::unsafe_arena_release_unfreeze_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.unfreeze_order)
  if (_internal_has_unfreeze_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TokenUnfreezeOrder* temp = order_oneof_.unfreeze_order_;
    order_oneof_.unfreeze_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_unfreeze_order(::TW::Binance::Proto::TokenUnfreezeOrder* unfreeze_order) {
  clear_order_oneof();
  if (unfreeze_order) {
    set_has_unfreeze_order();
    order_oneof_.unfreeze_order_ = unfreeze_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.unfreeze_order)
}
inline ::TW::Binance::Proto::TokenUnfreezeOrder* SigningInput::_internal_mutable_unfreeze_order() {
  if (!_internal_has_unfreeze_order()) {
    clear_order_oneof();
    set_has_unfreeze_order();
    order_oneof_.unfreeze_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TokenUnfreezeOrder >(GetArena());
  }
  return order_oneof_.unfreeze_order_;
}
inline ::TW::Binance::Proto::TokenUnfreezeOrder* SigningInput::mutable_unfreeze_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.unfreeze_order)
  return _internal_mutable_unfreeze_order();
}

// .TW.Binance.Proto.HTLTOrder htlt_order = 13;
inline bool SigningInput::_internal_has_htlt_order() const {
  return order_oneof_case() == kHtltOrder;
}
inline bool SigningInput::has_htlt_order() const {
  return _internal_has_htlt_order();
}
inline void SigningInput::set_has_htlt_order() {
  _oneof_case_[0] = kHtltOrder;
}
inline void SigningInput::clear_htlt_order() {
  if (_internal_has_htlt_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.htlt_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::HTLTOrder* SigningInput::release_htlt_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.htlt_order)
  if (_internal_has_htlt_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::HTLTOrder* temp = order_oneof_.htlt_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.htlt_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::HTLTOrder& SigningInput::_internal_htlt_order() const {
  return _internal_has_htlt_order()
      ? *order_oneof_.htlt_order_
      : reinterpret_cast< ::TW::Binance::Proto::HTLTOrder&>(::TW::Binance::Proto::_HTLTOrder_default_instance_);
}
inline const ::TW::Binance::Proto::HTLTOrder& SigningInput::htlt_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.htlt_order)
  return _internal_htlt_order();
}
inline ::TW::Binance::Proto::HTLTOrder* SigningInput::unsafe_arena_release_htlt_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.htlt_order)
  if (_internal_has_htlt_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::HTLTOrder* temp = order_oneof_.htlt_order_;
    order_oneof_.htlt_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_htlt_order(::TW::Binance::Proto::HTLTOrder* htlt_order) {
  clear_order_oneof();
  if (htlt_order) {
    set_has_htlt_order();
    order_oneof_.htlt_order_ = htlt_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.htlt_order)
}
inline ::TW::Binance::Proto::HTLTOrder* SigningInput::_internal_mutable_htlt_order() {
  if (!_internal_has_htlt_order()) {
    clear_order_oneof();
    set_has_htlt_order();
    order_oneof_.htlt_order_ = CreateMaybeMessage< ::TW::Binance::Proto::HTLTOrder >(GetArena());
  }
  return order_oneof_.htlt_order_;
}
inline ::TW::Binance::Proto::HTLTOrder* SigningInput::mutable_htlt_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.htlt_order)
  return _internal_mutable_htlt_order();
}

// .TW.Binance.Proto.DepositHTLTOrder depositHTLT_order = 14;
inline bool SigningInput::_internal_has_deposithtlt_order() const {
  return order_oneof_case() == kDepositHTLTOrder;
}
inline bool SigningInput::has_deposithtlt_order() const {
  return _internal_has_deposithtlt_order();
}
inline void SigningInput::set_has_deposithtlt_order() {
  _oneof_case_[0] = kDepositHTLTOrder;
}
inline void SigningInput::clear_deposithtlt_order() {
  if (_internal_has_deposithtlt_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.deposithtlt_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::DepositHTLTOrder* SigningInput::release_deposithtlt_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.depositHTLT_order)
  if (_internal_has_deposithtlt_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::DepositHTLTOrder* temp = order_oneof_.deposithtlt_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.deposithtlt_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::DepositHTLTOrder& SigningInput::_internal_deposithtlt_order() const {
  return _internal_has_deposithtlt_order()
      ? *order_oneof_.deposithtlt_order_
      : reinterpret_cast< ::TW::Binance::Proto::DepositHTLTOrder&>(::TW::Binance::Proto::_DepositHTLTOrder_default_instance_);
}
inline const ::TW::Binance::Proto::DepositHTLTOrder& SigningInput::deposithtlt_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.depositHTLT_order)
  return _internal_deposithtlt_order();
}
inline ::TW::Binance::Proto::DepositHTLTOrder* SigningInput::unsafe_arena_release_deposithtlt_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.depositHTLT_order)
  if (_internal_has_deposithtlt_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::DepositHTLTOrder* temp = order_oneof_.deposithtlt_order_;
    order_oneof_.deposithtlt_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_deposithtlt_order(::TW::Binance::Proto::DepositHTLTOrder* deposithtlt_order) {
  clear_order_oneof();
  if (deposithtlt_order) {
    set_has_deposithtlt_order();
    order_oneof_.deposithtlt_order_ = deposithtlt_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.depositHTLT_order)
}
inline ::TW::Binance::Proto::DepositHTLTOrder* SigningInput::_internal_mutable_deposithtlt_order() {
  if (!_internal_has_deposithtlt_order()) {
    clear_order_oneof();
    set_has_deposithtlt_order();
    order_oneof_.deposithtlt_order_ = CreateMaybeMessage< ::TW::Binance::Proto::DepositHTLTOrder >(GetArena());
  }
  return order_oneof_.deposithtlt_order_;
}
inline ::TW::Binance::Proto::DepositHTLTOrder* SigningInput::mutable_deposithtlt_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.depositHTLT_order)
  return _internal_mutable_deposithtlt_order();
}

// .TW.Binance.Proto.ClaimHTLOrder claimHTLT_order = 15;
inline bool SigningInput::_internal_has_claimhtlt_order() const {
  return order_oneof_case() == kClaimHTLTOrder;
}
inline bool SigningInput::has_claimhtlt_order() const {
  return _internal_has_claimhtlt_order();
}
inline void SigningInput::set_has_claimhtlt_order() {
  _oneof_case_[0] = kClaimHTLTOrder;
}
inline void SigningInput::clear_claimhtlt_order() {
  if (_internal_has_claimhtlt_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.claimhtlt_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::ClaimHTLOrder* SigningInput::release_claimhtlt_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.claimHTLT_order)
  if (_internal_has_claimhtlt_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::ClaimHTLOrder* temp = order_oneof_.claimhtlt_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.claimhtlt_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::ClaimHTLOrder& SigningInput::_internal_claimhtlt_order() const {
  return _internal_has_claimhtlt_order()
      ? *order_oneof_.claimhtlt_order_
      : reinterpret_cast< ::TW::Binance::Proto::ClaimHTLOrder&>(::TW::Binance::Proto::_ClaimHTLOrder_default_instance_);
}
inline const ::TW::Binance::Proto::ClaimHTLOrder& SigningInput::claimhtlt_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.claimHTLT_order)
  return _internal_claimhtlt_order();
}
inline ::TW::Binance::Proto::ClaimHTLOrder* SigningInput::unsafe_arena_release_claimhtlt_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.claimHTLT_order)
  if (_internal_has_claimhtlt_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::ClaimHTLOrder* temp = order_oneof_.claimhtlt_order_;
    order_oneof_.claimhtlt_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_claimhtlt_order(::TW::Binance::Proto::ClaimHTLOrder* claimhtlt_order) {
  clear_order_oneof();
  if (claimhtlt_order) {
    set_has_claimhtlt_order();
    order_oneof_.claimhtlt_order_ = claimhtlt_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.claimHTLT_order)
}
inline ::TW::Binance::Proto::ClaimHTLOrder* SigningInput::_internal_mutable_claimhtlt_order() {
  if (!_internal_has_claimhtlt_order()) {
    clear_order_oneof();
    set_has_claimhtlt_order();
    order_oneof_.claimhtlt_order_ = CreateMaybeMessage< ::TW::Binance::Proto::ClaimHTLOrder >(GetArena());
  }
  return order_oneof_.claimhtlt_order_;
}
inline ::TW::Binance::Proto::ClaimHTLOrder* SigningInput::mutable_claimhtlt_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.claimHTLT_order)
  return _internal_mutable_claimhtlt_order();
}

// .TW.Binance.Proto.RefundHTLTOrder refundHTLT_order = 16;
inline bool SigningInput::_internal_has_refundhtlt_order() const {
  return order_oneof_case() == kRefundHTLTOrder;
}
inline bool SigningInput::has_refundhtlt_order() const {
  return _internal_has_refundhtlt_order();
}
inline void SigningInput::set_has_refundhtlt_order() {
  _oneof_case_[0] = kRefundHTLTOrder;
}
inline void SigningInput::clear_refundhtlt_order() {
  if (_internal_has_refundhtlt_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.refundhtlt_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::RefundHTLTOrder* SigningInput::release_refundhtlt_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.refundHTLT_order)
  if (_internal_has_refundhtlt_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::RefundHTLTOrder* temp = order_oneof_.refundhtlt_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.refundhtlt_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::RefundHTLTOrder& SigningInput::_internal_refundhtlt_order() const {
  return _internal_has_refundhtlt_order()
      ? *order_oneof_.refundhtlt_order_
      : reinterpret_cast< ::TW::Binance::Proto::RefundHTLTOrder&>(::TW::Binance::Proto::_RefundHTLTOrder_default_instance_);
}
inline const ::TW::Binance::Proto::RefundHTLTOrder& SigningInput::refundhtlt_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.refundHTLT_order)
  return _internal_refundhtlt_order();
}
inline ::TW::Binance::Proto::RefundHTLTOrder* SigningInput::unsafe_arena_release_refundhtlt_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.refundHTLT_order)
  if (_internal_has_refundhtlt_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::RefundHTLTOrder* temp = order_oneof_.refundhtlt_order_;
    order_oneof_.refundhtlt_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_refundhtlt_order(::TW::Binance::Proto::RefundHTLTOrder* refundhtlt_order) {
  clear_order_oneof();
  if (refundhtlt_order) {
    set_has_refundhtlt_order();
    order_oneof_.refundhtlt_order_ = refundhtlt_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.refundHTLT_order)
}
inline ::TW::Binance::Proto::RefundHTLTOrder* SigningInput::_internal_mutable_refundhtlt_order() {
  if (!_internal_has_refundhtlt_order()) {
    clear_order_oneof();
    set_has_refundhtlt_order();
    order_oneof_.refundhtlt_order_ = CreateMaybeMessage< ::TW::Binance::Proto::RefundHTLTOrder >(GetArena());
  }
  return order_oneof_.refundhtlt_order_;
}
inline ::TW::Binance::Proto::RefundHTLTOrder* SigningInput::mutable_refundhtlt_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.refundHTLT_order)
  return _internal_mutable_refundhtlt_order();
}

// .TW.Binance.Proto.TokenIssueOrder issue_order = 17;
inline bool SigningInput::_internal_has_issue_order() const {
  return order_oneof_case() == kIssueOrder;
}
inline bool SigningInput::has_issue_order() const {
  return _internal_has_issue_order();
}
inline void SigningInput::set_has_issue_order() {
  _oneof_case_[0] = kIssueOrder;
}
inline void SigningInput::clear_issue_order() {
  if (_internal_has_issue_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.issue_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TokenIssueOrder* SigningInput::release_issue_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.issue_order)
  if (_internal_has_issue_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TokenIssueOrder* temp = order_oneof_.issue_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.issue_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TokenIssueOrder& SigningInput::_internal_issue_order() const {
  return _internal_has_issue_order()
      ? *order_oneof_.issue_order_
      : reinterpret_cast< ::TW::Binance::Proto::TokenIssueOrder&>(::TW::Binance::Proto::_TokenIssueOrder_default_instance_);
}
inline const ::TW::Binance::Proto::TokenIssueOrder& SigningInput::issue_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.issue_order)
  return _internal_issue_order();
}
inline ::TW::Binance::Proto::TokenIssueOrder* SigningInput::unsafe_arena_release_issue_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.issue_order)
  if (_internal_has_issue_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TokenIssueOrder* temp = order_oneof_.issue_order_;
    order_oneof_.issue_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_issue_order(::TW::Binance::Proto::TokenIssueOrder* issue_order) {
  clear_order_oneof();
  if (issue_order) {
    set_has_issue_order();
    order_oneof_.issue_order_ = issue_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.issue_order)
}
inline ::TW::Binance::Proto::TokenIssueOrder* SigningInput::_internal_mutable_issue_order() {
  if (!_internal_has_issue_order()) {
    clear_order_oneof();
    set_has_issue_order();
    order_oneof_.issue_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TokenIssueOrder >(GetArena());
  }
  return order_oneof_.issue_order_;
}
inline ::TW::Binance::Proto::TokenIssueOrder* SigningInput::mutable_issue_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.issue_order)
  return _internal_mutable_issue_order();
}

// .TW.Binance.Proto.TokenMintOrder mint_order = 18;
inline bool SigningInput::_internal_has_mint_order() const {
  return order_oneof_case() == kMintOrder;
}
inline bool SigningInput::has_mint_order() const {
  return _internal_has_mint_order();
}
inline void SigningInput::set_has_mint_order() {
  _oneof_case_[0] = kMintOrder;
}
inline void SigningInput::clear_mint_order() {
  if (_internal_has_mint_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.mint_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TokenMintOrder* SigningInput::release_mint_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.mint_order)
  if (_internal_has_mint_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TokenMintOrder* temp = order_oneof_.mint_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.mint_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TokenMintOrder& SigningInput::_internal_mint_order() const {
  return _internal_has_mint_order()
      ? *order_oneof_.mint_order_
      : reinterpret_cast< ::TW::Binance::Proto::TokenMintOrder&>(::TW::Binance::Proto::_TokenMintOrder_default_instance_);
}
inline const ::TW::Binance::Proto::TokenMintOrder& SigningInput::mint_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.mint_order)
  return _internal_mint_order();
}
inline ::TW::Binance::Proto::TokenMintOrder* SigningInput::unsafe_arena_release_mint_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.mint_order)
  if (_internal_has_mint_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TokenMintOrder* temp = order_oneof_.mint_order_;
    order_oneof_.mint_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_mint_order(::TW::Binance::Proto::TokenMintOrder* mint_order) {
  clear_order_oneof();
  if (mint_order) {
    set_has_mint_order();
    order_oneof_.mint_order_ = mint_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.mint_order)
}
inline ::TW::Binance::Proto::TokenMintOrder* SigningInput::_internal_mutable_mint_order() {
  if (!_internal_has_mint_order()) {
    clear_order_oneof();
    set_has_mint_order();
    order_oneof_.mint_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TokenMintOrder >(GetArena());
  }
  return order_oneof_.mint_order_;
}
inline ::TW::Binance::Proto::TokenMintOrder* SigningInput::mutable_mint_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.mint_order)
  return _internal_mutable_mint_order();
}

// .TW.Binance.Proto.TokenBurnOrder burn_order = 19;
inline bool SigningInput::_internal_has_burn_order() const {
  return order_oneof_case() == kBurnOrder;
}
inline bool SigningInput::has_burn_order() const {
  return _internal_has_burn_order();
}
inline void SigningInput::set_has_burn_order() {
  _oneof_case_[0] = kBurnOrder;
}
inline void SigningInput::clear_burn_order() {
  if (_internal_has_burn_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.burn_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TokenBurnOrder* SigningInput::release_burn_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.burn_order)
  if (_internal_has_burn_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TokenBurnOrder* temp = order_oneof_.burn_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.burn_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TokenBurnOrder& SigningInput::_internal_burn_order() const {
  return _internal_has_burn_order()
      ? *order_oneof_.burn_order_
      : reinterpret_cast< ::TW::Binance::Proto::TokenBurnOrder&>(::TW::Binance::Proto::_TokenBurnOrder_default_instance_);
}
inline const ::TW::Binance::Proto::TokenBurnOrder& SigningInput::burn_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.burn_order)
  return _internal_burn_order();
}
inline ::TW::Binance::Proto::TokenBurnOrder* SigningInput::unsafe_arena_release_burn_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.burn_order)
  if (_internal_has_burn_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TokenBurnOrder* temp = order_oneof_.burn_order_;
    order_oneof_.burn_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_burn_order(::TW::Binance::Proto::TokenBurnOrder* burn_order) {
  clear_order_oneof();
  if (burn_order) {
    set_has_burn_order();
    order_oneof_.burn_order_ = burn_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.burn_order)
}
inline ::TW::Binance::Proto::TokenBurnOrder* SigningInput::_internal_mutable_burn_order() {
  if (!_internal_has_burn_order()) {
    clear_order_oneof();
    set_has_burn_order();
    order_oneof_.burn_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TokenBurnOrder >(GetArena());
  }
  return order_oneof_.burn_order_;
}
inline ::TW::Binance::Proto::TokenBurnOrder* SigningInput::mutable_burn_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.burn_order)
  return _internal_mutable_burn_order();
}

// .TW.Binance.Proto.TransferOut transfer_out_order = 20;
inline bool SigningInput::_internal_has_transfer_out_order() const {
  return order_oneof_case() == kTransferOutOrder;
}
inline bool SigningInput::has_transfer_out_order() const {
  return _internal_has_transfer_out_order();
}
inline void SigningInput::set_has_transfer_out_order() {
  _oneof_case_[0] = kTransferOutOrder;
}
inline void SigningInput::clear_transfer_out_order() {
  if (_internal_has_transfer_out_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.transfer_out_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TransferOut* SigningInput::release_transfer_out_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.transfer_out_order)
  if (_internal_has_transfer_out_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TransferOut* temp = order_oneof_.transfer_out_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.transfer_out_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TransferOut& SigningInput::_internal_transfer_out_order() const {
  return _internal_has_transfer_out_order()
      ? *order_oneof_.transfer_out_order_
      : reinterpret_cast< ::TW::Binance::Proto::TransferOut&>(::TW::Binance::Proto::_TransferOut_default_instance_);
}
inline const ::TW::Binance::Proto::TransferOut& SigningInput::transfer_out_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.transfer_out_order)
  return _internal_transfer_out_order();
}
inline ::TW::Binance::Proto::TransferOut* SigningInput::unsafe_arena_release_transfer_out_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.transfer_out_order)
  if (_internal_has_transfer_out_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TransferOut* temp = order_oneof_.transfer_out_order_;
    order_oneof_.transfer_out_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transfer_out_order(::TW::Binance::Proto::TransferOut* transfer_out_order) {
  clear_order_oneof();
  if (transfer_out_order) {
    set_has_transfer_out_order();
    order_oneof_.transfer_out_order_ = transfer_out_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.transfer_out_order)
}
inline ::TW::Binance::Proto::TransferOut* SigningInput::_internal_mutable_transfer_out_order() {
  if (!_internal_has_transfer_out_order()) {
    clear_order_oneof();
    set_has_transfer_out_order();
    order_oneof_.transfer_out_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TransferOut >(GetArena());
  }
  return order_oneof_.transfer_out_order_;
}
inline ::TW::Binance::Proto::TransferOut* SigningInput::mutable_transfer_out_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.transfer_out_order)
  return _internal_mutable_transfer_out_order();
}

// .TW.Binance.Proto.SideChainDelegate side_delegate_order = 21;
inline bool SigningInput::_internal_has_side_delegate_order() const {
  return order_oneof_case() == kSideDelegateOrder;
}
inline bool SigningInput::has_side_delegate_order() const {
  return _internal_has_side_delegate_order();
}
inline void SigningInput::set_has_side_delegate_order() {
  _oneof_case_[0] = kSideDelegateOrder;
}
inline void SigningInput::clear_side_delegate_order() {
  if (_internal_has_side_delegate_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.side_delegate_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::SideChainDelegate* SigningInput::release_side_delegate_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.side_delegate_order)
  if (_internal_has_side_delegate_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::SideChainDelegate* temp = order_oneof_.side_delegate_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.side_delegate_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::SideChainDelegate& SigningInput::_internal_side_delegate_order() const {
  return _internal_has_side_delegate_order()
      ? *order_oneof_.side_delegate_order_
      : reinterpret_cast< ::TW::Binance::Proto::SideChainDelegate&>(::TW::Binance::Proto::_SideChainDelegate_default_instance_);
}
inline const ::TW::Binance::Proto::SideChainDelegate& SigningInput::side_delegate_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.side_delegate_order)
  return _internal_side_delegate_order();
}
inline ::TW::Binance::Proto::SideChainDelegate* SigningInput::unsafe_arena_release_side_delegate_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.side_delegate_order)
  if (_internal_has_side_delegate_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::SideChainDelegate* temp = order_oneof_.side_delegate_order_;
    order_oneof_.side_delegate_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_side_delegate_order(::TW::Binance::Proto::SideChainDelegate* side_delegate_order) {
  clear_order_oneof();
  if (side_delegate_order) {
    set_has_side_delegate_order();
    order_oneof_.side_delegate_order_ = side_delegate_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.side_delegate_order)
}
inline ::TW::Binance::Proto::SideChainDelegate* SigningInput::_internal_mutable_side_delegate_order() {
  if (!_internal_has_side_delegate_order()) {
    clear_order_oneof();
    set_has_side_delegate_order();
    order_oneof_.side_delegate_order_ = CreateMaybeMessage< ::TW::Binance::Proto::SideChainDelegate >(GetArena());
  }
  return order_oneof_.side_delegate_order_;
}
inline ::TW::Binance::Proto::SideChainDelegate* SigningInput::mutable_side_delegate_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.side_delegate_order)
  return _internal_mutable_side_delegate_order();
}

// .TW.Binance.Proto.SideChainRedelegate side_redelegate_order = 22;
inline bool SigningInput::_internal_has_side_redelegate_order() const {
  return order_oneof_case() == kSideRedelegateOrder;
}
inline bool SigningInput::has_side_redelegate_order() const {
  return _internal_has_side_redelegate_order();
}
inline void SigningInput::set_has_side_redelegate_order() {
  _oneof_case_[0] = kSideRedelegateOrder;
}
inline void SigningInput::clear_side_redelegate_order() {
  if (_internal_has_side_redelegate_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.side_redelegate_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::SideChainRedelegate* SigningInput::release_side_redelegate_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.side_redelegate_order)
  if (_internal_has_side_redelegate_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::SideChainRedelegate* temp = order_oneof_.side_redelegate_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.side_redelegate_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::SideChainRedelegate& SigningInput::_internal_side_redelegate_order() const {
  return _internal_has_side_redelegate_order()
      ? *order_oneof_.side_redelegate_order_
      : reinterpret_cast< ::TW::Binance::Proto::SideChainRedelegate&>(::TW::Binance::Proto::_SideChainRedelegate_default_instance_);
}
inline const ::TW::Binance::Proto::SideChainRedelegate& SigningInput::side_redelegate_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.side_redelegate_order)
  return _internal_side_redelegate_order();
}
inline ::TW::Binance::Proto::SideChainRedelegate* SigningInput::unsafe_arena_release_side_redelegate_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.side_redelegate_order)
  if (_internal_has_side_redelegate_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::SideChainRedelegate* temp = order_oneof_.side_redelegate_order_;
    order_oneof_.side_redelegate_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_side_redelegate_order(::TW::Binance::Proto::SideChainRedelegate* side_redelegate_order) {
  clear_order_oneof();
  if (side_redelegate_order) {
    set_has_side_redelegate_order();
    order_oneof_.side_redelegate_order_ = side_redelegate_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.side_redelegate_order)
}
inline ::TW::Binance::Proto::SideChainRedelegate* SigningInput::_internal_mutable_side_redelegate_order() {
  if (!_internal_has_side_redelegate_order()) {
    clear_order_oneof();
    set_has_side_redelegate_order();
    order_oneof_.side_redelegate_order_ = CreateMaybeMessage< ::TW::Binance::Proto::SideChainRedelegate >(GetArena());
  }
  return order_oneof_.side_redelegate_order_;
}
inline ::TW::Binance::Proto::SideChainRedelegate* SigningInput::mutable_side_redelegate_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.side_redelegate_order)
  return _internal_mutable_side_redelegate_order();
}

// .TW.Binance.Proto.SideChainUndelegate side_undelegate_order = 23;
inline bool SigningInput::_internal_has_side_undelegate_order() const {
  return order_oneof_case() == kSideUndelegateOrder;
}
inline bool SigningInput::has_side_undelegate_order() const {
  return _internal_has_side_undelegate_order();
}
inline void SigningInput::set_has_side_undelegate_order() {
  _oneof_case_[0] = kSideUndelegateOrder;
}
inline void SigningInput::clear_side_undelegate_order() {
  if (_internal_has_side_undelegate_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.side_undelegate_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::SideChainUndelegate* SigningInput::release_side_undelegate_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.side_undelegate_order)
  if (_internal_has_side_undelegate_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::SideChainUndelegate* temp = order_oneof_.side_undelegate_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.side_undelegate_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::SideChainUndelegate& SigningInput::_internal_side_undelegate_order() const {
  return _internal_has_side_undelegate_order()
      ? *order_oneof_.side_undelegate_order_
      : reinterpret_cast< ::TW::Binance::Proto::SideChainUndelegate&>(::TW::Binance::Proto::_SideChainUndelegate_default_instance_);
}
inline const ::TW::Binance::Proto::SideChainUndelegate& SigningInput::side_undelegate_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.side_undelegate_order)
  return _internal_side_undelegate_order();
}
inline ::TW::Binance::Proto::SideChainUndelegate* SigningInput::unsafe_arena_release_side_undelegate_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.side_undelegate_order)
  if (_internal_has_side_undelegate_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::SideChainUndelegate* temp = order_oneof_.side_undelegate_order_;
    order_oneof_.side_undelegate_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_side_undelegate_order(::TW::Binance::Proto::SideChainUndelegate* side_undelegate_order) {
  clear_order_oneof();
  if (side_undelegate_order) {
    set_has_side_undelegate_order();
    order_oneof_.side_undelegate_order_ = side_undelegate_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.side_undelegate_order)
}
inline ::TW::Binance::Proto::SideChainUndelegate* SigningInput::_internal_mutable_side_undelegate_order() {
  if (!_internal_has_side_undelegate_order()) {
    clear_order_oneof();
    set_has_side_undelegate_order();
    order_oneof_.side_undelegate_order_ = CreateMaybeMessage< ::TW::Binance::Proto::SideChainUndelegate >(GetArena());
  }
  return order_oneof_.side_undelegate_order_;
}
inline ::TW::Binance::Proto::SideChainUndelegate* SigningInput::mutable_side_undelegate_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.side_undelegate_order)
  return _internal_mutable_side_undelegate_order();
}

// .TW.Binance.Proto.TimeLockOrder time_lock_order = 24;
inline bool SigningInput::_internal_has_time_lock_order() const {
  return order_oneof_case() == kTimeLockOrder;
}
inline bool SigningInput::has_time_lock_order() const {
  return _internal_has_time_lock_order();
}
inline void SigningInput::set_has_time_lock_order() {
  _oneof_case_[0] = kTimeLockOrder;
}
inline void SigningInput::clear_time_lock_order() {
  if (_internal_has_time_lock_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.time_lock_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TimeLockOrder* SigningInput::release_time_lock_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.time_lock_order)
  if (_internal_has_time_lock_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TimeLockOrder* temp = order_oneof_.time_lock_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.time_lock_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TimeLockOrder& SigningInput::_internal_time_lock_order() const {
  return _internal_has_time_lock_order()
      ? *order_oneof_.time_lock_order_
      : reinterpret_cast< ::TW::Binance::Proto::TimeLockOrder&>(::TW::Binance::Proto::_TimeLockOrder_default_instance_);
}
inline const ::TW::Binance::Proto::TimeLockOrder& SigningInput::time_lock_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.time_lock_order)
  return _internal_time_lock_order();
}
inline ::TW::Binance::Proto::TimeLockOrder* SigningInput::unsafe_arena_release_time_lock_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.time_lock_order)
  if (_internal_has_time_lock_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TimeLockOrder* temp = order_oneof_.time_lock_order_;
    order_oneof_.time_lock_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_time_lock_order(::TW::Binance::Proto::TimeLockOrder* time_lock_order) {
  clear_order_oneof();
  if (time_lock_order) {
    set_has_time_lock_order();
    order_oneof_.time_lock_order_ = time_lock_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.time_lock_order)
}
inline ::TW::Binance::Proto::TimeLockOrder* SigningInput::_internal_mutable_time_lock_order() {
  if (!_internal_has_time_lock_order()) {
    clear_order_oneof();
    set_has_time_lock_order();
    order_oneof_.time_lock_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TimeLockOrder >(GetArena());
  }
  return order_oneof_.time_lock_order_;
}
inline ::TW::Binance::Proto::TimeLockOrder* SigningInput::mutable_time_lock_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.time_lock_order)
  return _internal_mutable_time_lock_order();
}

// .TW.Binance.Proto.TimeRelockOrder time_relock_order = 25;
inline bool SigningInput::_internal_has_time_relock_order() const {
  return order_oneof_case() == kTimeRelockOrder;
}
inline bool SigningInput::has_time_relock_order() const {
  return _internal_has_time_relock_order();
}
inline void SigningInput::set_has_time_relock_order() {
  _oneof_case_[0] = kTimeRelockOrder;
}
inline void SigningInput::clear_time_relock_order() {
  if (_internal_has_time_relock_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.time_relock_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TimeRelockOrder* SigningInput::release_time_relock_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.time_relock_order)
  if (_internal_has_time_relock_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TimeRelockOrder* temp = order_oneof_.time_relock_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.time_relock_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TimeRelockOrder& SigningInput::_internal_time_relock_order() const {
  return _internal_has_time_relock_order()
      ? *order_oneof_.time_relock_order_
      : reinterpret_cast< ::TW::Binance::Proto::TimeRelockOrder&>(::TW::Binance::Proto::_TimeRelockOrder_default_instance_);
}
inline const ::TW::Binance::Proto::TimeRelockOrder& SigningInput::time_relock_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.time_relock_order)
  return _internal_time_relock_order();
}
inline ::TW::Binance::Proto::TimeRelockOrder* SigningInput::unsafe_arena_release_time_relock_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.time_relock_order)
  if (_internal_has_time_relock_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TimeRelockOrder* temp = order_oneof_.time_relock_order_;
    order_oneof_.time_relock_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_time_relock_order(::TW::Binance::Proto::TimeRelockOrder* time_relock_order) {
  clear_order_oneof();
  if (time_relock_order) {
    set_has_time_relock_order();
    order_oneof_.time_relock_order_ = time_relock_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.time_relock_order)
}
inline ::TW::Binance::Proto::TimeRelockOrder* SigningInput::_internal_mutable_time_relock_order() {
  if (!_internal_has_time_relock_order()) {
    clear_order_oneof();
    set_has_time_relock_order();
    order_oneof_.time_relock_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TimeRelockOrder >(GetArena());
  }
  return order_oneof_.time_relock_order_;
}
inline ::TW::Binance::Proto::TimeRelockOrder* SigningInput::mutable_time_relock_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.time_relock_order)
  return _internal_mutable_time_relock_order();
}

// .TW.Binance.Proto.TimeUnlockOrder time_unlock_order = 26;
inline bool SigningInput::_internal_has_time_unlock_order() const {
  return order_oneof_case() == kTimeUnlockOrder;
}
inline bool SigningInput::has_time_unlock_order() const {
  return _internal_has_time_unlock_order();
}
inline void SigningInput::set_has_time_unlock_order() {
  _oneof_case_[0] = kTimeUnlockOrder;
}
inline void SigningInput::clear_time_unlock_order() {
  if (_internal_has_time_unlock_order()) {
    if (GetArena() == nullptr) {
      delete order_oneof_.time_unlock_order_;
    }
    clear_has_order_oneof();
  }
}
inline ::TW::Binance::Proto::TimeUnlockOrder* SigningInput::release_time_unlock_order() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningInput.time_unlock_order)
  if (_internal_has_time_unlock_order()) {
    clear_has_order_oneof();
      ::TW::Binance::Proto::TimeUnlockOrder* temp = order_oneof_.time_unlock_order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    order_oneof_.time_unlock_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::TimeUnlockOrder& SigningInput::_internal_time_unlock_order() const {
  return _internal_has_time_unlock_order()
      ? *order_oneof_.time_unlock_order_
      : reinterpret_cast< ::TW::Binance::Proto::TimeUnlockOrder&>(::TW::Binance::Proto::_TimeUnlockOrder_default_instance_);
}
inline const ::TW::Binance::Proto::TimeUnlockOrder& SigningInput::time_unlock_order() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningInput.time_unlock_order)
  return _internal_time_unlock_order();
}
inline ::TW::Binance::Proto::TimeUnlockOrder* SigningInput::unsafe_arena_release_time_unlock_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Binance.Proto.SigningInput.time_unlock_order)
  if (_internal_has_time_unlock_order()) {
    clear_has_order_oneof();
    ::TW::Binance::Proto::TimeUnlockOrder* temp = order_oneof_.time_unlock_order_;
    order_oneof_.time_unlock_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_time_unlock_order(::TW::Binance::Proto::TimeUnlockOrder* time_unlock_order) {
  clear_order_oneof();
  if (time_unlock_order) {
    set_has_time_unlock_order();
    order_oneof_.time_unlock_order_ = time_unlock_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Binance.Proto.SigningInput.time_unlock_order)
}
inline ::TW::Binance::Proto::TimeUnlockOrder* SigningInput::_internal_mutable_time_unlock_order() {
  if (!_internal_has_time_unlock_order()) {
    clear_order_oneof();
    set_has_time_unlock_order();
    order_oneof_.time_unlock_order_ = CreateMaybeMessage< ::TW::Binance::Proto::TimeUnlockOrder >(GetArena());
  }
  return order_oneof_.time_unlock_order_;
}
inline ::TW::Binance::Proto::TimeUnlockOrder* SigningInput::mutable_time_unlock_order() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningInput.time_unlock_order)
  return _internal_mutable_time_unlock_order();
}

inline bool SigningInput::has_order_oneof() const {
  return order_oneof_case() != ORDER_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_order_oneof() {
  _oneof_case_[0] = ORDER_ONEOF_NOT_SET;
}
inline SigningInput::OrderOneofCase SigningInput::order_oneof_case() const {
  return SigningInput::OrderOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Binance.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.Binance.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.Binance.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Binance.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Binance.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Binance.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Binance.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Binance.Proto.SigningOutput.encoded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Binance
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Binance_2eproto
