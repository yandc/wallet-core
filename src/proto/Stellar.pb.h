// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stellar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Stellar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Stellar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Stellar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Stellar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Stellar_2eproto;
namespace TW {
namespace Stellar {
namespace Proto {
class Asset;
class AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class MemoHash;
class MemoHashDefaultTypeInternal;
extern MemoHashDefaultTypeInternal _MemoHash_default_instance_;
class MemoId;
class MemoIdDefaultTypeInternal;
extern MemoIdDefaultTypeInternal _MemoId_default_instance_;
class MemoText;
class MemoTextDefaultTypeInternal;
extern MemoTextDefaultTypeInternal _MemoText_default_instance_;
class MemoVoid;
class MemoVoidDefaultTypeInternal;
extern MemoVoidDefaultTypeInternal _MemoVoid_default_instance_;
class OperationChangeTrust;
class OperationChangeTrustDefaultTypeInternal;
extern OperationChangeTrustDefaultTypeInternal _OperationChangeTrust_default_instance_;
class OperationCreateAccount;
class OperationCreateAccountDefaultTypeInternal;
extern OperationCreateAccountDefaultTypeInternal _OperationCreateAccount_default_instance_;
class OperationPayment;
class OperationPaymentDefaultTypeInternal;
extern OperationPaymentDefaultTypeInternal _OperationPayment_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Stellar
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Stellar::Proto::Asset* Arena::CreateMaybeMessage<::TW::Stellar::Proto::Asset>(Arena*);
template<> ::TW::Stellar::Proto::MemoHash* Arena::CreateMaybeMessage<::TW::Stellar::Proto::MemoHash>(Arena*);
template<> ::TW::Stellar::Proto::MemoId* Arena::CreateMaybeMessage<::TW::Stellar::Proto::MemoId>(Arena*);
template<> ::TW::Stellar::Proto::MemoText* Arena::CreateMaybeMessage<::TW::Stellar::Proto::MemoText>(Arena*);
template<> ::TW::Stellar::Proto::MemoVoid* Arena::CreateMaybeMessage<::TW::Stellar::Proto::MemoVoid>(Arena*);
template<> ::TW::Stellar::Proto::OperationChangeTrust* Arena::CreateMaybeMessage<::TW::Stellar::Proto::OperationChangeTrust>(Arena*);
template<> ::TW::Stellar::Proto::OperationCreateAccount* Arena::CreateMaybeMessage<::TW::Stellar::Proto::OperationCreateAccount>(Arena*);
template<> ::TW::Stellar::Proto::OperationPayment* Arena::CreateMaybeMessage<::TW::Stellar::Proto::OperationPayment>(Arena*);
template<> ::TW::Stellar::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Stellar::Proto::SigningInput>(Arena*);
template<> ::TW::Stellar::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Stellar::Proto::SigningOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Stellar {
namespace Proto {

// ===================================================================

class Asset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  virtual ~Asset();

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Asset& default_instance();

  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Asset* New() const final {
    return CreateMaybeMessage<Asset>(nullptr);
  }

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIssuerFieldNumber = 1,
    kAlphanum4FieldNumber = 2,
  };
  // string issuer = 1;
  void clear_issuer();
  const std::string& issuer() const;
  void set_issuer(const std::string& value);
  void set_issuer(std::string&& value);
  void set_issuer(const char* value);
  void set_issuer(const char* value, size_t size);
  std::string* mutable_issuer();
  std::string* release_issuer();
  void set_allocated_issuer(std::string* issuer);
  private:
  const std::string& _internal_issuer() const;
  void _internal_set_issuer(const std::string& value);
  std::string* _internal_mutable_issuer();
  public:

  // string alphanum4 = 2;
  void clear_alphanum4();
  const std::string& alphanum4() const;
  void set_alphanum4(const std::string& value);
  void set_alphanum4(std::string&& value);
  void set_alphanum4(const char* value);
  void set_alphanum4(const char* value, size_t size);
  std::string* mutable_alphanum4();
  std::string* release_alphanum4();
  void set_allocated_alphanum4(std::string* alphanum4);
  private:
  const std::string& _internal_alphanum4() const;
  void _internal_set_alphanum4(const std::string& value);
  std::string* _internal_mutable_alphanum4();
  public:

  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alphanum4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Stellar_2eproto;
};
// -------------------------------------------------------------------

class OperationCreateAccount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.OperationCreateAccount) */ {
 public:
  inline OperationCreateAccount() : OperationCreateAccount(nullptr) {}
  virtual ~OperationCreateAccount();

  OperationCreateAccount(const OperationCreateAccount& from);
  OperationCreateAccount(OperationCreateAccount&& from) noexcept
    : OperationCreateAccount() {
    *this = ::std::move(from);
  }

  inline OperationCreateAccount& operator=(const OperationCreateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationCreateAccount& operator=(OperationCreateAccount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationCreateAccount& default_instance();

  static inline const OperationCreateAccount* internal_default_instance() {
    return reinterpret_cast<const OperationCreateAccount*>(
               &_OperationCreateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OperationCreateAccount& a, OperationCreateAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationCreateAccount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationCreateAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationCreateAccount* New() const final {
    return CreateMaybeMessage<OperationCreateAccount>(nullptr);
  }

  OperationCreateAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationCreateAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationCreateAccount& from);
  void MergeFrom(const OperationCreateAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationCreateAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.OperationCreateAccount";
  }
  protected:
  explicit OperationCreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string destination = 1;
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // int64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.OperationCreateAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Stellar_2eproto;
};
// -------------------------------------------------------------------

class OperationPayment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.OperationPayment) */ {
 public:
  inline OperationPayment() : OperationPayment(nullptr) {}
  virtual ~OperationPayment();

  OperationPayment(const OperationPayment& from);
  OperationPayment(OperationPayment&& from) noexcept
    : OperationPayment() {
    *this = ::std::move(from);
  }

  inline OperationPayment& operator=(const OperationPayment& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationPayment& operator=(OperationPayment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationPayment& default_instance();

  static inline const OperationPayment* internal_default_instance() {
    return reinterpret_cast<const OperationPayment*>(
               &_OperationPayment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OperationPayment& a, OperationPayment& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationPayment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationPayment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationPayment* New() const final {
    return CreateMaybeMessage<OperationPayment>(nullptr);
  }

  OperationPayment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationPayment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationPayment& from);
  void MergeFrom(const OperationPayment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationPayment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.OperationPayment";
  }
  protected:
  explicit OperationPayment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 1,
    kAssetFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string destination = 1;
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // .TW.Stellar.Proto.Asset asset = 2;
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::TW::Stellar::Proto::Asset& asset() const;
  ::TW::Stellar::Proto::Asset* release_asset();
  ::TW::Stellar::Proto::Asset* mutable_asset();
  void set_allocated_asset(::TW::Stellar::Proto::Asset* asset);
  private:
  const ::TW::Stellar::Proto::Asset& _internal_asset() const;
  ::TW::Stellar::Proto::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::TW::Stellar::Proto::Asset* asset);
  ::TW::Stellar::Proto::Asset* unsafe_arena_release_asset();

  // int64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.OperationPayment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::TW::Stellar::Proto::Asset* asset_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Stellar_2eproto;
};
// -------------------------------------------------------------------

class OperationChangeTrust PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.OperationChangeTrust) */ {
 public:
  inline OperationChangeTrust() : OperationChangeTrust(nullptr) {}
  virtual ~OperationChangeTrust();

  OperationChangeTrust(const OperationChangeTrust& from);
  OperationChangeTrust(OperationChangeTrust&& from) noexcept
    : OperationChangeTrust() {
    *this = ::std::move(from);
  }

  inline OperationChangeTrust& operator=(const OperationChangeTrust& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationChangeTrust& operator=(OperationChangeTrust&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationChangeTrust& default_instance();

  static inline const OperationChangeTrust* internal_default_instance() {
    return reinterpret_cast<const OperationChangeTrust*>(
               &_OperationChangeTrust_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OperationChangeTrust& a, OperationChangeTrust& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationChangeTrust* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationChangeTrust* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationChangeTrust* New() const final {
    return CreateMaybeMessage<OperationChangeTrust>(nullptr);
  }

  OperationChangeTrust* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationChangeTrust>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationChangeTrust& from);
  void MergeFrom(const OperationChangeTrust& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationChangeTrust* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.OperationChangeTrust";
  }
  protected:
  explicit OperationChangeTrust(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 1,
    kValidBeforeFieldNumber = 2,
  };
  // .TW.Stellar.Proto.Asset asset = 1;
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::TW::Stellar::Proto::Asset& asset() const;
  ::TW::Stellar::Proto::Asset* release_asset();
  ::TW::Stellar::Proto::Asset* mutable_asset();
  void set_allocated_asset(::TW::Stellar::Proto::Asset* asset);
  private:
  const ::TW::Stellar::Proto::Asset& _internal_asset() const;
  ::TW::Stellar::Proto::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::TW::Stellar::Proto::Asset* asset);
  ::TW::Stellar::Proto::Asset* unsafe_arena_release_asset();

  // int64 valid_before = 2;
  void clear_valid_before();
  ::PROTOBUF_NAMESPACE_ID::int64 valid_before() const;
  void set_valid_before(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_valid_before() const;
  void _internal_set_valid_before(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.OperationChangeTrust)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Stellar::Proto::Asset* asset_;
  ::PROTOBUF_NAMESPACE_ID::int64 valid_before_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Stellar_2eproto;
};
// -------------------------------------------------------------------

class MemoVoid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.MemoVoid) */ {
 public:
  inline MemoVoid() : MemoVoid(nullptr) {}
  virtual ~MemoVoid();

  MemoVoid(const MemoVoid& from);
  MemoVoid(MemoVoid&& from) noexcept
    : MemoVoid() {
    *this = ::std::move(from);
  }

  inline MemoVoid& operator=(const MemoVoid& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoVoid& operator=(MemoVoid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoVoid& default_instance();

  static inline const MemoVoid* internal_default_instance() {
    return reinterpret_cast<const MemoVoid*>(
               &_MemoVoid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MemoVoid& a, MemoVoid& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoVoid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoVoid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoVoid* New() const final {
    return CreateMaybeMessage<MemoVoid>(nullptr);
  }

  MemoVoid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoVoid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoVoid& from);
  void MergeFrom(const MemoVoid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoVoid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.MemoVoid";
  }
  protected:
  explicit MemoVoid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.MemoVoid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Stellar_2eproto;
};
// -------------------------------------------------------------------

class MemoText PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.MemoText) */ {
 public:
  inline MemoText() : MemoText(nullptr) {}
  virtual ~MemoText();

  MemoText(const MemoText& from);
  MemoText(MemoText&& from) noexcept
    : MemoText() {
    *this = ::std::move(from);
  }

  inline MemoText& operator=(const MemoText& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoText& operator=(MemoText&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoText& default_instance();

  static inline const MemoText* internal_default_instance() {
    return reinterpret_cast<const MemoText*>(
               &_MemoText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MemoText& a, MemoText& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoText* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoText* New() const final {
    return CreateMaybeMessage<MemoText>(nullptr);
  }

  MemoText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoText& from);
  void MergeFrom(const MemoText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.MemoText";
  }
  protected:
  explicit MemoText(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.MemoText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Stellar_2eproto;
};
// -------------------------------------------------------------------

class MemoId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.MemoId) */ {
 public:
  inline MemoId() : MemoId(nullptr) {}
  virtual ~MemoId();

  MemoId(const MemoId& from);
  MemoId(MemoId&& from) noexcept
    : MemoId() {
    *this = ::std::move(from);
  }

  inline MemoId& operator=(const MemoId& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoId& operator=(MemoId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoId& default_instance();

  static inline const MemoId* internal_default_instance() {
    return reinterpret_cast<const MemoId*>(
               &_MemoId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MemoId& a, MemoId& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoId* New() const final {
    return CreateMaybeMessage<MemoId>(nullptr);
  }

  MemoId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoId& from);
  void MergeFrom(const MemoId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.MemoId";
  }
  protected:
  explicit MemoId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.MemoId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Stellar_2eproto;
};
// -------------------------------------------------------------------

class MemoHash PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.MemoHash) */ {
 public:
  inline MemoHash() : MemoHash(nullptr) {}
  virtual ~MemoHash();

  MemoHash(const MemoHash& from);
  MemoHash(MemoHash&& from) noexcept
    : MemoHash() {
    *this = ::std::move(from);
  }

  inline MemoHash& operator=(const MemoHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoHash& operator=(MemoHash&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoHash& default_instance();

  static inline const MemoHash* internal_default_instance() {
    return reinterpret_cast<const MemoHash*>(
               &_MemoHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MemoHash& a, MemoHash& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoHash* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoHash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoHash* New() const final {
    return CreateMaybeMessage<MemoHash>(nullptr);
  }

  MemoHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoHash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoHash& from);
  void MergeFrom(const MemoHash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoHash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.MemoHash";
  }
  protected:
  explicit MemoHash(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.MemoHash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Stellar_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  enum OperationOneofCase {
    kOpCreateAccount = 6,
    kOpPayment = 7,
    kOpChangeTrust = 8,
    OPERATION_ONEOF_NOT_SET = 0,
  };

  enum MemoTypeOneofCase {
    kMemoVoid = 9,
    kMemoText = 10,
    kMemoId = 11,
    kMemoHash = 12,
    kMemoReturnHash = 13,
    MEMO_TYPE_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 3,
    kPrivateKeyFieldNumber = 4,
    kPassphraseFieldNumber = 5,
    kSequenceFieldNumber = 2,
    kFeeFieldNumber = 1,
    kOpCreateAccountFieldNumber = 6,
    kOpPaymentFieldNumber = 7,
    kOpChangeTrustFieldNumber = 8,
    kMemoVoidFieldNumber = 9,
    kMemoTextFieldNumber = 10,
    kMemoIdFieldNumber = 11,
    kMemoHashFieldNumber = 12,
    kMemoReturnHashFieldNumber = 13,
  };
  // string account = 3;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes private_key = 4;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // string passphrase = 5;
  void clear_passphrase();
  const std::string& passphrase() const;
  void set_passphrase(const std::string& value);
  void set_passphrase(std::string&& value);
  void set_passphrase(const char* value);
  void set_passphrase(const char* value, size_t size);
  std::string* mutable_passphrase();
  std::string* release_passphrase();
  void set_allocated_passphrase(std::string* passphrase);
  private:
  const std::string& _internal_passphrase() const;
  void _internal_set_passphrase(const std::string& value);
  std::string* _internal_mutable_passphrase();
  public:

  // int64 sequence = 2;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 fee = 1;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int32 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .TW.Stellar.Proto.OperationCreateAccount op_create_account = 6;
  bool has_op_create_account() const;
  private:
  bool _internal_has_op_create_account() const;
  public:
  void clear_op_create_account();
  const ::TW::Stellar::Proto::OperationCreateAccount& op_create_account() const;
  ::TW::Stellar::Proto::OperationCreateAccount* release_op_create_account();
  ::TW::Stellar::Proto::OperationCreateAccount* mutable_op_create_account();
  void set_allocated_op_create_account(::TW::Stellar::Proto::OperationCreateAccount* op_create_account);
  private:
  const ::TW::Stellar::Proto::OperationCreateAccount& _internal_op_create_account() const;
  ::TW::Stellar::Proto::OperationCreateAccount* _internal_mutable_op_create_account();
  public:
  void unsafe_arena_set_allocated_op_create_account(
      ::TW::Stellar::Proto::OperationCreateAccount* op_create_account);
  ::TW::Stellar::Proto::OperationCreateAccount* unsafe_arena_release_op_create_account();

  // .TW.Stellar.Proto.OperationPayment op_payment = 7;
  bool has_op_payment() const;
  private:
  bool _internal_has_op_payment() const;
  public:
  void clear_op_payment();
  const ::TW::Stellar::Proto::OperationPayment& op_payment() const;
  ::TW::Stellar::Proto::OperationPayment* release_op_payment();
  ::TW::Stellar::Proto::OperationPayment* mutable_op_payment();
  void set_allocated_op_payment(::TW::Stellar::Proto::OperationPayment* op_payment);
  private:
  const ::TW::Stellar::Proto::OperationPayment& _internal_op_payment() const;
  ::TW::Stellar::Proto::OperationPayment* _internal_mutable_op_payment();
  public:
  void unsafe_arena_set_allocated_op_payment(
      ::TW::Stellar::Proto::OperationPayment* op_payment);
  ::TW::Stellar::Proto::OperationPayment* unsafe_arena_release_op_payment();

  // .TW.Stellar.Proto.OperationChangeTrust op_change_trust = 8;
  bool has_op_change_trust() const;
  private:
  bool _internal_has_op_change_trust() const;
  public:
  void clear_op_change_trust();
  const ::TW::Stellar::Proto::OperationChangeTrust& op_change_trust() const;
  ::TW::Stellar::Proto::OperationChangeTrust* release_op_change_trust();
  ::TW::Stellar::Proto::OperationChangeTrust* mutable_op_change_trust();
  void set_allocated_op_change_trust(::TW::Stellar::Proto::OperationChangeTrust* op_change_trust);
  private:
  const ::TW::Stellar::Proto::OperationChangeTrust& _internal_op_change_trust() const;
  ::TW::Stellar::Proto::OperationChangeTrust* _internal_mutable_op_change_trust();
  public:
  void unsafe_arena_set_allocated_op_change_trust(
      ::TW::Stellar::Proto::OperationChangeTrust* op_change_trust);
  ::TW::Stellar::Proto::OperationChangeTrust* unsafe_arena_release_op_change_trust();

  // .TW.Stellar.Proto.MemoVoid memo_void = 9;
  bool has_memo_void() const;
  private:
  bool _internal_has_memo_void() const;
  public:
  void clear_memo_void();
  const ::TW::Stellar::Proto::MemoVoid& memo_void() const;
  ::TW::Stellar::Proto::MemoVoid* release_memo_void();
  ::TW::Stellar::Proto::MemoVoid* mutable_memo_void();
  void set_allocated_memo_void(::TW::Stellar::Proto::MemoVoid* memo_void);
  private:
  const ::TW::Stellar::Proto::MemoVoid& _internal_memo_void() const;
  ::TW::Stellar::Proto::MemoVoid* _internal_mutable_memo_void();
  public:
  void unsafe_arena_set_allocated_memo_void(
      ::TW::Stellar::Proto::MemoVoid* memo_void);
  ::TW::Stellar::Proto::MemoVoid* unsafe_arena_release_memo_void();

  // .TW.Stellar.Proto.MemoText memo_text = 10;
  bool has_memo_text() const;
  private:
  bool _internal_has_memo_text() const;
  public:
  void clear_memo_text();
  const ::TW::Stellar::Proto::MemoText& memo_text() const;
  ::TW::Stellar::Proto::MemoText* release_memo_text();
  ::TW::Stellar::Proto::MemoText* mutable_memo_text();
  void set_allocated_memo_text(::TW::Stellar::Proto::MemoText* memo_text);
  private:
  const ::TW::Stellar::Proto::MemoText& _internal_memo_text() const;
  ::TW::Stellar::Proto::MemoText* _internal_mutable_memo_text();
  public:
  void unsafe_arena_set_allocated_memo_text(
      ::TW::Stellar::Proto::MemoText* memo_text);
  ::TW::Stellar::Proto::MemoText* unsafe_arena_release_memo_text();

  // .TW.Stellar.Proto.MemoId memo_id = 11;
  bool has_memo_id() const;
  private:
  bool _internal_has_memo_id() const;
  public:
  void clear_memo_id();
  const ::TW::Stellar::Proto::MemoId& memo_id() const;
  ::TW::Stellar::Proto::MemoId* release_memo_id();
  ::TW::Stellar::Proto::MemoId* mutable_memo_id();
  void set_allocated_memo_id(::TW::Stellar::Proto::MemoId* memo_id);
  private:
  const ::TW::Stellar::Proto::MemoId& _internal_memo_id() const;
  ::TW::Stellar::Proto::MemoId* _internal_mutable_memo_id();
  public:
  void unsafe_arena_set_allocated_memo_id(
      ::TW::Stellar::Proto::MemoId* memo_id);
  ::TW::Stellar::Proto::MemoId* unsafe_arena_release_memo_id();

  // .TW.Stellar.Proto.MemoHash memo_hash = 12;
  bool has_memo_hash() const;
  private:
  bool _internal_has_memo_hash() const;
  public:
  void clear_memo_hash();
  const ::TW::Stellar::Proto::MemoHash& memo_hash() const;
  ::TW::Stellar::Proto::MemoHash* release_memo_hash();
  ::TW::Stellar::Proto::MemoHash* mutable_memo_hash();
  void set_allocated_memo_hash(::TW::Stellar::Proto::MemoHash* memo_hash);
  private:
  const ::TW::Stellar::Proto::MemoHash& _internal_memo_hash() const;
  ::TW::Stellar::Proto::MemoHash* _internal_mutable_memo_hash();
  public:
  void unsafe_arena_set_allocated_memo_hash(
      ::TW::Stellar::Proto::MemoHash* memo_hash);
  ::TW::Stellar::Proto::MemoHash* unsafe_arena_release_memo_hash();

  // .TW.Stellar.Proto.MemoHash memo_return_hash = 13;
  bool has_memo_return_hash() const;
  private:
  bool _internal_has_memo_return_hash() const;
  public:
  void clear_memo_return_hash();
  const ::TW::Stellar::Proto::MemoHash& memo_return_hash() const;
  ::TW::Stellar::Proto::MemoHash* release_memo_return_hash();
  ::TW::Stellar::Proto::MemoHash* mutable_memo_return_hash();
  void set_allocated_memo_return_hash(::TW::Stellar::Proto::MemoHash* memo_return_hash);
  private:
  const ::TW::Stellar::Proto::MemoHash& _internal_memo_return_hash() const;
  ::TW::Stellar::Proto::MemoHash* _internal_mutable_memo_return_hash();
  public:
  void unsafe_arena_set_allocated_memo_return_hash(
      ::TW::Stellar::Proto::MemoHash* memo_return_hash);
  ::TW::Stellar::Proto::MemoHash* unsafe_arena_release_memo_return_hash();

  void clear_operation_oneof();
  OperationOneofCase operation_oneof_case() const;
  void clear_memo_type_oneof();
  MemoTypeOneofCase memo_type_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_op_create_account();
  void set_has_op_payment();
  void set_has_op_change_trust();
  void set_has_memo_void();
  void set_has_memo_text();
  void set_has_memo_id();
  void set_has_memo_hash();
  void set_has_memo_return_hash();

  inline bool has_operation_oneof() const;
  inline void clear_has_operation_oneof();

  inline bool has_memo_type_oneof() const;
  inline void clear_has_memo_type_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passphrase_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  ::PROTOBUF_NAMESPACE_ID::int32 fee_;
  union OperationOneofUnion {
    OperationOneofUnion() {}
    ::TW::Stellar::Proto::OperationCreateAccount* op_create_account_;
    ::TW::Stellar::Proto::OperationPayment* op_payment_;
    ::TW::Stellar::Proto::OperationChangeTrust* op_change_trust_;
  } operation_oneof_;
  union MemoTypeOneofUnion {
    MemoTypeOneofUnion() {}
    ::TW::Stellar::Proto::MemoVoid* memo_void_;
    ::TW::Stellar::Proto::MemoText* memo_text_;
    ::TW::Stellar::Proto::MemoId* memo_id_;
    ::TW::Stellar::Proto::MemoHash* memo_hash_;
    ::TW::Stellar::Proto::MemoHash* memo_return_hash_;
  } memo_type_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_Stellar_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Stellar.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Stellar.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Stellar_2eproto);
    return ::descriptor_table_Stellar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
  };
  // string signature = 1;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:TW.Stellar.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Stellar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Asset

// string issuer = 1;
inline void Asset::clear_issuer() {
  issuer_.ClearToEmpty();
}
inline const std::string& Asset::issuer() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.Asset.issuer)
  return _internal_issuer();
}
inline void Asset::set_issuer(const std::string& value) {
  _internal_set_issuer(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.Asset.issuer)
}
inline std::string* Asset::mutable_issuer() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.Asset.issuer)
  return _internal_mutable_issuer();
}
inline const std::string& Asset::_internal_issuer() const {
  return issuer_.Get();
}
inline void Asset::_internal_set_issuer(const std::string& value) {
  
  issuer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_issuer(std::string&& value) {
  
  issuer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.Asset.issuer)
}
inline void Asset::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issuer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.Asset.issuer)
}
inline void Asset::set_issuer(const char* value,
    size_t size) {
  
  issuer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.Asset.issuer)
}
inline std::string* Asset::_internal_mutable_issuer() {
  
  return issuer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_issuer() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.Asset.issuer)
  return issuer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_issuer(std::string* issuer) {
  if (issuer != nullptr) {
    
  } else {
    
  }
  issuer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.Asset.issuer)
}

// string alphanum4 = 2;
inline void Asset::clear_alphanum4() {
  alphanum4_.ClearToEmpty();
}
inline const std::string& Asset::alphanum4() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.Asset.alphanum4)
  return _internal_alphanum4();
}
inline void Asset::set_alphanum4(const std::string& value) {
  _internal_set_alphanum4(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.Asset.alphanum4)
}
inline std::string* Asset::mutable_alphanum4() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.Asset.alphanum4)
  return _internal_mutable_alphanum4();
}
inline const std::string& Asset::_internal_alphanum4() const {
  return alphanum4_.Get();
}
inline void Asset::_internal_set_alphanum4(const std::string& value) {
  
  alphanum4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_alphanum4(std::string&& value) {
  
  alphanum4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.Asset.alphanum4)
}
inline void Asset::set_alphanum4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alphanum4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.Asset.alphanum4)
}
inline void Asset::set_alphanum4(const char* value,
    size_t size) {
  
  alphanum4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.Asset.alphanum4)
}
inline std::string* Asset::_internal_mutable_alphanum4() {
  
  return alphanum4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_alphanum4() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.Asset.alphanum4)
  return alphanum4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_alphanum4(std::string* alphanum4) {
  if (alphanum4 != nullptr) {
    
  } else {
    
  }
  alphanum4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alphanum4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.Asset.alphanum4)
}

// -------------------------------------------------------------------

// OperationCreateAccount

// string destination = 1;
inline void OperationCreateAccount::clear_destination() {
  destination_.ClearToEmpty();
}
inline const std::string& OperationCreateAccount::destination() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.OperationCreateAccount.destination)
  return _internal_destination();
}
inline void OperationCreateAccount::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.OperationCreateAccount.destination)
}
inline std::string* OperationCreateAccount::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.OperationCreateAccount.destination)
  return _internal_mutable_destination();
}
inline const std::string& OperationCreateAccount::_internal_destination() const {
  return destination_.Get();
}
inline void OperationCreateAccount::_internal_set_destination(const std::string& value) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OperationCreateAccount::set_destination(std::string&& value) {
  
  destination_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.OperationCreateAccount.destination)
}
inline void OperationCreateAccount::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.OperationCreateAccount.destination)
}
inline void OperationCreateAccount::set_destination(const char* value,
    size_t size) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.OperationCreateAccount.destination)
}
inline std::string* OperationCreateAccount::_internal_mutable_destination() {
  
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OperationCreateAccount::release_destination() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.OperationCreateAccount.destination)
  return destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperationCreateAccount::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.OperationCreateAccount.destination)
}

// int64 amount = 2;
inline void OperationCreateAccount::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OperationCreateAccount::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OperationCreateAccount::amount() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.OperationCreateAccount.amount)
  return _internal_amount();
}
inline void OperationCreateAccount::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void OperationCreateAccount::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.OperationCreateAccount.amount)
}

// -------------------------------------------------------------------

// OperationPayment

// string destination = 1;
inline void OperationPayment::clear_destination() {
  destination_.ClearToEmpty();
}
inline const std::string& OperationPayment::destination() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.OperationPayment.destination)
  return _internal_destination();
}
inline void OperationPayment::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.OperationPayment.destination)
}
inline std::string* OperationPayment::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.OperationPayment.destination)
  return _internal_mutable_destination();
}
inline const std::string& OperationPayment::_internal_destination() const {
  return destination_.Get();
}
inline void OperationPayment::_internal_set_destination(const std::string& value) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OperationPayment::set_destination(std::string&& value) {
  
  destination_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.OperationPayment.destination)
}
inline void OperationPayment::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.OperationPayment.destination)
}
inline void OperationPayment::set_destination(const char* value,
    size_t size) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.OperationPayment.destination)
}
inline std::string* OperationPayment::_internal_mutable_destination() {
  
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OperationPayment::release_destination() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.OperationPayment.destination)
  return destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperationPayment::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.OperationPayment.destination)
}

// .TW.Stellar.Proto.Asset asset = 2;
inline bool OperationPayment::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool OperationPayment::has_asset() const {
  return _internal_has_asset();
}
inline void OperationPayment::clear_asset() {
  if (GetArena() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
inline const ::TW::Stellar::Proto::Asset& OperationPayment::_internal_asset() const {
  const ::TW::Stellar::Proto::Asset* p = asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Stellar::Proto::Asset&>(
      ::TW::Stellar::Proto::_Asset_default_instance_);
}
inline const ::TW::Stellar::Proto::Asset& OperationPayment::asset() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.OperationPayment.asset)
  return _internal_asset();
}
inline void OperationPayment::unsafe_arena_set_allocated_asset(
    ::TW::Stellar::Proto::Asset* asset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.OperationPayment.asset)
}
inline ::TW::Stellar::Proto::Asset* OperationPayment::release_asset() {
  
  ::TW::Stellar::Proto::Asset* temp = asset_;
  asset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Stellar::Proto::Asset* OperationPayment::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.OperationPayment.asset)
  
  ::TW::Stellar::Proto::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::TW::Stellar::Proto::Asset* OperationPayment::_internal_mutable_asset() {
  
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Stellar::Proto::Asset>(GetArena());
    asset_ = p;
  }
  return asset_;
}
inline ::TW::Stellar::Proto::Asset* OperationPayment::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.OperationPayment.asset)
  return _internal_mutable_asset();
}
inline void OperationPayment::set_allocated_asset(::TW::Stellar::Proto::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asset);
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.OperationPayment.asset)
}

// int64 amount = 3;
inline void OperationPayment::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OperationPayment::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OperationPayment::amount() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.OperationPayment.amount)
  return _internal_amount();
}
inline void OperationPayment::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void OperationPayment::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.OperationPayment.amount)
}

// -------------------------------------------------------------------

// OperationChangeTrust

// .TW.Stellar.Proto.Asset asset = 1;
inline bool OperationChangeTrust::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool OperationChangeTrust::has_asset() const {
  return _internal_has_asset();
}
inline void OperationChangeTrust::clear_asset() {
  if (GetArena() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
inline const ::TW::Stellar::Proto::Asset& OperationChangeTrust::_internal_asset() const {
  const ::TW::Stellar::Proto::Asset* p = asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Stellar::Proto::Asset&>(
      ::TW::Stellar::Proto::_Asset_default_instance_);
}
inline const ::TW::Stellar::Proto::Asset& OperationChangeTrust::asset() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.OperationChangeTrust.asset)
  return _internal_asset();
}
inline void OperationChangeTrust::unsafe_arena_set_allocated_asset(
    ::TW::Stellar::Proto::Asset* asset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.OperationChangeTrust.asset)
}
inline ::TW::Stellar::Proto::Asset* OperationChangeTrust::release_asset() {
  
  ::TW::Stellar::Proto::Asset* temp = asset_;
  asset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Stellar::Proto::Asset* OperationChangeTrust::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.OperationChangeTrust.asset)
  
  ::TW::Stellar::Proto::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::TW::Stellar::Proto::Asset* OperationChangeTrust::_internal_mutable_asset() {
  
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Stellar::Proto::Asset>(GetArena());
    asset_ = p;
  }
  return asset_;
}
inline ::TW::Stellar::Proto::Asset* OperationChangeTrust::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.OperationChangeTrust.asset)
  return _internal_mutable_asset();
}
inline void OperationChangeTrust::set_allocated_asset(::TW::Stellar::Proto::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asset);
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.OperationChangeTrust.asset)
}

// int64 valid_before = 2;
inline void OperationChangeTrust::clear_valid_before() {
  valid_before_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OperationChangeTrust::_internal_valid_before() const {
  return valid_before_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OperationChangeTrust::valid_before() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.OperationChangeTrust.valid_before)
  return _internal_valid_before();
}
inline void OperationChangeTrust::_internal_set_valid_before(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  valid_before_ = value;
}
inline void OperationChangeTrust::set_valid_before(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_valid_before(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.OperationChangeTrust.valid_before)
}

// -------------------------------------------------------------------

// MemoVoid

// -------------------------------------------------------------------

// MemoText

// string text = 1;
inline void MemoText::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& MemoText::text() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.MemoText.text)
  return _internal_text();
}
inline void MemoText::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.MemoText.text)
}
inline std::string* MemoText::mutable_text() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.MemoText.text)
  return _internal_mutable_text();
}
inline const std::string& MemoText::_internal_text() const {
  return text_.Get();
}
inline void MemoText::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MemoText::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.MemoText.text)
}
inline void MemoText::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.MemoText.text)
}
inline void MemoText::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.MemoText.text)
}
inline std::string* MemoText::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MemoText::release_text() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.MemoText.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MemoText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.MemoText.text)
}

// -------------------------------------------------------------------

// MemoId

// int64 id = 1;
inline void MemoId::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoId::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoId::id() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.MemoId.id)
  return _internal_id();
}
inline void MemoId::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void MemoId::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.MemoId.id)
}

// -------------------------------------------------------------------

// MemoHash

// bytes hash = 1;
inline void MemoHash::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& MemoHash::hash() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.MemoHash.hash)
  return _internal_hash();
}
inline void MemoHash::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.MemoHash.hash)
}
inline std::string* MemoHash::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.MemoHash.hash)
  return _internal_mutable_hash();
}
inline const std::string& MemoHash::_internal_hash() const {
  return hash_.Get();
}
inline void MemoHash::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MemoHash::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.MemoHash.hash)
}
inline void MemoHash::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.MemoHash.hash)
}
inline void MemoHash::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.MemoHash.hash)
}
inline std::string* MemoHash::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MemoHash::release_hash() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.MemoHash.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MemoHash::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.MemoHash.hash)
}

// -------------------------------------------------------------------

// SigningInput

// int32 fee = 1;
inline void SigningInput::clear_fee() {
  fee_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SigningInput::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SigningInput::fee() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.fee)
  return _internal_fee();
}
inline void SigningInput::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fee_ = value;
}
inline void SigningInput::set_fee(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.SigningInput.fee)
}

// int64 sequence = 2;
inline void SigningInput::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::sequence() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.sequence)
  return _internal_sequence();
}
inline void SigningInput::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void SigningInput::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.SigningInput.sequence)
}

// string account = 3;
inline void SigningInput::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& SigningInput::account() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.account)
  return _internal_account();
}
inline void SigningInput::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.SigningInput.account)
}
inline std::string* SigningInput::mutable_account() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.account)
  return _internal_mutable_account();
}
inline const std::string& SigningInput::_internal_account() const {
  return account_.Get();
}
inline void SigningInput::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.SigningInput.account)
}
inline void SigningInput::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.SigningInput.account)
}
inline void SigningInput::set_account(const char* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.SigningInput.account)
}
inline std::string* SigningInput::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_account() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.account)
}

// bytes private_key = 4;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.private_key)
}

// string passphrase = 5;
inline void SigningInput::clear_passphrase() {
  passphrase_.ClearToEmpty();
}
inline const std::string& SigningInput::passphrase() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.passphrase)
  return _internal_passphrase();
}
inline void SigningInput::set_passphrase(const std::string& value) {
  _internal_set_passphrase(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.SigningInput.passphrase)
}
inline std::string* SigningInput::mutable_passphrase() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.passphrase)
  return _internal_mutable_passphrase();
}
inline const std::string& SigningInput::_internal_passphrase() const {
  return passphrase_.Get();
}
inline void SigningInput::_internal_set_passphrase(const std::string& value) {
  
  passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_passphrase(std::string&& value) {
  
  passphrase_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.SigningInput.passphrase)
}
inline void SigningInput::set_passphrase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.SigningInput.passphrase)
}
inline void SigningInput::set_passphrase(const char* value,
    size_t size) {
  
  passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.SigningInput.passphrase)
}
inline std::string* SigningInput::_internal_mutable_passphrase() {
  
  return passphrase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_passphrase() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.passphrase)
  return passphrase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_passphrase(std::string* passphrase) {
  if (passphrase != nullptr) {
    
  } else {
    
  }
  passphrase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passphrase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.passphrase)
}

// .TW.Stellar.Proto.OperationCreateAccount op_create_account = 6;
inline bool SigningInput::_internal_has_op_create_account() const {
  return operation_oneof_case() == kOpCreateAccount;
}
inline bool SigningInput::has_op_create_account() const {
  return _internal_has_op_create_account();
}
inline void SigningInput::set_has_op_create_account() {
  _oneof_case_[0] = kOpCreateAccount;
}
inline void SigningInput::clear_op_create_account() {
  if (_internal_has_op_create_account()) {
    if (GetArena() == nullptr) {
      delete operation_oneof_.op_create_account_;
    }
    clear_has_operation_oneof();
  }
}
inline ::TW::Stellar::Proto::OperationCreateAccount* SigningInput::release_op_create_account() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.op_create_account)
  if (_internal_has_op_create_account()) {
    clear_has_operation_oneof();
      ::TW::Stellar::Proto::OperationCreateAccount* temp = operation_oneof_.op_create_account_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_oneof_.op_create_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Stellar::Proto::OperationCreateAccount& SigningInput::_internal_op_create_account() const {
  return _internal_has_op_create_account()
      ? *operation_oneof_.op_create_account_
      : reinterpret_cast< ::TW::Stellar::Proto::OperationCreateAccount&>(::TW::Stellar::Proto::_OperationCreateAccount_default_instance_);
}
inline const ::TW::Stellar::Proto::OperationCreateAccount& SigningInput::op_create_account() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.op_create_account)
  return _internal_op_create_account();
}
inline ::TW::Stellar::Proto::OperationCreateAccount* SigningInput::unsafe_arena_release_op_create_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Stellar.Proto.SigningInput.op_create_account)
  if (_internal_has_op_create_account()) {
    clear_has_operation_oneof();
    ::TW::Stellar::Proto::OperationCreateAccount* temp = operation_oneof_.op_create_account_;
    operation_oneof_.op_create_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_op_create_account(::TW::Stellar::Proto::OperationCreateAccount* op_create_account) {
  clear_operation_oneof();
  if (op_create_account) {
    set_has_op_create_account();
    operation_oneof_.op_create_account_ = op_create_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.SigningInput.op_create_account)
}
inline ::TW::Stellar::Proto::OperationCreateAccount* SigningInput::_internal_mutable_op_create_account() {
  if (!_internal_has_op_create_account()) {
    clear_operation_oneof();
    set_has_op_create_account();
    operation_oneof_.op_create_account_ = CreateMaybeMessage< ::TW::Stellar::Proto::OperationCreateAccount >(GetArena());
  }
  return operation_oneof_.op_create_account_;
}
inline ::TW::Stellar::Proto::OperationCreateAccount* SigningInput::mutable_op_create_account() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.op_create_account)
  return _internal_mutable_op_create_account();
}

// .TW.Stellar.Proto.OperationPayment op_payment = 7;
inline bool SigningInput::_internal_has_op_payment() const {
  return operation_oneof_case() == kOpPayment;
}
inline bool SigningInput::has_op_payment() const {
  return _internal_has_op_payment();
}
inline void SigningInput::set_has_op_payment() {
  _oneof_case_[0] = kOpPayment;
}
inline void SigningInput::clear_op_payment() {
  if (_internal_has_op_payment()) {
    if (GetArena() == nullptr) {
      delete operation_oneof_.op_payment_;
    }
    clear_has_operation_oneof();
  }
}
inline ::TW::Stellar::Proto::OperationPayment* SigningInput::release_op_payment() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.op_payment)
  if (_internal_has_op_payment()) {
    clear_has_operation_oneof();
      ::TW::Stellar::Proto::OperationPayment* temp = operation_oneof_.op_payment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_oneof_.op_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Stellar::Proto::OperationPayment& SigningInput::_internal_op_payment() const {
  return _internal_has_op_payment()
      ? *operation_oneof_.op_payment_
      : reinterpret_cast< ::TW::Stellar::Proto::OperationPayment&>(::TW::Stellar::Proto::_OperationPayment_default_instance_);
}
inline const ::TW::Stellar::Proto::OperationPayment& SigningInput::op_payment() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.op_payment)
  return _internal_op_payment();
}
inline ::TW::Stellar::Proto::OperationPayment* SigningInput::unsafe_arena_release_op_payment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Stellar.Proto.SigningInput.op_payment)
  if (_internal_has_op_payment()) {
    clear_has_operation_oneof();
    ::TW::Stellar::Proto::OperationPayment* temp = operation_oneof_.op_payment_;
    operation_oneof_.op_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_op_payment(::TW::Stellar::Proto::OperationPayment* op_payment) {
  clear_operation_oneof();
  if (op_payment) {
    set_has_op_payment();
    operation_oneof_.op_payment_ = op_payment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.SigningInput.op_payment)
}
inline ::TW::Stellar::Proto::OperationPayment* SigningInput::_internal_mutable_op_payment() {
  if (!_internal_has_op_payment()) {
    clear_operation_oneof();
    set_has_op_payment();
    operation_oneof_.op_payment_ = CreateMaybeMessage< ::TW::Stellar::Proto::OperationPayment >(GetArena());
  }
  return operation_oneof_.op_payment_;
}
inline ::TW::Stellar::Proto::OperationPayment* SigningInput::mutable_op_payment() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.op_payment)
  return _internal_mutable_op_payment();
}

// .TW.Stellar.Proto.OperationChangeTrust op_change_trust = 8;
inline bool SigningInput::_internal_has_op_change_trust() const {
  return operation_oneof_case() == kOpChangeTrust;
}
inline bool SigningInput::has_op_change_trust() const {
  return _internal_has_op_change_trust();
}
inline void SigningInput::set_has_op_change_trust() {
  _oneof_case_[0] = kOpChangeTrust;
}
inline void SigningInput::clear_op_change_trust() {
  if (_internal_has_op_change_trust()) {
    if (GetArena() == nullptr) {
      delete operation_oneof_.op_change_trust_;
    }
    clear_has_operation_oneof();
  }
}
inline ::TW::Stellar::Proto::OperationChangeTrust* SigningInput::release_op_change_trust() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.op_change_trust)
  if (_internal_has_op_change_trust()) {
    clear_has_operation_oneof();
      ::TW::Stellar::Proto::OperationChangeTrust* temp = operation_oneof_.op_change_trust_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_oneof_.op_change_trust_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Stellar::Proto::OperationChangeTrust& SigningInput::_internal_op_change_trust() const {
  return _internal_has_op_change_trust()
      ? *operation_oneof_.op_change_trust_
      : reinterpret_cast< ::TW::Stellar::Proto::OperationChangeTrust&>(::TW::Stellar::Proto::_OperationChangeTrust_default_instance_);
}
inline const ::TW::Stellar::Proto::OperationChangeTrust& SigningInput::op_change_trust() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.op_change_trust)
  return _internal_op_change_trust();
}
inline ::TW::Stellar::Proto::OperationChangeTrust* SigningInput::unsafe_arena_release_op_change_trust() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Stellar.Proto.SigningInput.op_change_trust)
  if (_internal_has_op_change_trust()) {
    clear_has_operation_oneof();
    ::TW::Stellar::Proto::OperationChangeTrust* temp = operation_oneof_.op_change_trust_;
    operation_oneof_.op_change_trust_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_op_change_trust(::TW::Stellar::Proto::OperationChangeTrust* op_change_trust) {
  clear_operation_oneof();
  if (op_change_trust) {
    set_has_op_change_trust();
    operation_oneof_.op_change_trust_ = op_change_trust;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.SigningInput.op_change_trust)
}
inline ::TW::Stellar::Proto::OperationChangeTrust* SigningInput::_internal_mutable_op_change_trust() {
  if (!_internal_has_op_change_trust()) {
    clear_operation_oneof();
    set_has_op_change_trust();
    operation_oneof_.op_change_trust_ = CreateMaybeMessage< ::TW::Stellar::Proto::OperationChangeTrust >(GetArena());
  }
  return operation_oneof_.op_change_trust_;
}
inline ::TW::Stellar::Proto::OperationChangeTrust* SigningInput::mutable_op_change_trust() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.op_change_trust)
  return _internal_mutable_op_change_trust();
}

// .TW.Stellar.Proto.MemoVoid memo_void = 9;
inline bool SigningInput::_internal_has_memo_void() const {
  return memo_type_oneof_case() == kMemoVoid;
}
inline bool SigningInput::has_memo_void() const {
  return _internal_has_memo_void();
}
inline void SigningInput::set_has_memo_void() {
  _oneof_case_[1] = kMemoVoid;
}
inline void SigningInput::clear_memo_void() {
  if (_internal_has_memo_void()) {
    if (GetArena() == nullptr) {
      delete memo_type_oneof_.memo_void_;
    }
    clear_has_memo_type_oneof();
  }
}
inline ::TW::Stellar::Proto::MemoVoid* SigningInput::release_memo_void() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.memo_void)
  if (_internal_has_memo_void()) {
    clear_has_memo_type_oneof();
      ::TW::Stellar::Proto::MemoVoid* temp = memo_type_oneof_.memo_void_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    memo_type_oneof_.memo_void_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Stellar::Proto::MemoVoid& SigningInput::_internal_memo_void() const {
  return _internal_has_memo_void()
      ? *memo_type_oneof_.memo_void_
      : reinterpret_cast< ::TW::Stellar::Proto::MemoVoid&>(::TW::Stellar::Proto::_MemoVoid_default_instance_);
}
inline const ::TW::Stellar::Proto::MemoVoid& SigningInput::memo_void() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.memo_void)
  return _internal_memo_void();
}
inline ::TW::Stellar::Proto::MemoVoid* SigningInput::unsafe_arena_release_memo_void() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Stellar.Proto.SigningInput.memo_void)
  if (_internal_has_memo_void()) {
    clear_has_memo_type_oneof();
    ::TW::Stellar::Proto::MemoVoid* temp = memo_type_oneof_.memo_void_;
    memo_type_oneof_.memo_void_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_memo_void(::TW::Stellar::Proto::MemoVoid* memo_void) {
  clear_memo_type_oneof();
  if (memo_void) {
    set_has_memo_void();
    memo_type_oneof_.memo_void_ = memo_void;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.SigningInput.memo_void)
}
inline ::TW::Stellar::Proto::MemoVoid* SigningInput::_internal_mutable_memo_void() {
  if (!_internal_has_memo_void()) {
    clear_memo_type_oneof();
    set_has_memo_void();
    memo_type_oneof_.memo_void_ = CreateMaybeMessage< ::TW::Stellar::Proto::MemoVoid >(GetArena());
  }
  return memo_type_oneof_.memo_void_;
}
inline ::TW::Stellar::Proto::MemoVoid* SigningInput::mutable_memo_void() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.memo_void)
  return _internal_mutable_memo_void();
}

// .TW.Stellar.Proto.MemoText memo_text = 10;
inline bool SigningInput::_internal_has_memo_text() const {
  return memo_type_oneof_case() == kMemoText;
}
inline bool SigningInput::has_memo_text() const {
  return _internal_has_memo_text();
}
inline void SigningInput::set_has_memo_text() {
  _oneof_case_[1] = kMemoText;
}
inline void SigningInput::clear_memo_text() {
  if (_internal_has_memo_text()) {
    if (GetArena() == nullptr) {
      delete memo_type_oneof_.memo_text_;
    }
    clear_has_memo_type_oneof();
  }
}
inline ::TW::Stellar::Proto::MemoText* SigningInput::release_memo_text() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.memo_text)
  if (_internal_has_memo_text()) {
    clear_has_memo_type_oneof();
      ::TW::Stellar::Proto::MemoText* temp = memo_type_oneof_.memo_text_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    memo_type_oneof_.memo_text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Stellar::Proto::MemoText& SigningInput::_internal_memo_text() const {
  return _internal_has_memo_text()
      ? *memo_type_oneof_.memo_text_
      : reinterpret_cast< ::TW::Stellar::Proto::MemoText&>(::TW::Stellar::Proto::_MemoText_default_instance_);
}
inline const ::TW::Stellar::Proto::MemoText& SigningInput::memo_text() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.memo_text)
  return _internal_memo_text();
}
inline ::TW::Stellar::Proto::MemoText* SigningInput::unsafe_arena_release_memo_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Stellar.Proto.SigningInput.memo_text)
  if (_internal_has_memo_text()) {
    clear_has_memo_type_oneof();
    ::TW::Stellar::Proto::MemoText* temp = memo_type_oneof_.memo_text_;
    memo_type_oneof_.memo_text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_memo_text(::TW::Stellar::Proto::MemoText* memo_text) {
  clear_memo_type_oneof();
  if (memo_text) {
    set_has_memo_text();
    memo_type_oneof_.memo_text_ = memo_text;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.SigningInput.memo_text)
}
inline ::TW::Stellar::Proto::MemoText* SigningInput::_internal_mutable_memo_text() {
  if (!_internal_has_memo_text()) {
    clear_memo_type_oneof();
    set_has_memo_text();
    memo_type_oneof_.memo_text_ = CreateMaybeMessage< ::TW::Stellar::Proto::MemoText >(GetArena());
  }
  return memo_type_oneof_.memo_text_;
}
inline ::TW::Stellar::Proto::MemoText* SigningInput::mutable_memo_text() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.memo_text)
  return _internal_mutable_memo_text();
}

// .TW.Stellar.Proto.MemoId memo_id = 11;
inline bool SigningInput::_internal_has_memo_id() const {
  return memo_type_oneof_case() == kMemoId;
}
inline bool SigningInput::has_memo_id() const {
  return _internal_has_memo_id();
}
inline void SigningInput::set_has_memo_id() {
  _oneof_case_[1] = kMemoId;
}
inline void SigningInput::clear_memo_id() {
  if (_internal_has_memo_id()) {
    if (GetArena() == nullptr) {
      delete memo_type_oneof_.memo_id_;
    }
    clear_has_memo_type_oneof();
  }
}
inline ::TW::Stellar::Proto::MemoId* SigningInput::release_memo_id() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.memo_id)
  if (_internal_has_memo_id()) {
    clear_has_memo_type_oneof();
      ::TW::Stellar::Proto::MemoId* temp = memo_type_oneof_.memo_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    memo_type_oneof_.memo_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Stellar::Proto::MemoId& SigningInput::_internal_memo_id() const {
  return _internal_has_memo_id()
      ? *memo_type_oneof_.memo_id_
      : reinterpret_cast< ::TW::Stellar::Proto::MemoId&>(::TW::Stellar::Proto::_MemoId_default_instance_);
}
inline const ::TW::Stellar::Proto::MemoId& SigningInput::memo_id() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.memo_id)
  return _internal_memo_id();
}
inline ::TW::Stellar::Proto::MemoId* SigningInput::unsafe_arena_release_memo_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Stellar.Proto.SigningInput.memo_id)
  if (_internal_has_memo_id()) {
    clear_has_memo_type_oneof();
    ::TW::Stellar::Proto::MemoId* temp = memo_type_oneof_.memo_id_;
    memo_type_oneof_.memo_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_memo_id(::TW::Stellar::Proto::MemoId* memo_id) {
  clear_memo_type_oneof();
  if (memo_id) {
    set_has_memo_id();
    memo_type_oneof_.memo_id_ = memo_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.SigningInput.memo_id)
}
inline ::TW::Stellar::Proto::MemoId* SigningInput::_internal_mutable_memo_id() {
  if (!_internal_has_memo_id()) {
    clear_memo_type_oneof();
    set_has_memo_id();
    memo_type_oneof_.memo_id_ = CreateMaybeMessage< ::TW::Stellar::Proto::MemoId >(GetArena());
  }
  return memo_type_oneof_.memo_id_;
}
inline ::TW::Stellar::Proto::MemoId* SigningInput::mutable_memo_id() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.memo_id)
  return _internal_mutable_memo_id();
}

// .TW.Stellar.Proto.MemoHash memo_hash = 12;
inline bool SigningInput::_internal_has_memo_hash() const {
  return memo_type_oneof_case() == kMemoHash;
}
inline bool SigningInput::has_memo_hash() const {
  return _internal_has_memo_hash();
}
inline void SigningInput::set_has_memo_hash() {
  _oneof_case_[1] = kMemoHash;
}
inline void SigningInput::clear_memo_hash() {
  if (_internal_has_memo_hash()) {
    if (GetArena() == nullptr) {
      delete memo_type_oneof_.memo_hash_;
    }
    clear_has_memo_type_oneof();
  }
}
inline ::TW::Stellar::Proto::MemoHash* SigningInput::release_memo_hash() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.memo_hash)
  if (_internal_has_memo_hash()) {
    clear_has_memo_type_oneof();
      ::TW::Stellar::Proto::MemoHash* temp = memo_type_oneof_.memo_hash_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    memo_type_oneof_.memo_hash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Stellar::Proto::MemoHash& SigningInput::_internal_memo_hash() const {
  return _internal_has_memo_hash()
      ? *memo_type_oneof_.memo_hash_
      : reinterpret_cast< ::TW::Stellar::Proto::MemoHash&>(::TW::Stellar::Proto::_MemoHash_default_instance_);
}
inline const ::TW::Stellar::Proto::MemoHash& SigningInput::memo_hash() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.memo_hash)
  return _internal_memo_hash();
}
inline ::TW::Stellar::Proto::MemoHash* SigningInput::unsafe_arena_release_memo_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Stellar.Proto.SigningInput.memo_hash)
  if (_internal_has_memo_hash()) {
    clear_has_memo_type_oneof();
    ::TW::Stellar::Proto::MemoHash* temp = memo_type_oneof_.memo_hash_;
    memo_type_oneof_.memo_hash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_memo_hash(::TW::Stellar::Proto::MemoHash* memo_hash) {
  clear_memo_type_oneof();
  if (memo_hash) {
    set_has_memo_hash();
    memo_type_oneof_.memo_hash_ = memo_hash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.SigningInput.memo_hash)
}
inline ::TW::Stellar::Proto::MemoHash* SigningInput::_internal_mutable_memo_hash() {
  if (!_internal_has_memo_hash()) {
    clear_memo_type_oneof();
    set_has_memo_hash();
    memo_type_oneof_.memo_hash_ = CreateMaybeMessage< ::TW::Stellar::Proto::MemoHash >(GetArena());
  }
  return memo_type_oneof_.memo_hash_;
}
inline ::TW::Stellar::Proto::MemoHash* SigningInput::mutable_memo_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.memo_hash)
  return _internal_mutable_memo_hash();
}

// .TW.Stellar.Proto.MemoHash memo_return_hash = 13;
inline bool SigningInput::_internal_has_memo_return_hash() const {
  return memo_type_oneof_case() == kMemoReturnHash;
}
inline bool SigningInput::has_memo_return_hash() const {
  return _internal_has_memo_return_hash();
}
inline void SigningInput::set_has_memo_return_hash() {
  _oneof_case_[1] = kMemoReturnHash;
}
inline void SigningInput::clear_memo_return_hash() {
  if (_internal_has_memo_return_hash()) {
    if (GetArena() == nullptr) {
      delete memo_type_oneof_.memo_return_hash_;
    }
    clear_has_memo_type_oneof();
  }
}
inline ::TW::Stellar::Proto::MemoHash* SigningInput::release_memo_return_hash() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningInput.memo_return_hash)
  if (_internal_has_memo_return_hash()) {
    clear_has_memo_type_oneof();
      ::TW::Stellar::Proto::MemoHash* temp = memo_type_oneof_.memo_return_hash_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    memo_type_oneof_.memo_return_hash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Stellar::Proto::MemoHash& SigningInput::_internal_memo_return_hash() const {
  return _internal_has_memo_return_hash()
      ? *memo_type_oneof_.memo_return_hash_
      : reinterpret_cast< ::TW::Stellar::Proto::MemoHash&>(::TW::Stellar::Proto::_MemoHash_default_instance_);
}
inline const ::TW::Stellar::Proto::MemoHash& SigningInput::memo_return_hash() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningInput.memo_return_hash)
  return _internal_memo_return_hash();
}
inline ::TW::Stellar::Proto::MemoHash* SigningInput::unsafe_arena_release_memo_return_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Stellar.Proto.SigningInput.memo_return_hash)
  if (_internal_has_memo_return_hash()) {
    clear_has_memo_type_oneof();
    ::TW::Stellar::Proto::MemoHash* temp = memo_type_oneof_.memo_return_hash_;
    memo_type_oneof_.memo_return_hash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_memo_return_hash(::TW::Stellar::Proto::MemoHash* memo_return_hash) {
  clear_memo_type_oneof();
  if (memo_return_hash) {
    set_has_memo_return_hash();
    memo_type_oneof_.memo_return_hash_ = memo_return_hash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Stellar.Proto.SigningInput.memo_return_hash)
}
inline ::TW::Stellar::Proto::MemoHash* SigningInput::_internal_mutable_memo_return_hash() {
  if (!_internal_has_memo_return_hash()) {
    clear_memo_type_oneof();
    set_has_memo_return_hash();
    memo_type_oneof_.memo_return_hash_ = CreateMaybeMessage< ::TW::Stellar::Proto::MemoHash >(GetArena());
  }
  return memo_type_oneof_.memo_return_hash_;
}
inline ::TW::Stellar::Proto::MemoHash* SigningInput::mutable_memo_return_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningInput.memo_return_hash)
  return _internal_mutable_memo_return_hash();
}

inline bool SigningInput::has_operation_oneof() const {
  return operation_oneof_case() != OPERATION_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_operation_oneof() {
  _oneof_case_[0] = OPERATION_ONEOF_NOT_SET;
}
inline bool SigningInput::has_memo_type_oneof() const {
  return memo_type_oneof_case() != MEMO_TYPE_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_memo_type_oneof() {
  _oneof_case_[1] = MEMO_TYPE_ONEOF_NOT_SET;
}
inline SigningInput::OperationOneofCase SigningInput::operation_oneof_case() const {
  return SigningInput::OperationOneofCase(_oneof_case_[0]);
}
inline SigningInput::MemoTypeOneofCase SigningInput::memo_type_oneof_case() const {
  return SigningInput::MemoTypeOneofCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SigningOutput

// string signature = 1;
inline void SigningOutput::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature() const {
  // @@protoc_insertion_point(field_get:TW.Stellar.Proto.SigningOutput.signature)
  return _internal_signature();
}
inline void SigningOutput::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:TW.Stellar.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:TW.Stellar.Proto.SigningOutput.signature)
  return _internal_mutable_signature();
}
inline const std::string& SigningOutput::_internal_signature() const {
  return signature_.Get();
}
inline void SigningOutput::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Stellar.Proto.SigningOutput.signature)
}
inline void SigningOutput::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Stellar.Proto.SigningOutput.signature)
}
inline void SigningOutput::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Stellar.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_signature() {
  // @@protoc_insertion_point(field_release:TW.Stellar.Proto.SigningOutput.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningOutput.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Stellar
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Stellar_2eproto
