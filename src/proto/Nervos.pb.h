// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nervos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Nervos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Nervos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Nervos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Nervos_2eproto;
namespace TW {
namespace Nervos {
namespace Proto {
class Cell;
class CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class CellDep;
class CellDepDefaultTypeInternal;
extern CellDepDefaultTypeInternal _CellDep_default_instance_;
class CellOutput;
class CellOutputDefaultTypeInternal;
extern CellOutputDefaultTypeInternal _CellOutput_default_instance_;
class DaoDeposit;
class DaoDepositDefaultTypeInternal;
extern DaoDepositDefaultTypeInternal _DaoDeposit_default_instance_;
class DaoWithdrawPhase1;
class DaoWithdrawPhase1DefaultTypeInternal;
extern DaoWithdrawPhase1DefaultTypeInternal _DaoWithdrawPhase1_default_instance_;
class DaoWithdrawPhase2;
class DaoWithdrawPhase2DefaultTypeInternal;
extern DaoWithdrawPhase2DefaultTypeInternal _DaoWithdrawPhase2_default_instance_;
class NativeTransfer;
class NativeTransferDefaultTypeInternal;
extern NativeTransferDefaultTypeInternal _NativeTransfer_default_instance_;
class OutPoint;
class OutPointDefaultTypeInternal;
extern OutPointDefaultTypeInternal _OutPoint_default_instance_;
class Script;
class ScriptDefaultTypeInternal;
extern ScriptDefaultTypeInternal _Script_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class SudtTransfer;
class SudtTransferDefaultTypeInternal;
extern SudtTransferDefaultTypeInternal _SudtTransfer_default_instance_;
class TransactionPlan;
class TransactionPlanDefaultTypeInternal;
extern TransactionPlanDefaultTypeInternal _TransactionPlan_default_instance_;
}  // namespace Proto
}  // namespace Nervos
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Nervos::Proto::Cell* Arena::CreateMaybeMessage<::TW::Nervos::Proto::Cell>(Arena*);
template<> ::TW::Nervos::Proto::CellDep* Arena::CreateMaybeMessage<::TW::Nervos::Proto::CellDep>(Arena*);
template<> ::TW::Nervos::Proto::CellOutput* Arena::CreateMaybeMessage<::TW::Nervos::Proto::CellOutput>(Arena*);
template<> ::TW::Nervos::Proto::DaoDeposit* Arena::CreateMaybeMessage<::TW::Nervos::Proto::DaoDeposit>(Arena*);
template<> ::TW::Nervos::Proto::DaoWithdrawPhase1* Arena::CreateMaybeMessage<::TW::Nervos::Proto::DaoWithdrawPhase1>(Arena*);
template<> ::TW::Nervos::Proto::DaoWithdrawPhase2* Arena::CreateMaybeMessage<::TW::Nervos::Proto::DaoWithdrawPhase2>(Arena*);
template<> ::TW::Nervos::Proto::NativeTransfer* Arena::CreateMaybeMessage<::TW::Nervos::Proto::NativeTransfer>(Arena*);
template<> ::TW::Nervos::Proto::OutPoint* Arena::CreateMaybeMessage<::TW::Nervos::Proto::OutPoint>(Arena*);
template<> ::TW::Nervos::Proto::Script* Arena::CreateMaybeMessage<::TW::Nervos::Proto::Script>(Arena*);
template<> ::TW::Nervos::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Nervos::Proto::SigningInput>(Arena*);
template<> ::TW::Nervos::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Nervos::Proto::SigningOutput>(Arena*);
template<> ::TW::Nervos::Proto::SudtTransfer* Arena::CreateMaybeMessage<::TW::Nervos::Proto::SudtTransfer>(Arena*);
template<> ::TW::Nervos::Proto::TransactionPlan* Arena::CreateMaybeMessage<::TW::Nervos::Proto::TransactionPlan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Nervos {
namespace Proto {

// ===================================================================

class TransactionPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.TransactionPlan) */ {
 public:
  inline TransactionPlan() : TransactionPlan(nullptr) {}
  virtual ~TransactionPlan();

  TransactionPlan(const TransactionPlan& from);
  TransactionPlan(TransactionPlan&& from) noexcept
    : TransactionPlan() {
    *this = ::std::move(from);
  }

  inline TransactionPlan& operator=(const TransactionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionPlan& operator=(TransactionPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionPlan& default_instance();

  static inline const TransactionPlan* internal_default_instance() {
    return reinterpret_cast<const TransactionPlan*>(
               &_TransactionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionPlan& a, TransactionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionPlan* New() const final {
    return CreateMaybeMessage<TransactionPlan>(nullptr);
  }

  TransactionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionPlan& from);
  void MergeFrom(const TransactionPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.TransactionPlan";
  }
  protected:
  explicit TransactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellDepsFieldNumber = 1,
    kHeaderDepsFieldNumber = 2,
    kSelectedCellsFieldNumber = 3,
    kOutputsFieldNumber = 4,
    kOutputsDataFieldNumber = 5,
    kErrorFieldNumber = 6,
  };
  // repeated .TW.Nervos.Proto.CellDep cell_deps = 1;
  int cell_deps_size() const;
  private:
  int _internal_cell_deps_size() const;
  public:
  void clear_cell_deps();
  ::TW::Nervos::Proto::CellDep* mutable_cell_deps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellDep >*
      mutable_cell_deps();
  private:
  const ::TW::Nervos::Proto::CellDep& _internal_cell_deps(int index) const;
  ::TW::Nervos::Proto::CellDep* _internal_add_cell_deps();
  public:
  const ::TW::Nervos::Proto::CellDep& cell_deps(int index) const;
  ::TW::Nervos::Proto::CellDep* add_cell_deps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellDep >&
      cell_deps() const;

  // repeated bytes header_deps = 2;
  int header_deps_size() const;
  private:
  int _internal_header_deps_size() const;
  public:
  void clear_header_deps();
  const std::string& header_deps(int index) const;
  std::string* mutable_header_deps(int index);
  void set_header_deps(int index, const std::string& value);
  void set_header_deps(int index, std::string&& value);
  void set_header_deps(int index, const char* value);
  void set_header_deps(int index, const void* value, size_t size);
  std::string* add_header_deps();
  void add_header_deps(const std::string& value);
  void add_header_deps(std::string&& value);
  void add_header_deps(const char* value);
  void add_header_deps(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& header_deps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_header_deps();
  private:
  const std::string& _internal_header_deps(int index) const;
  std::string* _internal_add_header_deps();
  public:

  // repeated .TW.Nervos.Proto.Cell selected_cells = 3;
  int selected_cells_size() const;
  private:
  int _internal_selected_cells_size() const;
  public:
  void clear_selected_cells();
  ::TW::Nervos::Proto::Cell* mutable_selected_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell >*
      mutable_selected_cells();
  private:
  const ::TW::Nervos::Proto::Cell& _internal_selected_cells(int index) const;
  ::TW::Nervos::Proto::Cell* _internal_add_selected_cells();
  public:
  const ::TW::Nervos::Proto::Cell& selected_cells(int index) const;
  ::TW::Nervos::Proto::Cell* add_selected_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell >&
      selected_cells() const;

  // repeated .TW.Nervos.Proto.CellOutput outputs = 4;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::TW::Nervos::Proto::CellOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellOutput >*
      mutable_outputs();
  private:
  const ::TW::Nervos::Proto::CellOutput& _internal_outputs(int index) const;
  ::TW::Nervos::Proto::CellOutput* _internal_add_outputs();
  public:
  const ::TW::Nervos::Proto::CellOutput& outputs(int index) const;
  ::TW::Nervos::Proto::CellOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellOutput >&
      outputs() const;

  // repeated bytes outputs_data = 5;
  int outputs_data_size() const;
  private:
  int _internal_outputs_data_size() const;
  public:
  void clear_outputs_data();
  const std::string& outputs_data(int index) const;
  std::string* mutable_outputs_data(int index);
  void set_outputs_data(int index, const std::string& value);
  void set_outputs_data(int index, std::string&& value);
  void set_outputs_data(int index, const char* value);
  void set_outputs_data(int index, const void* value, size_t size);
  std::string* add_outputs_data();
  void add_outputs_data(const std::string& value);
  void add_outputs_data(std::string&& value);
  void add_outputs_data(const char* value);
  void add_outputs_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& outputs_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_outputs_data();
  private:
  const std::string& _internal_outputs_data(int index) const;
  std::string* _internal_add_outputs_data();
  public:

  // .TW.Common.Proto.SigningError error = 6;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.TransactionPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellDep > cell_deps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> header_deps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell > selected_cells_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellOutput > outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> outputs_data_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class CellDep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.CellDep) */ {
 public:
  inline CellDep() : CellDep(nullptr) {}
  virtual ~CellDep();

  CellDep(const CellDep& from);
  CellDep(CellDep&& from) noexcept
    : CellDep() {
    *this = ::std::move(from);
  }

  inline CellDep& operator=(const CellDep& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDep& operator=(CellDep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CellDep& default_instance();

  static inline const CellDep* internal_default_instance() {
    return reinterpret_cast<const CellDep*>(
               &_CellDep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CellDep& a, CellDep& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDep* New() const final {
    return CreateMaybeMessage<CellDep>(nullptr);
  }

  CellDep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDep& from);
  void MergeFrom(const CellDep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.CellDep";
  }
  protected:
  explicit CellDep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepTypeFieldNumber = 1,
    kOutPointFieldNumber = 2,
  };
  // string dep_type = 1;
  void clear_dep_type();
  const std::string& dep_type() const;
  void set_dep_type(const std::string& value);
  void set_dep_type(std::string&& value);
  void set_dep_type(const char* value);
  void set_dep_type(const char* value, size_t size);
  std::string* mutable_dep_type();
  std::string* release_dep_type();
  void set_allocated_dep_type(std::string* dep_type);
  private:
  const std::string& _internal_dep_type() const;
  void _internal_set_dep_type(const std::string& value);
  std::string* _internal_mutable_dep_type();
  public:

  // .TW.Nervos.Proto.OutPoint out_point = 2;
  bool has_out_point() const;
  private:
  bool _internal_has_out_point() const;
  public:
  void clear_out_point();
  const ::TW::Nervos::Proto::OutPoint& out_point() const;
  ::TW::Nervos::Proto::OutPoint* release_out_point();
  ::TW::Nervos::Proto::OutPoint* mutable_out_point();
  void set_allocated_out_point(::TW::Nervos::Proto::OutPoint* out_point);
  private:
  const ::TW::Nervos::Proto::OutPoint& _internal_out_point() const;
  ::TW::Nervos::Proto::OutPoint* _internal_mutable_out_point();
  public:
  void unsafe_arena_set_allocated_out_point(
      ::TW::Nervos::Proto::OutPoint* out_point);
  ::TW::Nervos::Proto::OutPoint* unsafe_arena_release_out_point();

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.CellDep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dep_type_;
  ::TW::Nervos::Proto::OutPoint* out_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class OutPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.OutPoint) */ {
 public:
  inline OutPoint() : OutPoint(nullptr) {}
  virtual ~OutPoint();

  OutPoint(const OutPoint& from);
  OutPoint(OutPoint&& from) noexcept
    : OutPoint() {
    *this = ::std::move(from);
  }

  inline OutPoint& operator=(const OutPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutPoint& operator=(OutPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutPoint& default_instance();

  static inline const OutPoint* internal_default_instance() {
    return reinterpret_cast<const OutPoint*>(
               &_OutPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OutPoint& a, OutPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(OutPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutPoint* New() const final {
    return CreateMaybeMessage<OutPoint>(nullptr);
  }

  OutPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutPoint& from);
  void MergeFrom(const OutPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.OutPoint";
  }
  protected:
  explicit OutPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxHashFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // bytes tx_hash = 1;
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const void* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.OutPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class CellOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.CellOutput) */ {
 public:
  inline CellOutput() : CellOutput(nullptr) {}
  virtual ~CellOutput();

  CellOutput(const CellOutput& from);
  CellOutput(CellOutput&& from) noexcept
    : CellOutput() {
    *this = ::std::move(from);
  }

  inline CellOutput& operator=(const CellOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellOutput& operator=(CellOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CellOutput& default_instance();

  static inline const CellOutput* internal_default_instance() {
    return reinterpret_cast<const CellOutput*>(
               &_CellOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CellOutput& a, CellOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(CellOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellOutput* New() const final {
    return CreateMaybeMessage<CellOutput>(nullptr);
  }

  CellOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellOutput& from);
  void MergeFrom(const CellOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.CellOutput";
  }
  protected:
  explicit CellOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockFieldNumber = 2,
    kTypeFieldNumber = 3,
    kCapacityFieldNumber = 1,
  };
  // .TW.Nervos.Proto.Script lock = 2;
  bool has_lock() const;
  private:
  bool _internal_has_lock() const;
  public:
  void clear_lock();
  const ::TW::Nervos::Proto::Script& lock() const;
  ::TW::Nervos::Proto::Script* release_lock();
  ::TW::Nervos::Proto::Script* mutable_lock();
  void set_allocated_lock(::TW::Nervos::Proto::Script* lock);
  private:
  const ::TW::Nervos::Proto::Script& _internal_lock() const;
  ::TW::Nervos::Proto::Script* _internal_mutable_lock();
  public:
  void unsafe_arena_set_allocated_lock(
      ::TW::Nervos::Proto::Script* lock);
  ::TW::Nervos::Proto::Script* unsafe_arena_release_lock();

  // .TW.Nervos.Proto.Script type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::TW::Nervos::Proto::Script& type() const;
  ::TW::Nervos::Proto::Script* release_type();
  ::TW::Nervos::Proto::Script* mutable_type();
  void set_allocated_type(::TW::Nervos::Proto::Script* type);
  private:
  const ::TW::Nervos::Proto::Script& _internal_type() const;
  ::TW::Nervos::Proto::Script* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::TW::Nervos::Proto::Script* type);
  ::TW::Nervos::Proto::Script* unsafe_arena_release_type();

  // uint64 capacity = 1;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.CellOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Nervos::Proto::Script* lock_;
  ::TW::Nervos::Proto::Script* type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class Script PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.Script) */ {
 public:
  inline Script() : Script(nullptr) {}
  virtual ~Script();

  Script(const Script& from);
  Script(Script&& from) noexcept
    : Script() {
    *this = ::std::move(from);
  }

  inline Script& operator=(const Script& from) {
    CopyFrom(from);
    return *this;
  }
  inline Script& operator=(Script&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Script& default_instance();

  static inline const Script* internal_default_instance() {
    return reinterpret_cast<const Script*>(
               &_Script_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Script& a, Script& b) {
    a.Swap(&b);
  }
  inline void Swap(Script* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Script* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Script* New() const final {
    return CreateMaybeMessage<Script>(nullptr);
  }

  Script* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Script>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Script& from);
  void MergeFrom(const Script& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Script* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.Script";
  }
  protected:
  explicit Script(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeHashFieldNumber = 1,
    kHashTypeFieldNumber = 2,
    kArgsFieldNumber = 3,
  };
  // bytes code_hash = 1;
  void clear_code_hash();
  const std::string& code_hash() const;
  void set_code_hash(const std::string& value);
  void set_code_hash(std::string&& value);
  void set_code_hash(const char* value);
  void set_code_hash(const void* value, size_t size);
  std::string* mutable_code_hash();
  std::string* release_code_hash();
  void set_allocated_code_hash(std::string* code_hash);
  private:
  const std::string& _internal_code_hash() const;
  void _internal_set_code_hash(const std::string& value);
  std::string* _internal_mutable_code_hash();
  public:

  // string hash_type = 2;
  void clear_hash_type();
  const std::string& hash_type() const;
  void set_hash_type(const std::string& value);
  void set_hash_type(std::string&& value);
  void set_hash_type(const char* value);
  void set_hash_type(const char* value, size_t size);
  std::string* mutable_hash_type();
  std::string* release_hash_type();
  void set_allocated_hash_type(std::string* hash_type);
  private:
  const std::string& _internal_hash_type() const;
  void _internal_set_hash_type(const std::string& value);
  std::string* _internal_mutable_hash_type();
  public:

  // bytes args = 3;
  void clear_args();
  const std::string& args() const;
  void set_args(const std::string& value);
  void set_args(std::string&& value);
  void set_args(const char* value);
  void set_args(const void* value, size_t size);
  std::string* mutable_args();
  std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.Script)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class NativeTransfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.NativeTransfer) */ {
 public:
  inline NativeTransfer() : NativeTransfer(nullptr) {}
  virtual ~NativeTransfer();

  NativeTransfer(const NativeTransfer& from);
  NativeTransfer(NativeTransfer&& from) noexcept
    : NativeTransfer() {
    *this = ::std::move(from);
  }

  inline NativeTransfer& operator=(const NativeTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline NativeTransfer& operator=(NativeTransfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NativeTransfer& default_instance();

  static inline const NativeTransfer* internal_default_instance() {
    return reinterpret_cast<const NativeTransfer*>(
               &_NativeTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NativeTransfer& a, NativeTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(NativeTransfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NativeTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NativeTransfer* New() const final {
    return CreateMaybeMessage<NativeTransfer>(nullptr);
  }

  NativeTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NativeTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NativeTransfer& from);
  void MergeFrom(const NativeTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NativeTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.NativeTransfer";
  }
  protected:
  explicit NativeTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 1,
    kChangeAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
    kUseMaxAmountFieldNumber = 4,
  };
  // string to_address = 1;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string change_address = 2;
  void clear_change_address();
  const std::string& change_address() const;
  void set_change_address(const std::string& value);
  void set_change_address(std::string&& value);
  void set_change_address(const char* value);
  void set_change_address(const char* value, size_t size);
  std::string* mutable_change_address();
  std::string* release_change_address();
  void set_allocated_change_address(std::string* change_address);
  private:
  const std::string& _internal_change_address() const;
  void _internal_set_change_address(const std::string& value);
  std::string* _internal_mutable_change_address();
  public:

  // uint64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool use_max_amount = 4;
  void clear_use_max_amount();
  bool use_max_amount() const;
  void set_use_max_amount(bool value);
  private:
  bool _internal_use_max_amount() const;
  void _internal_set_use_max_amount(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.NativeTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  bool use_max_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class SudtTransfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.SudtTransfer) */ {
 public:
  inline SudtTransfer() : SudtTransfer(nullptr) {}
  virtual ~SudtTransfer();

  SudtTransfer(const SudtTransfer& from);
  SudtTransfer(SudtTransfer&& from) noexcept
    : SudtTransfer() {
    *this = ::std::move(from);
  }

  inline SudtTransfer& operator=(const SudtTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SudtTransfer& operator=(SudtTransfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SudtTransfer& default_instance();

  static inline const SudtTransfer* internal_default_instance() {
    return reinterpret_cast<const SudtTransfer*>(
               &_SudtTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SudtTransfer& a, SudtTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(SudtTransfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SudtTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SudtTransfer* New() const final {
    return CreateMaybeMessage<SudtTransfer>(nullptr);
  }

  SudtTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SudtTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SudtTransfer& from);
  void MergeFrom(const SudtTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SudtTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.SudtTransfer";
  }
  protected:
  explicit SudtTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 1,
    kChangeAddressFieldNumber = 2,
    kSudtAddressFieldNumber = 3,
    kAmountFieldNumber = 4,
    kUseMaxAmountFieldNumber = 5,
  };
  // string to_address = 1;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string change_address = 2;
  void clear_change_address();
  const std::string& change_address() const;
  void set_change_address(const std::string& value);
  void set_change_address(std::string&& value);
  void set_change_address(const char* value);
  void set_change_address(const char* value, size_t size);
  std::string* mutable_change_address();
  std::string* release_change_address();
  void set_allocated_change_address(std::string* change_address);
  private:
  const std::string& _internal_change_address() const;
  void _internal_set_change_address(const std::string& value);
  std::string* _internal_mutable_change_address();
  public:

  // bytes sudt_address = 3;
  void clear_sudt_address();
  const std::string& sudt_address() const;
  void set_sudt_address(const std::string& value);
  void set_sudt_address(std::string&& value);
  void set_sudt_address(const char* value);
  void set_sudt_address(const void* value, size_t size);
  std::string* mutable_sudt_address();
  std::string* release_sudt_address();
  void set_allocated_sudt_address(std::string* sudt_address);
  private:
  const std::string& _internal_sudt_address() const;
  void _internal_set_sudt_address(const std::string& value);
  std::string* _internal_mutable_sudt_address();
  public:

  // string amount = 4;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bool use_max_amount = 5;
  void clear_use_max_amount();
  bool use_max_amount() const;
  void set_use_max_amount(bool value);
  private:
  bool _internal_use_max_amount() const;
  void _internal_set_use_max_amount(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.SudtTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sudt_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  bool use_max_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class DaoDeposit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.DaoDeposit) */ {
 public:
  inline DaoDeposit() : DaoDeposit(nullptr) {}
  virtual ~DaoDeposit();

  DaoDeposit(const DaoDeposit& from);
  DaoDeposit(DaoDeposit&& from) noexcept
    : DaoDeposit() {
    *this = ::std::move(from);
  }

  inline DaoDeposit& operator=(const DaoDeposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline DaoDeposit& operator=(DaoDeposit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DaoDeposit& default_instance();

  static inline const DaoDeposit* internal_default_instance() {
    return reinterpret_cast<const DaoDeposit*>(
               &_DaoDeposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DaoDeposit& a, DaoDeposit& b) {
    a.Swap(&b);
  }
  inline void Swap(DaoDeposit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DaoDeposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DaoDeposit* New() const final {
    return CreateMaybeMessage<DaoDeposit>(nullptr);
  }

  DaoDeposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DaoDeposit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DaoDeposit& from);
  void MergeFrom(const DaoDeposit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaoDeposit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.DaoDeposit";
  }
  protected:
  explicit DaoDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 1,
    kChangeAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string to_address = 1;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string change_address = 2;
  void clear_change_address();
  const std::string& change_address() const;
  void set_change_address(const std::string& value);
  void set_change_address(std::string&& value);
  void set_change_address(const char* value);
  void set_change_address(const char* value, size_t size);
  std::string* mutable_change_address();
  std::string* release_change_address();
  void set_allocated_change_address(std::string* change_address);
  private:
  const std::string& _internal_change_address() const;
  void _internal_set_change_address(const std::string& value);
  std::string* _internal_mutable_change_address();
  public:

  // uint64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.DaoDeposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class DaoWithdrawPhase1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.DaoWithdrawPhase1) */ {
 public:
  inline DaoWithdrawPhase1() : DaoWithdrawPhase1(nullptr) {}
  virtual ~DaoWithdrawPhase1();

  DaoWithdrawPhase1(const DaoWithdrawPhase1& from);
  DaoWithdrawPhase1(DaoWithdrawPhase1&& from) noexcept
    : DaoWithdrawPhase1() {
    *this = ::std::move(from);
  }

  inline DaoWithdrawPhase1& operator=(const DaoWithdrawPhase1& from) {
    CopyFrom(from);
    return *this;
  }
  inline DaoWithdrawPhase1& operator=(DaoWithdrawPhase1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DaoWithdrawPhase1& default_instance();

  static inline const DaoWithdrawPhase1* internal_default_instance() {
    return reinterpret_cast<const DaoWithdrawPhase1*>(
               &_DaoWithdrawPhase1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DaoWithdrawPhase1& a, DaoWithdrawPhase1& b) {
    a.Swap(&b);
  }
  inline void Swap(DaoWithdrawPhase1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DaoWithdrawPhase1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DaoWithdrawPhase1* New() const final {
    return CreateMaybeMessage<DaoWithdrawPhase1>(nullptr);
  }

  DaoWithdrawPhase1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DaoWithdrawPhase1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DaoWithdrawPhase1& from);
  void MergeFrom(const DaoWithdrawPhase1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaoWithdrawPhase1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.DaoWithdrawPhase1";
  }
  protected:
  explicit DaoWithdrawPhase1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeAddressFieldNumber = 2,
    kDepositCellFieldNumber = 1,
  };
  // string change_address = 2;
  void clear_change_address();
  const std::string& change_address() const;
  void set_change_address(const std::string& value);
  void set_change_address(std::string&& value);
  void set_change_address(const char* value);
  void set_change_address(const char* value, size_t size);
  std::string* mutable_change_address();
  std::string* release_change_address();
  void set_allocated_change_address(std::string* change_address);
  private:
  const std::string& _internal_change_address() const;
  void _internal_set_change_address(const std::string& value);
  std::string* _internal_mutable_change_address();
  public:

  // .TW.Nervos.Proto.Cell deposit_cell = 1;
  bool has_deposit_cell() const;
  private:
  bool _internal_has_deposit_cell() const;
  public:
  void clear_deposit_cell();
  const ::TW::Nervos::Proto::Cell& deposit_cell() const;
  ::TW::Nervos::Proto::Cell* release_deposit_cell();
  ::TW::Nervos::Proto::Cell* mutable_deposit_cell();
  void set_allocated_deposit_cell(::TW::Nervos::Proto::Cell* deposit_cell);
  private:
  const ::TW::Nervos::Proto::Cell& _internal_deposit_cell() const;
  ::TW::Nervos::Proto::Cell* _internal_mutable_deposit_cell();
  public:
  void unsafe_arena_set_allocated_deposit_cell(
      ::TW::Nervos::Proto::Cell* deposit_cell);
  ::TW::Nervos::Proto::Cell* unsafe_arena_release_deposit_cell();

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.DaoWithdrawPhase1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_address_;
  ::TW::Nervos::Proto::Cell* deposit_cell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class DaoWithdrawPhase2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.DaoWithdrawPhase2) */ {
 public:
  inline DaoWithdrawPhase2() : DaoWithdrawPhase2(nullptr) {}
  virtual ~DaoWithdrawPhase2();

  DaoWithdrawPhase2(const DaoWithdrawPhase2& from);
  DaoWithdrawPhase2(DaoWithdrawPhase2&& from) noexcept
    : DaoWithdrawPhase2() {
    *this = ::std::move(from);
  }

  inline DaoWithdrawPhase2& operator=(const DaoWithdrawPhase2& from) {
    CopyFrom(from);
    return *this;
  }
  inline DaoWithdrawPhase2& operator=(DaoWithdrawPhase2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DaoWithdrawPhase2& default_instance();

  static inline const DaoWithdrawPhase2* internal_default_instance() {
    return reinterpret_cast<const DaoWithdrawPhase2*>(
               &_DaoWithdrawPhase2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DaoWithdrawPhase2& a, DaoWithdrawPhase2& b) {
    a.Swap(&b);
  }
  inline void Swap(DaoWithdrawPhase2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DaoWithdrawPhase2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DaoWithdrawPhase2* New() const final {
    return CreateMaybeMessage<DaoWithdrawPhase2>(nullptr);
  }

  DaoWithdrawPhase2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DaoWithdrawPhase2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DaoWithdrawPhase2& from);
  void MergeFrom(const DaoWithdrawPhase2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaoWithdrawPhase2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.DaoWithdrawPhase2";
  }
  protected:
  explicit DaoWithdrawPhase2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositCellFieldNumber = 1,
    kWithdrawingCellFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // .TW.Nervos.Proto.Cell deposit_cell = 1;
  bool has_deposit_cell() const;
  private:
  bool _internal_has_deposit_cell() const;
  public:
  void clear_deposit_cell();
  const ::TW::Nervos::Proto::Cell& deposit_cell() const;
  ::TW::Nervos::Proto::Cell* release_deposit_cell();
  ::TW::Nervos::Proto::Cell* mutable_deposit_cell();
  void set_allocated_deposit_cell(::TW::Nervos::Proto::Cell* deposit_cell);
  private:
  const ::TW::Nervos::Proto::Cell& _internal_deposit_cell() const;
  ::TW::Nervos::Proto::Cell* _internal_mutable_deposit_cell();
  public:
  void unsafe_arena_set_allocated_deposit_cell(
      ::TW::Nervos::Proto::Cell* deposit_cell);
  ::TW::Nervos::Proto::Cell* unsafe_arena_release_deposit_cell();

  // .TW.Nervos.Proto.Cell withdrawing_cell = 2;
  bool has_withdrawing_cell() const;
  private:
  bool _internal_has_withdrawing_cell() const;
  public:
  void clear_withdrawing_cell();
  const ::TW::Nervos::Proto::Cell& withdrawing_cell() const;
  ::TW::Nervos::Proto::Cell* release_withdrawing_cell();
  ::TW::Nervos::Proto::Cell* mutable_withdrawing_cell();
  void set_allocated_withdrawing_cell(::TW::Nervos::Proto::Cell* withdrawing_cell);
  private:
  const ::TW::Nervos::Proto::Cell& _internal_withdrawing_cell() const;
  ::TW::Nervos::Proto::Cell* _internal_mutable_withdrawing_cell();
  public:
  void unsafe_arena_set_allocated_withdrawing_cell(
      ::TW::Nervos::Proto::Cell* withdrawing_cell);
  ::TW::Nervos::Proto::Cell* unsafe_arena_release_withdrawing_cell();

  // uint64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.DaoWithdrawPhase2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Nervos::Proto::Cell* deposit_cell_;
  ::TW::Nervos::Proto::Cell* withdrawing_cell_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  enum OperationOneofCase {
    kNativeTransfer = 5,
    kSudtTransfer = 6,
    kDaoDeposit = 7,
    kDaoWithdrawPhase1 = 8,
    kDaoWithdrawPhase2 = 9,
    OPERATION_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 2,
    kCellFieldNumber = 3,
    kPlanFieldNumber = 4,
    kByteFeeFieldNumber = 1,
    kNativeTransferFieldNumber = 5,
    kSudtTransferFieldNumber = 6,
    kDaoDepositFieldNumber = 7,
    kDaoWithdrawPhase1FieldNumber = 8,
    kDaoWithdrawPhase2FieldNumber = 9,
  };
  // repeated bytes private_key = 2;
  int private_key_size() const;
  private:
  int _internal_private_key_size() const;
  public:
  void clear_private_key();
  const std::string& private_key(int index) const;
  std::string* mutable_private_key(int index);
  void set_private_key(int index, const std::string& value);
  void set_private_key(int index, std::string&& value);
  void set_private_key(int index, const char* value);
  void set_private_key(int index, const void* value, size_t size);
  std::string* add_private_key();
  void add_private_key(const std::string& value);
  void add_private_key(std::string&& value);
  void add_private_key(const char* value);
  void add_private_key(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& private_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_private_key();
  private:
  const std::string& _internal_private_key(int index) const;
  std::string* _internal_add_private_key();
  public:

  // repeated .TW.Nervos.Proto.Cell cell = 3;
  int cell_size() const;
  private:
  int _internal_cell_size() const;
  public:
  void clear_cell();
  ::TW::Nervos::Proto::Cell* mutable_cell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell >*
      mutable_cell();
  private:
  const ::TW::Nervos::Proto::Cell& _internal_cell(int index) const;
  ::TW::Nervos::Proto::Cell* _internal_add_cell();
  public:
  const ::TW::Nervos::Proto::Cell& cell(int index) const;
  ::TW::Nervos::Proto::Cell* add_cell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell >&
      cell() const;

  // .TW.Nervos.Proto.TransactionPlan plan = 4;
  bool has_plan() const;
  private:
  bool _internal_has_plan() const;
  public:
  void clear_plan();
  const ::TW::Nervos::Proto::TransactionPlan& plan() const;
  ::TW::Nervos::Proto::TransactionPlan* release_plan();
  ::TW::Nervos::Proto::TransactionPlan* mutable_plan();
  void set_allocated_plan(::TW::Nervos::Proto::TransactionPlan* plan);
  private:
  const ::TW::Nervos::Proto::TransactionPlan& _internal_plan() const;
  ::TW::Nervos::Proto::TransactionPlan* _internal_mutable_plan();
  public:
  void unsafe_arena_set_allocated_plan(
      ::TW::Nervos::Proto::TransactionPlan* plan);
  ::TW::Nervos::Proto::TransactionPlan* unsafe_arena_release_plan();

  // uint64 byte_fee = 1;
  void clear_byte_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 byte_fee() const;
  void set_byte_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_byte_fee() const;
  void _internal_set_byte_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .TW.Nervos.Proto.NativeTransfer native_transfer = 5;
  bool has_native_transfer() const;
  private:
  bool _internal_has_native_transfer() const;
  public:
  void clear_native_transfer();
  const ::TW::Nervos::Proto::NativeTransfer& native_transfer() const;
  ::TW::Nervos::Proto::NativeTransfer* release_native_transfer();
  ::TW::Nervos::Proto::NativeTransfer* mutable_native_transfer();
  void set_allocated_native_transfer(::TW::Nervos::Proto::NativeTransfer* native_transfer);
  private:
  const ::TW::Nervos::Proto::NativeTransfer& _internal_native_transfer() const;
  ::TW::Nervos::Proto::NativeTransfer* _internal_mutable_native_transfer();
  public:
  void unsafe_arena_set_allocated_native_transfer(
      ::TW::Nervos::Proto::NativeTransfer* native_transfer);
  ::TW::Nervos::Proto::NativeTransfer* unsafe_arena_release_native_transfer();

  // .TW.Nervos.Proto.SudtTransfer sudt_transfer = 6;
  bool has_sudt_transfer() const;
  private:
  bool _internal_has_sudt_transfer() const;
  public:
  void clear_sudt_transfer();
  const ::TW::Nervos::Proto::SudtTransfer& sudt_transfer() const;
  ::TW::Nervos::Proto::SudtTransfer* release_sudt_transfer();
  ::TW::Nervos::Proto::SudtTransfer* mutable_sudt_transfer();
  void set_allocated_sudt_transfer(::TW::Nervos::Proto::SudtTransfer* sudt_transfer);
  private:
  const ::TW::Nervos::Proto::SudtTransfer& _internal_sudt_transfer() const;
  ::TW::Nervos::Proto::SudtTransfer* _internal_mutable_sudt_transfer();
  public:
  void unsafe_arena_set_allocated_sudt_transfer(
      ::TW::Nervos::Proto::SudtTransfer* sudt_transfer);
  ::TW::Nervos::Proto::SudtTransfer* unsafe_arena_release_sudt_transfer();

  // .TW.Nervos.Proto.DaoDeposit dao_deposit = 7;
  bool has_dao_deposit() const;
  private:
  bool _internal_has_dao_deposit() const;
  public:
  void clear_dao_deposit();
  const ::TW::Nervos::Proto::DaoDeposit& dao_deposit() const;
  ::TW::Nervos::Proto::DaoDeposit* release_dao_deposit();
  ::TW::Nervos::Proto::DaoDeposit* mutable_dao_deposit();
  void set_allocated_dao_deposit(::TW::Nervos::Proto::DaoDeposit* dao_deposit);
  private:
  const ::TW::Nervos::Proto::DaoDeposit& _internal_dao_deposit() const;
  ::TW::Nervos::Proto::DaoDeposit* _internal_mutable_dao_deposit();
  public:
  void unsafe_arena_set_allocated_dao_deposit(
      ::TW::Nervos::Proto::DaoDeposit* dao_deposit);
  ::TW::Nervos::Proto::DaoDeposit* unsafe_arena_release_dao_deposit();

  // .TW.Nervos.Proto.DaoWithdrawPhase1 dao_withdraw_phase1 = 8;
  bool has_dao_withdraw_phase1() const;
  private:
  bool _internal_has_dao_withdraw_phase1() const;
  public:
  void clear_dao_withdraw_phase1();
  const ::TW::Nervos::Proto::DaoWithdrawPhase1& dao_withdraw_phase1() const;
  ::TW::Nervos::Proto::DaoWithdrawPhase1* release_dao_withdraw_phase1();
  ::TW::Nervos::Proto::DaoWithdrawPhase1* mutable_dao_withdraw_phase1();
  void set_allocated_dao_withdraw_phase1(::TW::Nervos::Proto::DaoWithdrawPhase1* dao_withdraw_phase1);
  private:
  const ::TW::Nervos::Proto::DaoWithdrawPhase1& _internal_dao_withdraw_phase1() const;
  ::TW::Nervos::Proto::DaoWithdrawPhase1* _internal_mutable_dao_withdraw_phase1();
  public:
  void unsafe_arena_set_allocated_dao_withdraw_phase1(
      ::TW::Nervos::Proto::DaoWithdrawPhase1* dao_withdraw_phase1);
  ::TW::Nervos::Proto::DaoWithdrawPhase1* unsafe_arena_release_dao_withdraw_phase1();

  // .TW.Nervos.Proto.DaoWithdrawPhase2 dao_withdraw_phase2 = 9;
  bool has_dao_withdraw_phase2() const;
  private:
  bool _internal_has_dao_withdraw_phase2() const;
  public:
  void clear_dao_withdraw_phase2();
  const ::TW::Nervos::Proto::DaoWithdrawPhase2& dao_withdraw_phase2() const;
  ::TW::Nervos::Proto::DaoWithdrawPhase2* release_dao_withdraw_phase2();
  ::TW::Nervos::Proto::DaoWithdrawPhase2* mutable_dao_withdraw_phase2();
  void set_allocated_dao_withdraw_phase2(::TW::Nervos::Proto::DaoWithdrawPhase2* dao_withdraw_phase2);
  private:
  const ::TW::Nervos::Proto::DaoWithdrawPhase2& _internal_dao_withdraw_phase2() const;
  ::TW::Nervos::Proto::DaoWithdrawPhase2* _internal_mutable_dao_withdraw_phase2();
  public:
  void unsafe_arena_set_allocated_dao_withdraw_phase2(
      ::TW::Nervos::Proto::DaoWithdrawPhase2* dao_withdraw_phase2);
  ::TW::Nervos::Proto::DaoWithdrawPhase2* unsafe_arena_release_dao_withdraw_phase2();

  void clear_operation_oneof();
  OperationOneofCase operation_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_native_transfer();
  void set_has_sudt_transfer();
  void set_has_dao_deposit();
  void set_has_dao_withdraw_phase1();
  void set_has_dao_withdraw_phase2();

  inline bool has_operation_oneof() const;
  inline void clear_has_operation_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> private_key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell > cell_;
  ::TW::Nervos::Proto::TransactionPlan* plan_;
  ::PROTOBUF_NAMESPACE_ID::uint64 byte_fee_;
  union OperationOneofUnion {
    OperationOneofUnion() {}
    ::TW::Nervos::Proto::NativeTransfer* native_transfer_;
    ::TW::Nervos::Proto::SudtTransfer* sudt_transfer_;
    ::TW::Nervos::Proto::DaoDeposit* dao_deposit_;
    ::TW::Nervos::Proto::DaoWithdrawPhase1* dao_withdraw_phase1_;
    ::TW::Nervos::Proto::DaoWithdrawPhase2* dao_withdraw_phase2_;
  } operation_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class Cell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.Cell) */ {
 public:
  inline Cell() : Cell(nullptr) {}
  virtual ~Cell();

  Cell(const Cell& from);
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cell& operator=(Cell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cell& default_instance();

  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Cell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cell* New() const final {
    return CreateMaybeMessage<Cell>(nullptr);
  }

  Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.Cell";
  }
  protected:
  explicit Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kBlockHashFieldNumber = 7,
    kInputTypeFieldNumber = 9,
    kOutputTypeFieldNumber = 10,
    kOutPointFieldNumber = 1,
    kLockFieldNumber = 3,
    kTypeFieldNumber = 4,
    kCapacityFieldNumber = 2,
    kBlockNumberFieldNumber = 6,
    kSinceFieldNumber = 8,
  };
  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes block_hash = 7;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // bytes input_type = 9;
  void clear_input_type();
  const std::string& input_type() const;
  void set_input_type(const std::string& value);
  void set_input_type(std::string&& value);
  void set_input_type(const char* value);
  void set_input_type(const void* value, size_t size);
  std::string* mutable_input_type();
  std::string* release_input_type();
  void set_allocated_input_type(std::string* input_type);
  private:
  const std::string& _internal_input_type() const;
  void _internal_set_input_type(const std::string& value);
  std::string* _internal_mutable_input_type();
  public:

  // bytes output_type = 10;
  void clear_output_type();
  const std::string& output_type() const;
  void set_output_type(const std::string& value);
  void set_output_type(std::string&& value);
  void set_output_type(const char* value);
  void set_output_type(const void* value, size_t size);
  std::string* mutable_output_type();
  std::string* release_output_type();
  void set_allocated_output_type(std::string* output_type);
  private:
  const std::string& _internal_output_type() const;
  void _internal_set_output_type(const std::string& value);
  std::string* _internal_mutable_output_type();
  public:

  // .TW.Nervos.Proto.OutPoint out_point = 1;
  bool has_out_point() const;
  private:
  bool _internal_has_out_point() const;
  public:
  void clear_out_point();
  const ::TW::Nervos::Proto::OutPoint& out_point() const;
  ::TW::Nervos::Proto::OutPoint* release_out_point();
  ::TW::Nervos::Proto::OutPoint* mutable_out_point();
  void set_allocated_out_point(::TW::Nervos::Proto::OutPoint* out_point);
  private:
  const ::TW::Nervos::Proto::OutPoint& _internal_out_point() const;
  ::TW::Nervos::Proto::OutPoint* _internal_mutable_out_point();
  public:
  void unsafe_arena_set_allocated_out_point(
      ::TW::Nervos::Proto::OutPoint* out_point);
  ::TW::Nervos::Proto::OutPoint* unsafe_arena_release_out_point();

  // .TW.Nervos.Proto.Script lock = 3;
  bool has_lock() const;
  private:
  bool _internal_has_lock() const;
  public:
  void clear_lock();
  const ::TW::Nervos::Proto::Script& lock() const;
  ::TW::Nervos::Proto::Script* release_lock();
  ::TW::Nervos::Proto::Script* mutable_lock();
  void set_allocated_lock(::TW::Nervos::Proto::Script* lock);
  private:
  const ::TW::Nervos::Proto::Script& _internal_lock() const;
  ::TW::Nervos::Proto::Script* _internal_mutable_lock();
  public:
  void unsafe_arena_set_allocated_lock(
      ::TW::Nervos::Proto::Script* lock);
  ::TW::Nervos::Proto::Script* unsafe_arena_release_lock();

  // .TW.Nervos.Proto.Script type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::TW::Nervos::Proto::Script& type() const;
  ::TW::Nervos::Proto::Script* release_type();
  ::TW::Nervos::Proto::Script* mutable_type();
  void set_allocated_type(::TW::Nervos::Proto::Script* type);
  private:
  const ::TW::Nervos::Proto::Script& _internal_type() const;
  ::TW::Nervos::Proto::Script* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::TW::Nervos::Proto::Script* type);
  ::TW::Nervos::Proto::Script* unsafe_arena_release_type();

  // uint64 capacity = 2;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_number = 6;
  void clear_block_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number() const;
  void set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_number() const;
  void _internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 since = 8;
  void clear_since();
  ::PROTOBUF_NAMESPACE_ID::uint64 since() const;
  void set_since(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_since() const;
  void _internal_set_since(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_type_;
  ::TW::Nervos::Proto::OutPoint* out_point_;
  ::TW::Nervos::Proto::Script* lock_;
  ::TW::Nervos::Proto::Script* type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 since_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nervos.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nervos.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nervos_2eproto);
    return ::descriptor_table_Nervos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionJsonFieldNumber = 1,
    kTransactionIdFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string transaction_json = 1;
  void clear_transaction_json();
  const std::string& transaction_json() const;
  void set_transaction_json(const std::string& value);
  void set_transaction_json(std::string&& value);
  void set_transaction_json(const char* value);
  void set_transaction_json(const char* value, size_t size);
  std::string* mutable_transaction_json();
  std::string* release_transaction_json();
  void set_allocated_transaction_json(std::string* transaction_json);
  private:
  const std::string& _internal_transaction_json() const;
  void _internal_set_transaction_json(const std::string& value);
  std::string* _internal_mutable_transaction_json();
  public:

  // string transaction_id = 2;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // .TW.Common.Proto.SigningError error = 3;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Nervos.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nervos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionPlan

// repeated .TW.Nervos.Proto.CellDep cell_deps = 1;
inline int TransactionPlan::_internal_cell_deps_size() const {
  return cell_deps_.size();
}
inline int TransactionPlan::cell_deps_size() const {
  return _internal_cell_deps_size();
}
inline void TransactionPlan::clear_cell_deps() {
  cell_deps_.Clear();
}
inline ::TW::Nervos::Proto::CellDep* TransactionPlan::mutable_cell_deps(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.TransactionPlan.cell_deps)
  return cell_deps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellDep >*
TransactionPlan::mutable_cell_deps() {
  // @@protoc_insertion_point(field_mutable_list:TW.Nervos.Proto.TransactionPlan.cell_deps)
  return &cell_deps_;
}
inline const ::TW::Nervos::Proto::CellDep& TransactionPlan::_internal_cell_deps(int index) const {
  return cell_deps_.Get(index);
}
inline const ::TW::Nervos::Proto::CellDep& TransactionPlan::cell_deps(int index) const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.TransactionPlan.cell_deps)
  return _internal_cell_deps(index);
}
inline ::TW::Nervos::Proto::CellDep* TransactionPlan::_internal_add_cell_deps() {
  return cell_deps_.Add();
}
inline ::TW::Nervos::Proto::CellDep* TransactionPlan::add_cell_deps() {
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.TransactionPlan.cell_deps)
  return _internal_add_cell_deps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellDep >&
TransactionPlan::cell_deps() const {
  // @@protoc_insertion_point(field_list:TW.Nervos.Proto.TransactionPlan.cell_deps)
  return cell_deps_;
}

// repeated bytes header_deps = 2;
inline int TransactionPlan::_internal_header_deps_size() const {
  return header_deps_.size();
}
inline int TransactionPlan::header_deps_size() const {
  return _internal_header_deps_size();
}
inline void TransactionPlan::clear_header_deps() {
  header_deps_.Clear();
}
inline std::string* TransactionPlan::add_header_deps() {
  // @@protoc_insertion_point(field_add_mutable:TW.Nervos.Proto.TransactionPlan.header_deps)
  return _internal_add_header_deps();
}
inline const std::string& TransactionPlan::_internal_header_deps(int index) const {
  return header_deps_.Get(index);
}
inline const std::string& TransactionPlan::header_deps(int index) const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.TransactionPlan.header_deps)
  return _internal_header_deps(index);
}
inline std::string* TransactionPlan::mutable_header_deps(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.TransactionPlan.header_deps)
  return header_deps_.Mutable(index);
}
inline void TransactionPlan::set_header_deps(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.TransactionPlan.header_deps)
  header_deps_.Mutable(index)->assign(value);
}
inline void TransactionPlan::set_header_deps(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.TransactionPlan.header_deps)
  header_deps_.Mutable(index)->assign(std::move(value));
}
inline void TransactionPlan::set_header_deps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  header_deps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.TransactionPlan.header_deps)
}
inline void TransactionPlan::set_header_deps(int index, const void* value, size_t size) {
  header_deps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.TransactionPlan.header_deps)
}
inline std::string* TransactionPlan::_internal_add_header_deps() {
  return header_deps_.Add();
}
inline void TransactionPlan::add_header_deps(const std::string& value) {
  header_deps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.TransactionPlan.header_deps)
}
inline void TransactionPlan::add_header_deps(std::string&& value) {
  header_deps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.TransactionPlan.header_deps)
}
inline void TransactionPlan::add_header_deps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  header_deps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Nervos.Proto.TransactionPlan.header_deps)
}
inline void TransactionPlan::add_header_deps(const void* value, size_t size) {
  header_deps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Nervos.Proto.TransactionPlan.header_deps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionPlan::header_deps() const {
  // @@protoc_insertion_point(field_list:TW.Nervos.Proto.TransactionPlan.header_deps)
  return header_deps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionPlan::mutable_header_deps() {
  // @@protoc_insertion_point(field_mutable_list:TW.Nervos.Proto.TransactionPlan.header_deps)
  return &header_deps_;
}

// repeated .TW.Nervos.Proto.Cell selected_cells = 3;
inline int TransactionPlan::_internal_selected_cells_size() const {
  return selected_cells_.size();
}
inline int TransactionPlan::selected_cells_size() const {
  return _internal_selected_cells_size();
}
inline void TransactionPlan::clear_selected_cells() {
  selected_cells_.Clear();
}
inline ::TW::Nervos::Proto::Cell* TransactionPlan::mutable_selected_cells(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.TransactionPlan.selected_cells)
  return selected_cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell >*
TransactionPlan::mutable_selected_cells() {
  // @@protoc_insertion_point(field_mutable_list:TW.Nervos.Proto.TransactionPlan.selected_cells)
  return &selected_cells_;
}
inline const ::TW::Nervos::Proto::Cell& TransactionPlan::_internal_selected_cells(int index) const {
  return selected_cells_.Get(index);
}
inline const ::TW::Nervos::Proto::Cell& TransactionPlan::selected_cells(int index) const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.TransactionPlan.selected_cells)
  return _internal_selected_cells(index);
}
inline ::TW::Nervos::Proto::Cell* TransactionPlan::_internal_add_selected_cells() {
  return selected_cells_.Add();
}
inline ::TW::Nervos::Proto::Cell* TransactionPlan::add_selected_cells() {
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.TransactionPlan.selected_cells)
  return _internal_add_selected_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell >&
TransactionPlan::selected_cells() const {
  // @@protoc_insertion_point(field_list:TW.Nervos.Proto.TransactionPlan.selected_cells)
  return selected_cells_;
}

// repeated .TW.Nervos.Proto.CellOutput outputs = 4;
inline int TransactionPlan::_internal_outputs_size() const {
  return outputs_.size();
}
inline int TransactionPlan::outputs_size() const {
  return _internal_outputs_size();
}
inline void TransactionPlan::clear_outputs() {
  outputs_.Clear();
}
inline ::TW::Nervos::Proto::CellOutput* TransactionPlan::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.TransactionPlan.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellOutput >*
TransactionPlan::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Nervos.Proto.TransactionPlan.outputs)
  return &outputs_;
}
inline const ::TW::Nervos::Proto::CellOutput& TransactionPlan::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::TW::Nervos::Proto::CellOutput& TransactionPlan::outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.TransactionPlan.outputs)
  return _internal_outputs(index);
}
inline ::TW::Nervos::Proto::CellOutput* TransactionPlan::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::TW::Nervos::Proto::CellOutput* TransactionPlan::add_outputs() {
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.TransactionPlan.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::CellOutput >&
TransactionPlan::outputs() const {
  // @@protoc_insertion_point(field_list:TW.Nervos.Proto.TransactionPlan.outputs)
  return outputs_;
}

// repeated bytes outputs_data = 5;
inline int TransactionPlan::_internal_outputs_data_size() const {
  return outputs_data_.size();
}
inline int TransactionPlan::outputs_data_size() const {
  return _internal_outputs_data_size();
}
inline void TransactionPlan::clear_outputs_data() {
  outputs_data_.Clear();
}
inline std::string* TransactionPlan::add_outputs_data() {
  // @@protoc_insertion_point(field_add_mutable:TW.Nervos.Proto.TransactionPlan.outputs_data)
  return _internal_add_outputs_data();
}
inline const std::string& TransactionPlan::_internal_outputs_data(int index) const {
  return outputs_data_.Get(index);
}
inline const std::string& TransactionPlan::outputs_data(int index) const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.TransactionPlan.outputs_data)
  return _internal_outputs_data(index);
}
inline std::string* TransactionPlan::mutable_outputs_data(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.TransactionPlan.outputs_data)
  return outputs_data_.Mutable(index);
}
inline void TransactionPlan::set_outputs_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.TransactionPlan.outputs_data)
  outputs_data_.Mutable(index)->assign(value);
}
inline void TransactionPlan::set_outputs_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.TransactionPlan.outputs_data)
  outputs_data_.Mutable(index)->assign(std::move(value));
}
inline void TransactionPlan::set_outputs_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputs_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.TransactionPlan.outputs_data)
}
inline void TransactionPlan::set_outputs_data(int index, const void* value, size_t size) {
  outputs_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.TransactionPlan.outputs_data)
}
inline std::string* TransactionPlan::_internal_add_outputs_data() {
  return outputs_data_.Add();
}
inline void TransactionPlan::add_outputs_data(const std::string& value) {
  outputs_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.TransactionPlan.outputs_data)
}
inline void TransactionPlan::add_outputs_data(std::string&& value) {
  outputs_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.TransactionPlan.outputs_data)
}
inline void TransactionPlan::add_outputs_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputs_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Nervos.Proto.TransactionPlan.outputs_data)
}
inline void TransactionPlan::add_outputs_data(const void* value, size_t size) {
  outputs_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Nervos.Proto.TransactionPlan.outputs_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionPlan::outputs_data() const {
  // @@protoc_insertion_point(field_list:TW.Nervos.Proto.TransactionPlan.outputs_data)
  return outputs_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionPlan::mutable_outputs_data() {
  // @@protoc_insertion_point(field_mutable_list:TW.Nervos.Proto.TransactionPlan.outputs_data)
  return &outputs_data_;
}

// .TW.Common.Proto.SigningError error = 6;
inline void TransactionPlan::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError TransactionPlan::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError TransactionPlan::error() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.TransactionPlan.error)
  return _internal_error();
}
inline void TransactionPlan::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void TransactionPlan::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.TransactionPlan.error)
}

// -------------------------------------------------------------------

// CellDep

// string dep_type = 1;
inline void CellDep::clear_dep_type() {
  dep_type_.ClearToEmpty();
}
inline const std::string& CellDep::dep_type() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.CellDep.dep_type)
  return _internal_dep_type();
}
inline void CellDep::set_dep_type(const std::string& value) {
  _internal_set_dep_type(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.CellDep.dep_type)
}
inline std::string* CellDep::mutable_dep_type() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.CellDep.dep_type)
  return _internal_mutable_dep_type();
}
inline const std::string& CellDep::_internal_dep_type() const {
  return dep_type_.Get();
}
inline void CellDep::_internal_set_dep_type(const std::string& value) {
  
  dep_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CellDep::set_dep_type(std::string&& value) {
  
  dep_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.CellDep.dep_type)
}
inline void CellDep::set_dep_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dep_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.CellDep.dep_type)
}
inline void CellDep::set_dep_type(const char* value,
    size_t size) {
  
  dep_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.CellDep.dep_type)
}
inline std::string* CellDep::_internal_mutable_dep_type() {
  
  return dep_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CellDep::release_dep_type() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.CellDep.dep_type)
  return dep_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CellDep::set_allocated_dep_type(std::string* dep_type) {
  if (dep_type != nullptr) {
    
  } else {
    
  }
  dep_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dep_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.CellDep.dep_type)
}

// .TW.Nervos.Proto.OutPoint out_point = 2;
inline bool CellDep::_internal_has_out_point() const {
  return this != internal_default_instance() && out_point_ != nullptr;
}
inline bool CellDep::has_out_point() const {
  return _internal_has_out_point();
}
inline void CellDep::clear_out_point() {
  if (GetArena() == nullptr && out_point_ != nullptr) {
    delete out_point_;
  }
  out_point_ = nullptr;
}
inline const ::TW::Nervos::Proto::OutPoint& CellDep::_internal_out_point() const {
  const ::TW::Nervos::Proto::OutPoint* p = out_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::OutPoint&>(
      ::TW::Nervos::Proto::_OutPoint_default_instance_);
}
inline const ::TW::Nervos::Proto::OutPoint& CellDep::out_point() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.CellDep.out_point)
  return _internal_out_point();
}
inline void CellDep::unsafe_arena_set_allocated_out_point(
    ::TW::Nervos::Proto::OutPoint* out_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_point_);
  }
  out_point_ = out_point;
  if (out_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.CellDep.out_point)
}
inline ::TW::Nervos::Proto::OutPoint* CellDep::release_out_point() {
  
  ::TW::Nervos::Proto::OutPoint* temp = out_point_;
  out_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::OutPoint* CellDep::unsafe_arena_release_out_point() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.CellDep.out_point)
  
  ::TW::Nervos::Proto::OutPoint* temp = out_point_;
  out_point_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::OutPoint* CellDep::_internal_mutable_out_point() {
  
  if (out_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::OutPoint>(GetArena());
    out_point_ = p;
  }
  return out_point_;
}
inline ::TW::Nervos::Proto::OutPoint* CellDep::mutable_out_point() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.CellDep.out_point)
  return _internal_mutable_out_point();
}
inline void CellDep::set_allocated_out_point(::TW::Nervos::Proto::OutPoint* out_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete out_point_;
  }
  if (out_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(out_point);
    if (message_arena != submessage_arena) {
      out_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, out_point, submessage_arena);
    }
    
  } else {
    
  }
  out_point_ = out_point;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.CellDep.out_point)
}

// -------------------------------------------------------------------

// OutPoint

// bytes tx_hash = 1;
inline void OutPoint::clear_tx_hash() {
  tx_hash_.ClearToEmpty();
}
inline const std::string& OutPoint::tx_hash() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.OutPoint.tx_hash)
  return _internal_tx_hash();
}
inline void OutPoint::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.OutPoint.tx_hash)
}
inline std::string* OutPoint::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.OutPoint.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& OutPoint::_internal_tx_hash() const {
  return tx_hash_.Get();
}
inline void OutPoint::_internal_set_tx_hash(const std::string& value) {
  
  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutPoint::set_tx_hash(std::string&& value) {
  
  tx_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.OutPoint.tx_hash)
}
inline void OutPoint::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.OutPoint.tx_hash)
}
inline void OutPoint::set_tx_hash(const void* value,
    size_t size) {
  
  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.OutPoint.tx_hash)
}
inline std::string* OutPoint::_internal_mutable_tx_hash() {
  
  return tx_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutPoint::release_tx_hash() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.OutPoint.tx_hash)
  return tx_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutPoint::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {
    
  } else {
    
  }
  tx_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.OutPoint.tx_hash)
}

// uint32 index = 2;
inline void OutPoint::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutPoint::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutPoint::index() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.OutPoint.index)
  return _internal_index();
}
inline void OutPoint::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void OutPoint::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.OutPoint.index)
}

// -------------------------------------------------------------------

// CellOutput

// uint64 capacity = 1;
inline void CellOutput::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellOutput::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellOutput::capacity() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.CellOutput.capacity)
  return _internal_capacity();
}
inline void CellOutput::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
}
inline void CellOutput::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.CellOutput.capacity)
}

// .TW.Nervos.Proto.Script lock = 2;
inline bool CellOutput::_internal_has_lock() const {
  return this != internal_default_instance() && lock_ != nullptr;
}
inline bool CellOutput::has_lock() const {
  return _internal_has_lock();
}
inline void CellOutput::clear_lock() {
  if (GetArena() == nullptr && lock_ != nullptr) {
    delete lock_;
  }
  lock_ = nullptr;
}
inline const ::TW::Nervos::Proto::Script& CellOutput::_internal_lock() const {
  const ::TW::Nervos::Proto::Script* p = lock_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::Script&>(
      ::TW::Nervos::Proto::_Script_default_instance_);
}
inline const ::TW::Nervos::Proto::Script& CellOutput::lock() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.CellOutput.lock)
  return _internal_lock();
}
inline void CellOutput::unsafe_arena_set_allocated_lock(
    ::TW::Nervos::Proto::Script* lock) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_);
  }
  lock_ = lock;
  if (lock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.CellOutput.lock)
}
inline ::TW::Nervos::Proto::Script* CellOutput::release_lock() {
  
  ::TW::Nervos::Proto::Script* temp = lock_;
  lock_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::Script* CellOutput::unsafe_arena_release_lock() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.CellOutput.lock)
  
  ::TW::Nervos::Proto::Script* temp = lock_;
  lock_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::Script* CellOutput::_internal_mutable_lock() {
  
  if (lock_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::Script>(GetArena());
    lock_ = p;
  }
  return lock_;
}
inline ::TW::Nervos::Proto::Script* CellOutput::mutable_lock() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.CellOutput.lock)
  return _internal_mutable_lock();
}
inline void CellOutput::set_allocated_lock(::TW::Nervos::Proto::Script* lock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lock_;
  }
  if (lock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lock);
    if (message_arena != submessage_arena) {
      lock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock, submessage_arena);
    }
    
  } else {
    
  }
  lock_ = lock;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.CellOutput.lock)
}

// .TW.Nervos.Proto.Script type = 3;
inline bool CellOutput::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool CellOutput::has_type() const {
  return _internal_has_type();
}
inline void CellOutput::clear_type() {
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::TW::Nervos::Proto::Script& CellOutput::_internal_type() const {
  const ::TW::Nervos::Proto::Script* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::Script&>(
      ::TW::Nervos::Proto::_Script_default_instance_);
}
inline const ::TW::Nervos::Proto::Script& CellOutput::type() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.CellOutput.type)
  return _internal_type();
}
inline void CellOutput::unsafe_arena_set_allocated_type(
    ::TW::Nervos::Proto::Script* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.CellOutput.type)
}
inline ::TW::Nervos::Proto::Script* CellOutput::release_type() {
  
  ::TW::Nervos::Proto::Script* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::Script* CellOutput::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.CellOutput.type)
  
  ::TW::Nervos::Proto::Script* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::Script* CellOutput::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::Script>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::TW::Nervos::Proto::Script* CellOutput::mutable_type() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.CellOutput.type)
  return _internal_mutable_type();
}
inline void CellOutput::set_allocated_type(::TW::Nervos::Proto::Script* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.CellOutput.type)
}

// -------------------------------------------------------------------

// Script

// bytes code_hash = 1;
inline void Script::clear_code_hash() {
  code_hash_.ClearToEmpty();
}
inline const std::string& Script::code_hash() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Script.code_hash)
  return _internal_code_hash();
}
inline void Script::set_code_hash(const std::string& value) {
  _internal_set_code_hash(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Script.code_hash)
}
inline std::string* Script::mutable_code_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Script.code_hash)
  return _internal_mutable_code_hash();
}
inline const std::string& Script::_internal_code_hash() const {
  return code_hash_.Get();
}
inline void Script::_internal_set_code_hash(const std::string& value) {
  
  code_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Script::set_code_hash(std::string&& value) {
  
  code_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.Script.code_hash)
}
inline void Script::set_code_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.Script.code_hash)
}
inline void Script::set_code_hash(const void* value,
    size_t size) {
  
  code_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.Script.code_hash)
}
inline std::string* Script::_internal_mutable_code_hash() {
  
  return code_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Script::release_code_hash() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Script.code_hash)
  return code_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Script::set_allocated_code_hash(std::string* code_hash) {
  if (code_hash != nullptr) {
    
  } else {
    
  }
  code_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Script.code_hash)
}

// string hash_type = 2;
inline void Script::clear_hash_type() {
  hash_type_.ClearToEmpty();
}
inline const std::string& Script::hash_type() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Script.hash_type)
  return _internal_hash_type();
}
inline void Script::set_hash_type(const std::string& value) {
  _internal_set_hash_type(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Script.hash_type)
}
inline std::string* Script::mutable_hash_type() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Script.hash_type)
  return _internal_mutable_hash_type();
}
inline const std::string& Script::_internal_hash_type() const {
  return hash_type_.Get();
}
inline void Script::_internal_set_hash_type(const std::string& value) {
  
  hash_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Script::set_hash_type(std::string&& value) {
  
  hash_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.Script.hash_type)
}
inline void Script::set_hash_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.Script.hash_type)
}
inline void Script::set_hash_type(const char* value,
    size_t size) {
  
  hash_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.Script.hash_type)
}
inline std::string* Script::_internal_mutable_hash_type() {
  
  return hash_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Script::release_hash_type() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Script.hash_type)
  return hash_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Script::set_allocated_hash_type(std::string* hash_type) {
  if (hash_type != nullptr) {
    
  } else {
    
  }
  hash_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Script.hash_type)
}

// bytes args = 3;
inline void Script::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& Script::args() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Script.args)
  return _internal_args();
}
inline void Script::set_args(const std::string& value) {
  _internal_set_args(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Script.args)
}
inline std::string* Script::mutable_args() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Script.args)
  return _internal_mutable_args();
}
inline const std::string& Script::_internal_args() const {
  return args_.Get();
}
inline void Script::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Script::set_args(std::string&& value) {
  
  args_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.Script.args)
}
inline void Script::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.Script.args)
}
inline void Script::set_args(const void* value,
    size_t size) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.Script.args)
}
inline std::string* Script::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Script::release_args() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Script.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Script::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Script.args)
}

// -------------------------------------------------------------------

// NativeTransfer

// string to_address = 1;
inline void NativeTransfer::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& NativeTransfer::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.NativeTransfer.to_address)
  return _internal_to_address();
}
inline void NativeTransfer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.NativeTransfer.to_address)
}
inline std::string* NativeTransfer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.NativeTransfer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& NativeTransfer::_internal_to_address() const {
  return to_address_.Get();
}
inline void NativeTransfer::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NativeTransfer::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.NativeTransfer.to_address)
}
inline void NativeTransfer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.NativeTransfer.to_address)
}
inline void NativeTransfer::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.NativeTransfer.to_address)
}
inline std::string* NativeTransfer::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NativeTransfer::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.NativeTransfer.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NativeTransfer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.NativeTransfer.to_address)
}

// string change_address = 2;
inline void NativeTransfer::clear_change_address() {
  change_address_.ClearToEmpty();
}
inline const std::string& NativeTransfer::change_address() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.NativeTransfer.change_address)
  return _internal_change_address();
}
inline void NativeTransfer::set_change_address(const std::string& value) {
  _internal_set_change_address(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.NativeTransfer.change_address)
}
inline std::string* NativeTransfer::mutable_change_address() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.NativeTransfer.change_address)
  return _internal_mutable_change_address();
}
inline const std::string& NativeTransfer::_internal_change_address() const {
  return change_address_.Get();
}
inline void NativeTransfer::_internal_set_change_address(const std::string& value) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NativeTransfer::set_change_address(std::string&& value) {
  
  change_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.NativeTransfer.change_address)
}
inline void NativeTransfer::set_change_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.NativeTransfer.change_address)
}
inline void NativeTransfer::set_change_address(const char* value,
    size_t size) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.NativeTransfer.change_address)
}
inline std::string* NativeTransfer::_internal_mutable_change_address() {
  
  return change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NativeTransfer::release_change_address() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.NativeTransfer.change_address)
  return change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NativeTransfer::set_allocated_change_address(std::string* change_address) {
  if (change_address != nullptr) {
    
  } else {
    
  }
  change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.NativeTransfer.change_address)
}

// uint64 amount = 3;
inline void NativeTransfer::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NativeTransfer::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NativeTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.NativeTransfer.amount)
  return _internal_amount();
}
inline void NativeTransfer::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void NativeTransfer::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.NativeTransfer.amount)
}

// bool use_max_amount = 4;
inline void NativeTransfer::clear_use_max_amount() {
  use_max_amount_ = false;
}
inline bool NativeTransfer::_internal_use_max_amount() const {
  return use_max_amount_;
}
inline bool NativeTransfer::use_max_amount() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.NativeTransfer.use_max_amount)
  return _internal_use_max_amount();
}
inline void NativeTransfer::_internal_set_use_max_amount(bool value) {
  
  use_max_amount_ = value;
}
inline void NativeTransfer::set_use_max_amount(bool value) {
  _internal_set_use_max_amount(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.NativeTransfer.use_max_amount)
}

// -------------------------------------------------------------------

// SudtTransfer

// string to_address = 1;
inline void SudtTransfer::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& SudtTransfer::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SudtTransfer.to_address)
  return _internal_to_address();
}
inline void SudtTransfer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SudtTransfer.to_address)
}
inline std::string* SudtTransfer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SudtTransfer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& SudtTransfer::_internal_to_address() const {
  return to_address_.Get();
}
inline void SudtTransfer::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SudtTransfer::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.SudtTransfer.to_address)
}
inline void SudtTransfer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.SudtTransfer.to_address)
}
inline void SudtTransfer::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.SudtTransfer.to_address)
}
inline std::string* SudtTransfer::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SudtTransfer::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SudtTransfer.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SudtTransfer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SudtTransfer.to_address)
}

// string change_address = 2;
inline void SudtTransfer::clear_change_address() {
  change_address_.ClearToEmpty();
}
inline const std::string& SudtTransfer::change_address() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SudtTransfer.change_address)
  return _internal_change_address();
}
inline void SudtTransfer::set_change_address(const std::string& value) {
  _internal_set_change_address(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SudtTransfer.change_address)
}
inline std::string* SudtTransfer::mutable_change_address() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SudtTransfer.change_address)
  return _internal_mutable_change_address();
}
inline const std::string& SudtTransfer::_internal_change_address() const {
  return change_address_.Get();
}
inline void SudtTransfer::_internal_set_change_address(const std::string& value) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SudtTransfer::set_change_address(std::string&& value) {
  
  change_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.SudtTransfer.change_address)
}
inline void SudtTransfer::set_change_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.SudtTransfer.change_address)
}
inline void SudtTransfer::set_change_address(const char* value,
    size_t size) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.SudtTransfer.change_address)
}
inline std::string* SudtTransfer::_internal_mutable_change_address() {
  
  return change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SudtTransfer::release_change_address() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SudtTransfer.change_address)
  return change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SudtTransfer::set_allocated_change_address(std::string* change_address) {
  if (change_address != nullptr) {
    
  } else {
    
  }
  change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SudtTransfer.change_address)
}

// bytes sudt_address = 3;
inline void SudtTransfer::clear_sudt_address() {
  sudt_address_.ClearToEmpty();
}
inline const std::string& SudtTransfer::sudt_address() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SudtTransfer.sudt_address)
  return _internal_sudt_address();
}
inline void SudtTransfer::set_sudt_address(const std::string& value) {
  _internal_set_sudt_address(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SudtTransfer.sudt_address)
}
inline std::string* SudtTransfer::mutable_sudt_address() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SudtTransfer.sudt_address)
  return _internal_mutable_sudt_address();
}
inline const std::string& SudtTransfer::_internal_sudt_address() const {
  return sudt_address_.Get();
}
inline void SudtTransfer::_internal_set_sudt_address(const std::string& value) {
  
  sudt_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SudtTransfer::set_sudt_address(std::string&& value) {
  
  sudt_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.SudtTransfer.sudt_address)
}
inline void SudtTransfer::set_sudt_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sudt_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.SudtTransfer.sudt_address)
}
inline void SudtTransfer::set_sudt_address(const void* value,
    size_t size) {
  
  sudt_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.SudtTransfer.sudt_address)
}
inline std::string* SudtTransfer::_internal_mutable_sudt_address() {
  
  return sudt_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SudtTransfer::release_sudt_address() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SudtTransfer.sudt_address)
  return sudt_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SudtTransfer::set_allocated_sudt_address(std::string* sudt_address) {
  if (sudt_address != nullptr) {
    
  } else {
    
  }
  sudt_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sudt_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SudtTransfer.sudt_address)
}

// string amount = 4;
inline void SudtTransfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& SudtTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SudtTransfer.amount)
  return _internal_amount();
}
inline void SudtTransfer::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SudtTransfer.amount)
}
inline std::string* SudtTransfer::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SudtTransfer.amount)
  return _internal_mutable_amount();
}
inline const std::string& SudtTransfer::_internal_amount() const {
  return amount_.Get();
}
inline void SudtTransfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SudtTransfer::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.SudtTransfer.amount)
}
inline void SudtTransfer::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.SudtTransfer.amount)
}
inline void SudtTransfer::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.SudtTransfer.amount)
}
inline std::string* SudtTransfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SudtTransfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SudtTransfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SudtTransfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SudtTransfer.amount)
}

// bool use_max_amount = 5;
inline void SudtTransfer::clear_use_max_amount() {
  use_max_amount_ = false;
}
inline bool SudtTransfer::_internal_use_max_amount() const {
  return use_max_amount_;
}
inline bool SudtTransfer::use_max_amount() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SudtTransfer.use_max_amount)
  return _internal_use_max_amount();
}
inline void SudtTransfer::_internal_set_use_max_amount(bool value) {
  
  use_max_amount_ = value;
}
inline void SudtTransfer::set_use_max_amount(bool value) {
  _internal_set_use_max_amount(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SudtTransfer.use_max_amount)
}

// -------------------------------------------------------------------

// DaoDeposit

// string to_address = 1;
inline void DaoDeposit::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& DaoDeposit::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.DaoDeposit.to_address)
  return _internal_to_address();
}
inline void DaoDeposit::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.DaoDeposit.to_address)
}
inline std::string* DaoDeposit::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.DaoDeposit.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& DaoDeposit::_internal_to_address() const {
  return to_address_.Get();
}
inline void DaoDeposit::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DaoDeposit::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.DaoDeposit.to_address)
}
inline void DaoDeposit::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.DaoDeposit.to_address)
}
inline void DaoDeposit::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.DaoDeposit.to_address)
}
inline std::string* DaoDeposit::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DaoDeposit::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.DaoDeposit.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DaoDeposit::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.DaoDeposit.to_address)
}

// string change_address = 2;
inline void DaoDeposit::clear_change_address() {
  change_address_.ClearToEmpty();
}
inline const std::string& DaoDeposit::change_address() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.DaoDeposit.change_address)
  return _internal_change_address();
}
inline void DaoDeposit::set_change_address(const std::string& value) {
  _internal_set_change_address(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.DaoDeposit.change_address)
}
inline std::string* DaoDeposit::mutable_change_address() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.DaoDeposit.change_address)
  return _internal_mutable_change_address();
}
inline const std::string& DaoDeposit::_internal_change_address() const {
  return change_address_.Get();
}
inline void DaoDeposit::_internal_set_change_address(const std::string& value) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DaoDeposit::set_change_address(std::string&& value) {
  
  change_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.DaoDeposit.change_address)
}
inline void DaoDeposit::set_change_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.DaoDeposit.change_address)
}
inline void DaoDeposit::set_change_address(const char* value,
    size_t size) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.DaoDeposit.change_address)
}
inline std::string* DaoDeposit::_internal_mutable_change_address() {
  
  return change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DaoDeposit::release_change_address() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.DaoDeposit.change_address)
  return change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DaoDeposit::set_allocated_change_address(std::string* change_address) {
  if (change_address != nullptr) {
    
  } else {
    
  }
  change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.DaoDeposit.change_address)
}

// uint64 amount = 3;
inline void DaoDeposit::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DaoDeposit::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DaoDeposit::amount() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.DaoDeposit.amount)
  return _internal_amount();
}
inline void DaoDeposit::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void DaoDeposit::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.DaoDeposit.amount)
}

// -------------------------------------------------------------------

// DaoWithdrawPhase1

// .TW.Nervos.Proto.Cell deposit_cell = 1;
inline bool DaoWithdrawPhase1::_internal_has_deposit_cell() const {
  return this != internal_default_instance() && deposit_cell_ != nullptr;
}
inline bool DaoWithdrawPhase1::has_deposit_cell() const {
  return _internal_has_deposit_cell();
}
inline void DaoWithdrawPhase1::clear_deposit_cell() {
  if (GetArena() == nullptr && deposit_cell_ != nullptr) {
    delete deposit_cell_;
  }
  deposit_cell_ = nullptr;
}
inline const ::TW::Nervos::Proto::Cell& DaoWithdrawPhase1::_internal_deposit_cell() const {
  const ::TW::Nervos::Proto::Cell* p = deposit_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::Cell&>(
      ::TW::Nervos::Proto::_Cell_default_instance_);
}
inline const ::TW::Nervos::Proto::Cell& DaoWithdrawPhase1::deposit_cell() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.DaoWithdrawPhase1.deposit_cell)
  return _internal_deposit_cell();
}
inline void DaoWithdrawPhase1::unsafe_arena_set_allocated_deposit_cell(
    ::TW::Nervos::Proto::Cell* deposit_cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit_cell_);
  }
  deposit_cell_ = deposit_cell;
  if (deposit_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.DaoWithdrawPhase1.deposit_cell)
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase1::release_deposit_cell() {
  
  ::TW::Nervos::Proto::Cell* temp = deposit_cell_;
  deposit_cell_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase1::unsafe_arena_release_deposit_cell() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.DaoWithdrawPhase1.deposit_cell)
  
  ::TW::Nervos::Proto::Cell* temp = deposit_cell_;
  deposit_cell_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase1::_internal_mutable_deposit_cell() {
  
  if (deposit_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::Cell>(GetArena());
    deposit_cell_ = p;
  }
  return deposit_cell_;
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase1::mutable_deposit_cell() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.DaoWithdrawPhase1.deposit_cell)
  return _internal_mutable_deposit_cell();
}
inline void DaoWithdrawPhase1::set_allocated_deposit_cell(::TW::Nervos::Proto::Cell* deposit_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deposit_cell_;
  }
  if (deposit_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deposit_cell);
    if (message_arena != submessage_arena) {
      deposit_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit_cell, submessage_arena);
    }
    
  } else {
    
  }
  deposit_cell_ = deposit_cell;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.DaoWithdrawPhase1.deposit_cell)
}

// string change_address = 2;
inline void DaoWithdrawPhase1::clear_change_address() {
  change_address_.ClearToEmpty();
}
inline const std::string& DaoWithdrawPhase1::change_address() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.DaoWithdrawPhase1.change_address)
  return _internal_change_address();
}
inline void DaoWithdrawPhase1::set_change_address(const std::string& value) {
  _internal_set_change_address(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.DaoWithdrawPhase1.change_address)
}
inline std::string* DaoWithdrawPhase1::mutable_change_address() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.DaoWithdrawPhase1.change_address)
  return _internal_mutable_change_address();
}
inline const std::string& DaoWithdrawPhase1::_internal_change_address() const {
  return change_address_.Get();
}
inline void DaoWithdrawPhase1::_internal_set_change_address(const std::string& value) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DaoWithdrawPhase1::set_change_address(std::string&& value) {
  
  change_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.DaoWithdrawPhase1.change_address)
}
inline void DaoWithdrawPhase1::set_change_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.DaoWithdrawPhase1.change_address)
}
inline void DaoWithdrawPhase1::set_change_address(const char* value,
    size_t size) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.DaoWithdrawPhase1.change_address)
}
inline std::string* DaoWithdrawPhase1::_internal_mutable_change_address() {
  
  return change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DaoWithdrawPhase1::release_change_address() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.DaoWithdrawPhase1.change_address)
  return change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DaoWithdrawPhase1::set_allocated_change_address(std::string* change_address) {
  if (change_address != nullptr) {
    
  } else {
    
  }
  change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.DaoWithdrawPhase1.change_address)
}

// -------------------------------------------------------------------

// DaoWithdrawPhase2

// .TW.Nervos.Proto.Cell deposit_cell = 1;
inline bool DaoWithdrawPhase2::_internal_has_deposit_cell() const {
  return this != internal_default_instance() && deposit_cell_ != nullptr;
}
inline bool DaoWithdrawPhase2::has_deposit_cell() const {
  return _internal_has_deposit_cell();
}
inline void DaoWithdrawPhase2::clear_deposit_cell() {
  if (GetArena() == nullptr && deposit_cell_ != nullptr) {
    delete deposit_cell_;
  }
  deposit_cell_ = nullptr;
}
inline const ::TW::Nervos::Proto::Cell& DaoWithdrawPhase2::_internal_deposit_cell() const {
  const ::TW::Nervos::Proto::Cell* p = deposit_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::Cell&>(
      ::TW::Nervos::Proto::_Cell_default_instance_);
}
inline const ::TW::Nervos::Proto::Cell& DaoWithdrawPhase2::deposit_cell() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.DaoWithdrawPhase2.deposit_cell)
  return _internal_deposit_cell();
}
inline void DaoWithdrawPhase2::unsafe_arena_set_allocated_deposit_cell(
    ::TW::Nervos::Proto::Cell* deposit_cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit_cell_);
  }
  deposit_cell_ = deposit_cell;
  if (deposit_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.DaoWithdrawPhase2.deposit_cell)
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase2::release_deposit_cell() {
  
  ::TW::Nervos::Proto::Cell* temp = deposit_cell_;
  deposit_cell_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase2::unsafe_arena_release_deposit_cell() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.DaoWithdrawPhase2.deposit_cell)
  
  ::TW::Nervos::Proto::Cell* temp = deposit_cell_;
  deposit_cell_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase2::_internal_mutable_deposit_cell() {
  
  if (deposit_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::Cell>(GetArena());
    deposit_cell_ = p;
  }
  return deposit_cell_;
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase2::mutable_deposit_cell() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.DaoWithdrawPhase2.deposit_cell)
  return _internal_mutable_deposit_cell();
}
inline void DaoWithdrawPhase2::set_allocated_deposit_cell(::TW::Nervos::Proto::Cell* deposit_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deposit_cell_;
  }
  if (deposit_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deposit_cell);
    if (message_arena != submessage_arena) {
      deposit_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit_cell, submessage_arena);
    }
    
  } else {
    
  }
  deposit_cell_ = deposit_cell;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.DaoWithdrawPhase2.deposit_cell)
}

// .TW.Nervos.Proto.Cell withdrawing_cell = 2;
inline bool DaoWithdrawPhase2::_internal_has_withdrawing_cell() const {
  return this != internal_default_instance() && withdrawing_cell_ != nullptr;
}
inline bool DaoWithdrawPhase2::has_withdrawing_cell() const {
  return _internal_has_withdrawing_cell();
}
inline void DaoWithdrawPhase2::clear_withdrawing_cell() {
  if (GetArena() == nullptr && withdrawing_cell_ != nullptr) {
    delete withdrawing_cell_;
  }
  withdrawing_cell_ = nullptr;
}
inline const ::TW::Nervos::Proto::Cell& DaoWithdrawPhase2::_internal_withdrawing_cell() const {
  const ::TW::Nervos::Proto::Cell* p = withdrawing_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::Cell&>(
      ::TW::Nervos::Proto::_Cell_default_instance_);
}
inline const ::TW::Nervos::Proto::Cell& DaoWithdrawPhase2::withdrawing_cell() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.DaoWithdrawPhase2.withdrawing_cell)
  return _internal_withdrawing_cell();
}
inline void DaoWithdrawPhase2::unsafe_arena_set_allocated_withdrawing_cell(
    ::TW::Nervos::Proto::Cell* withdrawing_cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawing_cell_);
  }
  withdrawing_cell_ = withdrawing_cell;
  if (withdrawing_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.DaoWithdrawPhase2.withdrawing_cell)
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase2::release_withdrawing_cell() {
  
  ::TW::Nervos::Proto::Cell* temp = withdrawing_cell_;
  withdrawing_cell_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase2::unsafe_arena_release_withdrawing_cell() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.DaoWithdrawPhase2.withdrawing_cell)
  
  ::TW::Nervos::Proto::Cell* temp = withdrawing_cell_;
  withdrawing_cell_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase2::_internal_mutable_withdrawing_cell() {
  
  if (withdrawing_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::Cell>(GetArena());
    withdrawing_cell_ = p;
  }
  return withdrawing_cell_;
}
inline ::TW::Nervos::Proto::Cell* DaoWithdrawPhase2::mutable_withdrawing_cell() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.DaoWithdrawPhase2.withdrawing_cell)
  return _internal_mutable_withdrawing_cell();
}
inline void DaoWithdrawPhase2::set_allocated_withdrawing_cell(::TW::Nervos::Proto::Cell* withdrawing_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete withdrawing_cell_;
  }
  if (withdrawing_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(withdrawing_cell);
    if (message_arena != submessage_arena) {
      withdrawing_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawing_cell, submessage_arena);
    }
    
  } else {
    
  }
  withdrawing_cell_ = withdrawing_cell;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.DaoWithdrawPhase2.withdrawing_cell)
}

// uint64 amount = 3;
inline void DaoWithdrawPhase2::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DaoWithdrawPhase2::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DaoWithdrawPhase2::amount() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.DaoWithdrawPhase2.amount)
  return _internal_amount();
}
inline void DaoWithdrawPhase2::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void DaoWithdrawPhase2::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.DaoWithdrawPhase2.amount)
}

// -------------------------------------------------------------------

// SigningInput

// uint64 byte_fee = 1;
inline void SigningInput::clear_byte_fee() {
  byte_fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_byte_fee() const {
  return byte_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::byte_fee() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningInput.byte_fee)
  return _internal_byte_fee();
}
inline void SigningInput::_internal_set_byte_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  byte_fee_ = value;
}
inline void SigningInput::set_byte_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_byte_fee(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SigningInput.byte_fee)
}

// repeated bytes private_key = 2;
inline int SigningInput::_internal_private_key_size() const {
  return private_key_.size();
}
inline int SigningInput::private_key_size() const {
  return _internal_private_key_size();
}
inline void SigningInput::clear_private_key() {
  private_key_.Clear();
}
inline std::string* SigningInput::add_private_key() {
  // @@protoc_insertion_point(field_add_mutable:TW.Nervos.Proto.SigningInput.private_key)
  return _internal_add_private_key();
}
inline const std::string& SigningInput::_internal_private_key(int index) const {
  return private_key_.Get(index);
}
inline const std::string& SigningInput::private_key(int index) const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningInput.private_key)
  return _internal_private_key(index);
}
inline std::string* SigningInput::mutable_private_key(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningInput.private_key)
  return private_key_.Mutable(index);
}
inline void SigningInput::set_private_key(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SigningInput.private_key)
  private_key_.Mutable(index)->assign(value);
}
inline void SigningInput::set_private_key(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SigningInput.private_key)
  private_key_.Mutable(index)->assign(std::move(value));
}
inline void SigningInput::set_private_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  private_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(int index, const void* value, size_t size) {
  private_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_add_private_key() {
  return private_key_.Add();
}
inline void SigningInput::add_private_key(const std::string& value) {
  private_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.SigningInput.private_key)
}
inline void SigningInput::add_private_key(std::string&& value) {
  private_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.SigningInput.private_key)
}
inline void SigningInput::add_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  private_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Nervos.Proto.SigningInput.private_key)
}
inline void SigningInput::add_private_key(const void* value, size_t size) {
  private_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Nervos.Proto.SigningInput.private_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SigningInput::private_key() const {
  // @@protoc_insertion_point(field_list:TW.Nervos.Proto.SigningInput.private_key)
  return private_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable_list:TW.Nervos.Proto.SigningInput.private_key)
  return &private_key_;
}

// repeated .TW.Nervos.Proto.Cell cell = 3;
inline int SigningInput::_internal_cell_size() const {
  return cell_.size();
}
inline int SigningInput::cell_size() const {
  return _internal_cell_size();
}
inline void SigningInput::clear_cell() {
  cell_.Clear();
}
inline ::TW::Nervos::Proto::Cell* SigningInput::mutable_cell(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningInput.cell)
  return cell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell >*
SigningInput::mutable_cell() {
  // @@protoc_insertion_point(field_mutable_list:TW.Nervos.Proto.SigningInput.cell)
  return &cell_;
}
inline const ::TW::Nervos::Proto::Cell& SigningInput::_internal_cell(int index) const {
  return cell_.Get(index);
}
inline const ::TW::Nervos::Proto::Cell& SigningInput::cell(int index) const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningInput.cell)
  return _internal_cell(index);
}
inline ::TW::Nervos::Proto::Cell* SigningInput::_internal_add_cell() {
  return cell_.Add();
}
inline ::TW::Nervos::Proto::Cell* SigningInput::add_cell() {
  // @@protoc_insertion_point(field_add:TW.Nervos.Proto.SigningInput.cell)
  return _internal_add_cell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Nervos::Proto::Cell >&
SigningInput::cell() const {
  // @@protoc_insertion_point(field_list:TW.Nervos.Proto.SigningInput.cell)
  return cell_;
}

// .TW.Nervos.Proto.TransactionPlan plan = 4;
inline bool SigningInput::_internal_has_plan() const {
  return this != internal_default_instance() && plan_ != nullptr;
}
inline bool SigningInput::has_plan() const {
  return _internal_has_plan();
}
inline void SigningInput::clear_plan() {
  if (GetArena() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
}
inline const ::TW::Nervos::Proto::TransactionPlan& SigningInput::_internal_plan() const {
  const ::TW::Nervos::Proto::TransactionPlan* p = plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::TransactionPlan&>(
      ::TW::Nervos::Proto::_TransactionPlan_default_instance_);
}
inline const ::TW::Nervos::Proto::TransactionPlan& SigningInput::plan() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningInput.plan)
  return _internal_plan();
}
inline void SigningInput::unsafe_arena_set_allocated_plan(
    ::TW::Nervos::Proto::TransactionPlan* plan) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan_);
  }
  plan_ = plan;
  if (plan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.SigningInput.plan)
}
inline ::TW::Nervos::Proto::TransactionPlan* SigningInput::release_plan() {
  
  ::TW::Nervos::Proto::TransactionPlan* temp = plan_;
  plan_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::TransactionPlan* SigningInput::unsafe_arena_release_plan() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SigningInput.plan)
  
  ::TW::Nervos::Proto::TransactionPlan* temp = plan_;
  plan_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::TransactionPlan* SigningInput::_internal_mutable_plan() {
  
  if (plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::TransactionPlan>(GetArena());
    plan_ = p;
  }
  return plan_;
}
inline ::TW::Nervos::Proto::TransactionPlan* SigningInput::mutable_plan() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningInput.plan)
  return _internal_mutable_plan();
}
inline void SigningInput::set_allocated_plan(::TW::Nervos::Proto::TransactionPlan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete plan_;
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plan);
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SigningInput.plan)
}

// .TW.Nervos.Proto.NativeTransfer native_transfer = 5;
inline bool SigningInput::_internal_has_native_transfer() const {
  return operation_oneof_case() == kNativeTransfer;
}
inline bool SigningInput::has_native_transfer() const {
  return _internal_has_native_transfer();
}
inline void SigningInput::set_has_native_transfer() {
  _oneof_case_[0] = kNativeTransfer;
}
inline void SigningInput::clear_native_transfer() {
  if (_internal_has_native_transfer()) {
    if (GetArena() == nullptr) {
      delete operation_oneof_.native_transfer_;
    }
    clear_has_operation_oneof();
  }
}
inline ::TW::Nervos::Proto::NativeTransfer* SigningInput::release_native_transfer() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SigningInput.native_transfer)
  if (_internal_has_native_transfer()) {
    clear_has_operation_oneof();
      ::TW::Nervos::Proto::NativeTransfer* temp = operation_oneof_.native_transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_oneof_.native_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Nervos::Proto::NativeTransfer& SigningInput::_internal_native_transfer() const {
  return _internal_has_native_transfer()
      ? *operation_oneof_.native_transfer_
      : reinterpret_cast< ::TW::Nervos::Proto::NativeTransfer&>(::TW::Nervos::Proto::_NativeTransfer_default_instance_);
}
inline const ::TW::Nervos::Proto::NativeTransfer& SigningInput::native_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningInput.native_transfer)
  return _internal_native_transfer();
}
inline ::TW::Nervos::Proto::NativeTransfer* SigningInput::unsafe_arena_release_native_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Nervos.Proto.SigningInput.native_transfer)
  if (_internal_has_native_transfer()) {
    clear_has_operation_oneof();
    ::TW::Nervos::Proto::NativeTransfer* temp = operation_oneof_.native_transfer_;
    operation_oneof_.native_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_native_transfer(::TW::Nervos::Proto::NativeTransfer* native_transfer) {
  clear_operation_oneof();
  if (native_transfer) {
    set_has_native_transfer();
    operation_oneof_.native_transfer_ = native_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.SigningInput.native_transfer)
}
inline ::TW::Nervos::Proto::NativeTransfer* SigningInput::_internal_mutable_native_transfer() {
  if (!_internal_has_native_transfer()) {
    clear_operation_oneof();
    set_has_native_transfer();
    operation_oneof_.native_transfer_ = CreateMaybeMessage< ::TW::Nervos::Proto::NativeTransfer >(GetArena());
  }
  return operation_oneof_.native_transfer_;
}
inline ::TW::Nervos::Proto::NativeTransfer* SigningInput::mutable_native_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningInput.native_transfer)
  return _internal_mutable_native_transfer();
}

// .TW.Nervos.Proto.SudtTransfer sudt_transfer = 6;
inline bool SigningInput::_internal_has_sudt_transfer() const {
  return operation_oneof_case() == kSudtTransfer;
}
inline bool SigningInput::has_sudt_transfer() const {
  return _internal_has_sudt_transfer();
}
inline void SigningInput::set_has_sudt_transfer() {
  _oneof_case_[0] = kSudtTransfer;
}
inline void SigningInput::clear_sudt_transfer() {
  if (_internal_has_sudt_transfer()) {
    if (GetArena() == nullptr) {
      delete operation_oneof_.sudt_transfer_;
    }
    clear_has_operation_oneof();
  }
}
inline ::TW::Nervos::Proto::SudtTransfer* SigningInput::release_sudt_transfer() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SigningInput.sudt_transfer)
  if (_internal_has_sudt_transfer()) {
    clear_has_operation_oneof();
      ::TW::Nervos::Proto::SudtTransfer* temp = operation_oneof_.sudt_transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_oneof_.sudt_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Nervos::Proto::SudtTransfer& SigningInput::_internal_sudt_transfer() const {
  return _internal_has_sudt_transfer()
      ? *operation_oneof_.sudt_transfer_
      : reinterpret_cast< ::TW::Nervos::Proto::SudtTransfer&>(::TW::Nervos::Proto::_SudtTransfer_default_instance_);
}
inline const ::TW::Nervos::Proto::SudtTransfer& SigningInput::sudt_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningInput.sudt_transfer)
  return _internal_sudt_transfer();
}
inline ::TW::Nervos::Proto::SudtTransfer* SigningInput::unsafe_arena_release_sudt_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Nervos.Proto.SigningInput.sudt_transfer)
  if (_internal_has_sudt_transfer()) {
    clear_has_operation_oneof();
    ::TW::Nervos::Proto::SudtTransfer* temp = operation_oneof_.sudt_transfer_;
    operation_oneof_.sudt_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_sudt_transfer(::TW::Nervos::Proto::SudtTransfer* sudt_transfer) {
  clear_operation_oneof();
  if (sudt_transfer) {
    set_has_sudt_transfer();
    operation_oneof_.sudt_transfer_ = sudt_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.SigningInput.sudt_transfer)
}
inline ::TW::Nervos::Proto::SudtTransfer* SigningInput::_internal_mutable_sudt_transfer() {
  if (!_internal_has_sudt_transfer()) {
    clear_operation_oneof();
    set_has_sudt_transfer();
    operation_oneof_.sudt_transfer_ = CreateMaybeMessage< ::TW::Nervos::Proto::SudtTransfer >(GetArena());
  }
  return operation_oneof_.sudt_transfer_;
}
inline ::TW::Nervos::Proto::SudtTransfer* SigningInput::mutable_sudt_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningInput.sudt_transfer)
  return _internal_mutable_sudt_transfer();
}

// .TW.Nervos.Proto.DaoDeposit dao_deposit = 7;
inline bool SigningInput::_internal_has_dao_deposit() const {
  return operation_oneof_case() == kDaoDeposit;
}
inline bool SigningInput::has_dao_deposit() const {
  return _internal_has_dao_deposit();
}
inline void SigningInput::set_has_dao_deposit() {
  _oneof_case_[0] = kDaoDeposit;
}
inline void SigningInput::clear_dao_deposit() {
  if (_internal_has_dao_deposit()) {
    if (GetArena() == nullptr) {
      delete operation_oneof_.dao_deposit_;
    }
    clear_has_operation_oneof();
  }
}
inline ::TW::Nervos::Proto::DaoDeposit* SigningInput::release_dao_deposit() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SigningInput.dao_deposit)
  if (_internal_has_dao_deposit()) {
    clear_has_operation_oneof();
      ::TW::Nervos::Proto::DaoDeposit* temp = operation_oneof_.dao_deposit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_oneof_.dao_deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Nervos::Proto::DaoDeposit& SigningInput::_internal_dao_deposit() const {
  return _internal_has_dao_deposit()
      ? *operation_oneof_.dao_deposit_
      : reinterpret_cast< ::TW::Nervos::Proto::DaoDeposit&>(::TW::Nervos::Proto::_DaoDeposit_default_instance_);
}
inline const ::TW::Nervos::Proto::DaoDeposit& SigningInput::dao_deposit() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningInput.dao_deposit)
  return _internal_dao_deposit();
}
inline ::TW::Nervos::Proto::DaoDeposit* SigningInput::unsafe_arena_release_dao_deposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Nervos.Proto.SigningInput.dao_deposit)
  if (_internal_has_dao_deposit()) {
    clear_has_operation_oneof();
    ::TW::Nervos::Proto::DaoDeposit* temp = operation_oneof_.dao_deposit_;
    operation_oneof_.dao_deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_dao_deposit(::TW::Nervos::Proto::DaoDeposit* dao_deposit) {
  clear_operation_oneof();
  if (dao_deposit) {
    set_has_dao_deposit();
    operation_oneof_.dao_deposit_ = dao_deposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.SigningInput.dao_deposit)
}
inline ::TW::Nervos::Proto::DaoDeposit* SigningInput::_internal_mutable_dao_deposit() {
  if (!_internal_has_dao_deposit()) {
    clear_operation_oneof();
    set_has_dao_deposit();
    operation_oneof_.dao_deposit_ = CreateMaybeMessage< ::TW::Nervos::Proto::DaoDeposit >(GetArena());
  }
  return operation_oneof_.dao_deposit_;
}
inline ::TW::Nervos::Proto::DaoDeposit* SigningInput::mutable_dao_deposit() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningInput.dao_deposit)
  return _internal_mutable_dao_deposit();
}

// .TW.Nervos.Proto.DaoWithdrawPhase1 dao_withdraw_phase1 = 8;
inline bool SigningInput::_internal_has_dao_withdraw_phase1() const {
  return operation_oneof_case() == kDaoWithdrawPhase1;
}
inline bool SigningInput::has_dao_withdraw_phase1() const {
  return _internal_has_dao_withdraw_phase1();
}
inline void SigningInput::set_has_dao_withdraw_phase1() {
  _oneof_case_[0] = kDaoWithdrawPhase1;
}
inline void SigningInput::clear_dao_withdraw_phase1() {
  if (_internal_has_dao_withdraw_phase1()) {
    if (GetArena() == nullptr) {
      delete operation_oneof_.dao_withdraw_phase1_;
    }
    clear_has_operation_oneof();
  }
}
inline ::TW::Nervos::Proto::DaoWithdrawPhase1* SigningInput::release_dao_withdraw_phase1() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SigningInput.dao_withdraw_phase1)
  if (_internal_has_dao_withdraw_phase1()) {
    clear_has_operation_oneof();
      ::TW::Nervos::Proto::DaoWithdrawPhase1* temp = operation_oneof_.dao_withdraw_phase1_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_oneof_.dao_withdraw_phase1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Nervos::Proto::DaoWithdrawPhase1& SigningInput::_internal_dao_withdraw_phase1() const {
  return _internal_has_dao_withdraw_phase1()
      ? *operation_oneof_.dao_withdraw_phase1_
      : reinterpret_cast< ::TW::Nervos::Proto::DaoWithdrawPhase1&>(::TW::Nervos::Proto::_DaoWithdrawPhase1_default_instance_);
}
inline const ::TW::Nervos::Proto::DaoWithdrawPhase1& SigningInput::dao_withdraw_phase1() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningInput.dao_withdraw_phase1)
  return _internal_dao_withdraw_phase1();
}
inline ::TW::Nervos::Proto::DaoWithdrawPhase1* SigningInput::unsafe_arena_release_dao_withdraw_phase1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Nervos.Proto.SigningInput.dao_withdraw_phase1)
  if (_internal_has_dao_withdraw_phase1()) {
    clear_has_operation_oneof();
    ::TW::Nervos::Proto::DaoWithdrawPhase1* temp = operation_oneof_.dao_withdraw_phase1_;
    operation_oneof_.dao_withdraw_phase1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_dao_withdraw_phase1(::TW::Nervos::Proto::DaoWithdrawPhase1* dao_withdraw_phase1) {
  clear_operation_oneof();
  if (dao_withdraw_phase1) {
    set_has_dao_withdraw_phase1();
    operation_oneof_.dao_withdraw_phase1_ = dao_withdraw_phase1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.SigningInput.dao_withdraw_phase1)
}
inline ::TW::Nervos::Proto::DaoWithdrawPhase1* SigningInput::_internal_mutable_dao_withdraw_phase1() {
  if (!_internal_has_dao_withdraw_phase1()) {
    clear_operation_oneof();
    set_has_dao_withdraw_phase1();
    operation_oneof_.dao_withdraw_phase1_ = CreateMaybeMessage< ::TW::Nervos::Proto::DaoWithdrawPhase1 >(GetArena());
  }
  return operation_oneof_.dao_withdraw_phase1_;
}
inline ::TW::Nervos::Proto::DaoWithdrawPhase1* SigningInput::mutable_dao_withdraw_phase1() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningInput.dao_withdraw_phase1)
  return _internal_mutable_dao_withdraw_phase1();
}

// .TW.Nervos.Proto.DaoWithdrawPhase2 dao_withdraw_phase2 = 9;
inline bool SigningInput::_internal_has_dao_withdraw_phase2() const {
  return operation_oneof_case() == kDaoWithdrawPhase2;
}
inline bool SigningInput::has_dao_withdraw_phase2() const {
  return _internal_has_dao_withdraw_phase2();
}
inline void SigningInput::set_has_dao_withdraw_phase2() {
  _oneof_case_[0] = kDaoWithdrawPhase2;
}
inline void SigningInput::clear_dao_withdraw_phase2() {
  if (_internal_has_dao_withdraw_phase2()) {
    if (GetArena() == nullptr) {
      delete operation_oneof_.dao_withdraw_phase2_;
    }
    clear_has_operation_oneof();
  }
}
inline ::TW::Nervos::Proto::DaoWithdrawPhase2* SigningInput::release_dao_withdraw_phase2() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SigningInput.dao_withdraw_phase2)
  if (_internal_has_dao_withdraw_phase2()) {
    clear_has_operation_oneof();
      ::TW::Nervos::Proto::DaoWithdrawPhase2* temp = operation_oneof_.dao_withdraw_phase2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_oneof_.dao_withdraw_phase2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Nervos::Proto::DaoWithdrawPhase2& SigningInput::_internal_dao_withdraw_phase2() const {
  return _internal_has_dao_withdraw_phase2()
      ? *operation_oneof_.dao_withdraw_phase2_
      : reinterpret_cast< ::TW::Nervos::Proto::DaoWithdrawPhase2&>(::TW::Nervos::Proto::_DaoWithdrawPhase2_default_instance_);
}
inline const ::TW::Nervos::Proto::DaoWithdrawPhase2& SigningInput::dao_withdraw_phase2() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningInput.dao_withdraw_phase2)
  return _internal_dao_withdraw_phase2();
}
inline ::TW::Nervos::Proto::DaoWithdrawPhase2* SigningInput::unsafe_arena_release_dao_withdraw_phase2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Nervos.Proto.SigningInput.dao_withdraw_phase2)
  if (_internal_has_dao_withdraw_phase2()) {
    clear_has_operation_oneof();
    ::TW::Nervos::Proto::DaoWithdrawPhase2* temp = operation_oneof_.dao_withdraw_phase2_;
    operation_oneof_.dao_withdraw_phase2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_dao_withdraw_phase2(::TW::Nervos::Proto::DaoWithdrawPhase2* dao_withdraw_phase2) {
  clear_operation_oneof();
  if (dao_withdraw_phase2) {
    set_has_dao_withdraw_phase2();
    operation_oneof_.dao_withdraw_phase2_ = dao_withdraw_phase2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.SigningInput.dao_withdraw_phase2)
}
inline ::TW::Nervos::Proto::DaoWithdrawPhase2* SigningInput::_internal_mutable_dao_withdraw_phase2() {
  if (!_internal_has_dao_withdraw_phase2()) {
    clear_operation_oneof();
    set_has_dao_withdraw_phase2();
    operation_oneof_.dao_withdraw_phase2_ = CreateMaybeMessage< ::TW::Nervos::Proto::DaoWithdrawPhase2 >(GetArena());
  }
  return operation_oneof_.dao_withdraw_phase2_;
}
inline ::TW::Nervos::Proto::DaoWithdrawPhase2* SigningInput::mutable_dao_withdraw_phase2() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningInput.dao_withdraw_phase2)
  return _internal_mutable_dao_withdraw_phase2();
}

inline bool SigningInput::has_operation_oneof() const {
  return operation_oneof_case() != OPERATION_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_operation_oneof() {
  _oneof_case_[0] = OPERATION_ONEOF_NOT_SET;
}
inline SigningInput::OperationOneofCase SigningInput::operation_oneof_case() const {
  return SigningInput::OperationOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Cell

// .TW.Nervos.Proto.OutPoint out_point = 1;
inline bool Cell::_internal_has_out_point() const {
  return this != internal_default_instance() && out_point_ != nullptr;
}
inline bool Cell::has_out_point() const {
  return _internal_has_out_point();
}
inline void Cell::clear_out_point() {
  if (GetArena() == nullptr && out_point_ != nullptr) {
    delete out_point_;
  }
  out_point_ = nullptr;
}
inline const ::TW::Nervos::Proto::OutPoint& Cell::_internal_out_point() const {
  const ::TW::Nervos::Proto::OutPoint* p = out_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::OutPoint&>(
      ::TW::Nervos::Proto::_OutPoint_default_instance_);
}
inline const ::TW::Nervos::Proto::OutPoint& Cell::out_point() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.out_point)
  return _internal_out_point();
}
inline void Cell::unsafe_arena_set_allocated_out_point(
    ::TW::Nervos::Proto::OutPoint* out_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_point_);
  }
  out_point_ = out_point;
  if (out_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.Cell.out_point)
}
inline ::TW::Nervos::Proto::OutPoint* Cell::release_out_point() {
  
  ::TW::Nervos::Proto::OutPoint* temp = out_point_;
  out_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::OutPoint* Cell::unsafe_arena_release_out_point() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Cell.out_point)
  
  ::TW::Nervos::Proto::OutPoint* temp = out_point_;
  out_point_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::OutPoint* Cell::_internal_mutable_out_point() {
  
  if (out_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::OutPoint>(GetArena());
    out_point_ = p;
  }
  return out_point_;
}
inline ::TW::Nervos::Proto::OutPoint* Cell::mutable_out_point() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Cell.out_point)
  return _internal_mutable_out_point();
}
inline void Cell::set_allocated_out_point(::TW::Nervos::Proto::OutPoint* out_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete out_point_;
  }
  if (out_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(out_point);
    if (message_arena != submessage_arena) {
      out_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, out_point, submessage_arena);
    }
    
  } else {
    
  }
  out_point_ = out_point;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Cell.out_point)
}

// uint64 capacity = 2;
inline void Cell::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::capacity() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.capacity)
  return _internal_capacity();
}
inline void Cell::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
}
inline void Cell::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Cell.capacity)
}

// .TW.Nervos.Proto.Script lock = 3;
inline bool Cell::_internal_has_lock() const {
  return this != internal_default_instance() && lock_ != nullptr;
}
inline bool Cell::has_lock() const {
  return _internal_has_lock();
}
inline void Cell::clear_lock() {
  if (GetArena() == nullptr && lock_ != nullptr) {
    delete lock_;
  }
  lock_ = nullptr;
}
inline const ::TW::Nervos::Proto::Script& Cell::_internal_lock() const {
  const ::TW::Nervos::Proto::Script* p = lock_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::Script&>(
      ::TW::Nervos::Proto::_Script_default_instance_);
}
inline const ::TW::Nervos::Proto::Script& Cell::lock() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.lock)
  return _internal_lock();
}
inline void Cell::unsafe_arena_set_allocated_lock(
    ::TW::Nervos::Proto::Script* lock) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_);
  }
  lock_ = lock;
  if (lock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.Cell.lock)
}
inline ::TW::Nervos::Proto::Script* Cell::release_lock() {
  
  ::TW::Nervos::Proto::Script* temp = lock_;
  lock_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::Script* Cell::unsafe_arena_release_lock() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Cell.lock)
  
  ::TW::Nervos::Proto::Script* temp = lock_;
  lock_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::Script* Cell::_internal_mutable_lock() {
  
  if (lock_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::Script>(GetArena());
    lock_ = p;
  }
  return lock_;
}
inline ::TW::Nervos::Proto::Script* Cell::mutable_lock() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Cell.lock)
  return _internal_mutable_lock();
}
inline void Cell::set_allocated_lock(::TW::Nervos::Proto::Script* lock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lock_;
  }
  if (lock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lock);
    if (message_arena != submessage_arena) {
      lock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock, submessage_arena);
    }
    
  } else {
    
  }
  lock_ = lock;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Cell.lock)
}

// .TW.Nervos.Proto.Script type = 4;
inline bool Cell::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool Cell::has_type() const {
  return _internal_has_type();
}
inline void Cell::clear_type() {
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::TW::Nervos::Proto::Script& Cell::_internal_type() const {
  const ::TW::Nervos::Proto::Script* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Nervos::Proto::Script&>(
      ::TW::Nervos::Proto::_Script_default_instance_);
}
inline const ::TW::Nervos::Proto::Script& Cell::type() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.type)
  return _internal_type();
}
inline void Cell::unsafe_arena_set_allocated_type(
    ::TW::Nervos::Proto::Script* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Nervos.Proto.Cell.type)
}
inline ::TW::Nervos::Proto::Script* Cell::release_type() {
  
  ::TW::Nervos::Proto::Script* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Nervos::Proto::Script* Cell::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Cell.type)
  
  ::TW::Nervos::Proto::Script* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::TW::Nervos::Proto::Script* Cell::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Nervos::Proto::Script>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::TW::Nervos::Proto::Script* Cell::mutable_type() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Cell.type)
  return _internal_mutable_type();
}
inline void Cell::set_allocated_type(::TW::Nervos::Proto::Script* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Cell.type)
}

// bytes data = 5;
inline void Cell::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Cell::data() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.data)
  return _internal_data();
}
inline void Cell::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Cell.data)
}
inline std::string* Cell::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Cell.data)
  return _internal_mutable_data();
}
inline const std::string& Cell::_internal_data() const {
  return data_.Get();
}
inline void Cell::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.Cell.data)
}
inline void Cell::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.Cell.data)
}
inline void Cell::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.Cell.data)
}
inline std::string* Cell::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_data() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Cell.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Cell.data)
}

// uint64 block_number = 6;
inline void Cell::clear_block_number() {
  block_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::_internal_block_number() const {
  return block_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::block_number() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.block_number)
  return _internal_block_number();
}
inline void Cell::_internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_number_ = value;
}
inline void Cell::set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Cell.block_number)
}

// bytes block_hash = 7;
inline void Cell::clear_block_hash() {
  block_hash_.ClearToEmpty();
}
inline const std::string& Cell::block_hash() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.block_hash)
  return _internal_block_hash();
}
inline void Cell::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Cell.block_hash)
}
inline std::string* Cell::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Cell.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& Cell::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void Cell::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_block_hash(std::string&& value) {
  
  block_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.Cell.block_hash)
}
inline void Cell::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.Cell.block_hash)
}
inline void Cell::set_block_hash(const void* value,
    size_t size) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.Cell.block_hash)
}
inline std::string* Cell::_internal_mutable_block_hash() {
  
  return block_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_block_hash() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Cell.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Cell.block_hash)
}

// uint64 since = 8;
inline void Cell::clear_since() {
  since_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::_internal_since() const {
  return since_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::since() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.since)
  return _internal_since();
}
inline void Cell::_internal_set_since(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  since_ = value;
}
inline void Cell::set_since(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_since(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Cell.since)
}

// bytes input_type = 9;
inline void Cell::clear_input_type() {
  input_type_.ClearToEmpty();
}
inline const std::string& Cell::input_type() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.input_type)
  return _internal_input_type();
}
inline void Cell::set_input_type(const std::string& value) {
  _internal_set_input_type(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Cell.input_type)
}
inline std::string* Cell::mutable_input_type() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Cell.input_type)
  return _internal_mutable_input_type();
}
inline const std::string& Cell::_internal_input_type() const {
  return input_type_.Get();
}
inline void Cell::_internal_set_input_type(const std::string& value) {
  
  input_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_input_type(std::string&& value) {
  
  input_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.Cell.input_type)
}
inline void Cell::set_input_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.Cell.input_type)
}
inline void Cell::set_input_type(const void* value,
    size_t size) {
  
  input_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.Cell.input_type)
}
inline std::string* Cell::_internal_mutable_input_type() {
  
  return input_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_input_type() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Cell.input_type)
  return input_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_input_type(std::string* input_type) {
  if (input_type != nullptr) {
    
  } else {
    
  }
  input_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Cell.input_type)
}

// bytes output_type = 10;
inline void Cell::clear_output_type() {
  output_type_.ClearToEmpty();
}
inline const std::string& Cell::output_type() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.Cell.output_type)
  return _internal_output_type();
}
inline void Cell::set_output_type(const std::string& value) {
  _internal_set_output_type(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.Cell.output_type)
}
inline std::string* Cell::mutable_output_type() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.Cell.output_type)
  return _internal_mutable_output_type();
}
inline const std::string& Cell::_internal_output_type() const {
  return output_type_.Get();
}
inline void Cell::_internal_set_output_type(const std::string& value) {
  
  output_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_output_type(std::string&& value) {
  
  output_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.Cell.output_type)
}
inline void Cell::set_output_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.Cell.output_type)
}
inline void Cell::set_output_type(const void* value,
    size_t size) {
  
  output_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.Cell.output_type)
}
inline std::string* Cell::_internal_mutable_output_type() {
  
  return output_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_output_type() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.Cell.output_type)
  return output_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_output_type(std::string* output_type) {
  if (output_type != nullptr) {
    
  } else {
    
  }
  output_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.Cell.output_type)
}

// -------------------------------------------------------------------

// SigningOutput

// string transaction_json = 1;
inline void SigningOutput::clear_transaction_json() {
  transaction_json_.ClearToEmpty();
}
inline const std::string& SigningOutput::transaction_json() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningOutput.transaction_json)
  return _internal_transaction_json();
}
inline void SigningOutput::set_transaction_json(const std::string& value) {
  _internal_set_transaction_json(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SigningOutput.transaction_json)
}
inline std::string* SigningOutput::mutable_transaction_json() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningOutput.transaction_json)
  return _internal_mutable_transaction_json();
}
inline const std::string& SigningOutput::_internal_transaction_json() const {
  return transaction_json_.Get();
}
inline void SigningOutput::_internal_set_transaction_json(const std::string& value) {
  
  transaction_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_transaction_json(std::string&& value) {
  
  transaction_json_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.SigningOutput.transaction_json)
}
inline void SigningOutput::set_transaction_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.SigningOutput.transaction_json)
}
inline void SigningOutput::set_transaction_json(const char* value,
    size_t size) {
  
  transaction_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.SigningOutput.transaction_json)
}
inline std::string* SigningOutput::_internal_mutable_transaction_json() {
  
  return transaction_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_transaction_json() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SigningOutput.transaction_json)
  return transaction_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_transaction_json(std::string* transaction_json) {
  if (transaction_json != nullptr) {
    
  } else {
    
  }
  transaction_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SigningOutput.transaction_json)
}

// string transaction_id = 2;
inline void SigningOutput::clear_transaction_id() {
  transaction_id_.ClearToEmpty();
}
inline const std::string& SigningOutput::transaction_id() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningOutput.transaction_id)
  return _internal_transaction_id();
}
inline void SigningOutput::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SigningOutput.transaction_id)
}
inline std::string* SigningOutput::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:TW.Nervos.Proto.SigningOutput.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& SigningOutput::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void SigningOutput::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_transaction_id(std::string&& value) {
  
  transaction_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nervos.Proto.SigningOutput.transaction_id)
}
inline void SigningOutput::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nervos.Proto.SigningOutput.transaction_id)
}
inline void SigningOutput::set_transaction_id(const char* value,
    size_t size) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nervos.Proto.SigningOutput.transaction_id)
}
inline std::string* SigningOutput::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_transaction_id() {
  // @@protoc_insertion_point(field_release:TW.Nervos.Proto.SigningOutput.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SigningOutput.transaction_id)
}

// .TW.Common.Proto.SigningError error = 3;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Nervos.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Nervos.Proto.SigningOutput.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Nervos
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Nervos_2eproto
