// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FIO.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FIO_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FIO_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FIO_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FIO_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FIO_2eproto;
namespace TW {
namespace FIO {
namespace Proto {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Action_AddPubAddress;
class Action_AddPubAddressDefaultTypeInternal;
extern Action_AddPubAddressDefaultTypeInternal _Action_AddPubAddress_default_instance_;
class Action_NewFundsRequest;
class Action_NewFundsRequestDefaultTypeInternal;
extern Action_NewFundsRequestDefaultTypeInternal _Action_NewFundsRequest_default_instance_;
class Action_RegisterFioAddress;
class Action_RegisterFioAddressDefaultTypeInternal;
extern Action_RegisterFioAddressDefaultTypeInternal _Action_RegisterFioAddress_default_instance_;
class Action_RenewFioAddress;
class Action_RenewFioAddressDefaultTypeInternal;
extern Action_RenewFioAddressDefaultTypeInternal _Action_RenewFioAddress_default_instance_;
class Action_Transfer;
class Action_TransferDefaultTypeInternal;
extern Action_TransferDefaultTypeInternal _Action_Transfer_default_instance_;
class ChainParams;
class ChainParamsDefaultTypeInternal;
extern ChainParamsDefaultTypeInternal _ChainParams_default_instance_;
class NewFundsContent;
class NewFundsContentDefaultTypeInternal;
extern NewFundsContentDefaultTypeInternal _NewFundsContent_default_instance_;
class PublicAddress;
class PublicAddressDefaultTypeInternal;
extern PublicAddressDefaultTypeInternal _PublicAddress_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace FIO
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::FIO::Proto::Action* Arena::CreateMaybeMessage<::TW::FIO::Proto::Action>(Arena*);
template<> ::TW::FIO::Proto::Action_AddPubAddress* Arena::CreateMaybeMessage<::TW::FIO::Proto::Action_AddPubAddress>(Arena*);
template<> ::TW::FIO::Proto::Action_NewFundsRequest* Arena::CreateMaybeMessage<::TW::FIO::Proto::Action_NewFundsRequest>(Arena*);
template<> ::TW::FIO::Proto::Action_RegisterFioAddress* Arena::CreateMaybeMessage<::TW::FIO::Proto::Action_RegisterFioAddress>(Arena*);
template<> ::TW::FIO::Proto::Action_RenewFioAddress* Arena::CreateMaybeMessage<::TW::FIO::Proto::Action_RenewFioAddress>(Arena*);
template<> ::TW::FIO::Proto::Action_Transfer* Arena::CreateMaybeMessage<::TW::FIO::Proto::Action_Transfer>(Arena*);
template<> ::TW::FIO::Proto::ChainParams* Arena::CreateMaybeMessage<::TW::FIO::Proto::ChainParams>(Arena*);
template<> ::TW::FIO::Proto::NewFundsContent* Arena::CreateMaybeMessage<::TW::FIO::Proto::NewFundsContent>(Arena*);
template<> ::TW::FIO::Proto::PublicAddress* Arena::CreateMaybeMessage<::TW::FIO::Proto::PublicAddress>(Arena*);
template<> ::TW::FIO::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::FIO::Proto::SigningInput>(Arena*);
template<> ::TW::FIO::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::FIO::Proto::SigningOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace FIO {
namespace Proto {

// ===================================================================

class PublicAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.PublicAddress) */ {
 public:
  inline PublicAddress() : PublicAddress(nullptr) {}
  virtual ~PublicAddress();

  PublicAddress(const PublicAddress& from);
  PublicAddress(PublicAddress&& from) noexcept
    : PublicAddress() {
    *this = ::std::move(from);
  }

  inline PublicAddress& operator=(const PublicAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicAddress& operator=(PublicAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicAddress& default_instance();

  static inline const PublicAddress* internal_default_instance() {
    return reinterpret_cast<const PublicAddress*>(
               &_PublicAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicAddress& a, PublicAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicAddress* New() const final {
    return CreateMaybeMessage<PublicAddress>(nullptr);
  }

  PublicAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicAddress& from);
  void MergeFrom(const PublicAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.PublicAddress";
  }
  protected:
  explicit PublicAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinSymbolFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string coin_symbol = 1;
  void clear_coin_symbol();
  const std::string& coin_symbol() const;
  void set_coin_symbol(const std::string& value);
  void set_coin_symbol(std::string&& value);
  void set_coin_symbol(const char* value);
  void set_coin_symbol(const char* value, size_t size);
  std::string* mutable_coin_symbol();
  std::string* release_coin_symbol();
  void set_allocated_coin_symbol(std::string* coin_symbol);
  private:
  const std::string& _internal_coin_symbol() const;
  void _internal_set_coin_symbol(const std::string& value);
  std::string* _internal_mutable_coin_symbol();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.PublicAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class NewFundsContent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.NewFundsContent) */ {
 public:
  inline NewFundsContent() : NewFundsContent(nullptr) {}
  virtual ~NewFundsContent();

  NewFundsContent(const NewFundsContent& from);
  NewFundsContent(NewFundsContent&& from) noexcept
    : NewFundsContent() {
    *this = ::std::move(from);
  }

  inline NewFundsContent& operator=(const NewFundsContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFundsContent& operator=(NewFundsContent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewFundsContent& default_instance();

  static inline const NewFundsContent* internal_default_instance() {
    return reinterpret_cast<const NewFundsContent*>(
               &_NewFundsContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NewFundsContent& a, NewFundsContent& b) {
    a.Swap(&b);
  }
  inline void Swap(NewFundsContent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewFundsContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewFundsContent* New() const final {
    return CreateMaybeMessage<NewFundsContent>(nullptr);
  }

  NewFundsContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewFundsContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewFundsContent& from);
  void MergeFrom(const NewFundsContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFundsContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.NewFundsContent";
  }
  protected:
  explicit NewFundsContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayeePublicAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
    kCoinSymbolFieldNumber = 3,
    kMemoFieldNumber = 4,
    kHashFieldNumber = 5,
    kOfflineUrlFieldNumber = 6,
  };
  // string payee_public_address = 1;
  void clear_payee_public_address();
  const std::string& payee_public_address() const;
  void set_payee_public_address(const std::string& value);
  void set_payee_public_address(std::string&& value);
  void set_payee_public_address(const char* value);
  void set_payee_public_address(const char* value, size_t size);
  std::string* mutable_payee_public_address();
  std::string* release_payee_public_address();
  void set_allocated_payee_public_address(std::string* payee_public_address);
  private:
  const std::string& _internal_payee_public_address() const;
  void _internal_set_payee_public_address(const std::string& value);
  std::string* _internal_mutable_payee_public_address();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string coin_symbol = 3;
  void clear_coin_symbol();
  const std::string& coin_symbol() const;
  void set_coin_symbol(const std::string& value);
  void set_coin_symbol(std::string&& value);
  void set_coin_symbol(const char* value);
  void set_coin_symbol(const char* value, size_t size);
  std::string* mutable_coin_symbol();
  std::string* release_coin_symbol();
  void set_allocated_coin_symbol(std::string* coin_symbol);
  private:
  const std::string& _internal_coin_symbol() const;
  void _internal_set_coin_symbol(const std::string& value);
  std::string* _internal_mutable_coin_symbol();
  public:

  // string memo = 4;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // string hash = 5;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string offline_url = 6;
  void clear_offline_url();
  const std::string& offline_url() const;
  void set_offline_url(const std::string& value);
  void set_offline_url(std::string&& value);
  void set_offline_url(const char* value);
  void set_offline_url(const char* value, size_t size);
  std::string* mutable_offline_url();
  std::string* release_offline_url();
  void set_allocated_offline_url(std::string* offline_url);
  private:
  const std::string& _internal_offline_url() const;
  void _internal_set_offline_url(const std::string& value);
  std::string* _internal_mutable_offline_url();
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.NewFundsContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payee_public_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offline_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class Action_RegisterFioAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.Action.RegisterFioAddress) */ {
 public:
  inline Action_RegisterFioAddress() : Action_RegisterFioAddress(nullptr) {}
  virtual ~Action_RegisterFioAddress();

  Action_RegisterFioAddress(const Action_RegisterFioAddress& from);
  Action_RegisterFioAddress(Action_RegisterFioAddress&& from) noexcept
    : Action_RegisterFioAddress() {
    *this = ::std::move(from);
  }

  inline Action_RegisterFioAddress& operator=(const Action_RegisterFioAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action_RegisterFioAddress& operator=(Action_RegisterFioAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action_RegisterFioAddress& default_instance();

  static inline const Action_RegisterFioAddress* internal_default_instance() {
    return reinterpret_cast<const Action_RegisterFioAddress*>(
               &_Action_RegisterFioAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Action_RegisterFioAddress& a, Action_RegisterFioAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(Action_RegisterFioAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action_RegisterFioAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action_RegisterFioAddress* New() const final {
    return CreateMaybeMessage<Action_RegisterFioAddress>(nullptr);
  }

  Action_RegisterFioAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action_RegisterFioAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action_RegisterFioAddress& from);
  void MergeFrom(const Action_RegisterFioAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_RegisterFioAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.Action.RegisterFioAddress";
  }
  protected:
  explicit Action_RegisterFioAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFioAddressFieldNumber = 1,
    kOwnerFioPublicKeyFieldNumber = 2,
    kFeeFieldNumber = 3,
  };
  // string fio_address = 1;
  void clear_fio_address();
  const std::string& fio_address() const;
  void set_fio_address(const std::string& value);
  void set_fio_address(std::string&& value);
  void set_fio_address(const char* value);
  void set_fio_address(const char* value, size_t size);
  std::string* mutable_fio_address();
  std::string* release_fio_address();
  void set_allocated_fio_address(std::string* fio_address);
  private:
  const std::string& _internal_fio_address() const;
  void _internal_set_fio_address(const std::string& value);
  std::string* _internal_mutable_fio_address();
  public:

  // string owner_fio_public_key = 2;
  void clear_owner_fio_public_key();
  const std::string& owner_fio_public_key() const;
  void set_owner_fio_public_key(const std::string& value);
  void set_owner_fio_public_key(std::string&& value);
  void set_owner_fio_public_key(const char* value);
  void set_owner_fio_public_key(const char* value, size_t size);
  std::string* mutable_owner_fio_public_key();
  std::string* release_owner_fio_public_key();
  void set_allocated_owner_fio_public_key(std::string* owner_fio_public_key);
  private:
  const std::string& _internal_owner_fio_public_key() const;
  void _internal_set_owner_fio_public_key(const std::string& value);
  std::string* _internal_mutable_owner_fio_public_key();
  public:

  // uint64 fee = 3;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.Action.RegisterFioAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fio_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_fio_public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class Action_AddPubAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.Action.AddPubAddress) */ {
 public:
  inline Action_AddPubAddress() : Action_AddPubAddress(nullptr) {}
  virtual ~Action_AddPubAddress();

  Action_AddPubAddress(const Action_AddPubAddress& from);
  Action_AddPubAddress(Action_AddPubAddress&& from) noexcept
    : Action_AddPubAddress() {
    *this = ::std::move(from);
  }

  inline Action_AddPubAddress& operator=(const Action_AddPubAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action_AddPubAddress& operator=(Action_AddPubAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action_AddPubAddress& default_instance();

  static inline const Action_AddPubAddress* internal_default_instance() {
    return reinterpret_cast<const Action_AddPubAddress*>(
               &_Action_AddPubAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Action_AddPubAddress& a, Action_AddPubAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(Action_AddPubAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action_AddPubAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action_AddPubAddress* New() const final {
    return CreateMaybeMessage<Action_AddPubAddress>(nullptr);
  }

  Action_AddPubAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action_AddPubAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action_AddPubAddress& from);
  void MergeFrom(const Action_AddPubAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_AddPubAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.Action.AddPubAddress";
  }
  protected:
  explicit Action_AddPubAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicAddressesFieldNumber = 2,
    kFioAddressFieldNumber = 1,
    kFeeFieldNumber = 3,
  };
  // repeated .TW.FIO.Proto.PublicAddress public_addresses = 2;
  int public_addresses_size() const;
  private:
  int _internal_public_addresses_size() const;
  public:
  void clear_public_addresses();
  ::TW::FIO::Proto::PublicAddress* mutable_public_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::FIO::Proto::PublicAddress >*
      mutable_public_addresses();
  private:
  const ::TW::FIO::Proto::PublicAddress& _internal_public_addresses(int index) const;
  ::TW::FIO::Proto::PublicAddress* _internal_add_public_addresses();
  public:
  const ::TW::FIO::Proto::PublicAddress& public_addresses(int index) const;
  ::TW::FIO::Proto::PublicAddress* add_public_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::FIO::Proto::PublicAddress >&
      public_addresses() const;

  // string fio_address = 1;
  void clear_fio_address();
  const std::string& fio_address() const;
  void set_fio_address(const std::string& value);
  void set_fio_address(std::string&& value);
  void set_fio_address(const char* value);
  void set_fio_address(const char* value, size_t size);
  std::string* mutable_fio_address();
  std::string* release_fio_address();
  void set_allocated_fio_address(std::string* fio_address);
  private:
  const std::string& _internal_fio_address() const;
  void _internal_set_fio_address(const std::string& value);
  std::string* _internal_mutable_fio_address();
  public:

  // uint64 fee = 3;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.Action.AddPubAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::FIO::Proto::PublicAddress > public_addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fio_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class Action_Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.Action.Transfer) */ {
 public:
  inline Action_Transfer() : Action_Transfer(nullptr) {}
  virtual ~Action_Transfer();

  Action_Transfer(const Action_Transfer& from);
  Action_Transfer(Action_Transfer&& from) noexcept
    : Action_Transfer() {
    *this = ::std::move(from);
  }

  inline Action_Transfer& operator=(const Action_Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action_Transfer& operator=(Action_Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action_Transfer& default_instance();

  static inline const Action_Transfer* internal_default_instance() {
    return reinterpret_cast<const Action_Transfer*>(
               &_Action_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Action_Transfer& a, Action_Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Action_Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action_Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action_Transfer* New() const final {
    return CreateMaybeMessage<Action_Transfer>(nullptr);
  }

  Action_Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action_Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action_Transfer& from);
  void MergeFrom(const Action_Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.Action.Transfer";
  }
  protected:
  explicit Action_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayeePublicKeyFieldNumber = 1,
    kAmountFieldNumber = 2,
    kFeeFieldNumber = 3,
  };
  // string payee_public_key = 1;
  void clear_payee_public_key();
  const std::string& payee_public_key() const;
  void set_payee_public_key(const std::string& value);
  void set_payee_public_key(std::string&& value);
  void set_payee_public_key(const char* value);
  void set_payee_public_key(const char* value, size_t size);
  std::string* mutable_payee_public_key();
  std::string* release_payee_public_key();
  void set_allocated_payee_public_key(std::string* payee_public_key);
  private:
  const std::string& _internal_payee_public_key() const;
  void _internal_set_payee_public_key(const std::string& value);
  std::string* _internal_mutable_payee_public_key();
  public:

  // uint64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fee = 3;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.Action.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payee_public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class Action_RenewFioAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.Action.RenewFioAddress) */ {
 public:
  inline Action_RenewFioAddress() : Action_RenewFioAddress(nullptr) {}
  virtual ~Action_RenewFioAddress();

  Action_RenewFioAddress(const Action_RenewFioAddress& from);
  Action_RenewFioAddress(Action_RenewFioAddress&& from) noexcept
    : Action_RenewFioAddress() {
    *this = ::std::move(from);
  }

  inline Action_RenewFioAddress& operator=(const Action_RenewFioAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action_RenewFioAddress& operator=(Action_RenewFioAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action_RenewFioAddress& default_instance();

  static inline const Action_RenewFioAddress* internal_default_instance() {
    return reinterpret_cast<const Action_RenewFioAddress*>(
               &_Action_RenewFioAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Action_RenewFioAddress& a, Action_RenewFioAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(Action_RenewFioAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action_RenewFioAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action_RenewFioAddress* New() const final {
    return CreateMaybeMessage<Action_RenewFioAddress>(nullptr);
  }

  Action_RenewFioAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action_RenewFioAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action_RenewFioAddress& from);
  void MergeFrom(const Action_RenewFioAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_RenewFioAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.Action.RenewFioAddress";
  }
  protected:
  explicit Action_RenewFioAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFioAddressFieldNumber = 1,
    kOwnerFioPublicKeyFieldNumber = 2,
    kFeeFieldNumber = 3,
  };
  // string fio_address = 1;
  void clear_fio_address();
  const std::string& fio_address() const;
  void set_fio_address(const std::string& value);
  void set_fio_address(std::string&& value);
  void set_fio_address(const char* value);
  void set_fio_address(const char* value, size_t size);
  std::string* mutable_fio_address();
  std::string* release_fio_address();
  void set_allocated_fio_address(std::string* fio_address);
  private:
  const std::string& _internal_fio_address() const;
  void _internal_set_fio_address(const std::string& value);
  std::string* _internal_mutable_fio_address();
  public:

  // string owner_fio_public_key = 2;
  void clear_owner_fio_public_key();
  const std::string& owner_fio_public_key() const;
  void set_owner_fio_public_key(const std::string& value);
  void set_owner_fio_public_key(std::string&& value);
  void set_owner_fio_public_key(const char* value);
  void set_owner_fio_public_key(const char* value, size_t size);
  std::string* mutable_owner_fio_public_key();
  std::string* release_owner_fio_public_key();
  void set_allocated_owner_fio_public_key(std::string* owner_fio_public_key);
  private:
  const std::string& _internal_owner_fio_public_key() const;
  void _internal_set_owner_fio_public_key(const std::string& value);
  std::string* _internal_mutable_owner_fio_public_key();
  public:

  // uint64 fee = 3;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.Action.RenewFioAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fio_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_fio_public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class Action_NewFundsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.Action.NewFundsRequest) */ {
 public:
  inline Action_NewFundsRequest() : Action_NewFundsRequest(nullptr) {}
  virtual ~Action_NewFundsRequest();

  Action_NewFundsRequest(const Action_NewFundsRequest& from);
  Action_NewFundsRequest(Action_NewFundsRequest&& from) noexcept
    : Action_NewFundsRequest() {
    *this = ::std::move(from);
  }

  inline Action_NewFundsRequest& operator=(const Action_NewFundsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action_NewFundsRequest& operator=(Action_NewFundsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action_NewFundsRequest& default_instance();

  static inline const Action_NewFundsRequest* internal_default_instance() {
    return reinterpret_cast<const Action_NewFundsRequest*>(
               &_Action_NewFundsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Action_NewFundsRequest& a, Action_NewFundsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Action_NewFundsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action_NewFundsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action_NewFundsRequest* New() const final {
    return CreateMaybeMessage<Action_NewFundsRequest>(nullptr);
  }

  Action_NewFundsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action_NewFundsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action_NewFundsRequest& from);
  void MergeFrom(const Action_NewFundsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_NewFundsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.Action.NewFundsRequest";
  }
  protected:
  explicit Action_NewFundsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayerFioNameFieldNumber = 1,
    kPayerFioAddressFieldNumber = 2,
    kPayeeFioNameFieldNumber = 3,
    kContentFieldNumber = 4,
    kFeeFieldNumber = 5,
  };
  // string payer_fio_name = 1;
  void clear_payer_fio_name();
  const std::string& payer_fio_name() const;
  void set_payer_fio_name(const std::string& value);
  void set_payer_fio_name(std::string&& value);
  void set_payer_fio_name(const char* value);
  void set_payer_fio_name(const char* value, size_t size);
  std::string* mutable_payer_fio_name();
  std::string* release_payer_fio_name();
  void set_allocated_payer_fio_name(std::string* payer_fio_name);
  private:
  const std::string& _internal_payer_fio_name() const;
  void _internal_set_payer_fio_name(const std::string& value);
  std::string* _internal_mutable_payer_fio_name();
  public:

  // string payer_fio_address = 2;
  void clear_payer_fio_address();
  const std::string& payer_fio_address() const;
  void set_payer_fio_address(const std::string& value);
  void set_payer_fio_address(std::string&& value);
  void set_payer_fio_address(const char* value);
  void set_payer_fio_address(const char* value, size_t size);
  std::string* mutable_payer_fio_address();
  std::string* release_payer_fio_address();
  void set_allocated_payer_fio_address(std::string* payer_fio_address);
  private:
  const std::string& _internal_payer_fio_address() const;
  void _internal_set_payer_fio_address(const std::string& value);
  std::string* _internal_mutable_payer_fio_address();
  public:

  // string payee_fio_name = 3;
  void clear_payee_fio_name();
  const std::string& payee_fio_name() const;
  void set_payee_fio_name(const std::string& value);
  void set_payee_fio_name(std::string&& value);
  void set_payee_fio_name(const char* value);
  void set_payee_fio_name(const char* value, size_t size);
  std::string* mutable_payee_fio_name();
  std::string* release_payee_fio_name();
  void set_allocated_payee_fio_name(std::string* payee_fio_name);
  private:
  const std::string& _internal_payee_fio_name() const;
  void _internal_set_payee_fio_name(const std::string& value);
  std::string* _internal_mutable_payee_fio_name();
  public:

  // .TW.FIO.Proto.NewFundsContent content = 4;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const ::TW::FIO::Proto::NewFundsContent& content() const;
  ::TW::FIO::Proto::NewFundsContent* release_content();
  ::TW::FIO::Proto::NewFundsContent* mutable_content();
  void set_allocated_content(::TW::FIO::Proto::NewFundsContent* content);
  private:
  const ::TW::FIO::Proto::NewFundsContent& _internal_content() const;
  ::TW::FIO::Proto::NewFundsContent* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      ::TW::FIO::Proto::NewFundsContent* content);
  ::TW::FIO::Proto::NewFundsContent* unsafe_arena_release_content();

  // uint64 fee = 5;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.Action.NewFundsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_fio_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_fio_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payee_fio_name_;
  ::TW::FIO::Proto::NewFundsContent* content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class Action PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  enum MessageOneofCase {
    kRegisterFioAddressMessage = 1,
    kAddPubAddressMessage = 2,
    kTransferMessage = 3,
    kRenewFioAddressMessage = 4,
    kNewFundsRequestMessage = 5,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Action_RegisterFioAddress RegisterFioAddress;
  typedef Action_AddPubAddress AddPubAddress;
  typedef Action_Transfer Transfer;
  typedef Action_RenewFioAddress RenewFioAddress;
  typedef Action_NewFundsRequest NewFundsRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kRegisterFioAddressMessageFieldNumber = 1,
    kAddPubAddressMessageFieldNumber = 2,
    kTransferMessageFieldNumber = 3,
    kRenewFioAddressMessageFieldNumber = 4,
    kNewFundsRequestMessageFieldNumber = 5,
  };
  // .TW.FIO.Proto.Action.RegisterFioAddress register_fio_address_message = 1;
  bool has_register_fio_address_message() const;
  private:
  bool _internal_has_register_fio_address_message() const;
  public:
  void clear_register_fio_address_message();
  const ::TW::FIO::Proto::Action_RegisterFioAddress& register_fio_address_message() const;
  ::TW::FIO::Proto::Action_RegisterFioAddress* release_register_fio_address_message();
  ::TW::FIO::Proto::Action_RegisterFioAddress* mutable_register_fio_address_message();
  void set_allocated_register_fio_address_message(::TW::FIO::Proto::Action_RegisterFioAddress* register_fio_address_message);
  private:
  const ::TW::FIO::Proto::Action_RegisterFioAddress& _internal_register_fio_address_message() const;
  ::TW::FIO::Proto::Action_RegisterFioAddress* _internal_mutable_register_fio_address_message();
  public:
  void unsafe_arena_set_allocated_register_fio_address_message(
      ::TW::FIO::Proto::Action_RegisterFioAddress* register_fio_address_message);
  ::TW::FIO::Proto::Action_RegisterFioAddress* unsafe_arena_release_register_fio_address_message();

  // .TW.FIO.Proto.Action.AddPubAddress add_pub_address_message = 2;
  bool has_add_pub_address_message() const;
  private:
  bool _internal_has_add_pub_address_message() const;
  public:
  void clear_add_pub_address_message();
  const ::TW::FIO::Proto::Action_AddPubAddress& add_pub_address_message() const;
  ::TW::FIO::Proto::Action_AddPubAddress* release_add_pub_address_message();
  ::TW::FIO::Proto::Action_AddPubAddress* mutable_add_pub_address_message();
  void set_allocated_add_pub_address_message(::TW::FIO::Proto::Action_AddPubAddress* add_pub_address_message);
  private:
  const ::TW::FIO::Proto::Action_AddPubAddress& _internal_add_pub_address_message() const;
  ::TW::FIO::Proto::Action_AddPubAddress* _internal_mutable_add_pub_address_message();
  public:
  void unsafe_arena_set_allocated_add_pub_address_message(
      ::TW::FIO::Proto::Action_AddPubAddress* add_pub_address_message);
  ::TW::FIO::Proto::Action_AddPubAddress* unsafe_arena_release_add_pub_address_message();

  // .TW.FIO.Proto.Action.Transfer transfer_message = 3;
  bool has_transfer_message() const;
  private:
  bool _internal_has_transfer_message() const;
  public:
  void clear_transfer_message();
  const ::TW::FIO::Proto::Action_Transfer& transfer_message() const;
  ::TW::FIO::Proto::Action_Transfer* release_transfer_message();
  ::TW::FIO::Proto::Action_Transfer* mutable_transfer_message();
  void set_allocated_transfer_message(::TW::FIO::Proto::Action_Transfer* transfer_message);
  private:
  const ::TW::FIO::Proto::Action_Transfer& _internal_transfer_message() const;
  ::TW::FIO::Proto::Action_Transfer* _internal_mutable_transfer_message();
  public:
  void unsafe_arena_set_allocated_transfer_message(
      ::TW::FIO::Proto::Action_Transfer* transfer_message);
  ::TW::FIO::Proto::Action_Transfer* unsafe_arena_release_transfer_message();

  // .TW.FIO.Proto.Action.RenewFioAddress renew_fio_address_message = 4;
  bool has_renew_fio_address_message() const;
  private:
  bool _internal_has_renew_fio_address_message() const;
  public:
  void clear_renew_fio_address_message();
  const ::TW::FIO::Proto::Action_RenewFioAddress& renew_fio_address_message() const;
  ::TW::FIO::Proto::Action_RenewFioAddress* release_renew_fio_address_message();
  ::TW::FIO::Proto::Action_RenewFioAddress* mutable_renew_fio_address_message();
  void set_allocated_renew_fio_address_message(::TW::FIO::Proto::Action_RenewFioAddress* renew_fio_address_message);
  private:
  const ::TW::FIO::Proto::Action_RenewFioAddress& _internal_renew_fio_address_message() const;
  ::TW::FIO::Proto::Action_RenewFioAddress* _internal_mutable_renew_fio_address_message();
  public:
  void unsafe_arena_set_allocated_renew_fio_address_message(
      ::TW::FIO::Proto::Action_RenewFioAddress* renew_fio_address_message);
  ::TW::FIO::Proto::Action_RenewFioAddress* unsafe_arena_release_renew_fio_address_message();

  // .TW.FIO.Proto.Action.NewFundsRequest new_funds_request_message = 5;
  bool has_new_funds_request_message() const;
  private:
  bool _internal_has_new_funds_request_message() const;
  public:
  void clear_new_funds_request_message();
  const ::TW::FIO::Proto::Action_NewFundsRequest& new_funds_request_message() const;
  ::TW::FIO::Proto::Action_NewFundsRequest* release_new_funds_request_message();
  ::TW::FIO::Proto::Action_NewFundsRequest* mutable_new_funds_request_message();
  void set_allocated_new_funds_request_message(::TW::FIO::Proto::Action_NewFundsRequest* new_funds_request_message);
  private:
  const ::TW::FIO::Proto::Action_NewFundsRequest& _internal_new_funds_request_message() const;
  ::TW::FIO::Proto::Action_NewFundsRequest* _internal_mutable_new_funds_request_message();
  public:
  void unsafe_arena_set_allocated_new_funds_request_message(
      ::TW::FIO::Proto::Action_NewFundsRequest* new_funds_request_message);
  ::TW::FIO::Proto::Action_NewFundsRequest* unsafe_arena_release_new_funds_request_message();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.Action)
 private:
  class _Internal;
  void set_has_register_fio_address_message();
  void set_has_add_pub_address_message();
  void set_has_transfer_message();
  void set_has_renew_fio_address_message();
  void set_has_new_funds_request_message();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    MessageOneofUnion() {}
    ::TW::FIO::Proto::Action_RegisterFioAddress* register_fio_address_message_;
    ::TW::FIO::Proto::Action_AddPubAddress* add_pub_address_message_;
    ::TW::FIO::Proto::Action_Transfer* transfer_message_;
    ::TW::FIO::Proto::Action_RenewFioAddress* renew_fio_address_message_;
    ::TW::FIO::Proto::Action_NewFundsRequest* new_funds_request_message_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class ChainParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.ChainParams) */ {
 public:
  inline ChainParams() : ChainParams(nullptr) {}
  virtual ~ChainParams();

  ChainParams(const ChainParams& from);
  ChainParams(ChainParams&& from) noexcept
    : ChainParams() {
    *this = ::std::move(from);
  }

  inline ChainParams& operator=(const ChainParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChainParams& operator=(ChainParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChainParams& default_instance();

  static inline const ChainParams* internal_default_instance() {
    return reinterpret_cast<const ChainParams*>(
               &_ChainParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ChainParams& a, ChainParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ChainParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChainParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChainParams* New() const final {
    return CreateMaybeMessage<ChainParams>(nullptr);
  }

  ChainParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChainParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChainParams& from);
  void MergeFrom(const ChainParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChainParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.ChainParams";
  }
  protected:
  explicit ChainParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 1,
    kHeadBlockNumberFieldNumber = 2,
    kRefBlockPrefixFieldNumber = 3,
  };
  // bytes chain_id = 1;
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const void* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // uint64 head_block_number = 2;
  void clear_head_block_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 head_block_number() const;
  void set_head_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_head_block_number() const;
  void _internal_set_head_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ref_block_prefix = 3;
  void clear_ref_block_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint64 ref_block_prefix() const;
  void set_ref_block_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ref_block_prefix() const;
  void _internal_set_ref_block_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.ChainParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 head_block_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ref_block_prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 3,
    kTpidFieldNumber = 4,
    kChainParamsFieldNumber = 2,
    kActionFieldNumber = 5,
    kExpiryFieldNumber = 1,
  };
  // bytes private_key = 3;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // string tpid = 4;
  void clear_tpid();
  const std::string& tpid() const;
  void set_tpid(const std::string& value);
  void set_tpid(std::string&& value);
  void set_tpid(const char* value);
  void set_tpid(const char* value, size_t size);
  std::string* mutable_tpid();
  std::string* release_tpid();
  void set_allocated_tpid(std::string* tpid);
  private:
  const std::string& _internal_tpid() const;
  void _internal_set_tpid(const std::string& value);
  std::string* _internal_mutable_tpid();
  public:

  // .TW.FIO.Proto.ChainParams chain_params = 2;
  bool has_chain_params() const;
  private:
  bool _internal_has_chain_params() const;
  public:
  void clear_chain_params();
  const ::TW::FIO::Proto::ChainParams& chain_params() const;
  ::TW::FIO::Proto::ChainParams* release_chain_params();
  ::TW::FIO::Proto::ChainParams* mutable_chain_params();
  void set_allocated_chain_params(::TW::FIO::Proto::ChainParams* chain_params);
  private:
  const ::TW::FIO::Proto::ChainParams& _internal_chain_params() const;
  ::TW::FIO::Proto::ChainParams* _internal_mutable_chain_params();
  public:
  void unsafe_arena_set_allocated_chain_params(
      ::TW::FIO::Proto::ChainParams* chain_params);
  ::TW::FIO::Proto::ChainParams* unsafe_arena_release_chain_params();

  // .TW.FIO.Proto.Action action = 5;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::TW::FIO::Proto::Action& action() const;
  ::TW::FIO::Proto::Action* release_action();
  ::TW::FIO::Proto::Action* mutable_action();
  void set_allocated_action(::TW::FIO::Proto::Action* action);
  private:
  const ::TW::FIO::Proto::Action& _internal_action() const;
  ::TW::FIO::Proto::Action* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::TW::FIO::Proto::Action* action);
  ::TW::FIO::Proto::Action* unsafe_arena_release_action();

  // uint32 expiry = 1;
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tpid_;
  ::TW::FIO::Proto::ChainParams* chain_params_;
  ::TW::FIO::Proto::Action* action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.FIO.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.FIO.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FIO_2eproto);
    return ::descriptor_table_FIO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string json = 1;
  void clear_json();
  const std::string& json() const;
  void set_json(const std::string& value);
  void set_json(std::string&& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  std::string* mutable_json();
  std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.FIO.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FIO_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicAddress

// string coin_symbol = 1;
inline void PublicAddress::clear_coin_symbol() {
  coin_symbol_.ClearToEmpty();
}
inline const std::string& PublicAddress::coin_symbol() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.PublicAddress.coin_symbol)
  return _internal_coin_symbol();
}
inline void PublicAddress::set_coin_symbol(const std::string& value) {
  _internal_set_coin_symbol(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.PublicAddress.coin_symbol)
}
inline std::string* PublicAddress::mutable_coin_symbol() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.PublicAddress.coin_symbol)
  return _internal_mutable_coin_symbol();
}
inline const std::string& PublicAddress::_internal_coin_symbol() const {
  return coin_symbol_.Get();
}
inline void PublicAddress::_internal_set_coin_symbol(const std::string& value) {
  
  coin_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublicAddress::set_coin_symbol(std::string&& value) {
  
  coin_symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.PublicAddress.coin_symbol)
}
inline void PublicAddress::set_coin_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coin_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.PublicAddress.coin_symbol)
}
inline void PublicAddress::set_coin_symbol(const char* value,
    size_t size) {
  
  coin_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.PublicAddress.coin_symbol)
}
inline std::string* PublicAddress::_internal_mutable_coin_symbol() {
  
  return coin_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublicAddress::release_coin_symbol() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.PublicAddress.coin_symbol)
  return coin_symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicAddress::set_allocated_coin_symbol(std::string* coin_symbol) {
  if (coin_symbol != nullptr) {
    
  } else {
    
  }
  coin_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coin_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.PublicAddress.coin_symbol)
}

// string address = 2;
inline void PublicAddress::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& PublicAddress::address() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.PublicAddress.address)
  return _internal_address();
}
inline void PublicAddress::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.PublicAddress.address)
}
inline std::string* PublicAddress::mutable_address() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.PublicAddress.address)
  return _internal_mutable_address();
}
inline const std::string& PublicAddress::_internal_address() const {
  return address_.Get();
}
inline void PublicAddress::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublicAddress::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.PublicAddress.address)
}
inline void PublicAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.PublicAddress.address)
}
inline void PublicAddress::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.PublicAddress.address)
}
inline std::string* PublicAddress::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublicAddress::release_address() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.PublicAddress.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicAddress::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.PublicAddress.address)
}

// -------------------------------------------------------------------

// NewFundsContent

// string payee_public_address = 1;
inline void NewFundsContent::clear_payee_public_address() {
  payee_public_address_.ClearToEmpty();
}
inline const std::string& NewFundsContent::payee_public_address() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.NewFundsContent.payee_public_address)
  return _internal_payee_public_address();
}
inline void NewFundsContent::set_payee_public_address(const std::string& value) {
  _internal_set_payee_public_address(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.NewFundsContent.payee_public_address)
}
inline std::string* NewFundsContent::mutable_payee_public_address() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.NewFundsContent.payee_public_address)
  return _internal_mutable_payee_public_address();
}
inline const std::string& NewFundsContent::_internal_payee_public_address() const {
  return payee_public_address_.Get();
}
inline void NewFundsContent::_internal_set_payee_public_address(const std::string& value) {
  
  payee_public_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewFundsContent::set_payee_public_address(std::string&& value) {
  
  payee_public_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.NewFundsContent.payee_public_address)
}
inline void NewFundsContent::set_payee_public_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payee_public_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.NewFundsContent.payee_public_address)
}
inline void NewFundsContent::set_payee_public_address(const char* value,
    size_t size) {
  
  payee_public_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.NewFundsContent.payee_public_address)
}
inline std::string* NewFundsContent::_internal_mutable_payee_public_address() {
  
  return payee_public_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewFundsContent::release_payee_public_address() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.NewFundsContent.payee_public_address)
  return payee_public_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFundsContent::set_allocated_payee_public_address(std::string* payee_public_address) {
  if (payee_public_address != nullptr) {
    
  } else {
    
  }
  payee_public_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payee_public_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.NewFundsContent.payee_public_address)
}

// string amount = 2;
inline void NewFundsContent::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& NewFundsContent::amount() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.NewFundsContent.amount)
  return _internal_amount();
}
inline void NewFundsContent::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.NewFundsContent.amount)
}
inline std::string* NewFundsContent::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.NewFundsContent.amount)
  return _internal_mutable_amount();
}
inline const std::string& NewFundsContent::_internal_amount() const {
  return amount_.Get();
}
inline void NewFundsContent::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewFundsContent::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.NewFundsContent.amount)
}
inline void NewFundsContent::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.NewFundsContent.amount)
}
inline void NewFundsContent::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.NewFundsContent.amount)
}
inline std::string* NewFundsContent::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewFundsContent::release_amount() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.NewFundsContent.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFundsContent::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.NewFundsContent.amount)
}

// string coin_symbol = 3;
inline void NewFundsContent::clear_coin_symbol() {
  coin_symbol_.ClearToEmpty();
}
inline const std::string& NewFundsContent::coin_symbol() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.NewFundsContent.coin_symbol)
  return _internal_coin_symbol();
}
inline void NewFundsContent::set_coin_symbol(const std::string& value) {
  _internal_set_coin_symbol(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.NewFundsContent.coin_symbol)
}
inline std::string* NewFundsContent::mutable_coin_symbol() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.NewFundsContent.coin_symbol)
  return _internal_mutable_coin_symbol();
}
inline const std::string& NewFundsContent::_internal_coin_symbol() const {
  return coin_symbol_.Get();
}
inline void NewFundsContent::_internal_set_coin_symbol(const std::string& value) {
  
  coin_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewFundsContent::set_coin_symbol(std::string&& value) {
  
  coin_symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.NewFundsContent.coin_symbol)
}
inline void NewFundsContent::set_coin_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coin_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.NewFundsContent.coin_symbol)
}
inline void NewFundsContent::set_coin_symbol(const char* value,
    size_t size) {
  
  coin_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.NewFundsContent.coin_symbol)
}
inline std::string* NewFundsContent::_internal_mutable_coin_symbol() {
  
  return coin_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewFundsContent::release_coin_symbol() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.NewFundsContent.coin_symbol)
  return coin_symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFundsContent::set_allocated_coin_symbol(std::string* coin_symbol) {
  if (coin_symbol != nullptr) {
    
  } else {
    
  }
  coin_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coin_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.NewFundsContent.coin_symbol)
}

// string memo = 4;
inline void NewFundsContent::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& NewFundsContent::memo() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.NewFundsContent.memo)
  return _internal_memo();
}
inline void NewFundsContent::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.NewFundsContent.memo)
}
inline std::string* NewFundsContent::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.NewFundsContent.memo)
  return _internal_mutable_memo();
}
inline const std::string& NewFundsContent::_internal_memo() const {
  return memo_.Get();
}
inline void NewFundsContent::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewFundsContent::set_memo(std::string&& value) {
  
  memo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.NewFundsContent.memo)
}
inline void NewFundsContent::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.NewFundsContent.memo)
}
inline void NewFundsContent::set_memo(const char* value,
    size_t size) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.NewFundsContent.memo)
}
inline std::string* NewFundsContent::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewFundsContent::release_memo() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.NewFundsContent.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFundsContent::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.NewFundsContent.memo)
}

// string hash = 5;
inline void NewFundsContent::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& NewFundsContent::hash() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.NewFundsContent.hash)
  return _internal_hash();
}
inline void NewFundsContent::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.NewFundsContent.hash)
}
inline std::string* NewFundsContent::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.NewFundsContent.hash)
  return _internal_mutable_hash();
}
inline const std::string& NewFundsContent::_internal_hash() const {
  return hash_.Get();
}
inline void NewFundsContent::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewFundsContent::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.NewFundsContent.hash)
}
inline void NewFundsContent::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.NewFundsContent.hash)
}
inline void NewFundsContent::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.NewFundsContent.hash)
}
inline std::string* NewFundsContent::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewFundsContent::release_hash() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.NewFundsContent.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFundsContent::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.NewFundsContent.hash)
}

// string offline_url = 6;
inline void NewFundsContent::clear_offline_url() {
  offline_url_.ClearToEmpty();
}
inline const std::string& NewFundsContent::offline_url() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.NewFundsContent.offline_url)
  return _internal_offline_url();
}
inline void NewFundsContent::set_offline_url(const std::string& value) {
  _internal_set_offline_url(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.NewFundsContent.offline_url)
}
inline std::string* NewFundsContent::mutable_offline_url() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.NewFundsContent.offline_url)
  return _internal_mutable_offline_url();
}
inline const std::string& NewFundsContent::_internal_offline_url() const {
  return offline_url_.Get();
}
inline void NewFundsContent::_internal_set_offline_url(const std::string& value) {
  
  offline_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewFundsContent::set_offline_url(std::string&& value) {
  
  offline_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.NewFundsContent.offline_url)
}
inline void NewFundsContent::set_offline_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offline_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.NewFundsContent.offline_url)
}
inline void NewFundsContent::set_offline_url(const char* value,
    size_t size) {
  
  offline_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.NewFundsContent.offline_url)
}
inline std::string* NewFundsContent::_internal_mutable_offline_url() {
  
  return offline_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewFundsContent::release_offline_url() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.NewFundsContent.offline_url)
  return offline_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFundsContent::set_allocated_offline_url(std::string* offline_url) {
  if (offline_url != nullptr) {
    
  } else {
    
  }
  offline_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offline_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.NewFundsContent.offline_url)
}

// -------------------------------------------------------------------

// Action_RegisterFioAddress

// string fio_address = 1;
inline void Action_RegisterFioAddress::clear_fio_address() {
  fio_address_.ClearToEmpty();
}
inline const std::string& Action_RegisterFioAddress::fio_address() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.RegisterFioAddress.fio_address)
  return _internal_fio_address();
}
inline void Action_RegisterFioAddress::set_fio_address(const std::string& value) {
  _internal_set_fio_address(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.RegisterFioAddress.fio_address)
}
inline std::string* Action_RegisterFioAddress::mutable_fio_address() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.RegisterFioAddress.fio_address)
  return _internal_mutable_fio_address();
}
inline const std::string& Action_RegisterFioAddress::_internal_fio_address() const {
  return fio_address_.Get();
}
inline void Action_RegisterFioAddress::_internal_set_fio_address(const std::string& value) {
  
  fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action_RegisterFioAddress::set_fio_address(std::string&& value) {
  
  fio_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.Action.RegisterFioAddress.fio_address)
}
inline void Action_RegisterFioAddress::set_fio_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.Action.RegisterFioAddress.fio_address)
}
inline void Action_RegisterFioAddress::set_fio_address(const char* value,
    size_t size) {
  
  fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.Action.RegisterFioAddress.fio_address)
}
inline std::string* Action_RegisterFioAddress::_internal_mutable_fio_address() {
  
  return fio_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action_RegisterFioAddress::release_fio_address() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.RegisterFioAddress.fio_address)
  return fio_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action_RegisterFioAddress::set_allocated_fio_address(std::string* fio_address) {
  if (fio_address != nullptr) {
    
  } else {
    
  }
  fio_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fio_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.RegisterFioAddress.fio_address)
}

// string owner_fio_public_key = 2;
inline void Action_RegisterFioAddress::clear_owner_fio_public_key() {
  owner_fio_public_key_.ClearToEmpty();
}
inline const std::string& Action_RegisterFioAddress::owner_fio_public_key() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key)
  return _internal_owner_fio_public_key();
}
inline void Action_RegisterFioAddress::set_owner_fio_public_key(const std::string& value) {
  _internal_set_owner_fio_public_key(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key)
}
inline std::string* Action_RegisterFioAddress::mutable_owner_fio_public_key() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key)
  return _internal_mutable_owner_fio_public_key();
}
inline const std::string& Action_RegisterFioAddress::_internal_owner_fio_public_key() const {
  return owner_fio_public_key_.Get();
}
inline void Action_RegisterFioAddress::_internal_set_owner_fio_public_key(const std::string& value) {
  
  owner_fio_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action_RegisterFioAddress::set_owner_fio_public_key(std::string&& value) {
  
  owner_fio_public_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key)
}
inline void Action_RegisterFioAddress::set_owner_fio_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_fio_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key)
}
inline void Action_RegisterFioAddress::set_owner_fio_public_key(const char* value,
    size_t size) {
  
  owner_fio_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key)
}
inline std::string* Action_RegisterFioAddress::_internal_mutable_owner_fio_public_key() {
  
  return owner_fio_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action_RegisterFioAddress::release_owner_fio_public_key() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key)
  return owner_fio_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action_RegisterFioAddress::set_allocated_owner_fio_public_key(std::string* owner_fio_public_key) {
  if (owner_fio_public_key != nullptr) {
    
  } else {
    
  }
  owner_fio_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_fio_public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key)
}

// uint64 fee = 3;
inline void Action_RegisterFioAddress::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_RegisterFioAddress::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_RegisterFioAddress::fee() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.RegisterFioAddress.fee)
  return _internal_fee();
}
inline void Action_RegisterFioAddress::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void Action_RegisterFioAddress::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.RegisterFioAddress.fee)
}

// -------------------------------------------------------------------

// Action_AddPubAddress

// string fio_address = 1;
inline void Action_AddPubAddress::clear_fio_address() {
  fio_address_.ClearToEmpty();
}
inline const std::string& Action_AddPubAddress::fio_address() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.AddPubAddress.fio_address)
  return _internal_fio_address();
}
inline void Action_AddPubAddress::set_fio_address(const std::string& value) {
  _internal_set_fio_address(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.AddPubAddress.fio_address)
}
inline std::string* Action_AddPubAddress::mutable_fio_address() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.AddPubAddress.fio_address)
  return _internal_mutable_fio_address();
}
inline const std::string& Action_AddPubAddress::_internal_fio_address() const {
  return fio_address_.Get();
}
inline void Action_AddPubAddress::_internal_set_fio_address(const std::string& value) {
  
  fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action_AddPubAddress::set_fio_address(std::string&& value) {
  
  fio_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.Action.AddPubAddress.fio_address)
}
inline void Action_AddPubAddress::set_fio_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.Action.AddPubAddress.fio_address)
}
inline void Action_AddPubAddress::set_fio_address(const char* value,
    size_t size) {
  
  fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.Action.AddPubAddress.fio_address)
}
inline std::string* Action_AddPubAddress::_internal_mutable_fio_address() {
  
  return fio_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action_AddPubAddress::release_fio_address() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.AddPubAddress.fio_address)
  return fio_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action_AddPubAddress::set_allocated_fio_address(std::string* fio_address) {
  if (fio_address != nullptr) {
    
  } else {
    
  }
  fio_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fio_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.AddPubAddress.fio_address)
}

// repeated .TW.FIO.Proto.PublicAddress public_addresses = 2;
inline int Action_AddPubAddress::_internal_public_addresses_size() const {
  return public_addresses_.size();
}
inline int Action_AddPubAddress::public_addresses_size() const {
  return _internal_public_addresses_size();
}
inline void Action_AddPubAddress::clear_public_addresses() {
  public_addresses_.Clear();
}
inline ::TW::FIO::Proto::PublicAddress* Action_AddPubAddress::mutable_public_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.AddPubAddress.public_addresses)
  return public_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::FIO::Proto::PublicAddress >*
Action_AddPubAddress::mutable_public_addresses() {
  // @@protoc_insertion_point(field_mutable_list:TW.FIO.Proto.Action.AddPubAddress.public_addresses)
  return &public_addresses_;
}
inline const ::TW::FIO::Proto::PublicAddress& Action_AddPubAddress::_internal_public_addresses(int index) const {
  return public_addresses_.Get(index);
}
inline const ::TW::FIO::Proto::PublicAddress& Action_AddPubAddress::public_addresses(int index) const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.AddPubAddress.public_addresses)
  return _internal_public_addresses(index);
}
inline ::TW::FIO::Proto::PublicAddress* Action_AddPubAddress::_internal_add_public_addresses() {
  return public_addresses_.Add();
}
inline ::TW::FIO::Proto::PublicAddress* Action_AddPubAddress::add_public_addresses() {
  // @@protoc_insertion_point(field_add:TW.FIO.Proto.Action.AddPubAddress.public_addresses)
  return _internal_add_public_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::FIO::Proto::PublicAddress >&
Action_AddPubAddress::public_addresses() const {
  // @@protoc_insertion_point(field_list:TW.FIO.Proto.Action.AddPubAddress.public_addresses)
  return public_addresses_;
}

// uint64 fee = 3;
inline void Action_AddPubAddress::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_AddPubAddress::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_AddPubAddress::fee() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.AddPubAddress.fee)
  return _internal_fee();
}
inline void Action_AddPubAddress::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void Action_AddPubAddress::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.AddPubAddress.fee)
}

// -------------------------------------------------------------------

// Action_Transfer

// string payee_public_key = 1;
inline void Action_Transfer::clear_payee_public_key() {
  payee_public_key_.ClearToEmpty();
}
inline const std::string& Action_Transfer::payee_public_key() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.Transfer.payee_public_key)
  return _internal_payee_public_key();
}
inline void Action_Transfer::set_payee_public_key(const std::string& value) {
  _internal_set_payee_public_key(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.Transfer.payee_public_key)
}
inline std::string* Action_Transfer::mutable_payee_public_key() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.Transfer.payee_public_key)
  return _internal_mutable_payee_public_key();
}
inline const std::string& Action_Transfer::_internal_payee_public_key() const {
  return payee_public_key_.Get();
}
inline void Action_Transfer::_internal_set_payee_public_key(const std::string& value) {
  
  payee_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action_Transfer::set_payee_public_key(std::string&& value) {
  
  payee_public_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.Action.Transfer.payee_public_key)
}
inline void Action_Transfer::set_payee_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payee_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.Action.Transfer.payee_public_key)
}
inline void Action_Transfer::set_payee_public_key(const char* value,
    size_t size) {
  
  payee_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.Action.Transfer.payee_public_key)
}
inline std::string* Action_Transfer::_internal_mutable_payee_public_key() {
  
  return payee_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action_Transfer::release_payee_public_key() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.Transfer.payee_public_key)
  return payee_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action_Transfer::set_allocated_payee_public_key(std::string* payee_public_key) {
  if (payee_public_key != nullptr) {
    
  } else {
    
  }
  payee_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payee_public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.Transfer.payee_public_key)
}

// uint64 amount = 2;
inline void Action_Transfer::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_Transfer::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.Transfer.amount)
  return _internal_amount();
}
inline void Action_Transfer::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void Action_Transfer::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.Transfer.amount)
}

// uint64 fee = 3;
inline void Action_Transfer::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_Transfer::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_Transfer::fee() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.Transfer.fee)
  return _internal_fee();
}
inline void Action_Transfer::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void Action_Transfer::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.Transfer.fee)
}

// -------------------------------------------------------------------

// Action_RenewFioAddress

// string fio_address = 1;
inline void Action_RenewFioAddress::clear_fio_address() {
  fio_address_.ClearToEmpty();
}
inline const std::string& Action_RenewFioAddress::fio_address() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.RenewFioAddress.fio_address)
  return _internal_fio_address();
}
inline void Action_RenewFioAddress::set_fio_address(const std::string& value) {
  _internal_set_fio_address(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.RenewFioAddress.fio_address)
}
inline std::string* Action_RenewFioAddress::mutable_fio_address() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.RenewFioAddress.fio_address)
  return _internal_mutable_fio_address();
}
inline const std::string& Action_RenewFioAddress::_internal_fio_address() const {
  return fio_address_.Get();
}
inline void Action_RenewFioAddress::_internal_set_fio_address(const std::string& value) {
  
  fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action_RenewFioAddress::set_fio_address(std::string&& value) {
  
  fio_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.Action.RenewFioAddress.fio_address)
}
inline void Action_RenewFioAddress::set_fio_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.Action.RenewFioAddress.fio_address)
}
inline void Action_RenewFioAddress::set_fio_address(const char* value,
    size_t size) {
  
  fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.Action.RenewFioAddress.fio_address)
}
inline std::string* Action_RenewFioAddress::_internal_mutable_fio_address() {
  
  return fio_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action_RenewFioAddress::release_fio_address() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.RenewFioAddress.fio_address)
  return fio_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action_RenewFioAddress::set_allocated_fio_address(std::string* fio_address) {
  if (fio_address != nullptr) {
    
  } else {
    
  }
  fio_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fio_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.RenewFioAddress.fio_address)
}

// string owner_fio_public_key = 2;
inline void Action_RenewFioAddress::clear_owner_fio_public_key() {
  owner_fio_public_key_.ClearToEmpty();
}
inline const std::string& Action_RenewFioAddress::owner_fio_public_key() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key)
  return _internal_owner_fio_public_key();
}
inline void Action_RenewFioAddress::set_owner_fio_public_key(const std::string& value) {
  _internal_set_owner_fio_public_key(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key)
}
inline std::string* Action_RenewFioAddress::mutable_owner_fio_public_key() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key)
  return _internal_mutable_owner_fio_public_key();
}
inline const std::string& Action_RenewFioAddress::_internal_owner_fio_public_key() const {
  return owner_fio_public_key_.Get();
}
inline void Action_RenewFioAddress::_internal_set_owner_fio_public_key(const std::string& value) {
  
  owner_fio_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action_RenewFioAddress::set_owner_fio_public_key(std::string&& value) {
  
  owner_fio_public_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key)
}
inline void Action_RenewFioAddress::set_owner_fio_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_fio_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key)
}
inline void Action_RenewFioAddress::set_owner_fio_public_key(const char* value,
    size_t size) {
  
  owner_fio_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key)
}
inline std::string* Action_RenewFioAddress::_internal_mutable_owner_fio_public_key() {
  
  return owner_fio_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action_RenewFioAddress::release_owner_fio_public_key() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key)
  return owner_fio_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action_RenewFioAddress::set_allocated_owner_fio_public_key(std::string* owner_fio_public_key) {
  if (owner_fio_public_key != nullptr) {
    
  } else {
    
  }
  owner_fio_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_fio_public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key)
}

// uint64 fee = 3;
inline void Action_RenewFioAddress::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_RenewFioAddress::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_RenewFioAddress::fee() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.RenewFioAddress.fee)
  return _internal_fee();
}
inline void Action_RenewFioAddress::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void Action_RenewFioAddress::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.RenewFioAddress.fee)
}

// -------------------------------------------------------------------

// Action_NewFundsRequest

// string payer_fio_name = 1;
inline void Action_NewFundsRequest::clear_payer_fio_name() {
  payer_fio_name_.ClearToEmpty();
}
inline const std::string& Action_NewFundsRequest::payer_fio_name() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name)
  return _internal_payer_fio_name();
}
inline void Action_NewFundsRequest::set_payer_fio_name(const std::string& value) {
  _internal_set_payer_fio_name(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name)
}
inline std::string* Action_NewFundsRequest::mutable_payer_fio_name() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name)
  return _internal_mutable_payer_fio_name();
}
inline const std::string& Action_NewFundsRequest::_internal_payer_fio_name() const {
  return payer_fio_name_.Get();
}
inline void Action_NewFundsRequest::_internal_set_payer_fio_name(const std::string& value) {
  
  payer_fio_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action_NewFundsRequest::set_payer_fio_name(std::string&& value) {
  
  payer_fio_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name)
}
inline void Action_NewFundsRequest::set_payer_fio_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payer_fio_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name)
}
inline void Action_NewFundsRequest::set_payer_fio_name(const char* value,
    size_t size) {
  
  payer_fio_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name)
}
inline std::string* Action_NewFundsRequest::_internal_mutable_payer_fio_name() {
  
  return payer_fio_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action_NewFundsRequest::release_payer_fio_name() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name)
  return payer_fio_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action_NewFundsRequest::set_allocated_payer_fio_name(std::string* payer_fio_name) {
  if (payer_fio_name != nullptr) {
    
  } else {
    
  }
  payer_fio_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payer_fio_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name)
}

// string payer_fio_address = 2;
inline void Action_NewFundsRequest::clear_payer_fio_address() {
  payer_fio_address_.ClearToEmpty();
}
inline const std::string& Action_NewFundsRequest::payer_fio_address() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address)
  return _internal_payer_fio_address();
}
inline void Action_NewFundsRequest::set_payer_fio_address(const std::string& value) {
  _internal_set_payer_fio_address(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address)
}
inline std::string* Action_NewFundsRequest::mutable_payer_fio_address() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address)
  return _internal_mutable_payer_fio_address();
}
inline const std::string& Action_NewFundsRequest::_internal_payer_fio_address() const {
  return payer_fio_address_.Get();
}
inline void Action_NewFundsRequest::_internal_set_payer_fio_address(const std::string& value) {
  
  payer_fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action_NewFundsRequest::set_payer_fio_address(std::string&& value) {
  
  payer_fio_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address)
}
inline void Action_NewFundsRequest::set_payer_fio_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payer_fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address)
}
inline void Action_NewFundsRequest::set_payer_fio_address(const char* value,
    size_t size) {
  
  payer_fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address)
}
inline std::string* Action_NewFundsRequest::_internal_mutable_payer_fio_address() {
  
  return payer_fio_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action_NewFundsRequest::release_payer_fio_address() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address)
  return payer_fio_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action_NewFundsRequest::set_allocated_payer_fio_address(std::string* payer_fio_address) {
  if (payer_fio_address != nullptr) {
    
  } else {
    
  }
  payer_fio_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payer_fio_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address)
}

// string payee_fio_name = 3;
inline void Action_NewFundsRequest::clear_payee_fio_name() {
  payee_fio_name_.ClearToEmpty();
}
inline const std::string& Action_NewFundsRequest::payee_fio_name() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name)
  return _internal_payee_fio_name();
}
inline void Action_NewFundsRequest::set_payee_fio_name(const std::string& value) {
  _internal_set_payee_fio_name(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name)
}
inline std::string* Action_NewFundsRequest::mutable_payee_fio_name() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name)
  return _internal_mutable_payee_fio_name();
}
inline const std::string& Action_NewFundsRequest::_internal_payee_fio_name() const {
  return payee_fio_name_.Get();
}
inline void Action_NewFundsRequest::_internal_set_payee_fio_name(const std::string& value) {
  
  payee_fio_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action_NewFundsRequest::set_payee_fio_name(std::string&& value) {
  
  payee_fio_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name)
}
inline void Action_NewFundsRequest::set_payee_fio_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payee_fio_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name)
}
inline void Action_NewFundsRequest::set_payee_fio_name(const char* value,
    size_t size) {
  
  payee_fio_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name)
}
inline std::string* Action_NewFundsRequest::_internal_mutable_payee_fio_name() {
  
  return payee_fio_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action_NewFundsRequest::release_payee_fio_name() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name)
  return payee_fio_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action_NewFundsRequest::set_allocated_payee_fio_name(std::string* payee_fio_name) {
  if (payee_fio_name != nullptr) {
    
  } else {
    
  }
  payee_fio_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payee_fio_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name)
}

// .TW.FIO.Proto.NewFundsContent content = 4;
inline bool Action_NewFundsRequest::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool Action_NewFundsRequest::has_content() const {
  return _internal_has_content();
}
inline void Action_NewFundsRequest::clear_content() {
  if (GetArena() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
}
inline const ::TW::FIO::Proto::NewFundsContent& Action_NewFundsRequest::_internal_content() const {
  const ::TW::FIO::Proto::NewFundsContent* p = content_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::FIO::Proto::NewFundsContent&>(
      ::TW::FIO::Proto::_NewFundsContent_default_instance_);
}
inline const ::TW::FIO::Proto::NewFundsContent& Action_NewFundsRequest::content() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.NewFundsRequest.content)
  return _internal_content();
}
inline void Action_NewFundsRequest::unsafe_arena_set_allocated_content(
    ::TW::FIO::Proto::NewFundsContent* content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.FIO.Proto.Action.NewFundsRequest.content)
}
inline ::TW::FIO::Proto::NewFundsContent* Action_NewFundsRequest::release_content() {
  
  ::TW::FIO::Proto::NewFundsContent* temp = content_;
  content_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::FIO::Proto::NewFundsContent* Action_NewFundsRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.NewFundsRequest.content)
  
  ::TW::FIO::Proto::NewFundsContent* temp = content_;
  content_ = nullptr;
  return temp;
}
inline ::TW::FIO::Proto::NewFundsContent* Action_NewFundsRequest::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::FIO::Proto::NewFundsContent>(GetArena());
    content_ = p;
  }
  return content_;
}
inline ::TW::FIO::Proto::NewFundsContent* Action_NewFundsRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.NewFundsRequest.content)
  return _internal_mutable_content();
}
inline void Action_NewFundsRequest::set_allocated_content(::TW::FIO::Proto::NewFundsContent* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete content_;
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(content);
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.NewFundsRequest.content)
}

// uint64 fee = 5;
inline void Action_NewFundsRequest::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_NewFundsRequest::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action_NewFundsRequest::fee() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.NewFundsRequest.fee)
  return _internal_fee();
}
inline void Action_NewFundsRequest::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void Action_NewFundsRequest::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.Action.NewFundsRequest.fee)
}

// -------------------------------------------------------------------

// Action

// .TW.FIO.Proto.Action.RegisterFioAddress register_fio_address_message = 1;
inline bool Action::_internal_has_register_fio_address_message() const {
  return message_oneof_case() == kRegisterFioAddressMessage;
}
inline bool Action::has_register_fio_address_message() const {
  return _internal_has_register_fio_address_message();
}
inline void Action::set_has_register_fio_address_message() {
  _oneof_case_[0] = kRegisterFioAddressMessage;
}
inline void Action::clear_register_fio_address_message() {
  if (_internal_has_register_fio_address_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.register_fio_address_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::FIO::Proto::Action_RegisterFioAddress* Action::release_register_fio_address_message() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.register_fio_address_message)
  if (_internal_has_register_fio_address_message()) {
    clear_has_message_oneof();
      ::TW::FIO::Proto::Action_RegisterFioAddress* temp = message_oneof_.register_fio_address_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.register_fio_address_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::FIO::Proto::Action_RegisterFioAddress& Action::_internal_register_fio_address_message() const {
  return _internal_has_register_fio_address_message()
      ? *message_oneof_.register_fio_address_message_
      : reinterpret_cast< ::TW::FIO::Proto::Action_RegisterFioAddress&>(::TW::FIO::Proto::_Action_RegisterFioAddress_default_instance_);
}
inline const ::TW::FIO::Proto::Action_RegisterFioAddress& Action::register_fio_address_message() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.register_fio_address_message)
  return _internal_register_fio_address_message();
}
inline ::TW::FIO::Proto::Action_RegisterFioAddress* Action::unsafe_arena_release_register_fio_address_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.FIO.Proto.Action.register_fio_address_message)
  if (_internal_has_register_fio_address_message()) {
    clear_has_message_oneof();
    ::TW::FIO::Proto::Action_RegisterFioAddress* temp = message_oneof_.register_fio_address_message_;
    message_oneof_.register_fio_address_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_register_fio_address_message(::TW::FIO::Proto::Action_RegisterFioAddress* register_fio_address_message) {
  clear_message_oneof();
  if (register_fio_address_message) {
    set_has_register_fio_address_message();
    message_oneof_.register_fio_address_message_ = register_fio_address_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.FIO.Proto.Action.register_fio_address_message)
}
inline ::TW::FIO::Proto::Action_RegisterFioAddress* Action::_internal_mutable_register_fio_address_message() {
  if (!_internal_has_register_fio_address_message()) {
    clear_message_oneof();
    set_has_register_fio_address_message();
    message_oneof_.register_fio_address_message_ = CreateMaybeMessage< ::TW::FIO::Proto::Action_RegisterFioAddress >(GetArena());
  }
  return message_oneof_.register_fio_address_message_;
}
inline ::TW::FIO::Proto::Action_RegisterFioAddress* Action::mutable_register_fio_address_message() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.register_fio_address_message)
  return _internal_mutable_register_fio_address_message();
}

// .TW.FIO.Proto.Action.AddPubAddress add_pub_address_message = 2;
inline bool Action::_internal_has_add_pub_address_message() const {
  return message_oneof_case() == kAddPubAddressMessage;
}
inline bool Action::has_add_pub_address_message() const {
  return _internal_has_add_pub_address_message();
}
inline void Action::set_has_add_pub_address_message() {
  _oneof_case_[0] = kAddPubAddressMessage;
}
inline void Action::clear_add_pub_address_message() {
  if (_internal_has_add_pub_address_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.add_pub_address_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::FIO::Proto::Action_AddPubAddress* Action::release_add_pub_address_message() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.add_pub_address_message)
  if (_internal_has_add_pub_address_message()) {
    clear_has_message_oneof();
      ::TW::FIO::Proto::Action_AddPubAddress* temp = message_oneof_.add_pub_address_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.add_pub_address_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::FIO::Proto::Action_AddPubAddress& Action::_internal_add_pub_address_message() const {
  return _internal_has_add_pub_address_message()
      ? *message_oneof_.add_pub_address_message_
      : reinterpret_cast< ::TW::FIO::Proto::Action_AddPubAddress&>(::TW::FIO::Proto::_Action_AddPubAddress_default_instance_);
}
inline const ::TW::FIO::Proto::Action_AddPubAddress& Action::add_pub_address_message() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.add_pub_address_message)
  return _internal_add_pub_address_message();
}
inline ::TW::FIO::Proto::Action_AddPubAddress* Action::unsafe_arena_release_add_pub_address_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.FIO.Proto.Action.add_pub_address_message)
  if (_internal_has_add_pub_address_message()) {
    clear_has_message_oneof();
    ::TW::FIO::Proto::Action_AddPubAddress* temp = message_oneof_.add_pub_address_message_;
    message_oneof_.add_pub_address_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_add_pub_address_message(::TW::FIO::Proto::Action_AddPubAddress* add_pub_address_message) {
  clear_message_oneof();
  if (add_pub_address_message) {
    set_has_add_pub_address_message();
    message_oneof_.add_pub_address_message_ = add_pub_address_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.FIO.Proto.Action.add_pub_address_message)
}
inline ::TW::FIO::Proto::Action_AddPubAddress* Action::_internal_mutable_add_pub_address_message() {
  if (!_internal_has_add_pub_address_message()) {
    clear_message_oneof();
    set_has_add_pub_address_message();
    message_oneof_.add_pub_address_message_ = CreateMaybeMessage< ::TW::FIO::Proto::Action_AddPubAddress >(GetArena());
  }
  return message_oneof_.add_pub_address_message_;
}
inline ::TW::FIO::Proto::Action_AddPubAddress* Action::mutable_add_pub_address_message() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.add_pub_address_message)
  return _internal_mutable_add_pub_address_message();
}

// .TW.FIO.Proto.Action.Transfer transfer_message = 3;
inline bool Action::_internal_has_transfer_message() const {
  return message_oneof_case() == kTransferMessage;
}
inline bool Action::has_transfer_message() const {
  return _internal_has_transfer_message();
}
inline void Action::set_has_transfer_message() {
  _oneof_case_[0] = kTransferMessage;
}
inline void Action::clear_transfer_message() {
  if (_internal_has_transfer_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.transfer_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::FIO::Proto::Action_Transfer* Action::release_transfer_message() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.transfer_message)
  if (_internal_has_transfer_message()) {
    clear_has_message_oneof();
      ::TW::FIO::Proto::Action_Transfer* temp = message_oneof_.transfer_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.transfer_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::FIO::Proto::Action_Transfer& Action::_internal_transfer_message() const {
  return _internal_has_transfer_message()
      ? *message_oneof_.transfer_message_
      : reinterpret_cast< ::TW::FIO::Proto::Action_Transfer&>(::TW::FIO::Proto::_Action_Transfer_default_instance_);
}
inline const ::TW::FIO::Proto::Action_Transfer& Action::transfer_message() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.transfer_message)
  return _internal_transfer_message();
}
inline ::TW::FIO::Proto::Action_Transfer* Action::unsafe_arena_release_transfer_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.FIO.Proto.Action.transfer_message)
  if (_internal_has_transfer_message()) {
    clear_has_message_oneof();
    ::TW::FIO::Proto::Action_Transfer* temp = message_oneof_.transfer_message_;
    message_oneof_.transfer_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_transfer_message(::TW::FIO::Proto::Action_Transfer* transfer_message) {
  clear_message_oneof();
  if (transfer_message) {
    set_has_transfer_message();
    message_oneof_.transfer_message_ = transfer_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.FIO.Proto.Action.transfer_message)
}
inline ::TW::FIO::Proto::Action_Transfer* Action::_internal_mutable_transfer_message() {
  if (!_internal_has_transfer_message()) {
    clear_message_oneof();
    set_has_transfer_message();
    message_oneof_.transfer_message_ = CreateMaybeMessage< ::TW::FIO::Proto::Action_Transfer >(GetArena());
  }
  return message_oneof_.transfer_message_;
}
inline ::TW::FIO::Proto::Action_Transfer* Action::mutable_transfer_message() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.transfer_message)
  return _internal_mutable_transfer_message();
}

// .TW.FIO.Proto.Action.RenewFioAddress renew_fio_address_message = 4;
inline bool Action::_internal_has_renew_fio_address_message() const {
  return message_oneof_case() == kRenewFioAddressMessage;
}
inline bool Action::has_renew_fio_address_message() const {
  return _internal_has_renew_fio_address_message();
}
inline void Action::set_has_renew_fio_address_message() {
  _oneof_case_[0] = kRenewFioAddressMessage;
}
inline void Action::clear_renew_fio_address_message() {
  if (_internal_has_renew_fio_address_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.renew_fio_address_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::FIO::Proto::Action_RenewFioAddress* Action::release_renew_fio_address_message() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.renew_fio_address_message)
  if (_internal_has_renew_fio_address_message()) {
    clear_has_message_oneof();
      ::TW::FIO::Proto::Action_RenewFioAddress* temp = message_oneof_.renew_fio_address_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.renew_fio_address_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::FIO::Proto::Action_RenewFioAddress& Action::_internal_renew_fio_address_message() const {
  return _internal_has_renew_fio_address_message()
      ? *message_oneof_.renew_fio_address_message_
      : reinterpret_cast< ::TW::FIO::Proto::Action_RenewFioAddress&>(::TW::FIO::Proto::_Action_RenewFioAddress_default_instance_);
}
inline const ::TW::FIO::Proto::Action_RenewFioAddress& Action::renew_fio_address_message() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.renew_fio_address_message)
  return _internal_renew_fio_address_message();
}
inline ::TW::FIO::Proto::Action_RenewFioAddress* Action::unsafe_arena_release_renew_fio_address_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.FIO.Proto.Action.renew_fio_address_message)
  if (_internal_has_renew_fio_address_message()) {
    clear_has_message_oneof();
    ::TW::FIO::Proto::Action_RenewFioAddress* temp = message_oneof_.renew_fio_address_message_;
    message_oneof_.renew_fio_address_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_renew_fio_address_message(::TW::FIO::Proto::Action_RenewFioAddress* renew_fio_address_message) {
  clear_message_oneof();
  if (renew_fio_address_message) {
    set_has_renew_fio_address_message();
    message_oneof_.renew_fio_address_message_ = renew_fio_address_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.FIO.Proto.Action.renew_fio_address_message)
}
inline ::TW::FIO::Proto::Action_RenewFioAddress* Action::_internal_mutable_renew_fio_address_message() {
  if (!_internal_has_renew_fio_address_message()) {
    clear_message_oneof();
    set_has_renew_fio_address_message();
    message_oneof_.renew_fio_address_message_ = CreateMaybeMessage< ::TW::FIO::Proto::Action_RenewFioAddress >(GetArena());
  }
  return message_oneof_.renew_fio_address_message_;
}
inline ::TW::FIO::Proto::Action_RenewFioAddress* Action::mutable_renew_fio_address_message() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.renew_fio_address_message)
  return _internal_mutable_renew_fio_address_message();
}

// .TW.FIO.Proto.Action.NewFundsRequest new_funds_request_message = 5;
inline bool Action::_internal_has_new_funds_request_message() const {
  return message_oneof_case() == kNewFundsRequestMessage;
}
inline bool Action::has_new_funds_request_message() const {
  return _internal_has_new_funds_request_message();
}
inline void Action::set_has_new_funds_request_message() {
  _oneof_case_[0] = kNewFundsRequestMessage;
}
inline void Action::clear_new_funds_request_message() {
  if (_internal_has_new_funds_request_message()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.new_funds_request_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::FIO::Proto::Action_NewFundsRequest* Action::release_new_funds_request_message() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.Action.new_funds_request_message)
  if (_internal_has_new_funds_request_message()) {
    clear_has_message_oneof();
      ::TW::FIO::Proto::Action_NewFundsRequest* temp = message_oneof_.new_funds_request_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.new_funds_request_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::FIO::Proto::Action_NewFundsRequest& Action::_internal_new_funds_request_message() const {
  return _internal_has_new_funds_request_message()
      ? *message_oneof_.new_funds_request_message_
      : reinterpret_cast< ::TW::FIO::Proto::Action_NewFundsRequest&>(::TW::FIO::Proto::_Action_NewFundsRequest_default_instance_);
}
inline const ::TW::FIO::Proto::Action_NewFundsRequest& Action::new_funds_request_message() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.Action.new_funds_request_message)
  return _internal_new_funds_request_message();
}
inline ::TW::FIO::Proto::Action_NewFundsRequest* Action::unsafe_arena_release_new_funds_request_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.FIO.Proto.Action.new_funds_request_message)
  if (_internal_has_new_funds_request_message()) {
    clear_has_message_oneof();
    ::TW::FIO::Proto::Action_NewFundsRequest* temp = message_oneof_.new_funds_request_message_;
    message_oneof_.new_funds_request_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_new_funds_request_message(::TW::FIO::Proto::Action_NewFundsRequest* new_funds_request_message) {
  clear_message_oneof();
  if (new_funds_request_message) {
    set_has_new_funds_request_message();
    message_oneof_.new_funds_request_message_ = new_funds_request_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.FIO.Proto.Action.new_funds_request_message)
}
inline ::TW::FIO::Proto::Action_NewFundsRequest* Action::_internal_mutable_new_funds_request_message() {
  if (!_internal_has_new_funds_request_message()) {
    clear_message_oneof();
    set_has_new_funds_request_message();
    message_oneof_.new_funds_request_message_ = CreateMaybeMessage< ::TW::FIO::Proto::Action_NewFundsRequest >(GetArena());
  }
  return message_oneof_.new_funds_request_message_;
}
inline ::TW::FIO::Proto::Action_NewFundsRequest* Action::mutable_new_funds_request_message() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.Action.new_funds_request_message)
  return _internal_mutable_new_funds_request_message();
}

inline bool Action::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Action::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Action::MessageOneofCase Action::message_oneof_case() const {
  return Action::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChainParams

// bytes chain_id = 1;
inline void ChainParams::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& ChainParams::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.ChainParams.chain_id)
  return _internal_chain_id();
}
inline void ChainParams::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.ChainParams.chain_id)
}
inline std::string* ChainParams::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.ChainParams.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& ChainParams::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void ChainParams::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChainParams::set_chain_id(std::string&& value) {
  
  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.ChainParams.chain_id)
}
inline void ChainParams::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.ChainParams.chain_id)
}
inline void ChainParams::set_chain_id(const void* value,
    size_t size) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.ChainParams.chain_id)
}
inline std::string* ChainParams::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChainParams::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.ChainParams.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChainParams::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.ChainParams.chain_id)
}

// uint64 head_block_number = 2;
inline void ChainParams::clear_head_block_number() {
  head_block_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChainParams::_internal_head_block_number() const {
  return head_block_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChainParams::head_block_number() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.ChainParams.head_block_number)
  return _internal_head_block_number();
}
inline void ChainParams::_internal_set_head_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  head_block_number_ = value;
}
inline void ChainParams::set_head_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_head_block_number(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.ChainParams.head_block_number)
}

// uint64 ref_block_prefix = 3;
inline void ChainParams::clear_ref_block_prefix() {
  ref_block_prefix_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChainParams::_internal_ref_block_prefix() const {
  return ref_block_prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChainParams::ref_block_prefix() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.ChainParams.ref_block_prefix)
  return _internal_ref_block_prefix();
}
inline void ChainParams::_internal_set_ref_block_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ref_block_prefix_ = value;
}
inline void ChainParams::set_ref_block_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ref_block_prefix(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.ChainParams.ref_block_prefix)
}

// -------------------------------------------------------------------

// SigningInput

// uint32 expiry = 1;
inline void SigningInput::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::expiry() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.SigningInput.expiry)
  return _internal_expiry();
}
inline void SigningInput::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void SigningInput::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.SigningInput.expiry)
}

// .TW.FIO.Proto.ChainParams chain_params = 2;
inline bool SigningInput::_internal_has_chain_params() const {
  return this != internal_default_instance() && chain_params_ != nullptr;
}
inline bool SigningInput::has_chain_params() const {
  return _internal_has_chain_params();
}
inline void SigningInput::clear_chain_params() {
  if (GetArena() == nullptr && chain_params_ != nullptr) {
    delete chain_params_;
  }
  chain_params_ = nullptr;
}
inline const ::TW::FIO::Proto::ChainParams& SigningInput::_internal_chain_params() const {
  const ::TW::FIO::Proto::ChainParams* p = chain_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::FIO::Proto::ChainParams&>(
      ::TW::FIO::Proto::_ChainParams_default_instance_);
}
inline const ::TW::FIO::Proto::ChainParams& SigningInput::chain_params() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.SigningInput.chain_params)
  return _internal_chain_params();
}
inline void SigningInput::unsafe_arena_set_allocated_chain_params(
    ::TW::FIO::Proto::ChainParams* chain_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chain_params_);
  }
  chain_params_ = chain_params;
  if (chain_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.FIO.Proto.SigningInput.chain_params)
}
inline ::TW::FIO::Proto::ChainParams* SigningInput::release_chain_params() {
  
  ::TW::FIO::Proto::ChainParams* temp = chain_params_;
  chain_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::FIO::Proto::ChainParams* SigningInput::unsafe_arena_release_chain_params() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.SigningInput.chain_params)
  
  ::TW::FIO::Proto::ChainParams* temp = chain_params_;
  chain_params_ = nullptr;
  return temp;
}
inline ::TW::FIO::Proto::ChainParams* SigningInput::_internal_mutable_chain_params() {
  
  if (chain_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::FIO::Proto::ChainParams>(GetArena());
    chain_params_ = p;
  }
  return chain_params_;
}
inline ::TW::FIO::Proto::ChainParams* SigningInput::mutable_chain_params() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.SigningInput.chain_params)
  return _internal_mutable_chain_params();
}
inline void SigningInput::set_allocated_chain_params(::TW::FIO::Proto::ChainParams* chain_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chain_params_;
  }
  if (chain_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chain_params);
    if (message_arena != submessage_arena) {
      chain_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chain_params, submessage_arena);
    }
    
  } else {
    
  }
  chain_params_ = chain_params;
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.SigningInput.chain_params)
}

// bytes private_key = 3;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.SigningInput.private_key)
}

// string tpid = 4;
inline void SigningInput::clear_tpid() {
  tpid_.ClearToEmpty();
}
inline const std::string& SigningInput::tpid() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.SigningInput.tpid)
  return _internal_tpid();
}
inline void SigningInput::set_tpid(const std::string& value) {
  _internal_set_tpid(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.SigningInput.tpid)
}
inline std::string* SigningInput::mutable_tpid() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.SigningInput.tpid)
  return _internal_mutable_tpid();
}
inline const std::string& SigningInput::_internal_tpid() const {
  return tpid_.Get();
}
inline void SigningInput::_internal_set_tpid(const std::string& value) {
  
  tpid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_tpid(std::string&& value) {
  
  tpid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.SigningInput.tpid)
}
inline void SigningInput::set_tpid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tpid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.SigningInput.tpid)
}
inline void SigningInput::set_tpid(const char* value,
    size_t size) {
  
  tpid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.SigningInput.tpid)
}
inline std::string* SigningInput::_internal_mutable_tpid() {
  
  return tpid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_tpid() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.SigningInput.tpid)
  return tpid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_tpid(std::string* tpid) {
  if (tpid != nullptr) {
    
  } else {
    
  }
  tpid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tpid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.SigningInput.tpid)
}

// .TW.FIO.Proto.Action action = 5;
inline bool SigningInput::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool SigningInput::has_action() const {
  return _internal_has_action();
}
inline void SigningInput::clear_action() {
  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
inline const ::TW::FIO::Proto::Action& SigningInput::_internal_action() const {
  const ::TW::FIO::Proto::Action* p = action_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::FIO::Proto::Action&>(
      ::TW::FIO::Proto::_Action_default_instance_);
}
inline const ::TW::FIO::Proto::Action& SigningInput::action() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.SigningInput.action)
  return _internal_action();
}
inline void SigningInput::unsafe_arena_set_allocated_action(
    ::TW::FIO::Proto::Action* action) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.FIO.Proto.SigningInput.action)
}
inline ::TW::FIO::Proto::Action* SigningInput::release_action() {
  
  ::TW::FIO::Proto::Action* temp = action_;
  action_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::FIO::Proto::Action* SigningInput::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.SigningInput.action)
  
  ::TW::FIO::Proto::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::TW::FIO::Proto::Action* SigningInput::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::FIO::Proto::Action>(GetArena());
    action_ = p;
  }
  return action_;
}
inline ::TW::FIO::Proto::Action* SigningInput::mutable_action() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.SigningInput.action)
  return _internal_mutable_action();
}
inline void SigningInput::set_allocated_action(::TW::FIO::Proto::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.SigningInput.action)
}

// -------------------------------------------------------------------

// SigningOutput

// string json = 1;
inline void SigningOutput::clear_json() {
  json_.ClearToEmpty();
}
inline const std::string& SigningOutput::json() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.SigningOutput.json)
  return _internal_json();
}
inline void SigningOutput::set_json(const std::string& value) {
  _internal_set_json(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.SigningOutput.json)
}
inline std::string* SigningOutput::mutable_json() {
  // @@protoc_insertion_point(field_mutable:TW.FIO.Proto.SigningOutput.json)
  return _internal_mutable_json();
}
inline const std::string& SigningOutput::_internal_json() const {
  return json_.Get();
}
inline void SigningOutput::_internal_set_json(const std::string& value) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_json(std::string&& value) {
  
  json_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.FIO.Proto.SigningOutput.json)
}
inline void SigningOutput::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.FIO.Proto.SigningOutput.json)
}
inline void SigningOutput::set_json(const char* value,
    size_t size) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.FIO.Proto.SigningOutput.json)
}
inline std::string* SigningOutput::_internal_mutable_json() {
  
  return json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_json() {
  // @@protoc_insertion_point(field_release:TW.FIO.Proto.SigningOutput.json)
  return json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.SigningOutput.json)
}

// .TW.Common.Proto.SigningError error = 2;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.FIO.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.FIO.Proto.SigningOutput.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace FIO
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FIO_2eproto
