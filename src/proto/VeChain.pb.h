// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VeChain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VeChain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VeChain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VeChain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VeChain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VeChain_2eproto;
namespace TW {
namespace VeChain {
namespace Proto {
class Clause;
class ClauseDefaultTypeInternal;
extern ClauseDefaultTypeInternal _Clause_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace VeChain
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::VeChain::Proto::Clause* Arena::CreateMaybeMessage<::TW::VeChain::Proto::Clause>(Arena*);
template<> ::TW::VeChain::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::VeChain::Proto::SigningInput>(Arena*);
template<> ::TW::VeChain::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::VeChain::Proto::SigningOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace VeChain {
namespace Proto {

// ===================================================================

class Clause PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.VeChain.Proto.Clause) */ {
 public:
  inline Clause() : Clause(nullptr) {}
  virtual ~Clause();

  Clause(const Clause& from);
  Clause(Clause&& from) noexcept
    : Clause() {
    *this = ::std::move(from);
  }

  inline Clause& operator=(const Clause& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clause& operator=(Clause&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clause& default_instance();

  static inline const Clause* internal_default_instance() {
    return reinterpret_cast<const Clause*>(
               &_Clause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Clause& a, Clause& b) {
    a.Swap(&b);
  }
  inline void Swap(Clause* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Clause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clause* New() const final {
    return CreateMaybeMessage<Clause>(nullptr);
  }

  Clause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clause>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clause& from);
  void MergeFrom(const Clause& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clause* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.VeChain.Proto.Clause";
  }
  protected:
  explicit Clause(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VeChain_2eproto);
    return ::descriptor_table_VeChain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kValueFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string to = 1;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.VeChain.Proto.Clause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VeChain_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.VeChain.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.VeChain.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VeChain_2eproto);
    return ::descriptor_table_VeChain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClausesFieldNumber = 4,
    kDependsOnFieldNumber = 7,
    kPrivateKeyFieldNumber = 9,
    kBlockRefFieldNumber = 2,
    kChainTagFieldNumber = 1,
    kExpirationFieldNumber = 3,
    kGasFieldNumber = 6,
    kNonceFieldNumber = 8,
    kGasPriceCoefFieldNumber = 5,
  };
  // repeated .TW.VeChain.Proto.Clause clauses = 4;
  int clauses_size() const;
  private:
  int _internal_clauses_size() const;
  public:
  void clear_clauses();
  ::TW::VeChain::Proto::Clause* mutable_clauses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::VeChain::Proto::Clause >*
      mutable_clauses();
  private:
  const ::TW::VeChain::Proto::Clause& _internal_clauses(int index) const;
  ::TW::VeChain::Proto::Clause* _internal_add_clauses();
  public:
  const ::TW::VeChain::Proto::Clause& clauses(int index) const;
  ::TW::VeChain::Proto::Clause* add_clauses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::VeChain::Proto::Clause >&
      clauses() const;

  // bytes depends_on = 7;
  void clear_depends_on();
  const std::string& depends_on() const;
  void set_depends_on(const std::string& value);
  void set_depends_on(std::string&& value);
  void set_depends_on(const char* value);
  void set_depends_on(const void* value, size_t size);
  std::string* mutable_depends_on();
  std::string* release_depends_on();
  void set_allocated_depends_on(std::string* depends_on);
  private:
  const std::string& _internal_depends_on() const;
  void _internal_set_depends_on(const std::string& value);
  std::string* _internal_mutable_depends_on();
  public:

  // bytes private_key = 9;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // uint64 block_ref = 2;
  void clear_block_ref();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_ref() const;
  void set_block_ref(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_ref() const;
  void _internal_set_block_ref(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 chain_tag = 1;
  void clear_chain_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_tag() const;
  void set_chain_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chain_tag() const;
  void _internal_set_chain_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiration = 3;
  void clear_expiration();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration() const;
  void set_expiration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiration() const;
  void _internal_set_expiration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 gas = 6;
  void clear_gas();
  ::PROTOBUF_NAMESPACE_ID::uint64 gas() const;
  void set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gas() const;
  void _internal_set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 nonce = 8;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 gas_price_coef = 5;
  void clear_gas_price_coef();
  ::PROTOBUF_NAMESPACE_ID::uint32 gas_price_coef() const;
  void set_gas_price_coef(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gas_price_coef() const;
  void _internal_set_gas_price_coef(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.VeChain.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::VeChain::Proto::Clause > clauses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depends_on_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_ref_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gas_price_coef_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VeChain_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.VeChain.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.VeChain.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VeChain_2eproto);
    return ::descriptor_table_VeChain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:TW.VeChain.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VeChain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Clause

// string to = 1;
inline void Clause::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Clause::to() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.Clause.to)
  return _internal_to();
}
inline void Clause::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.Clause.to)
}
inline std::string* Clause::mutable_to() {
  // @@protoc_insertion_point(field_mutable:TW.VeChain.Proto.Clause.to)
  return _internal_mutable_to();
}
inline const std::string& Clause::_internal_to() const {
  return to_.Get();
}
inline void Clause::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Clause::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.VeChain.Proto.Clause.to)
}
inline void Clause::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.VeChain.Proto.Clause.to)
}
inline void Clause::set_to(const char* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.VeChain.Proto.Clause.to)
}
inline std::string* Clause::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Clause::release_to() {
  // @@protoc_insertion_point(field_release:TW.VeChain.Proto.Clause.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Clause::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.VeChain.Proto.Clause.to)
}

// bytes value = 2;
inline void Clause::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Clause::value() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.Clause.value)
  return _internal_value();
}
inline void Clause::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.Clause.value)
}
inline std::string* Clause::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TW.VeChain.Proto.Clause.value)
  return _internal_mutable_value();
}
inline const std::string& Clause::_internal_value() const {
  return value_.Get();
}
inline void Clause::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Clause::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.VeChain.Proto.Clause.value)
}
inline void Clause::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.VeChain.Proto.Clause.value)
}
inline void Clause::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.VeChain.Proto.Clause.value)
}
inline std::string* Clause::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Clause::release_value() {
  // @@protoc_insertion_point(field_release:TW.VeChain.Proto.Clause.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Clause::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.VeChain.Proto.Clause.value)
}

// bytes data = 3;
inline void Clause::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Clause::data() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.Clause.data)
  return _internal_data();
}
inline void Clause::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.Clause.data)
}
inline std::string* Clause::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.VeChain.Proto.Clause.data)
  return _internal_mutable_data();
}
inline const std::string& Clause::_internal_data() const {
  return data_.Get();
}
inline void Clause::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Clause::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.VeChain.Proto.Clause.data)
}
inline void Clause::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.VeChain.Proto.Clause.data)
}
inline void Clause::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.VeChain.Proto.Clause.data)
}
inline std::string* Clause::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Clause::release_data() {
  // @@protoc_insertion_point(field_release:TW.VeChain.Proto.Clause.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Clause::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.VeChain.Proto.Clause.data)
}

// -------------------------------------------------------------------

// SigningInput

// uint32 chain_tag = 1;
inline void SigningInput::clear_chain_tag() {
  chain_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_chain_tag() const {
  return chain_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::chain_tag() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningInput.chain_tag)
  return _internal_chain_tag();
}
inline void SigningInput::_internal_set_chain_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chain_tag_ = value;
}
inline void SigningInput::set_chain_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chain_tag(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningInput.chain_tag)
}

// uint64 block_ref = 2;
inline void SigningInput::clear_block_ref() {
  block_ref_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_block_ref() const {
  return block_ref_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::block_ref() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningInput.block_ref)
  return _internal_block_ref();
}
inline void SigningInput::_internal_set_block_ref(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_ref_ = value;
}
inline void SigningInput::set_block_ref(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_ref(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningInput.block_ref)
}

// uint32 expiration = 3;
inline void SigningInput::clear_expiration() {
  expiration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_expiration() const {
  return expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::expiration() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningInput.expiration)
  return _internal_expiration();
}
inline void SigningInput::_internal_set_expiration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiration_ = value;
}
inline void SigningInput::set_expiration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningInput.expiration)
}

// repeated .TW.VeChain.Proto.Clause clauses = 4;
inline int SigningInput::_internal_clauses_size() const {
  return clauses_.size();
}
inline int SigningInput::clauses_size() const {
  return _internal_clauses_size();
}
inline void SigningInput::clear_clauses() {
  clauses_.Clear();
}
inline ::TW::VeChain::Proto::Clause* SigningInput::mutable_clauses(int index) {
  // @@protoc_insertion_point(field_mutable:TW.VeChain.Proto.SigningInput.clauses)
  return clauses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::VeChain::Proto::Clause >*
SigningInput::mutable_clauses() {
  // @@protoc_insertion_point(field_mutable_list:TW.VeChain.Proto.SigningInput.clauses)
  return &clauses_;
}
inline const ::TW::VeChain::Proto::Clause& SigningInput::_internal_clauses(int index) const {
  return clauses_.Get(index);
}
inline const ::TW::VeChain::Proto::Clause& SigningInput::clauses(int index) const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningInput.clauses)
  return _internal_clauses(index);
}
inline ::TW::VeChain::Proto::Clause* SigningInput::_internal_add_clauses() {
  return clauses_.Add();
}
inline ::TW::VeChain::Proto::Clause* SigningInput::add_clauses() {
  // @@protoc_insertion_point(field_add:TW.VeChain.Proto.SigningInput.clauses)
  return _internal_add_clauses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::VeChain::Proto::Clause >&
SigningInput::clauses() const {
  // @@protoc_insertion_point(field_list:TW.VeChain.Proto.SigningInput.clauses)
  return clauses_;
}

// uint32 gas_price_coef = 5;
inline void SigningInput::clear_gas_price_coef() {
  gas_price_coef_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_gas_price_coef() const {
  return gas_price_coef_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::gas_price_coef() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningInput.gas_price_coef)
  return _internal_gas_price_coef();
}
inline void SigningInput::_internal_set_gas_price_coef(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gas_price_coef_ = value;
}
inline void SigningInput::set_gas_price_coef(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gas_price_coef(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningInput.gas_price_coef)
}

// uint64 gas = 6;
inline void SigningInput::clear_gas() {
  gas_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_gas() const {
  return gas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::gas() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningInput.gas)
  return _internal_gas();
}
inline void SigningInput::_internal_set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gas_ = value;
}
inline void SigningInput::set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningInput.gas)
}

// bytes depends_on = 7;
inline void SigningInput::clear_depends_on() {
  depends_on_.ClearToEmpty();
}
inline const std::string& SigningInput::depends_on() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningInput.depends_on)
  return _internal_depends_on();
}
inline void SigningInput::set_depends_on(const std::string& value) {
  _internal_set_depends_on(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningInput.depends_on)
}
inline std::string* SigningInput::mutable_depends_on() {
  // @@protoc_insertion_point(field_mutable:TW.VeChain.Proto.SigningInput.depends_on)
  return _internal_mutable_depends_on();
}
inline const std::string& SigningInput::_internal_depends_on() const {
  return depends_on_.Get();
}
inline void SigningInput::_internal_set_depends_on(const std::string& value) {
  
  depends_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_depends_on(std::string&& value) {
  
  depends_on_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.VeChain.Proto.SigningInput.depends_on)
}
inline void SigningInput::set_depends_on(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  depends_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.VeChain.Proto.SigningInput.depends_on)
}
inline void SigningInput::set_depends_on(const void* value,
    size_t size) {
  
  depends_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.VeChain.Proto.SigningInput.depends_on)
}
inline std::string* SigningInput::_internal_mutable_depends_on() {
  
  return depends_on_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_depends_on() {
  // @@protoc_insertion_point(field_release:TW.VeChain.Proto.SigningInput.depends_on)
  return depends_on_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_depends_on(std::string* depends_on) {
  if (depends_on != nullptr) {
    
  } else {
    
  }
  depends_on_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depends_on,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.VeChain.Proto.SigningInput.depends_on)
}

// uint64 nonce = 8;
inline void SigningInput::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::nonce() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningInput.nonce)
  return _internal_nonce();
}
inline void SigningInput::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void SigningInput::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningInput.nonce)
}

// bytes private_key = 9;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.VeChain.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.VeChain.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.VeChain.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.VeChain.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.VeChain.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.VeChain.Proto.SigningInput.private_key)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.VeChain.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.VeChain.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.VeChain.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.VeChain.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.VeChain.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.VeChain.Proto.SigningOutput.encoded)
}

// bytes signature = 2;
inline void SigningOutput::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature() const {
  // @@protoc_insertion_point(field_get:TW.VeChain.Proto.SigningOutput.signature)
  return _internal_signature();
}
inline void SigningOutput::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:TW.VeChain.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:TW.VeChain.Proto.SigningOutput.signature)
  return _internal_mutable_signature();
}
inline const std::string& SigningOutput::_internal_signature() const {
  return signature_.Get();
}
inline void SigningOutput::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.VeChain.Proto.SigningOutput.signature)
}
inline void SigningOutput::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.VeChain.Proto.SigningOutput.signature)
}
inline void SigningOutput::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.VeChain.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_signature() {
  // @@protoc_insertion_point(field_release:TW.VeChain.Proto.SigningOutput.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.VeChain.Proto.SigningOutput.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace VeChain
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VeChain_2eproto
