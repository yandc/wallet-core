// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nano.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Nano_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Nano_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Nano_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Nano_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Nano_2eproto;
namespace TW {
namespace Nano {
namespace Proto {
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Nano
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Nano::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Nano::Proto::SigningInput>(Arena*);
template<> ::TW::Nano::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Nano::Proto::SigningOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Nano {
namespace Proto {

// ===================================================================

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nano.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  enum LinkOneofCase {
    kLinkBlock = 3,
    kLinkRecipient = 4,
    LINK_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nano.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nano_2eproto);
    return ::descriptor_table_Nano_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 1,
    kParentBlockFieldNumber = 2,
    kRepresentativeFieldNumber = 5,
    kBalanceFieldNumber = 6,
    kWorkFieldNumber = 7,
    kLinkBlockFieldNumber = 3,
    kLinkRecipientFieldNumber = 4,
  };
  // bytes private_key = 1;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // bytes parent_block = 2;
  void clear_parent_block();
  const std::string& parent_block() const;
  void set_parent_block(const std::string& value);
  void set_parent_block(std::string&& value);
  void set_parent_block(const char* value);
  void set_parent_block(const void* value, size_t size);
  std::string* mutable_parent_block();
  std::string* release_parent_block();
  void set_allocated_parent_block(std::string* parent_block);
  private:
  const std::string& _internal_parent_block() const;
  void _internal_set_parent_block(const std::string& value);
  std::string* _internal_mutable_parent_block();
  public:

  // string representative = 5;
  void clear_representative();
  const std::string& representative() const;
  void set_representative(const std::string& value);
  void set_representative(std::string&& value);
  void set_representative(const char* value);
  void set_representative(const char* value, size_t size);
  std::string* mutable_representative();
  std::string* release_representative();
  void set_allocated_representative(std::string* representative);
  private:
  const std::string& _internal_representative() const;
  void _internal_set_representative(const std::string& value);
  std::string* _internal_mutable_representative();
  public:

  // string balance = 6;
  void clear_balance();
  const std::string& balance() const;
  void set_balance(const std::string& value);
  void set_balance(std::string&& value);
  void set_balance(const char* value);
  void set_balance(const char* value, size_t size);
  std::string* mutable_balance();
  std::string* release_balance();
  void set_allocated_balance(std::string* balance);
  private:
  const std::string& _internal_balance() const;
  void _internal_set_balance(const std::string& value);
  std::string* _internal_mutable_balance();
  public:

  // string work = 7;
  void clear_work();
  const std::string& work() const;
  void set_work(const std::string& value);
  void set_work(std::string&& value);
  void set_work(const char* value);
  void set_work(const char* value, size_t size);
  std::string* mutable_work();
  std::string* release_work();
  void set_allocated_work(std::string* work);
  private:
  const std::string& _internal_work() const;
  void _internal_set_work(const std::string& value);
  std::string* _internal_mutable_work();
  public:

  // bytes link_block = 3;
  private:
  bool _internal_has_link_block() const;
  public:
  void clear_link_block();
  const std::string& link_block() const;
  void set_link_block(const std::string& value);
  void set_link_block(std::string&& value);
  void set_link_block(const char* value);
  void set_link_block(const void* value, size_t size);
  std::string* mutable_link_block();
  std::string* release_link_block();
  void set_allocated_link_block(std::string* link_block);
  private:
  const std::string& _internal_link_block() const;
  void _internal_set_link_block(const std::string& value);
  std::string* _internal_mutable_link_block();
  public:

  // string link_recipient = 4;
  private:
  bool _internal_has_link_recipient() const;
  public:
  void clear_link_recipient();
  const std::string& link_recipient() const;
  void set_link_recipient(const std::string& value);
  void set_link_recipient(std::string&& value);
  void set_link_recipient(const char* value);
  void set_link_recipient(const char* value, size_t size);
  std::string* mutable_link_recipient();
  std::string* release_link_recipient();
  void set_allocated_link_recipient(std::string* link_recipient);
  private:
  const std::string& _internal_link_recipient() const;
  void _internal_set_link_recipient(const std::string& value);
  std::string* _internal_mutable_link_recipient();
  public:

  void clear_link_oneof();
  LinkOneofCase link_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Nano.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_link_block();
  void set_has_link_recipient();

  inline bool has_link_oneof() const;
  inline void clear_has_link_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr representative_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr balance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr work_;
  union LinkOneofUnion {
    LinkOneofUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_block_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_recipient_;
  } link_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Nano_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Nano.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Nano.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nano_2eproto);
    return ::descriptor_table_Nano_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kBlockHashFieldNumber = 2,
    kJsonFieldNumber = 3,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes block_hash = 2;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // string json = 3;
  void clear_json();
  const std::string& json() const;
  void set_json(const std::string& value);
  void set_json(std::string&& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  std::string* mutable_json();
  std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:TW.Nano.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nano_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SigningInput

// bytes private_key = 1;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningInput.private_key)
}

// bytes parent_block = 2;
inline void SigningInput::clear_parent_block() {
  parent_block_.ClearToEmpty();
}
inline const std::string& SigningInput::parent_block() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningInput.parent_block)
  return _internal_parent_block();
}
inline void SigningInput::set_parent_block(const std::string& value) {
  _internal_set_parent_block(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningInput.parent_block)
}
inline std::string* SigningInput::mutable_parent_block() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningInput.parent_block)
  return _internal_mutable_parent_block();
}
inline const std::string& SigningInput::_internal_parent_block() const {
  return parent_block_.Get();
}
inline void SigningInput::_internal_set_parent_block(const std::string& value) {
  
  parent_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_parent_block(std::string&& value) {
  
  parent_block_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningInput.parent_block)
}
inline void SigningInput::set_parent_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningInput.parent_block)
}
inline void SigningInput::set_parent_block(const void* value,
    size_t size) {
  
  parent_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningInput.parent_block)
}
inline std::string* SigningInput::_internal_mutable_parent_block() {
  
  return parent_block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_parent_block() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningInput.parent_block)
  return parent_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_parent_block(std::string* parent_block) {
  if (parent_block != nullptr) {
    
  } else {
    
  }
  parent_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningInput.parent_block)
}

// bytes link_block = 3;
inline bool SigningInput::_internal_has_link_block() const {
  return link_oneof_case() == kLinkBlock;
}
inline void SigningInput::set_has_link_block() {
  _oneof_case_[0] = kLinkBlock;
}
inline void SigningInput::clear_link_block() {
  if (_internal_has_link_block()) {
    link_oneof_.link_block_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_link_oneof();
  }
}
inline const std::string& SigningInput::link_block() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningInput.link_block)
  return _internal_link_block();
}
inline void SigningInput::set_link_block(const std::string& value) {
  _internal_set_link_block(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningInput.link_block)
}
inline std::string* SigningInput::mutable_link_block() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningInput.link_block)
  return _internal_mutable_link_block();
}
inline const std::string& SigningInput::_internal_link_block() const {
  if (_internal_has_link_block()) {
    return link_oneof_.link_block_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SigningInput::_internal_set_link_block(const std::string& value) {
  if (!_internal_has_link_block()) {
    clear_link_oneof();
    set_has_link_block();
    link_oneof_.link_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  link_oneof_.link_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_link_block(std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningInput.link_block)
  if (!_internal_has_link_block()) {
    clear_link_oneof();
    set_has_link_block();
    link_oneof_.link_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  link_oneof_.link_block_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningInput.link_block)
}
inline void SigningInput::set_link_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_link_block()) {
    clear_link_oneof();
    set_has_link_block();
    link_oneof_.link_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  link_oneof_.link_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningInput.link_block)
}
inline void SigningInput::set_link_block(const void* value,
                             size_t size) {
  if (!_internal_has_link_block()) {
    clear_link_oneof();
    set_has_link_block();
    link_oneof_.link_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  link_oneof_.link_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningInput.link_block)
}
inline std::string* SigningInput::_internal_mutable_link_block() {
  if (!_internal_has_link_block()) {
    clear_link_oneof();
    set_has_link_block();
    link_oneof_.link_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return link_oneof_.link_block_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_link_block() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningInput.link_block)
  if (_internal_has_link_block()) {
    clear_has_link_oneof();
    return link_oneof_.link_block_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SigningInput::set_allocated_link_block(std::string* link_block) {
  if (has_link_oneof()) {
    clear_link_oneof();
  }
  if (link_block != nullptr) {
    set_has_link_block();
    link_oneof_.link_block_.UnsafeSetDefault(link_block);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(link_block);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningInput.link_block)
}

// string link_recipient = 4;
inline bool SigningInput::_internal_has_link_recipient() const {
  return link_oneof_case() == kLinkRecipient;
}
inline void SigningInput::set_has_link_recipient() {
  _oneof_case_[0] = kLinkRecipient;
}
inline void SigningInput::clear_link_recipient() {
  if (_internal_has_link_recipient()) {
    link_oneof_.link_recipient_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_link_oneof();
  }
}
inline const std::string& SigningInput::link_recipient() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningInput.link_recipient)
  return _internal_link_recipient();
}
inline void SigningInput::set_link_recipient(const std::string& value) {
  _internal_set_link_recipient(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningInput.link_recipient)
}
inline std::string* SigningInput::mutable_link_recipient() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningInput.link_recipient)
  return _internal_mutable_link_recipient();
}
inline const std::string& SigningInput::_internal_link_recipient() const {
  if (_internal_has_link_recipient()) {
    return link_oneof_.link_recipient_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SigningInput::_internal_set_link_recipient(const std::string& value) {
  if (!_internal_has_link_recipient()) {
    clear_link_oneof();
    set_has_link_recipient();
    link_oneof_.link_recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  link_oneof_.link_recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_link_recipient(std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningInput.link_recipient)
  if (!_internal_has_link_recipient()) {
    clear_link_oneof();
    set_has_link_recipient();
    link_oneof_.link_recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  link_oneof_.link_recipient_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningInput.link_recipient)
}
inline void SigningInput::set_link_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_link_recipient()) {
    clear_link_oneof();
    set_has_link_recipient();
    link_oneof_.link_recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  link_oneof_.link_recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningInput.link_recipient)
}
inline void SigningInput::set_link_recipient(const char* value,
                             size_t size) {
  if (!_internal_has_link_recipient()) {
    clear_link_oneof();
    set_has_link_recipient();
    link_oneof_.link_recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  link_oneof_.link_recipient_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningInput.link_recipient)
}
inline std::string* SigningInput::_internal_mutable_link_recipient() {
  if (!_internal_has_link_recipient()) {
    clear_link_oneof();
    set_has_link_recipient();
    link_oneof_.link_recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return link_oneof_.link_recipient_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_link_recipient() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningInput.link_recipient)
  if (_internal_has_link_recipient()) {
    clear_has_link_oneof();
    return link_oneof_.link_recipient_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SigningInput::set_allocated_link_recipient(std::string* link_recipient) {
  if (has_link_oneof()) {
    clear_link_oneof();
  }
  if (link_recipient != nullptr) {
    set_has_link_recipient();
    link_oneof_.link_recipient_.UnsafeSetDefault(link_recipient);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(link_recipient);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningInput.link_recipient)
}

// string representative = 5;
inline void SigningInput::clear_representative() {
  representative_.ClearToEmpty();
}
inline const std::string& SigningInput::representative() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningInput.representative)
  return _internal_representative();
}
inline void SigningInput::set_representative(const std::string& value) {
  _internal_set_representative(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningInput.representative)
}
inline std::string* SigningInput::mutable_representative() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningInput.representative)
  return _internal_mutable_representative();
}
inline const std::string& SigningInput::_internal_representative() const {
  return representative_.Get();
}
inline void SigningInput::_internal_set_representative(const std::string& value) {
  
  representative_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_representative(std::string&& value) {
  
  representative_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningInput.representative)
}
inline void SigningInput::set_representative(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  representative_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningInput.representative)
}
inline void SigningInput::set_representative(const char* value,
    size_t size) {
  
  representative_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningInput.representative)
}
inline std::string* SigningInput::_internal_mutable_representative() {
  
  return representative_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_representative() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningInput.representative)
  return representative_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_representative(std::string* representative) {
  if (representative != nullptr) {
    
  } else {
    
  }
  representative_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), representative,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningInput.representative)
}

// string balance = 6;
inline void SigningInput::clear_balance() {
  balance_.ClearToEmpty();
}
inline const std::string& SigningInput::balance() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningInput.balance)
  return _internal_balance();
}
inline void SigningInput::set_balance(const std::string& value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningInput.balance)
}
inline std::string* SigningInput::mutable_balance() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningInput.balance)
  return _internal_mutable_balance();
}
inline const std::string& SigningInput::_internal_balance() const {
  return balance_.Get();
}
inline void SigningInput::_internal_set_balance(const std::string& value) {
  
  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_balance(std::string&& value) {
  
  balance_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningInput.balance)
}
inline void SigningInput::set_balance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningInput.balance)
}
inline void SigningInput::set_balance(const char* value,
    size_t size) {
  
  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningInput.balance)
}
inline std::string* SigningInput::_internal_mutable_balance() {
  
  return balance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_balance() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningInput.balance)
  return balance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_balance(std::string* balance) {
  if (balance != nullptr) {
    
  } else {
    
  }
  balance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), balance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningInput.balance)
}

// string work = 7;
inline void SigningInput::clear_work() {
  work_.ClearToEmpty();
}
inline const std::string& SigningInput::work() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningInput.work)
  return _internal_work();
}
inline void SigningInput::set_work(const std::string& value) {
  _internal_set_work(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningInput.work)
}
inline std::string* SigningInput::mutable_work() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningInput.work)
  return _internal_mutable_work();
}
inline const std::string& SigningInput::_internal_work() const {
  return work_.Get();
}
inline void SigningInput::_internal_set_work(const std::string& value) {
  
  work_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_work(std::string&& value) {
  
  work_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningInput.work)
}
inline void SigningInput::set_work(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  work_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningInput.work)
}
inline void SigningInput::set_work(const char* value,
    size_t size) {
  
  work_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningInput.work)
}
inline std::string* SigningInput::_internal_mutable_work() {
  
  return work_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_work() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningInput.work)
  return work_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_work(std::string* work) {
  if (work != nullptr) {
    
  } else {
    
  }
  work_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), work,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningInput.work)
}

inline bool SigningInput::has_link_oneof() const {
  return link_oneof_case() != LINK_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_link_oneof() {
  _oneof_case_[0] = LINK_ONEOF_NOT_SET;
}
inline SigningInput::LinkOneofCase SigningInput::link_oneof_case() const {
  return SigningInput::LinkOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// bytes signature = 1;
inline void SigningOutput::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningOutput.signature)
  return _internal_signature();
}
inline void SigningOutput::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningOutput.signature)
  return _internal_mutable_signature();
}
inline const std::string& SigningOutput::_internal_signature() const {
  return signature_.Get();
}
inline void SigningOutput::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningOutput.signature)
}
inline void SigningOutput::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningOutput.signature)
}
inline void SigningOutput::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_signature() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningOutput.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningOutput.signature)
}

// bytes block_hash = 2;
inline void SigningOutput::clear_block_hash() {
  block_hash_.ClearToEmpty();
}
inline const std::string& SigningOutput::block_hash() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningOutput.block_hash)
  return _internal_block_hash();
}
inline void SigningOutput::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningOutput.block_hash)
}
inline std::string* SigningOutput::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningOutput.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& SigningOutput::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void SigningOutput::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_block_hash(std::string&& value) {
  
  block_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningOutput.block_hash)
}
inline void SigningOutput::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningOutput.block_hash)
}
inline void SigningOutput::set_block_hash(const void* value,
    size_t size) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningOutput.block_hash)
}
inline std::string* SigningOutput::_internal_mutable_block_hash() {
  
  return block_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_block_hash() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningOutput.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningOutput.block_hash)
}

// string json = 3;
inline void SigningOutput::clear_json() {
  json_.ClearToEmpty();
}
inline const std::string& SigningOutput::json() const {
  // @@protoc_insertion_point(field_get:TW.Nano.Proto.SigningOutput.json)
  return _internal_json();
}
inline void SigningOutput::set_json(const std::string& value) {
  _internal_set_json(value);
  // @@protoc_insertion_point(field_set:TW.Nano.Proto.SigningOutput.json)
}
inline std::string* SigningOutput::mutable_json() {
  // @@protoc_insertion_point(field_mutable:TW.Nano.Proto.SigningOutput.json)
  return _internal_mutable_json();
}
inline const std::string& SigningOutput::_internal_json() const {
  return json_.Get();
}
inline void SigningOutput::_internal_set_json(const std::string& value) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_json(std::string&& value) {
  
  json_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Nano.Proto.SigningOutput.json)
}
inline void SigningOutput::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Nano.Proto.SigningOutput.json)
}
inline void SigningOutput::set_json(const char* value,
    size_t size) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Nano.Proto.SigningOutput.json)
}
inline std::string* SigningOutput::_internal_mutable_json() {
  
  return json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_json() {
  // @@protoc_insertion_point(field_release:TW.Nano.Proto.SigningOutput.json)
  return json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Nano.Proto.SigningOutput.json)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Nano
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Nano_2eproto
