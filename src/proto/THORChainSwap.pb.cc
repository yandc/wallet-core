// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: THORChainSwap.proto

#include "THORChainSwap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Binance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_SigningInput_Binance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Bitcoin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SigningInput_Bitcoin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SigningInput_Ethereum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_THORChainSwap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Asset_THORChainSwap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_THORChainSwap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_THORChainSwap_2eproto;
namespace TW {
namespace THORChainSwap {
namespace Proto {
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
class AssetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Asset> _instance;
} _Asset_default_instance_;
class SwapInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapInput> _instance;
} _SwapInput_default_instance_;
class SwapOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapOutput> _instance;
} _SwapOutput_default_instance_;
}  // namespace Proto
}  // namespace THORChainSwap
}  // namespace TW
static void InitDefaultsscc_info_Asset_THORChainSwap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::THORChainSwap::Proto::_Asset_default_instance_;
    new (ptr) ::TW::THORChainSwap::Proto::Asset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Asset_THORChainSwap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Asset_THORChainSwap_2eproto}, {}};

static void InitDefaultsscc_info_Error_THORChainSwap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::THORChainSwap::Proto::_Error_default_instance_;
    new (ptr) ::TW::THORChainSwap::Proto::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_THORChainSwap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Error_THORChainSwap_2eproto}, {}};

static void InitDefaultsscc_info_SwapInput_THORChainSwap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::THORChainSwap::Proto::_SwapInput_default_instance_;
    new (ptr) ::TW::THORChainSwap::Proto::SwapInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapInput_THORChainSwap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SwapInput_THORChainSwap_2eproto}, {
      &scc_info_Asset_THORChainSwap_2eproto.base,}};

static void InitDefaultsscc_info_SwapOutput_THORChainSwap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::THORChainSwap::Proto::_SwapOutput_default_instance_;
    new (ptr) ::TW::THORChainSwap::Proto::SwapOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SwapOutput_THORChainSwap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SwapOutput_THORChainSwap_2eproto}, {
      &scc_info_Error_THORChainSwap_2eproto.base,
      &scc_info_SigningInput_Bitcoin_2eproto.base,
      &scc_info_SigningInput_Ethereum_2eproto.base,
      &scc_info_SigningInput_Binance_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_THORChainSwap_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_THORChainSwap_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_THORChainSwap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_THORChainSwap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Error, code_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Error, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Asset, chain_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Asset, symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Asset, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, from_chain_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, from_address_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, to_asset_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, vault_address_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, router_address_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, from_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, to_amount_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, from_chain_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, to_chain_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, error_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, signing_input_oneof_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::THORChainSwap::Proto::Error)},
  { 7, -1, sizeof(::TW::THORChainSwap::Proto::Asset)},
  { 15, -1, sizeof(::TW::THORChainSwap::Proto::SwapInput)},
  { 28, -1, sizeof(::TW::THORChainSwap::Proto::SwapOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::THORChainSwap::Proto::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::THORChainSwap::Proto::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::THORChainSwap::Proto::_SwapInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::THORChainSwap::Proto::_SwapOutput_default_instance_),
};

const char descriptor_table_protodef_THORChainSwap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023THORChainSwap.proto\022\026TW.THORChainSwap."
  "Proto\032\rBitcoin.proto\032\016Ethereum.proto\032\rBi"
  "nance.proto\"I\n\005Error\022/\n\004code\030\001 \001(\0162!.TW."
  "THORChainSwap.Proto.ErrorCode\022\017\n\007message"
  "\030\002 \001(\t\"W\n\005Asset\022,\n\005chain\030\001 \001(\0162\035.TW.THOR"
  "ChainSwap.Proto.Chain\022\016\n\006symbol\030\002 \001(\t\022\020\n"
  "\010token_id\030\003 \001(\t\"\366\001\n\tSwapInput\0221\n\nfrom_ch"
  "ain\030\001 \001(\0162\035.TW.THORChainSwap.Proto.Chain"
  "\022\024\n\014from_address\030\002 \001(\t\022/\n\010to_asset\030\003 \001(\013"
  "2\035.TW.THORChainSwap.Proto.Asset\022\022\n\nto_ad"
  "dress\030\004 \001(\t\022\025\n\rvault_address\030\005 \001(\t\022\026\n\016ro"
  "uter_address\030\006 \001(\t\022\023\n\013from_amount\030\007 \001(\t\022"
  "\027\n\017to_amount_limit\030\010 \001(\t\"\320\002\n\nSwapOutput\022"
  "1\n\nfrom_chain\030\001 \001(\0162\035.TW.THORChainSwap.P"
  "roto.Chain\022/\n\010to_chain\030\002 \001(\0162\035.TW.THORCh"
  "ainSwap.Proto.Chain\022,\n\005error\030\003 \001(\0132\035.TW."
  "THORChainSwap.Proto.Error\0221\n\007bitcoin\030\004 \001"
  "(\0132\036.TW.Bitcoin.Proto.SigningInputH\000\0223\n\010"
  "ethereum\030\005 \001(\0132\037.TW.Ethereum.Proto.Signi"
  "ngInputH\000\0221\n\007binance\030\006 \001(\0132\036.TW.Binance."
  "Proto.SigningInputH\000B\025\n\023signing_input_on"
  "eof*,\n\005Chain\022\010\n\004THOR\020\000\022\007\n\003BTC\020\001\022\007\n\003ETH\020\002"
  "\022\007\n\003BNB\020\003*\220\002\n\tErrorCode\022\006\n\002OK\020\000\022\021\n\rError"
  "_general\020\001\022%\n!Error_Input_proto_deserial"
  "ization\020\002\022 \n\034Error_Unsupported_from_chai"
  "n\020\r\022\036\n\032Error_Unsupported_to_chain\020\016\022\036\n\032E"
  "rror_Invalid_from_address\020\017\022\034\n\030Error_Inv"
  "alid_to_address\020\020\022\037\n\033Error_Invalid_vault"
  "_address\020\025\022 \n\034Error_Invalid_router_addre"
  "ss\020\026B\027\n\025wallet.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_THORChainSwap_2eproto_deps[3] = {
  &::descriptor_table_Binance_2eproto,
  &::descriptor_table_Bitcoin_2eproto,
  &::descriptor_table_Ethereum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_THORChainSwap_2eproto_sccs[4] = {
  &scc_info_Asset_THORChainSwap_2eproto.base,
  &scc_info_Error_THORChainSwap_2eproto.base,
  &scc_info_SwapInput_THORChainSwap_2eproto.base,
  &scc_info_SwapOutput_THORChainSwap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_THORChainSwap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_THORChainSwap_2eproto = {
  false, false, descriptor_table_protodef_THORChainSwap_2eproto, "THORChainSwap.proto", 1197,
  &descriptor_table_THORChainSwap_2eproto_once, descriptor_table_THORChainSwap_2eproto_sccs, descriptor_table_THORChainSwap_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_THORChainSwap_2eproto::offsets,
  file_level_metadata_THORChainSwap_2eproto, 4, file_level_enum_descriptors_THORChainSwap_2eproto, file_level_service_descriptors_THORChainSwap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_THORChainSwap_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_THORChainSwap_2eproto)), true);
namespace TW {
namespace THORChainSwap {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chain_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_THORChainSwap_2eproto);
  return file_level_enum_descriptors_THORChainSwap_2eproto[0];
}
bool Chain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_THORChainSwap_2eproto);
  return file_level_enum_descriptors_THORChainSwap_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 13:
    case 14:
    case 15:
    case 16:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.THORChainSwap.Proto.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:TW.THORChainSwap.Proto.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_THORChainSwap_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:TW.THORChainSwap.Proto.Error)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_THORChainSwap_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.THORChainSwap.Proto.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.THORChainSwap.Proto.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::TW::THORChainSwap::Proto::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.Error.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.THORChainSwap.Proto.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.ErrorCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.THORChainSwap.Proto.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.THORChainSwap.Proto.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .TW.THORChainSwap.Proto.ErrorCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.THORChainSwap.Proto.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.THORChainSwap.Proto.Error)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.THORChainSwap.Proto.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.THORChainSwap.Proto.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.THORChainSwap.Proto.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.THORChainSwap.Proto.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.THORChainSwap.Proto.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArena());
  }
  chain_ = from.chain_;
  // @@protoc_insertion_point(copy_constructor:TW.THORChainSwap.Proto.Asset)
}

void Asset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Asset_THORChainSwap_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_ = 0;
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:TW.THORChainSwap.Proto.Asset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Asset& Asset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Asset_THORChainSwap_2eproto.base);
  return *internal_default_instance();
}


void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.THORChainSwap.Proto.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty();
  token_id_.ClearToEmpty();
  chain_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.THORChainSwap.Proto.Chain chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chain(static_cast<::TW::THORChainSwap::Proto::Chain>(val));
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.Asset.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.Asset.token_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Asset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.THORChainSwap.Proto.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.Chain chain = 1;
  if (this->chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chain(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.Asset.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string token_id = 3;
  if (this->token_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_id().data(), static_cast<int>(this->_internal_token_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.Asset.token_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.THORChainSwap.Proto.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.THORChainSwap.Proto.Asset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string token_id = 3;
  if (this->token_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_id());
  }

  // .TW.THORChainSwap.Proto.Chain chain = 1;
  if (this->chain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Asset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.THORChainSwap.Proto.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  const Asset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Asset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.THORChainSwap.Proto.Asset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.THORChainSwap.Proto.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.THORChainSwap.Proto.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.token_id().size() > 0) {
    _internal_set_token_id(from._internal_token_id());
  }
  if (from.chain() != 0) {
    _internal_set_chain(from._internal_chain());
  }
}

void Asset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.THORChainSwap.Proto.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.THORChainSwap.Proto.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_id_.Swap(&other->token_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(chain_, other->chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SwapInput::_Internal {
 public:
  static const ::TW::THORChainSwap::Proto::Asset& to_asset(const SwapInput* msg);
};

const ::TW::THORChainSwap::Proto::Asset&
SwapInput::_Internal::to_asset(const SwapInput* msg) {
  return *msg->to_asset_;
}
SwapInput::SwapInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.THORChainSwap.Proto.SwapInput)
}
SwapInput::SwapInput(const SwapInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_address().empty()) {
    from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_address(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  vault_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vault_address().empty()) {
    vault_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vault_address(), 
      GetArena());
  }
  router_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_router_address().empty()) {
    router_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_router_address(), 
      GetArena());
  }
  from_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_amount().empty()) {
    from_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_amount(), 
      GetArena());
  }
  to_amount_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_amount_limit().empty()) {
    to_amount_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_amount_limit(), 
      GetArena());
  }
  if (from._internal_has_to_asset()) {
    to_asset_ = new ::TW::THORChainSwap::Proto::Asset(*from.to_asset_);
  } else {
    to_asset_ = nullptr;
  }
  from_chain_ = from.from_chain_;
  // @@protoc_insertion_point(copy_constructor:TW.THORChainSwap.Proto.SwapInput)
}

void SwapInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapInput_THORChainSwap_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vault_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  router_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_amount_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&to_asset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&from_chain_) -
      reinterpret_cast<char*>(&to_asset_)) + sizeof(from_chain_));
}

SwapInput::~SwapInput() {
  // @@protoc_insertion_point(destructor:TW.THORChainSwap.Proto.SwapInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwapInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vault_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  router_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_amount_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete to_asset_;
}

void SwapInput::ArenaDtor(void* object) {
  SwapInput* _this = reinterpret_cast< SwapInput* >(object);
  (void)_this;
}
void SwapInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapInput& SwapInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapInput_THORChainSwap_2eproto.base);
  return *internal_default_instance();
}


void SwapInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.THORChainSwap.Proto.SwapInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_address_.ClearToEmpty();
  to_address_.ClearToEmpty();
  vault_address_.ClearToEmpty();
  router_address_.ClearToEmpty();
  from_amount_.ClearToEmpty();
  to_amount_limit_.ClearToEmpty();
  if (GetArena() == nullptr && to_asset_ != nullptr) {
    delete to_asset_;
  }
  to_asset_ = nullptr;
  from_chain_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.THORChainSwap.Proto.Chain from_chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_from_chain(static_cast<::TW::THORChainSwap::Proto::Chain>(val));
        } else goto handle_unusual;
        continue;
      // string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.from_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.THORChainSwap.Proto.Asset to_asset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vault_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_vault_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.vault_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string router_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_router_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.router_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from_amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_from_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.from_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_amount_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_to_amount_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.to_amount_limit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.THORChainSwap.Proto.SwapInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.Chain from_chain = 1;
  if (this->from_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_from_chain(), target);
  }

  // string from_address = 2;
  if (this->from_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // .TW.THORChainSwap.Proto.Asset to_asset = 3;
  if (this->has_to_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::to_asset(this), target, stream);
  }

  // string to_address = 4;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // string vault_address = 5;
  if (this->vault_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vault_address().data(), static_cast<int>(this->_internal_vault_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.vault_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vault_address(), target);
  }

  // string router_address = 6;
  if (this->router_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_router_address().data(), static_cast<int>(this->_internal_router_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.router_address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_router_address(), target);
  }

  // string from_amount = 7;
  if (this->from_amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_amount().data(), static_cast<int>(this->_internal_from_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.from_amount");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_from_amount(), target);
  }

  // string to_amount_limit = 8;
  if (this->to_amount_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_amount_limit().data(), static_cast<int>(this->_internal_to_amount_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.to_amount_limit");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_to_amount_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.THORChainSwap.Proto.SwapInput)
  return target;
}

size_t SwapInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.THORChainSwap.Proto.SwapInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_address = 2;
  if (this->from_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_address());
  }

  // string to_address = 4;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string vault_address = 5;
  if (this->vault_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vault_address());
  }

  // string router_address = 6;
  if (this->router_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_router_address());
  }

  // string from_amount = 7;
  if (this->from_amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_amount());
  }

  // string to_amount_limit = 8;
  if (this->to_amount_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_amount_limit());
  }

  // .TW.THORChainSwap.Proto.Asset to_asset = 3;
  if (this->has_to_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_asset_);
  }

  // .TW.THORChainSwap.Proto.Chain from_chain = 1;
  if (this->from_chain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_from_chain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.THORChainSwap.Proto.SwapInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.THORChainSwap.Proto.SwapInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.THORChainSwap.Proto.SwapInput)
    MergeFrom(*source);
  }
}

void SwapInput::MergeFrom(const SwapInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.THORChainSwap.Proto.SwapInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_address().size() > 0) {
    _internal_set_from_address(from._internal_from_address());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.vault_address().size() > 0) {
    _internal_set_vault_address(from._internal_vault_address());
  }
  if (from.router_address().size() > 0) {
    _internal_set_router_address(from._internal_router_address());
  }
  if (from.from_amount().size() > 0) {
    _internal_set_from_amount(from._internal_from_amount());
  }
  if (from.to_amount_limit().size() > 0) {
    _internal_set_to_amount_limit(from._internal_to_amount_limit());
  }
  if (from.has_to_asset()) {
    _internal_mutable_to_asset()->::TW::THORChainSwap::Proto::Asset::MergeFrom(from._internal_to_asset());
  }
  if (from.from_chain() != 0) {
    _internal_set_from_chain(from._internal_from_chain());
  }
}

void SwapInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.THORChainSwap.Proto.SwapInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapInput::CopyFrom(const SwapInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.THORChainSwap.Proto.SwapInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapInput::IsInitialized() const {
  return true;
}

void SwapInput::InternalSwap(SwapInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vault_address_.Swap(&other->vault_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  router_address_.Swap(&other->router_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_amount_.Swap(&other->from_amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_amount_limit_.Swap(&other->to_amount_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapInput, from_chain_)
      + sizeof(SwapInput::from_chain_)
      - PROTOBUF_FIELD_OFFSET(SwapInput, to_asset_)>(
          reinterpret_cast<char*>(&to_asset_),
          reinterpret_cast<char*>(&other->to_asset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SwapOutput::_Internal {
 public:
  static const ::TW::THORChainSwap::Proto::Error& error(const SwapOutput* msg);
  static const ::TW::Bitcoin::Proto::SigningInput& bitcoin(const SwapOutput* msg);
  static const ::TW::Ethereum::Proto::SigningInput& ethereum(const SwapOutput* msg);
  static const ::TW::Binance::Proto::SigningInput& binance(const SwapOutput* msg);
};

const ::TW::THORChainSwap::Proto::Error&
SwapOutput::_Internal::error(const SwapOutput* msg) {
  return *msg->error_;
}
const ::TW::Bitcoin::Proto::SigningInput&
SwapOutput::_Internal::bitcoin(const SwapOutput* msg) {
  return *msg->signing_input_oneof_.bitcoin_;
}
const ::TW::Ethereum::Proto::SigningInput&
SwapOutput::_Internal::ethereum(const SwapOutput* msg) {
  return *msg->signing_input_oneof_.ethereum_;
}
const ::TW::Binance::Proto::SigningInput&
SwapOutput::_Internal::binance(const SwapOutput* msg) {
  return *msg->signing_input_oneof_.binance_;
}
void SwapOutput::set_allocated_bitcoin(::TW::Bitcoin::Proto::SigningInput* bitcoin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_signing_input_oneof();
  if (bitcoin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bitcoin)->GetArena();
    if (message_arena != submessage_arena) {
      bitcoin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitcoin, submessage_arena);
    }
    set_has_bitcoin();
    signing_input_oneof_.bitcoin_ = bitcoin;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapOutput.bitcoin)
}
void SwapOutput::clear_bitcoin() {
  if (_internal_has_bitcoin()) {
    if (GetArena() == nullptr) {
      delete signing_input_oneof_.bitcoin_;
    }
    clear_has_signing_input_oneof();
  }
}
void SwapOutput::set_allocated_ethereum(::TW::Ethereum::Proto::SigningInput* ethereum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_signing_input_oneof();
  if (ethereum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ethereum)->GetArena();
    if (message_arena != submessage_arena) {
      ethereum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ethereum, submessage_arena);
    }
    set_has_ethereum();
    signing_input_oneof_.ethereum_ = ethereum;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapOutput.ethereum)
}
void SwapOutput::clear_ethereum() {
  if (_internal_has_ethereum()) {
    if (GetArena() == nullptr) {
      delete signing_input_oneof_.ethereum_;
    }
    clear_has_signing_input_oneof();
  }
}
void SwapOutput::set_allocated_binance(::TW::Binance::Proto::SigningInput* binance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_signing_input_oneof();
  if (binance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binance)->GetArena();
    if (message_arena != submessage_arena) {
      binance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binance, submessage_arena);
    }
    set_has_binance();
    signing_input_oneof_.binance_ = binance;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapOutput.binance)
}
void SwapOutput::clear_binance() {
  if (_internal_has_binance()) {
    if (GetArena() == nullptr) {
      delete signing_input_oneof_.binance_;
    }
    clear_has_signing_input_oneof();
  }
}
SwapOutput::SwapOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.THORChainSwap.Proto.SwapOutput)
}
SwapOutput::SwapOutput(const SwapOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::TW::THORChainSwap::Proto::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  ::memcpy(&from_chain_, &from.from_chain_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_chain_) -
    reinterpret_cast<char*>(&from_chain_)) + sizeof(to_chain_));
  clear_has_signing_input_oneof();
  switch (from.signing_input_oneof_case()) {
    case kBitcoin: {
      _internal_mutable_bitcoin()->::TW::Bitcoin::Proto::SigningInput::MergeFrom(from._internal_bitcoin());
      break;
    }
    case kEthereum: {
      _internal_mutable_ethereum()->::TW::Ethereum::Proto::SigningInput::MergeFrom(from._internal_ethereum());
      break;
    }
    case kBinance: {
      _internal_mutable_binance()->::TW::Binance::Proto::SigningInput::MergeFrom(from._internal_binance());
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.THORChainSwap.Proto.SwapOutput)
}

void SwapOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapOutput_THORChainSwap_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&to_chain_) -
      reinterpret_cast<char*>(&error_)) + sizeof(to_chain_));
  clear_has_signing_input_oneof();
}

SwapOutput::~SwapOutput() {
  // @@protoc_insertion_point(destructor:TW.THORChainSwap.Proto.SwapOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwapOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete error_;
  if (has_signing_input_oneof()) {
    clear_signing_input_oneof();
  }
}

void SwapOutput::ArenaDtor(void* object) {
  SwapOutput* _this = reinterpret_cast< SwapOutput* >(object);
  (void)_this;
}
void SwapOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapOutput& SwapOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapOutput_THORChainSwap_2eproto.base);
  return *internal_default_instance();
}


void SwapOutput::clear_signing_input_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.THORChainSwap.Proto.SwapOutput)
  switch (signing_input_oneof_case()) {
    case kBitcoin: {
      if (GetArena() == nullptr) {
        delete signing_input_oneof_.bitcoin_;
      }
      break;
    }
    case kEthereum: {
      if (GetArena() == nullptr) {
        delete signing_input_oneof_.ethereum_;
      }
      break;
    }
    case kBinance: {
      if (GetArena() == nullptr) {
        delete signing_input_oneof_.binance_;
      }
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SIGNING_INPUT_ONEOF_NOT_SET;
}


void SwapOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.THORChainSwap.Proto.SwapOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  ::memset(&from_chain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_chain_) -
      reinterpret_cast<char*>(&from_chain_)) + sizeof(to_chain_));
  clear_signing_input_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.THORChainSwap.Proto.Chain from_chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_from_chain(static_cast<::TW::THORChainSwap::Proto::Chain>(val));
        } else goto handle_unusual;
        continue;
      // .TW.THORChainSwap.Proto.Chain to_chain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_to_chain(static_cast<::TW::THORChainSwap::Proto::Chain>(val));
        } else goto handle_unusual;
        continue;
      // .TW.THORChainSwap.Proto.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Bitcoin.Proto.SigningInput bitcoin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitcoin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.SigningInput ethereum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethereum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SigningInput binance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_binance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.THORChainSwap.Proto.SwapOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.Chain from_chain = 1;
  if (this->from_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_from_chain(), target);
  }

  // .TW.THORChainSwap.Proto.Chain to_chain = 2;
  if (this->to_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_to_chain(), target);
  }

  // .TW.THORChainSwap.Proto.Error error = 3;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  // .TW.Bitcoin.Proto.SigningInput bitcoin = 4;
  if (_internal_has_bitcoin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bitcoin(this), target, stream);
  }

  // .TW.Ethereum.Proto.SigningInput ethereum = 5;
  if (_internal_has_ethereum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ethereum(this), target, stream);
  }

  // .TW.Binance.Proto.SigningInput binance = 6;
  if (_internal_has_binance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::binance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.THORChainSwap.Proto.SwapOutput)
  return target;
}

size_t SwapOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.THORChainSwap.Proto.SwapOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.Error error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .TW.THORChainSwap.Proto.Chain from_chain = 1;
  if (this->from_chain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_from_chain());
  }

  // .TW.THORChainSwap.Proto.Chain to_chain = 2;
  if (this->to_chain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_to_chain());
  }

  switch (signing_input_oneof_case()) {
    // .TW.Bitcoin.Proto.SigningInput bitcoin = 4;
    case kBitcoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.bitcoin_);
      break;
    }
    // .TW.Ethereum.Proto.SigningInput ethereum = 5;
    case kEthereum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.ethereum_);
      break;
    }
    // .TW.Binance.Proto.SigningInput binance = 6;
    case kBinance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.binance_);
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.THORChainSwap.Proto.SwapOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.THORChainSwap.Proto.SwapOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.THORChainSwap.Proto.SwapOutput)
    MergeFrom(*source);
  }
}

void SwapOutput::MergeFrom(const SwapOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.THORChainSwap.Proto.SwapOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    _internal_mutable_error()->::TW::THORChainSwap::Proto::Error::MergeFrom(from._internal_error());
  }
  if (from.from_chain() != 0) {
    _internal_set_from_chain(from._internal_from_chain());
  }
  if (from.to_chain() != 0) {
    _internal_set_to_chain(from._internal_to_chain());
  }
  switch (from.signing_input_oneof_case()) {
    case kBitcoin: {
      _internal_mutable_bitcoin()->::TW::Bitcoin::Proto::SigningInput::MergeFrom(from._internal_bitcoin());
      break;
    }
    case kEthereum: {
      _internal_mutable_ethereum()->::TW::Ethereum::Proto::SigningInput::MergeFrom(from._internal_ethereum());
      break;
    }
    case kBinance: {
      _internal_mutable_binance()->::TW::Binance::Proto::SigningInput::MergeFrom(from._internal_binance());
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SwapOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.THORChainSwap.Proto.SwapOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapOutput::CopyFrom(const SwapOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.THORChainSwap.Proto.SwapOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapOutput::IsInitialized() const {
  return true;
}

void SwapOutput::InternalSwap(SwapOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapOutput, to_chain_)
      + sizeof(SwapOutput::to_chain_)
      - PROTOBUF_FIELD_OFFSET(SwapOutput, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
  swap(signing_input_oneof_, other->signing_input_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace THORChainSwap
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::THORChainSwap::Proto::Error* Arena::CreateMaybeMessage< ::TW::THORChainSwap::Proto::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::THORChainSwap::Proto::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::THORChainSwap::Proto::Asset* Arena::CreateMaybeMessage< ::TW::THORChainSwap::Proto::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::THORChainSwap::Proto::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::THORChainSwap::Proto::SwapInput* Arena::CreateMaybeMessage< ::TW::THORChainSwap::Proto::SwapInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::THORChainSwap::Proto::SwapInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::THORChainSwap::Proto::SwapOutput* Arena::CreateMaybeMessage< ::TW::THORChainSwap::Proto::SwapOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::THORChainSwap::Proto::SwapOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
