// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ontology.proto

#include "Ontology.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace TW {
namespace Ontology {
namespace Proto {
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Ontology
}  // namespace TW
static void InitDefaultsscc_info_SigningInput_Ontology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ontology::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Ontology::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningInput_Ontology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningInput_Ontology_2eproto}, {}};

static void InitDefaultsscc_info_SigningOutput_Ontology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Ontology::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Ontology::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Ontology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Ontology_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Ontology_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Ontology_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Ontology_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Ontology_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, contract_),
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, method_),
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, owner_private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, payer_private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, query_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningInput, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Ontology::Proto::SigningOutput, encoded_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Ontology::Proto::SigningInput)},
  { 15, -1, sizeof(::TW::Ontology::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ontology::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ontology::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Ontology_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Ontology.proto\022\021TW.Ontology.Proto\"\326\001\n\014"
  "SigningInput\022\020\n\010contract\030\001 \001(\t\022\016\n\006method"
  "\030\002 \001(\t\022\031\n\021owner_private_key\030\003 \001(\014\022\022\n\nto_"
  "address\030\004 \001(\t\022\016\n\006amount\030\005 \001(\004\022\031\n\021payer_p"
  "rivate_key\030\006 \001(\014\022\021\n\tgas_price\030\007 \001(\004\022\021\n\tg"
  "as_limit\030\010 \001(\004\022\025\n\rquery_address\030\t \001(\t\022\r\n"
  "\005nonce\030\n \001(\r\" \n\rSigningOutput\022\017\n\007encoded"
  "\030\001 \001(\014B\027\n\025wallet.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Ontology_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Ontology_2eproto_sccs[2] = {
  &scc_info_SigningInput_Ontology_2eproto.base,
  &scc_info_SigningOutput_Ontology_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Ontology_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ontology_2eproto = {
  false, false, descriptor_table_protodef_Ontology_2eproto, "Ontology.proto", 319,
  &descriptor_table_Ontology_2eproto_once, descriptor_table_Ontology_2eproto_sccs, descriptor_table_Ontology_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_Ontology_2eproto::offsets,
  file_level_metadata_Ontology_2eproto, 2, file_level_enum_descriptors_Ontology_2eproto, file_level_service_descriptors_Ontology_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Ontology_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Ontology_2eproto)), true);
namespace TW {
namespace Ontology {
namespace Proto {

// ===================================================================

class SigningInput::_Internal {
 public:
};

SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ontology.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract().empty()) {
    contract_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract(), 
      GetArena());
  }
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method(), 
      GetArena());
  }
  owner_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_private_key().empty()) {
    owner_private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_private_key(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  payer_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payer_private_key().empty()) {
    payer_private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payer_private_key(), 
      GetArena());
  }
  query_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query_address().empty()) {
    query_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_address(), 
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:TW.Ontology.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Ontology_2eproto.base);
  contract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payer_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(nonce_));
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Ontology.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payer_private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Ontology_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ontology.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_.ClearToEmpty();
  method_.ClearToEmpty();
  owner_private_key_.ClearToEmpty();
  to_address_.ClearToEmpty();
  payer_private_key_.ClearToEmpty();
  query_address_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ontology.Proto.SigningInput.contract"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ontology.Proto.SigningInput.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes owner_private_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_owner_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ontology.Proto.SigningInput.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payer_private_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_payer_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_query_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ontology.Proto.SigningInput.query_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nonce = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ontology.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract = 1;
  if (this->contract().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract().data(), static_cast<int>(this->_internal_contract().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ontology.Proto.SigningInput.contract");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract(), target);
  }

  // string method = 2;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ontology.Proto.SigningInput.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  // bytes owner_private_key = 3;
  if (this->owner_private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_owner_private_key(), target);
  }

  // string to_address = 4;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ontology.Proto.SigningInput.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // uint64 amount = 5;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_amount(), target);
  }

  // bytes payer_private_key = 6;
  if (this->payer_private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_payer_private_key(), target);
  }

  // uint64 gas_price = 7;
  if (this->gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gas_price(), target);
  }

  // uint64 gas_limit = 8;
  if (this->gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gas_limit(), target);
  }

  // string query_address = 9;
  if (this->query_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_address().data(), static_cast<int>(this->_internal_query_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ontology.Proto.SigningInput.query_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_query_address(), target);
  }

  // uint32 nonce = 10;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ontology.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ontology.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract = 1;
  if (this->contract().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract());
  }

  // string method = 2;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // bytes owner_private_key = 3;
  if (this->owner_private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_private_key());
  }

  // string to_address = 4;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // bytes payer_private_key = 6;
  if (this->payer_private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payer_private_key());
  }

  // string query_address = 9;
  if (this->query_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_address());
  }

  // uint64 amount = 5;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // uint64 gas_price = 7;
  if (this->gas_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_price());
  }

  // uint64 gas_limit = 8;
  if (this->gas_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_limit());
  }

  // uint32 nonce = 10;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ontology.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ontology.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ontology.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ontology.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract().size() > 0) {
    _internal_set_contract(from._internal_contract());
  }
  if (from.method().size() > 0) {
    _internal_set_method(from._internal_method());
  }
  if (from.owner_private_key().size() > 0) {
    _internal_set_owner_private_key(from._internal_owner_private_key());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.payer_private_key().size() > 0) {
    _internal_set_payer_private_key(from._internal_payer_private_key());
  }
  if (from.query_address().size() > 0) {
    _internal_set_query_address(from._internal_query_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.gas_price() != 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from.gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ontology.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ontology.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_.Swap(&other->contract_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_private_key_.Swap(&other->owner_private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payer_private_key_.Swap(&other->payer_private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_address_.Swap(&other->query_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, nonce_)
      + sizeof(SigningInput::nonce_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Ontology.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ontology.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Ontology_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Ontology.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Ontology_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ontology.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ontology.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ontology.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ontology.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Ontology.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Ontology.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Ontology.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ontology.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Ontology.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ontology.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Ontology
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Ontology::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Ontology::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ontology::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ontology::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Ontology::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ontology::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
