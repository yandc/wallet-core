// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ethereum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Ethereum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Ethereum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Ethereum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ethereum_2eproto;
namespace TW {
namespace Ethereum {
namespace Proto {
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class Transaction_ContractGeneric;
class Transaction_ContractGenericDefaultTypeInternal;
extern Transaction_ContractGenericDefaultTypeInternal _Transaction_ContractGeneric_default_instance_;
class Transaction_ERC1155Transfer;
class Transaction_ERC1155TransferDefaultTypeInternal;
extern Transaction_ERC1155TransferDefaultTypeInternal _Transaction_ERC1155Transfer_default_instance_;
class Transaction_ERC20Approve;
class Transaction_ERC20ApproveDefaultTypeInternal;
extern Transaction_ERC20ApproveDefaultTypeInternal _Transaction_ERC20Approve_default_instance_;
class Transaction_ERC20Transfer;
class Transaction_ERC20TransferDefaultTypeInternal;
extern Transaction_ERC20TransferDefaultTypeInternal _Transaction_ERC20Transfer_default_instance_;
class Transaction_ERC721Approve;
class Transaction_ERC721ApproveDefaultTypeInternal;
extern Transaction_ERC721ApproveDefaultTypeInternal _Transaction_ERC721Approve_default_instance_;
class Transaction_ERC721Transfer;
class Transaction_ERC721TransferDefaultTypeInternal;
extern Transaction_ERC721TransferDefaultTypeInternal _Transaction_ERC721Transfer_default_instance_;
class Transaction_Transfer;
class Transaction_TransferDefaultTypeInternal;
extern Transaction_TransferDefaultTypeInternal _Transaction_Transfer_default_instance_;
}  // namespace Proto
}  // namespace Ethereum
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Ethereum::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::SigningInput>(Arena*);
template<> ::TW::Ethereum::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::SigningOutput>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ContractGeneric* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ContractGeneric>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ERC1155Transfer>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ERC20Approve* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ERC20Approve>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ERC20Transfer>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ERC721Approve* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ERC721Approve>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ERC721Transfer>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_Transfer* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Ethereum {
namespace Proto {

enum TransactionMode : int {
  Legacy = 0,
  Enveloped = 1,
  TransactionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionMode_IsValid(int value);
constexpr TransactionMode TransactionMode_MIN = Legacy;
constexpr TransactionMode TransactionMode_MAX = Enveloped;
constexpr int TransactionMode_ARRAYSIZE = TransactionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionMode_descriptor();
template<typename T>
inline const std::string& TransactionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionMode_descriptor(), enum_t_value);
}
inline bool TransactionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionMode>(
    TransactionMode_descriptor(), name, value);
}
// ===================================================================

class Transaction_Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.Transfer) */ {
 public:
  inline Transaction_Transfer() : Transaction_Transfer(nullptr) {}
  virtual ~Transaction_Transfer();

  Transaction_Transfer(const Transaction_Transfer& from);
  Transaction_Transfer(Transaction_Transfer&& from) noexcept
    : Transaction_Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_Transfer& operator=(const Transaction_Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Transfer& operator=(Transaction_Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Transfer& default_instance();

  static inline const Transaction_Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_Transfer*>(
               &_Transaction_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction_Transfer& a, Transaction_Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Transfer* New() const final {
    return CreateMaybeMessage<Transaction_Transfer>(nullptr);
  }

  Transaction_Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Transfer& from);
  void MergeFrom(const Transaction_Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.Transfer";
  }
  protected:
  explicit Transaction_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes amount = 1;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ERC20Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ERC20Transfer) */ {
 public:
  inline Transaction_ERC20Transfer() : Transaction_ERC20Transfer(nullptr) {}
  virtual ~Transaction_ERC20Transfer();

  Transaction_ERC20Transfer(const Transaction_ERC20Transfer& from);
  Transaction_ERC20Transfer(Transaction_ERC20Transfer&& from) noexcept
    : Transaction_ERC20Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_ERC20Transfer& operator=(const Transaction_ERC20Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ERC20Transfer& operator=(Transaction_ERC20Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_ERC20Transfer& default_instance();

  static inline const Transaction_ERC20Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_ERC20Transfer*>(
               &_Transaction_ERC20Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction_ERC20Transfer& a, Transaction_ERC20Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ERC20Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ERC20Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_ERC20Transfer* New() const final {
    return CreateMaybeMessage<Transaction_ERC20Transfer>(nullptr);
  }

  Transaction_ERC20Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_ERC20Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_ERC20Transfer& from);
  void MergeFrom(const Transaction_ERC20Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ERC20Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ERC20Transfer";
  }
  protected:
  explicit Transaction_ERC20Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string to = 1;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ERC20Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ERC20Approve PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ERC20Approve) */ {
 public:
  inline Transaction_ERC20Approve() : Transaction_ERC20Approve(nullptr) {}
  virtual ~Transaction_ERC20Approve();

  Transaction_ERC20Approve(const Transaction_ERC20Approve& from);
  Transaction_ERC20Approve(Transaction_ERC20Approve&& from) noexcept
    : Transaction_ERC20Approve() {
    *this = ::std::move(from);
  }

  inline Transaction_ERC20Approve& operator=(const Transaction_ERC20Approve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ERC20Approve& operator=(Transaction_ERC20Approve&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_ERC20Approve& default_instance();

  static inline const Transaction_ERC20Approve* internal_default_instance() {
    return reinterpret_cast<const Transaction_ERC20Approve*>(
               &_Transaction_ERC20Approve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transaction_ERC20Approve& a, Transaction_ERC20Approve& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ERC20Approve* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ERC20Approve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_ERC20Approve* New() const final {
    return CreateMaybeMessage<Transaction_ERC20Approve>(nullptr);
  }

  Transaction_ERC20Approve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_ERC20Approve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_ERC20Approve& from);
  void MergeFrom(const Transaction_ERC20Approve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ERC20Approve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ERC20Approve";
  }
  protected:
  explicit Transaction_ERC20Approve(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpenderFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string spender = 1;
  void clear_spender();
  const std::string& spender() const;
  void set_spender(const std::string& value);
  void set_spender(std::string&& value);
  void set_spender(const char* value);
  void set_spender(const char* value, size_t size);
  std::string* mutable_spender();
  std::string* release_spender();
  void set_allocated_spender(std::string* spender);
  private:
  const std::string& _internal_spender() const;
  void _internal_set_spender(const std::string& value);
  std::string* _internal_mutable_spender();
  public:

  // bytes amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ERC20Approve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ERC721Approve PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ERC721Approve) */ {
 public:
  inline Transaction_ERC721Approve() : Transaction_ERC721Approve(nullptr) {}
  virtual ~Transaction_ERC721Approve();

  Transaction_ERC721Approve(const Transaction_ERC721Approve& from);
  Transaction_ERC721Approve(Transaction_ERC721Approve&& from) noexcept
    : Transaction_ERC721Approve() {
    *this = ::std::move(from);
  }

  inline Transaction_ERC721Approve& operator=(const Transaction_ERC721Approve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ERC721Approve& operator=(Transaction_ERC721Approve&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_ERC721Approve& default_instance();

  static inline const Transaction_ERC721Approve* internal_default_instance() {
    return reinterpret_cast<const Transaction_ERC721Approve*>(
               &_Transaction_ERC721Approve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transaction_ERC721Approve& a, Transaction_ERC721Approve& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ERC721Approve* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ERC721Approve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_ERC721Approve* New() const final {
    return CreateMaybeMessage<Transaction_ERC721Approve>(nullptr);
  }

  Transaction_ERC721Approve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_ERC721Approve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_ERC721Approve& from);
  void MergeFrom(const Transaction_ERC721Approve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ERC721Approve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ERC721Approve";
  }
  protected:
  explicit Transaction_ERC721Approve(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpenderFieldNumber = 1,
    kApprovedFieldNumber = 2,
  };
  // string spender = 1;
  void clear_spender();
  const std::string& spender() const;
  void set_spender(const std::string& value);
  void set_spender(std::string&& value);
  void set_spender(const char* value);
  void set_spender(const char* value, size_t size);
  std::string* mutable_spender();
  std::string* release_spender();
  void set_allocated_spender(std::string* spender);
  private:
  const std::string& _internal_spender() const;
  void _internal_set_spender(const std::string& value);
  std::string* _internal_mutable_spender();
  public:

  // bool approved = 2;
  void clear_approved();
  bool approved() const;
  void set_approved(bool value);
  private:
  bool _internal_approved() const;
  void _internal_set_approved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ERC721Approve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spender_;
  bool approved_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ERC721Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ERC721Transfer) */ {
 public:
  inline Transaction_ERC721Transfer() : Transaction_ERC721Transfer(nullptr) {}
  virtual ~Transaction_ERC721Transfer();

  Transaction_ERC721Transfer(const Transaction_ERC721Transfer& from);
  Transaction_ERC721Transfer(Transaction_ERC721Transfer&& from) noexcept
    : Transaction_ERC721Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_ERC721Transfer& operator=(const Transaction_ERC721Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ERC721Transfer& operator=(Transaction_ERC721Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_ERC721Transfer& default_instance();

  static inline const Transaction_ERC721Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_ERC721Transfer*>(
               &_Transaction_ERC721Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transaction_ERC721Transfer& a, Transaction_ERC721Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ERC721Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ERC721Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_ERC721Transfer* New() const final {
    return CreateMaybeMessage<Transaction_ERC721Transfer>(nullptr);
  }

  Transaction_ERC721Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_ERC721Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_ERC721Transfer& from);
  void MergeFrom(const Transaction_ERC721Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ERC721Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ERC721Transfer";
  }
  protected:
  explicit Transaction_ERC721Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTokenIdFieldNumber = 3,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes token_id = 3;
  void clear_token_id();
  const std::string& token_id() const;
  void set_token_id(const std::string& value);
  void set_token_id(std::string&& value);
  void set_token_id(const char* value);
  void set_token_id(const void* value, size_t size);
  std::string* mutable_token_id();
  std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ERC721Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ERC1155Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ERC1155Transfer) */ {
 public:
  inline Transaction_ERC1155Transfer() : Transaction_ERC1155Transfer(nullptr) {}
  virtual ~Transaction_ERC1155Transfer();

  Transaction_ERC1155Transfer(const Transaction_ERC1155Transfer& from);
  Transaction_ERC1155Transfer(Transaction_ERC1155Transfer&& from) noexcept
    : Transaction_ERC1155Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_ERC1155Transfer& operator=(const Transaction_ERC1155Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ERC1155Transfer& operator=(Transaction_ERC1155Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_ERC1155Transfer& default_instance();

  static inline const Transaction_ERC1155Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_ERC1155Transfer*>(
               &_Transaction_ERC1155Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Transaction_ERC1155Transfer& a, Transaction_ERC1155Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ERC1155Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ERC1155Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_ERC1155Transfer* New() const final {
    return CreateMaybeMessage<Transaction_ERC1155Transfer>(nullptr);
  }

  Transaction_ERC1155Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_ERC1155Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_ERC1155Transfer& from);
  void MergeFrom(const Transaction_ERC1155Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ERC1155Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ERC1155Transfer";
  }
  protected:
  explicit Transaction_ERC1155Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTokenIdFieldNumber = 3,
    kValueFieldNumber = 4,
    kDataFieldNumber = 5,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes token_id = 3;
  void clear_token_id();
  const std::string& token_id() const;
  void set_token_id(const std::string& value);
  void set_token_id(std::string&& value);
  void set_token_id(const char* value);
  void set_token_id(const void* value, size_t size);
  std::string* mutable_token_id();
  std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ContractGeneric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ContractGeneric) */ {
 public:
  inline Transaction_ContractGeneric() : Transaction_ContractGeneric(nullptr) {}
  virtual ~Transaction_ContractGeneric();

  Transaction_ContractGeneric(const Transaction_ContractGeneric& from);
  Transaction_ContractGeneric(Transaction_ContractGeneric&& from) noexcept
    : Transaction_ContractGeneric() {
    *this = ::std::move(from);
  }

  inline Transaction_ContractGeneric& operator=(const Transaction_ContractGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ContractGeneric& operator=(Transaction_ContractGeneric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_ContractGeneric& default_instance();

  static inline const Transaction_ContractGeneric* internal_default_instance() {
    return reinterpret_cast<const Transaction_ContractGeneric*>(
               &_Transaction_ContractGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Transaction_ContractGeneric& a, Transaction_ContractGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ContractGeneric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ContractGeneric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_ContractGeneric* New() const final {
    return CreateMaybeMessage<Transaction_ContractGeneric>(nullptr);
  }

  Transaction_ContractGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_ContractGeneric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_ContractGeneric& from);
  void MergeFrom(const Transaction_ContractGeneric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ContractGeneric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ContractGeneric";
  }
  protected:
  explicit Transaction_ContractGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes amount = 1;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ContractGeneric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  enum TransactionOneofCase {
    kTransfer = 1,
    kErc20Transfer = 2,
    kErc20Approve = 3,
    kErc721Transfer = 4,
    kErc1155Transfer = 5,
    kContractGeneric = 6,
    kErc721Approve = 7,
    TRANSACTION_ONEOF_NOT_SET = 0,
  };

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Transaction_Transfer Transfer;
  typedef Transaction_ERC20Transfer ERC20Transfer;
  typedef Transaction_ERC20Approve ERC20Approve;
  typedef Transaction_ERC721Approve ERC721Approve;
  typedef Transaction_ERC721Transfer ERC721Transfer;
  typedef Transaction_ERC1155Transfer ERC1155Transfer;
  typedef Transaction_ContractGeneric ContractGeneric;

  // accessors -------------------------------------------------------

  enum : int {
    kTransferFieldNumber = 1,
    kErc20TransferFieldNumber = 2,
    kErc20ApproveFieldNumber = 3,
    kErc721TransferFieldNumber = 4,
    kErc1155TransferFieldNumber = 5,
    kContractGenericFieldNumber = 6,
    kErc721ApproveFieldNumber = 7,
  };
  // .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::Ethereum::Proto::Transaction_Transfer& transfer() const;
  ::TW::Ethereum::Proto::Transaction_Transfer* release_transfer();
  ::TW::Ethereum::Proto::Transaction_Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::Ethereum::Proto::Transaction_Transfer* transfer);
  private:
  const ::TW::Ethereum::Proto::Transaction_Transfer& _internal_transfer() const;
  ::TW::Ethereum::Proto::Transaction_Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::Ethereum::Proto::Transaction_Transfer* transfer);
  ::TW::Ethereum::Proto::Transaction_Transfer* unsafe_arena_release_transfer();

  // .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
  bool has_erc20_transfer() const;
  private:
  bool _internal_has_erc20_transfer() const;
  public:
  void clear_erc20_transfer();
  const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& erc20_transfer() const;
  ::TW::Ethereum::Proto::Transaction_ERC20Transfer* release_erc20_transfer();
  ::TW::Ethereum::Proto::Transaction_ERC20Transfer* mutable_erc20_transfer();
  void set_allocated_erc20_transfer(::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer);
  private:
  const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& _internal_erc20_transfer() const;
  ::TW::Ethereum::Proto::Transaction_ERC20Transfer* _internal_mutable_erc20_transfer();
  public:
  void unsafe_arena_set_allocated_erc20_transfer(
      ::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer);
  ::TW::Ethereum::Proto::Transaction_ERC20Transfer* unsafe_arena_release_erc20_transfer();

  // .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
  bool has_erc20_approve() const;
  private:
  bool _internal_has_erc20_approve() const;
  public:
  void clear_erc20_approve();
  const ::TW::Ethereum::Proto::Transaction_ERC20Approve& erc20_approve() const;
  ::TW::Ethereum::Proto::Transaction_ERC20Approve* release_erc20_approve();
  ::TW::Ethereum::Proto::Transaction_ERC20Approve* mutable_erc20_approve();
  void set_allocated_erc20_approve(::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve);
  private:
  const ::TW::Ethereum::Proto::Transaction_ERC20Approve& _internal_erc20_approve() const;
  ::TW::Ethereum::Proto::Transaction_ERC20Approve* _internal_mutable_erc20_approve();
  public:
  void unsafe_arena_set_allocated_erc20_approve(
      ::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve);
  ::TW::Ethereum::Proto::Transaction_ERC20Approve* unsafe_arena_release_erc20_approve();

  // .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
  bool has_erc721_transfer() const;
  private:
  bool _internal_has_erc721_transfer() const;
  public:
  void clear_erc721_transfer();
  const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& erc721_transfer() const;
  ::TW::Ethereum::Proto::Transaction_ERC721Transfer* release_erc721_transfer();
  ::TW::Ethereum::Proto::Transaction_ERC721Transfer* mutable_erc721_transfer();
  void set_allocated_erc721_transfer(::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer);
  private:
  const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& _internal_erc721_transfer() const;
  ::TW::Ethereum::Proto::Transaction_ERC721Transfer* _internal_mutable_erc721_transfer();
  public:
  void unsafe_arena_set_allocated_erc721_transfer(
      ::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer);
  ::TW::Ethereum::Proto::Transaction_ERC721Transfer* unsafe_arena_release_erc721_transfer();

  // .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
  bool has_erc1155_transfer() const;
  private:
  bool _internal_has_erc1155_transfer() const;
  public:
  void clear_erc1155_transfer();
  const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& erc1155_transfer() const;
  ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* release_erc1155_transfer();
  ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* mutable_erc1155_transfer();
  void set_allocated_erc1155_transfer(::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer);
  private:
  const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& _internal_erc1155_transfer() const;
  ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* _internal_mutable_erc1155_transfer();
  public:
  void unsafe_arena_set_allocated_erc1155_transfer(
      ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer);
  ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* unsafe_arena_release_erc1155_transfer();

  // .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
  bool has_contract_generic() const;
  private:
  bool _internal_has_contract_generic() const;
  public:
  void clear_contract_generic();
  const ::TW::Ethereum::Proto::Transaction_ContractGeneric& contract_generic() const;
  ::TW::Ethereum::Proto::Transaction_ContractGeneric* release_contract_generic();
  ::TW::Ethereum::Proto::Transaction_ContractGeneric* mutable_contract_generic();
  void set_allocated_contract_generic(::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic);
  private:
  const ::TW::Ethereum::Proto::Transaction_ContractGeneric& _internal_contract_generic() const;
  ::TW::Ethereum::Proto::Transaction_ContractGeneric* _internal_mutable_contract_generic();
  public:
  void unsafe_arena_set_allocated_contract_generic(
      ::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic);
  ::TW::Ethereum::Proto::Transaction_ContractGeneric* unsafe_arena_release_contract_generic();

  // .TW.Ethereum.Proto.Transaction.ERC721Approve erc721_approve = 7;
  bool has_erc721_approve() const;
  private:
  bool _internal_has_erc721_approve() const;
  public:
  void clear_erc721_approve();
  const ::TW::Ethereum::Proto::Transaction_ERC721Approve& erc721_approve() const;
  ::TW::Ethereum::Proto::Transaction_ERC721Approve* release_erc721_approve();
  ::TW::Ethereum::Proto::Transaction_ERC721Approve* mutable_erc721_approve();
  void set_allocated_erc721_approve(::TW::Ethereum::Proto::Transaction_ERC721Approve* erc721_approve);
  private:
  const ::TW::Ethereum::Proto::Transaction_ERC721Approve& _internal_erc721_approve() const;
  ::TW::Ethereum::Proto::Transaction_ERC721Approve* _internal_mutable_erc721_approve();
  public:
  void unsafe_arena_set_allocated_erc721_approve(
      ::TW::Ethereum::Proto::Transaction_ERC721Approve* erc721_approve);
  ::TW::Ethereum::Proto::Transaction_ERC721Approve* unsafe_arena_release_erc721_approve();

  void clear_transaction_oneof();
  TransactionOneofCase transaction_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_erc20_transfer();
  void set_has_erc20_approve();
  void set_has_erc721_transfer();
  void set_has_erc1155_transfer();
  void set_has_contract_generic();
  void set_has_erc721_approve();

  inline bool has_transaction_oneof() const;
  inline void clear_has_transaction_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TransactionOneofUnion {
    TransactionOneofUnion() {}
    ::TW::Ethereum::Proto::Transaction_Transfer* transfer_;
    ::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer_;
    ::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve_;
    ::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer_;
    ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer_;
    ::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic_;
    ::TW::Ethereum::Proto::Transaction_ERC721Approve* erc721_approve_;
  } transaction_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 1,
    kNonceFieldNumber = 2,
    kGasPriceFieldNumber = 4,
    kGasLimitFieldNumber = 5,
    kMaxInclusionFeePerGasFieldNumber = 6,
    kMaxFeePerGasFieldNumber = 7,
    kToAddressFieldNumber = 8,
    kPrivateKeyFieldNumber = 9,
    kTransactionFieldNumber = 10,
    kTxModeFieldNumber = 3,
  };
  // bytes chain_id = 1;
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const void* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // bytes nonce = 2;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes gas_price = 4;
  void clear_gas_price();
  const std::string& gas_price() const;
  void set_gas_price(const std::string& value);
  void set_gas_price(std::string&& value);
  void set_gas_price(const char* value);
  void set_gas_price(const void* value, size_t size);
  std::string* mutable_gas_price();
  std::string* release_gas_price();
  void set_allocated_gas_price(std::string* gas_price);
  private:
  const std::string& _internal_gas_price() const;
  void _internal_set_gas_price(const std::string& value);
  std::string* _internal_mutable_gas_price();
  public:

  // bytes gas_limit = 5;
  void clear_gas_limit();
  const std::string& gas_limit() const;
  void set_gas_limit(const std::string& value);
  void set_gas_limit(std::string&& value);
  void set_gas_limit(const char* value);
  void set_gas_limit(const void* value, size_t size);
  std::string* mutable_gas_limit();
  std::string* release_gas_limit();
  void set_allocated_gas_limit(std::string* gas_limit);
  private:
  const std::string& _internal_gas_limit() const;
  void _internal_set_gas_limit(const std::string& value);
  std::string* _internal_mutable_gas_limit();
  public:

  // bytes max_inclusion_fee_per_gas = 6;
  void clear_max_inclusion_fee_per_gas();
  const std::string& max_inclusion_fee_per_gas() const;
  void set_max_inclusion_fee_per_gas(const std::string& value);
  void set_max_inclusion_fee_per_gas(std::string&& value);
  void set_max_inclusion_fee_per_gas(const char* value);
  void set_max_inclusion_fee_per_gas(const void* value, size_t size);
  std::string* mutable_max_inclusion_fee_per_gas();
  std::string* release_max_inclusion_fee_per_gas();
  void set_allocated_max_inclusion_fee_per_gas(std::string* max_inclusion_fee_per_gas);
  private:
  const std::string& _internal_max_inclusion_fee_per_gas() const;
  void _internal_set_max_inclusion_fee_per_gas(const std::string& value);
  std::string* _internal_mutable_max_inclusion_fee_per_gas();
  public:

  // bytes max_fee_per_gas = 7;
  void clear_max_fee_per_gas();
  const std::string& max_fee_per_gas() const;
  void set_max_fee_per_gas(const std::string& value);
  void set_max_fee_per_gas(std::string&& value);
  void set_max_fee_per_gas(const char* value);
  void set_max_fee_per_gas(const void* value, size_t size);
  std::string* mutable_max_fee_per_gas();
  std::string* release_max_fee_per_gas();
  void set_allocated_max_fee_per_gas(std::string* max_fee_per_gas);
  private:
  const std::string& _internal_max_fee_per_gas() const;
  void _internal_set_max_fee_per_gas(const std::string& value);
  std::string* _internal_mutable_max_fee_per_gas();
  public:

  // string to_address = 8;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // bytes private_key = 9;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Ethereum.Proto.Transaction transaction = 10;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::TW::Ethereum::Proto::Transaction& transaction() const;
  ::TW::Ethereum::Proto::Transaction* release_transaction();
  ::TW::Ethereum::Proto::Transaction* mutable_transaction();
  void set_allocated_transaction(::TW::Ethereum::Proto::Transaction* transaction);
  private:
  const ::TW::Ethereum::Proto::Transaction& _internal_transaction() const;
  ::TW::Ethereum::Proto::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::TW::Ethereum::Proto::Transaction* transaction);
  ::TW::Ethereum::Proto::Transaction* unsafe_arena_release_transaction();

  // .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
  void clear_tx_mode();
  ::TW::Ethereum::Proto::TransactionMode tx_mode() const;
  void set_tx_mode(::TW::Ethereum::Proto::TransactionMode value);
  private:
  ::TW::Ethereum::Proto::TransactionMode _internal_tx_mode() const;
  void _internal_set_tx_mode(::TW::Ethereum::Proto::TransactionMode value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_limit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_inclusion_fee_per_gas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_fee_per_gas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::TW::Ethereum::Proto::Transaction* transaction_;
  int tx_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ethereum_2eproto);
    return ::descriptor_table_Ethereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kVFieldNumber = 2,
    kRFieldNumber = 3,
    kSFieldNumber = 4,
    kDataFieldNumber = 5,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // bytes v = 2;
  void clear_v();
  const std::string& v() const;
  void set_v(const std::string& value);
  void set_v(std::string&& value);
  void set_v(const char* value);
  void set_v(const void* value, size_t size);
  std::string* mutable_v();
  std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // bytes r = 3;
  void clear_r();
  const std::string& r() const;
  void set_r(const std::string& value);
  void set_r(std::string&& value);
  void set_r(const char* value);
  void set_r(const void* value, size_t size);
  std::string* mutable_r();
  std::string* release_r();
  void set_allocated_r(std::string* r);
  private:
  const std::string& _internal_r() const;
  void _internal_set_r(const std::string& value);
  std::string* _internal_mutable_r();
  public:

  // bytes s = 4;
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction_Transfer

// bytes amount = 1;
inline void Transaction_Transfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.Transfer.amount)
  return _internal_amount();
}
inline void Transaction_Transfer::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.Transfer.amount)
}
inline std::string* Transaction_Transfer::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.Transfer.amount)
  return _internal_mutable_amount();
}
inline const std::string& Transaction_Transfer::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_Transfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_Transfer::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.Transfer.amount)
}
inline void Transaction_Transfer::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.Transfer.amount)
}
inline void Transaction_Transfer::set_amount(const void* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.Transfer.amount)
}
inline std::string* Transaction_Transfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.Transfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Transfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.Transfer.amount)
}

// bytes data = 2;
inline void Transaction_Transfer::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Transaction_Transfer::data() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.Transfer.data)
  return _internal_data();
}
inline void Transaction_Transfer::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.Transfer.data)
}
inline std::string* Transaction_Transfer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.Transfer.data)
  return _internal_mutable_data();
}
inline const std::string& Transaction_Transfer::_internal_data() const {
  return data_.Get();
}
inline void Transaction_Transfer::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_Transfer::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.Transfer.data)
}
inline void Transaction_Transfer::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.Transfer.data)
}
inline void Transaction_Transfer::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.Transfer.data)
}
inline std::string* Transaction_Transfer::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_Transfer::release_data() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.Transfer.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Transfer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.Transfer.data)
}

// -------------------------------------------------------------------

// Transaction_ERC20Transfer

// string to = 1;
inline void Transaction_ERC20Transfer::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Transaction_ERC20Transfer::to() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
  return _internal_to();
}
inline void Transaction_ERC20Transfer::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
}
inline std::string* Transaction_ERC20Transfer::mutable_to() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
  return _internal_mutable_to();
}
inline const std::string& Transaction_ERC20Transfer::_internal_to() const {
  return to_.Get();
}
inline void Transaction_ERC20Transfer::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC20Transfer::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
}
inline void Transaction_ERC20Transfer::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
}
inline void Transaction_ERC20Transfer::set_to(const char* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
}
inline std::string* Transaction_ERC20Transfer::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC20Transfer::release_to() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC20Transfer::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
}

// bytes amount = 2;
inline void Transaction_ERC20Transfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_ERC20Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
  return _internal_amount();
}
inline void Transaction_ERC20Transfer::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
}
inline std::string* Transaction_ERC20Transfer::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
  return _internal_mutable_amount();
}
inline const std::string& Transaction_ERC20Transfer::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_ERC20Transfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC20Transfer::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
}
inline void Transaction_ERC20Transfer::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
}
inline void Transaction_ERC20Transfer::set_amount(const void* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
}
inline std::string* Transaction_ERC20Transfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC20Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC20Transfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
}

// -------------------------------------------------------------------

// Transaction_ERC20Approve

// string spender = 1;
inline void Transaction_ERC20Approve::clear_spender() {
  spender_.ClearToEmpty();
}
inline const std::string& Transaction_ERC20Approve::spender() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
  return _internal_spender();
}
inline void Transaction_ERC20Approve::set_spender(const std::string& value) {
  _internal_set_spender(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
}
inline std::string* Transaction_ERC20Approve::mutable_spender() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
  return _internal_mutable_spender();
}
inline const std::string& Transaction_ERC20Approve::_internal_spender() const {
  return spender_.Get();
}
inline void Transaction_ERC20Approve::_internal_set_spender(const std::string& value) {
  
  spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC20Approve::set_spender(std::string&& value) {
  
  spender_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
}
inline void Transaction_ERC20Approve::set_spender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
}
inline void Transaction_ERC20Approve::set_spender(const char* value,
    size_t size) {
  
  spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
}
inline std::string* Transaction_ERC20Approve::_internal_mutable_spender() {
  
  return spender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC20Approve::release_spender() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
  return spender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC20Approve::set_allocated_spender(std::string* spender) {
  if (spender != nullptr) {
    
  } else {
    
  }
  spender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spender,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
}

// bytes amount = 2;
inline void Transaction_ERC20Approve::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_ERC20Approve::amount() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
  return _internal_amount();
}
inline void Transaction_ERC20Approve::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
}
inline std::string* Transaction_ERC20Approve::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
  return _internal_mutable_amount();
}
inline const std::string& Transaction_ERC20Approve::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_ERC20Approve::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC20Approve::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
}
inline void Transaction_ERC20Approve::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
}
inline void Transaction_ERC20Approve::set_amount(const void* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
}
inline std::string* Transaction_ERC20Approve::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC20Approve::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC20Approve::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
}

// -------------------------------------------------------------------

// Transaction_ERC721Approve

// string spender = 1;
inline void Transaction_ERC721Approve::clear_spender() {
  spender_.ClearToEmpty();
}
inline const std::string& Transaction_ERC721Approve::spender() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC721Approve.spender)
  return _internal_spender();
}
inline void Transaction_ERC721Approve::set_spender(const std::string& value) {
  _internal_set_spender(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC721Approve.spender)
}
inline std::string* Transaction_ERC721Approve::mutable_spender() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC721Approve.spender)
  return _internal_mutable_spender();
}
inline const std::string& Transaction_ERC721Approve::_internal_spender() const {
  return spender_.Get();
}
inline void Transaction_ERC721Approve::_internal_set_spender(const std::string& value) {
  
  spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC721Approve::set_spender(std::string&& value) {
  
  spender_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC721Approve.spender)
}
inline void Transaction_ERC721Approve::set_spender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC721Approve.spender)
}
inline void Transaction_ERC721Approve::set_spender(const char* value,
    size_t size) {
  
  spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC721Approve.spender)
}
inline std::string* Transaction_ERC721Approve::_internal_mutable_spender() {
  
  return spender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC721Approve::release_spender() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC721Approve.spender)
  return spender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC721Approve::set_allocated_spender(std::string* spender) {
  if (spender != nullptr) {
    
  } else {
    
  }
  spender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spender,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC721Approve.spender)
}

// bool approved = 2;
inline void Transaction_ERC721Approve::clear_approved() {
  approved_ = false;
}
inline bool Transaction_ERC721Approve::_internal_approved() const {
  return approved_;
}
inline bool Transaction_ERC721Approve::approved() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC721Approve.approved)
  return _internal_approved();
}
inline void Transaction_ERC721Approve::_internal_set_approved(bool value) {
  
  approved_ = value;
}
inline void Transaction_ERC721Approve::set_approved(bool value) {
  _internal_set_approved(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC721Approve.approved)
}

// -------------------------------------------------------------------

// Transaction_ERC721Transfer

// string from = 1;
inline void Transaction_ERC721Transfer::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& Transaction_ERC721Transfer::from() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
  return _internal_from();
}
inline void Transaction_ERC721Transfer::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
}
inline std::string* Transaction_ERC721Transfer::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
  return _internal_mutable_from();
}
inline const std::string& Transaction_ERC721Transfer::_internal_from() const {
  return from_.Get();
}
inline void Transaction_ERC721Transfer::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC721Transfer::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
}
inline void Transaction_ERC721Transfer::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
}
inline void Transaction_ERC721Transfer::set_from(const char* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
}
inline std::string* Transaction_ERC721Transfer::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC721Transfer::release_from() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC721Transfer::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
}

// string to = 2;
inline void Transaction_ERC721Transfer::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Transaction_ERC721Transfer::to() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
  return _internal_to();
}
inline void Transaction_ERC721Transfer::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
}
inline std::string* Transaction_ERC721Transfer::mutable_to() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
  return _internal_mutable_to();
}
inline const std::string& Transaction_ERC721Transfer::_internal_to() const {
  return to_.Get();
}
inline void Transaction_ERC721Transfer::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC721Transfer::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
}
inline void Transaction_ERC721Transfer::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
}
inline void Transaction_ERC721Transfer::set_to(const char* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
}
inline std::string* Transaction_ERC721Transfer::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC721Transfer::release_to() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC721Transfer::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
}

// bytes token_id = 3;
inline void Transaction_ERC721Transfer::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& Transaction_ERC721Transfer::token_id() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
  return _internal_token_id();
}
inline void Transaction_ERC721Transfer::set_token_id(const std::string& value) {
  _internal_set_token_id(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
}
inline std::string* Transaction_ERC721Transfer::mutable_token_id() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
  return _internal_mutable_token_id();
}
inline const std::string& Transaction_ERC721Transfer::_internal_token_id() const {
  return token_id_.Get();
}
inline void Transaction_ERC721Transfer::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC721Transfer::set_token_id(std::string&& value) {
  
  token_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
}
inline void Transaction_ERC721Transfer::set_token_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
}
inline void Transaction_ERC721Transfer::set_token_id(const void* value,
    size_t size) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
}
inline std::string* Transaction_ERC721Transfer::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC721Transfer::release_token_id() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC721Transfer::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
}

// -------------------------------------------------------------------

// Transaction_ERC1155Transfer

// string from = 1;
inline void Transaction_ERC1155Transfer::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::from() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
  return _internal_from();
}
inline void Transaction_ERC1155Transfer::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
}
inline std::string* Transaction_ERC1155Transfer::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
  return _internal_mutable_from();
}
inline const std::string& Transaction_ERC1155Transfer::_internal_from() const {
  return from_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC1155Transfer::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
}
inline void Transaction_ERC1155Transfer::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
}
inline void Transaction_ERC1155Transfer::set_from(const char* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC1155Transfer::release_from() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC1155Transfer::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
}

// string to = 2;
inline void Transaction_ERC1155Transfer::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::to() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
  return _internal_to();
}
inline void Transaction_ERC1155Transfer::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
}
inline std::string* Transaction_ERC1155Transfer::mutable_to() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
  return _internal_mutable_to();
}
inline const std::string& Transaction_ERC1155Transfer::_internal_to() const {
  return to_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC1155Transfer::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
}
inline void Transaction_ERC1155Transfer::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
}
inline void Transaction_ERC1155Transfer::set_to(const char* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC1155Transfer::release_to() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC1155Transfer::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
}

// bytes token_id = 3;
inline void Transaction_ERC1155Transfer::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::token_id() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
  return _internal_token_id();
}
inline void Transaction_ERC1155Transfer::set_token_id(const std::string& value) {
  _internal_set_token_id(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
}
inline std::string* Transaction_ERC1155Transfer::mutable_token_id() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
  return _internal_mutable_token_id();
}
inline const std::string& Transaction_ERC1155Transfer::_internal_token_id() const {
  return token_id_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC1155Transfer::set_token_id(std::string&& value) {
  
  token_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
}
inline void Transaction_ERC1155Transfer::set_token_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
}
inline void Transaction_ERC1155Transfer::set_token_id(const void* value,
    size_t size) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC1155Transfer::release_token_id() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC1155Transfer::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
}

// bytes value = 4;
inline void Transaction_ERC1155Transfer::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::value() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
  return _internal_value();
}
inline void Transaction_ERC1155Transfer::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
}
inline std::string* Transaction_ERC1155Transfer::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
  return _internal_mutable_value();
}
inline const std::string& Transaction_ERC1155Transfer::_internal_value() const {
  return value_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC1155Transfer::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
}
inline void Transaction_ERC1155Transfer::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
}
inline void Transaction_ERC1155Transfer::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC1155Transfer::release_value() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC1155Transfer::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
}

// bytes data = 5;
inline void Transaction_ERC1155Transfer::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::data() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
  return _internal_data();
}
inline void Transaction_ERC1155Transfer::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
}
inline std::string* Transaction_ERC1155Transfer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
  return _internal_mutable_data();
}
inline const std::string& Transaction_ERC1155Transfer::_internal_data() const {
  return data_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ERC1155Transfer::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
}
inline void Transaction_ERC1155Transfer::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
}
inline void Transaction_ERC1155Transfer::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ERC1155Transfer::release_data() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ERC1155Transfer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
}

// -------------------------------------------------------------------

// Transaction_ContractGeneric

// bytes amount = 1;
inline void Transaction_ContractGeneric::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_ContractGeneric::amount() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
  return _internal_amount();
}
inline void Transaction_ContractGeneric::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
}
inline std::string* Transaction_ContractGeneric::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
  return _internal_mutable_amount();
}
inline const std::string& Transaction_ContractGeneric::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_ContractGeneric::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ContractGeneric::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
}
inline void Transaction_ContractGeneric::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
}
inline void Transaction_ContractGeneric::set_amount(const void* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
}
inline std::string* Transaction_ContractGeneric::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ContractGeneric::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ContractGeneric::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
}

// bytes data = 2;
inline void Transaction_ContractGeneric::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Transaction_ContractGeneric::data() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
  return _internal_data();
}
inline void Transaction_ContractGeneric::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
}
inline std::string* Transaction_ContractGeneric::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
  return _internal_mutable_data();
}
inline const std::string& Transaction_ContractGeneric::_internal_data() const {
  return data_.Get();
}
inline void Transaction_ContractGeneric::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_ContractGeneric::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
}
inline void Transaction_ContractGeneric::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
}
inline void Transaction_ContractGeneric::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
}
inline std::string* Transaction_ContractGeneric::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_ContractGeneric::release_data() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_ContractGeneric::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
}

// -------------------------------------------------------------------

// Transaction

// .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
inline bool Transaction::_internal_has_transfer() const {
  return transaction_oneof_case() == kTransfer;
}
inline bool Transaction::has_transfer() const {
  return _internal_has_transfer();
}
inline void Transaction::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void Transaction::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArena() == nullptr) {
      delete transaction_oneof_.transfer_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_Transfer* Transaction::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.transfer)
  if (_internal_has_transfer()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_Transfer* temp = transaction_oneof_.transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_Transfer& Transaction::_internal_transfer() const {
  return _internal_has_transfer()
      ? *transaction_oneof_.transfer_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_Transfer&>(::TW::Ethereum::Proto::_Transaction_Transfer_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_Transfer& Transaction::transfer() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.transfer)
  return _internal_transfer();
}
inline ::TW::Ethereum::Proto::Transaction_Transfer* Transaction::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.transfer)
  if (_internal_has_transfer()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_Transfer* temp = transaction_oneof_.transfer_;
    transaction_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_transfer(::TW::Ethereum::Proto::Transaction_Transfer* transfer) {
  clear_transaction_oneof();
  if (transfer) {
    set_has_transfer();
    transaction_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.transfer)
}
inline ::TW::Ethereum::Proto::Transaction_Transfer* Transaction::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_transaction_oneof();
    set_has_transfer();
    transaction_oneof_.transfer_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_Transfer >(GetArena());
  }
  return transaction_oneof_.transfer_;
}
inline ::TW::Ethereum::Proto::Transaction_Transfer* Transaction::mutable_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.transfer)
  return _internal_mutable_transfer();
}

// .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
inline bool Transaction::_internal_has_erc20_transfer() const {
  return transaction_oneof_case() == kErc20Transfer;
}
inline bool Transaction::has_erc20_transfer() const {
  return _internal_has_erc20_transfer();
}
inline void Transaction::set_has_erc20_transfer() {
  _oneof_case_[0] = kErc20Transfer;
}
inline void Transaction::clear_erc20_transfer() {
  if (_internal_has_erc20_transfer()) {
    if (GetArena() == nullptr) {
      delete transaction_oneof_.erc20_transfer_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Transaction::release_erc20_transfer() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.erc20_transfer)
  if (_internal_has_erc20_transfer()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ERC20Transfer* temp = transaction_oneof_.erc20_transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.erc20_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& Transaction::_internal_erc20_transfer() const {
  return _internal_has_erc20_transfer()
      ? *transaction_oneof_.erc20_transfer_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ERC20Transfer&>(::TW::Ethereum::Proto::_Transaction_ERC20Transfer_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& Transaction::erc20_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.erc20_transfer)
  return _internal_erc20_transfer();
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Transaction::unsafe_arena_release_erc20_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.erc20_transfer)
  if (_internal_has_erc20_transfer()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ERC20Transfer* temp = transaction_oneof_.erc20_transfer_;
    transaction_oneof_.erc20_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_erc20_transfer(::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer) {
  clear_transaction_oneof();
  if (erc20_transfer) {
    set_has_erc20_transfer();
    transaction_oneof_.erc20_transfer_ = erc20_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.erc20_transfer)
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Transaction::_internal_mutable_erc20_transfer() {
  if (!_internal_has_erc20_transfer()) {
    clear_transaction_oneof();
    set_has_erc20_transfer();
    transaction_oneof_.erc20_transfer_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC20Transfer >(GetArena());
  }
  return transaction_oneof_.erc20_transfer_;
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Transaction::mutable_erc20_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.erc20_transfer)
  return _internal_mutable_erc20_transfer();
}

// .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
inline bool Transaction::_internal_has_erc20_approve() const {
  return transaction_oneof_case() == kErc20Approve;
}
inline bool Transaction::has_erc20_approve() const {
  return _internal_has_erc20_approve();
}
inline void Transaction::set_has_erc20_approve() {
  _oneof_case_[0] = kErc20Approve;
}
inline void Transaction::clear_erc20_approve() {
  if (_internal_has_erc20_approve()) {
    if (GetArena() == nullptr) {
      delete transaction_oneof_.erc20_approve_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Approve* Transaction::release_erc20_approve() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.erc20_approve)
  if (_internal_has_erc20_approve()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ERC20Approve* temp = transaction_oneof_.erc20_approve_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.erc20_approve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ERC20Approve& Transaction::_internal_erc20_approve() const {
  return _internal_has_erc20_approve()
      ? *transaction_oneof_.erc20_approve_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ERC20Approve&>(::TW::Ethereum::Proto::_Transaction_ERC20Approve_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ERC20Approve& Transaction::erc20_approve() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.erc20_approve)
  return _internal_erc20_approve();
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Approve* Transaction::unsafe_arena_release_erc20_approve() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.erc20_approve)
  if (_internal_has_erc20_approve()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ERC20Approve* temp = transaction_oneof_.erc20_approve_;
    transaction_oneof_.erc20_approve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_erc20_approve(::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve) {
  clear_transaction_oneof();
  if (erc20_approve) {
    set_has_erc20_approve();
    transaction_oneof_.erc20_approve_ = erc20_approve;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.erc20_approve)
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Approve* Transaction::_internal_mutable_erc20_approve() {
  if (!_internal_has_erc20_approve()) {
    clear_transaction_oneof();
    set_has_erc20_approve();
    transaction_oneof_.erc20_approve_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC20Approve >(GetArena());
  }
  return transaction_oneof_.erc20_approve_;
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Approve* Transaction::mutable_erc20_approve() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.erc20_approve)
  return _internal_mutable_erc20_approve();
}

// .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
inline bool Transaction::_internal_has_erc721_transfer() const {
  return transaction_oneof_case() == kErc721Transfer;
}
inline bool Transaction::has_erc721_transfer() const {
  return _internal_has_erc721_transfer();
}
inline void Transaction::set_has_erc721_transfer() {
  _oneof_case_[0] = kErc721Transfer;
}
inline void Transaction::clear_erc721_transfer() {
  if (_internal_has_erc721_transfer()) {
    if (GetArena() == nullptr) {
      delete transaction_oneof_.erc721_transfer_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Transaction::release_erc721_transfer() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.erc721_transfer)
  if (_internal_has_erc721_transfer()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ERC721Transfer* temp = transaction_oneof_.erc721_transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.erc721_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& Transaction::_internal_erc721_transfer() const {
  return _internal_has_erc721_transfer()
      ? *transaction_oneof_.erc721_transfer_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ERC721Transfer&>(::TW::Ethereum::Proto::_Transaction_ERC721Transfer_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& Transaction::erc721_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.erc721_transfer)
  return _internal_erc721_transfer();
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Transaction::unsafe_arena_release_erc721_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.erc721_transfer)
  if (_internal_has_erc721_transfer()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ERC721Transfer* temp = transaction_oneof_.erc721_transfer_;
    transaction_oneof_.erc721_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_erc721_transfer(::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer) {
  clear_transaction_oneof();
  if (erc721_transfer) {
    set_has_erc721_transfer();
    transaction_oneof_.erc721_transfer_ = erc721_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.erc721_transfer)
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Transaction::_internal_mutable_erc721_transfer() {
  if (!_internal_has_erc721_transfer()) {
    clear_transaction_oneof();
    set_has_erc721_transfer();
    transaction_oneof_.erc721_transfer_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC721Transfer >(GetArena());
  }
  return transaction_oneof_.erc721_transfer_;
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Transaction::mutable_erc721_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.erc721_transfer)
  return _internal_mutable_erc721_transfer();
}

// .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
inline bool Transaction::_internal_has_erc1155_transfer() const {
  return transaction_oneof_case() == kErc1155Transfer;
}
inline bool Transaction::has_erc1155_transfer() const {
  return _internal_has_erc1155_transfer();
}
inline void Transaction::set_has_erc1155_transfer() {
  _oneof_case_[0] = kErc1155Transfer;
}
inline void Transaction::clear_erc1155_transfer() {
  if (_internal_has_erc1155_transfer()) {
    if (GetArena() == nullptr) {
      delete transaction_oneof_.erc1155_transfer_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Transaction::release_erc1155_transfer() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.erc1155_transfer)
  if (_internal_has_erc1155_transfer()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* temp = transaction_oneof_.erc1155_transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.erc1155_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& Transaction::_internal_erc1155_transfer() const {
  return _internal_has_erc1155_transfer()
      ? *transaction_oneof_.erc1155_transfer_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ERC1155Transfer&>(::TW::Ethereum::Proto::_Transaction_ERC1155Transfer_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& Transaction::erc1155_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.erc1155_transfer)
  return _internal_erc1155_transfer();
}
inline ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Transaction::unsafe_arena_release_erc1155_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.erc1155_transfer)
  if (_internal_has_erc1155_transfer()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* temp = transaction_oneof_.erc1155_transfer_;
    transaction_oneof_.erc1155_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_erc1155_transfer(::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer) {
  clear_transaction_oneof();
  if (erc1155_transfer) {
    set_has_erc1155_transfer();
    transaction_oneof_.erc1155_transfer_ = erc1155_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.erc1155_transfer)
}
inline ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Transaction::_internal_mutable_erc1155_transfer() {
  if (!_internal_has_erc1155_transfer()) {
    clear_transaction_oneof();
    set_has_erc1155_transfer();
    transaction_oneof_.erc1155_transfer_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC1155Transfer >(GetArena());
  }
  return transaction_oneof_.erc1155_transfer_;
}
inline ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Transaction::mutable_erc1155_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.erc1155_transfer)
  return _internal_mutable_erc1155_transfer();
}

// .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
inline bool Transaction::_internal_has_contract_generic() const {
  return transaction_oneof_case() == kContractGeneric;
}
inline bool Transaction::has_contract_generic() const {
  return _internal_has_contract_generic();
}
inline void Transaction::set_has_contract_generic() {
  _oneof_case_[0] = kContractGeneric;
}
inline void Transaction::clear_contract_generic() {
  if (_internal_has_contract_generic()) {
    if (GetArena() == nullptr) {
      delete transaction_oneof_.contract_generic_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ContractGeneric* Transaction::release_contract_generic() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.contract_generic)
  if (_internal_has_contract_generic()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ContractGeneric* temp = transaction_oneof_.contract_generic_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.contract_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ContractGeneric& Transaction::_internal_contract_generic() const {
  return _internal_has_contract_generic()
      ? *transaction_oneof_.contract_generic_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ContractGeneric&>(::TW::Ethereum::Proto::_Transaction_ContractGeneric_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ContractGeneric& Transaction::contract_generic() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.contract_generic)
  return _internal_contract_generic();
}
inline ::TW::Ethereum::Proto::Transaction_ContractGeneric* Transaction::unsafe_arena_release_contract_generic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.contract_generic)
  if (_internal_has_contract_generic()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ContractGeneric* temp = transaction_oneof_.contract_generic_;
    transaction_oneof_.contract_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_contract_generic(::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic) {
  clear_transaction_oneof();
  if (contract_generic) {
    set_has_contract_generic();
    transaction_oneof_.contract_generic_ = contract_generic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.contract_generic)
}
inline ::TW::Ethereum::Proto::Transaction_ContractGeneric* Transaction::_internal_mutable_contract_generic() {
  if (!_internal_has_contract_generic()) {
    clear_transaction_oneof();
    set_has_contract_generic();
    transaction_oneof_.contract_generic_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ContractGeneric >(GetArena());
  }
  return transaction_oneof_.contract_generic_;
}
inline ::TW::Ethereum::Proto::Transaction_ContractGeneric* Transaction::mutable_contract_generic() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.contract_generic)
  return _internal_mutable_contract_generic();
}

// .TW.Ethereum.Proto.Transaction.ERC721Approve erc721_approve = 7;
inline bool Transaction::_internal_has_erc721_approve() const {
  return transaction_oneof_case() == kErc721Approve;
}
inline bool Transaction::has_erc721_approve() const {
  return _internal_has_erc721_approve();
}
inline void Transaction::set_has_erc721_approve() {
  _oneof_case_[0] = kErc721Approve;
}
inline void Transaction::clear_erc721_approve() {
  if (_internal_has_erc721_approve()) {
    if (GetArena() == nullptr) {
      delete transaction_oneof_.erc721_approve_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Approve* Transaction::release_erc721_approve() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.erc721_approve)
  if (_internal_has_erc721_approve()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ERC721Approve* temp = transaction_oneof_.erc721_approve_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.erc721_approve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ERC721Approve& Transaction::_internal_erc721_approve() const {
  return _internal_has_erc721_approve()
      ? *transaction_oneof_.erc721_approve_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ERC721Approve&>(::TW::Ethereum::Proto::_Transaction_ERC721Approve_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ERC721Approve& Transaction::erc721_approve() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.erc721_approve)
  return _internal_erc721_approve();
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Approve* Transaction::unsafe_arena_release_erc721_approve() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.erc721_approve)
  if (_internal_has_erc721_approve()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ERC721Approve* temp = transaction_oneof_.erc721_approve_;
    transaction_oneof_.erc721_approve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_erc721_approve(::TW::Ethereum::Proto::Transaction_ERC721Approve* erc721_approve) {
  clear_transaction_oneof();
  if (erc721_approve) {
    set_has_erc721_approve();
    transaction_oneof_.erc721_approve_ = erc721_approve;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.erc721_approve)
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Approve* Transaction::_internal_mutable_erc721_approve() {
  if (!_internal_has_erc721_approve()) {
    clear_transaction_oneof();
    set_has_erc721_approve();
    transaction_oneof_.erc721_approve_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC721Approve >(GetArena());
  }
  return transaction_oneof_.erc721_approve_;
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Approve* Transaction::mutable_erc721_approve() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.erc721_approve)
  return _internal_mutable_erc721_approve();
}

inline bool Transaction::has_transaction_oneof() const {
  return transaction_oneof_case() != TRANSACTION_ONEOF_NOT_SET;
}
inline void Transaction::clear_has_transaction_oneof() {
  _oneof_case_[0] = TRANSACTION_ONEOF_NOT_SET;
}
inline Transaction::TransactionOneofCase Transaction::transaction_oneof_case() const {
  return Transaction::TransactionOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// bytes chain_id = 1;
inline void SigningInput::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& SigningInput::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.chain_id)
  return _internal_chain_id();
}
inline void SigningInput::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.chain_id)
}
inline std::string* SigningInput::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& SigningInput::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void SigningInput::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_chain_id(std::string&& value) {
  
  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningInput.chain_id)
}
inline void SigningInput::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningInput.chain_id)
}
inline void SigningInput::set_chain_id(const void* value,
    size_t size) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningInput.chain_id)
}
inline std::string* SigningInput::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.chain_id)
}

// bytes nonce = 2;
inline void SigningInput::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& SigningInput::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.nonce)
  return _internal_nonce();
}
inline void SigningInput::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.nonce)
}
inline std::string* SigningInput::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& SigningInput::_internal_nonce() const {
  return nonce_.Get();
}
inline void SigningInput::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_nonce(std::string&& value) {
  
  nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningInput.nonce)
}
inline void SigningInput::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningInput.nonce)
}
inline void SigningInput::set_nonce(const void* value,
    size_t size) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningInput.nonce)
}
inline std::string* SigningInput::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_nonce() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.nonce)
}

// .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
inline void SigningInput::clear_tx_mode() {
  tx_mode_ = 0;
}
inline ::TW::Ethereum::Proto::TransactionMode SigningInput::_internal_tx_mode() const {
  return static_cast< ::TW::Ethereum::Proto::TransactionMode >(tx_mode_);
}
inline ::TW::Ethereum::Proto::TransactionMode SigningInput::tx_mode() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.tx_mode)
  return _internal_tx_mode();
}
inline void SigningInput::_internal_set_tx_mode(::TW::Ethereum::Proto::TransactionMode value) {
  
  tx_mode_ = value;
}
inline void SigningInput::set_tx_mode(::TW::Ethereum::Proto::TransactionMode value) {
  _internal_set_tx_mode(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.tx_mode)
}

// bytes gas_price = 4;
inline void SigningInput::clear_gas_price() {
  gas_price_.ClearToEmpty();
}
inline const std::string& SigningInput::gas_price() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.gas_price)
  return _internal_gas_price();
}
inline void SigningInput::set_gas_price(const std::string& value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.gas_price)
}
inline std::string* SigningInput::mutable_gas_price() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.gas_price)
  return _internal_mutable_gas_price();
}
inline const std::string& SigningInput::_internal_gas_price() const {
  return gas_price_.Get();
}
inline void SigningInput::_internal_set_gas_price(const std::string& value) {
  
  gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_gas_price(std::string&& value) {
  
  gas_price_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningInput.gas_price)
}
inline void SigningInput::set_gas_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningInput.gas_price)
}
inline void SigningInput::set_gas_price(const void* value,
    size_t size) {
  
  gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningInput.gas_price)
}
inline std::string* SigningInput::_internal_mutable_gas_price() {
  
  return gas_price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_gas_price() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.gas_price)
  return gas_price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_gas_price(std::string* gas_price) {
  if (gas_price != nullptr) {
    
  } else {
    
  }
  gas_price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_price,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.gas_price)
}

// bytes gas_limit = 5;
inline void SigningInput::clear_gas_limit() {
  gas_limit_.ClearToEmpty();
}
inline const std::string& SigningInput::gas_limit() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.gas_limit)
  return _internal_gas_limit();
}
inline void SigningInput::set_gas_limit(const std::string& value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.gas_limit)
}
inline std::string* SigningInput::mutable_gas_limit() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.gas_limit)
  return _internal_mutable_gas_limit();
}
inline const std::string& SigningInput::_internal_gas_limit() const {
  return gas_limit_.Get();
}
inline void SigningInput::_internal_set_gas_limit(const std::string& value) {
  
  gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_gas_limit(std::string&& value) {
  
  gas_limit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningInput.gas_limit)
}
inline void SigningInput::set_gas_limit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningInput.gas_limit)
}
inline void SigningInput::set_gas_limit(const void* value,
    size_t size) {
  
  gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningInput.gas_limit)
}
inline std::string* SigningInput::_internal_mutable_gas_limit() {
  
  return gas_limit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_gas_limit() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.gas_limit)
  return gas_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_gas_limit(std::string* gas_limit) {
  if (gas_limit != nullptr) {
    
  } else {
    
  }
  gas_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_limit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.gas_limit)
}

// bytes max_inclusion_fee_per_gas = 6;
inline void SigningInput::clear_max_inclusion_fee_per_gas() {
  max_inclusion_fee_per_gas_.ClearToEmpty();
}
inline const std::string& SigningInput::max_inclusion_fee_per_gas() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
  return _internal_max_inclusion_fee_per_gas();
}
inline void SigningInput::set_max_inclusion_fee_per_gas(const std::string& value) {
  _internal_set_max_inclusion_fee_per_gas(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
}
inline std::string* SigningInput::mutable_max_inclusion_fee_per_gas() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
  return _internal_mutable_max_inclusion_fee_per_gas();
}
inline const std::string& SigningInput::_internal_max_inclusion_fee_per_gas() const {
  return max_inclusion_fee_per_gas_.Get();
}
inline void SigningInput::_internal_set_max_inclusion_fee_per_gas(const std::string& value) {
  
  max_inclusion_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_max_inclusion_fee_per_gas(std::string&& value) {
  
  max_inclusion_fee_per_gas_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
}
inline void SigningInput::set_max_inclusion_fee_per_gas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  max_inclusion_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
}
inline void SigningInput::set_max_inclusion_fee_per_gas(const void* value,
    size_t size) {
  
  max_inclusion_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
}
inline std::string* SigningInput::_internal_mutable_max_inclusion_fee_per_gas() {
  
  return max_inclusion_fee_per_gas_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_max_inclusion_fee_per_gas() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
  return max_inclusion_fee_per_gas_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_max_inclusion_fee_per_gas(std::string* max_inclusion_fee_per_gas) {
  if (max_inclusion_fee_per_gas != nullptr) {
    
  } else {
    
  }
  max_inclusion_fee_per_gas_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_inclusion_fee_per_gas,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
}

// bytes max_fee_per_gas = 7;
inline void SigningInput::clear_max_fee_per_gas() {
  max_fee_per_gas_.ClearToEmpty();
}
inline const std::string& SigningInput::max_fee_per_gas() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
  return _internal_max_fee_per_gas();
}
inline void SigningInput::set_max_fee_per_gas(const std::string& value) {
  _internal_set_max_fee_per_gas(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
}
inline std::string* SigningInput::mutable_max_fee_per_gas() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
  return _internal_mutable_max_fee_per_gas();
}
inline const std::string& SigningInput::_internal_max_fee_per_gas() const {
  return max_fee_per_gas_.Get();
}
inline void SigningInput::_internal_set_max_fee_per_gas(const std::string& value) {
  
  max_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_max_fee_per_gas(std::string&& value) {
  
  max_fee_per_gas_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
}
inline void SigningInput::set_max_fee_per_gas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  max_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
}
inline void SigningInput::set_max_fee_per_gas(const void* value,
    size_t size) {
  
  max_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
}
inline std::string* SigningInput::_internal_mutable_max_fee_per_gas() {
  
  return max_fee_per_gas_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_max_fee_per_gas() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
  return max_fee_per_gas_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_max_fee_per_gas(std::string* max_fee_per_gas) {
  if (max_fee_per_gas != nullptr) {
    
  } else {
    
  }
  max_fee_per_gas_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_fee_per_gas,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
}

// string to_address = 8;
inline void SigningInput::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& SigningInput::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.to_address)
  return _internal_to_address();
}
inline void SigningInput::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.to_address)
}
inline std::string* SigningInput::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& SigningInput::_internal_to_address() const {
  return to_address_.Get();
}
inline void SigningInput::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningInput.to_address)
}
inline void SigningInput::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningInput.to_address)
}
inline void SigningInput::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningInput.to_address)
}
inline std::string* SigningInput::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.to_address)
}

// bytes private_key = 9;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.private_key)
}

// .TW.Ethereum.Proto.Transaction transaction = 10;
inline bool SigningInput::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool SigningInput::has_transaction() const {
  return _internal_has_transaction();
}
inline void SigningInput::clear_transaction() {
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::TW::Ethereum::Proto::Transaction& SigningInput::_internal_transaction() const {
  const ::TW::Ethereum::Proto::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Ethereum::Proto::Transaction&>(
      ::TW::Ethereum::Proto::_Transaction_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction& SigningInput::transaction() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.transaction)
  return _internal_transaction();
}
inline void SigningInput::unsafe_arena_set_allocated_transaction(
    ::TW::Ethereum::Proto::Transaction* transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.SigningInput.transaction)
}
inline ::TW::Ethereum::Proto::Transaction* SigningInput::release_transaction() {
  
  ::TW::Ethereum::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Ethereum::Proto::Transaction* SigningInput::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.transaction)
  
  ::TW::Ethereum::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::TW::Ethereum::Proto::Transaction* SigningInput::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Ethereum::Proto::Transaction>(GetArena());
    transaction_ = p;
  }
  return transaction_;
}
inline ::TW::Ethereum::Proto::Transaction* SigningInput::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.transaction)
  return _internal_mutable_transaction();
}
inline void SigningInput::set_allocated_transaction(::TW::Ethereum::Proto::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.transaction)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.encoded)
}

// bytes v = 2;
inline void SigningOutput::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& SigningOutput::v() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.v)
  return _internal_v();
}
inline void SigningOutput::set_v(const std::string& value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.v)
}
inline std::string* SigningOutput::mutable_v() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.v)
  return _internal_mutable_v();
}
inline const std::string& SigningOutput::_internal_v() const {
  return v_.Get();
}
inline void SigningOutput::_internal_set_v(const std::string& value) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_v(std::string&& value) {
  
  v_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningOutput.v)
}
inline void SigningOutput::set_v(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningOutput.v)
}
inline void SigningOutput::set_v(const void* value,
    size_t size) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningOutput.v)
}
inline std::string* SigningOutput::_internal_mutable_v() {
  
  return v_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_v() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.v)
}

// bytes r = 3;
inline void SigningOutput::clear_r() {
  r_.ClearToEmpty();
}
inline const std::string& SigningOutput::r() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.r)
  return _internal_r();
}
inline void SigningOutput::set_r(const std::string& value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.r)
}
inline std::string* SigningOutput::mutable_r() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.r)
  return _internal_mutable_r();
}
inline const std::string& SigningOutput::_internal_r() const {
  return r_.Get();
}
inline void SigningOutput::_internal_set_r(const std::string& value) {
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_r(std::string&& value) {
  
  r_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningOutput.r)
}
inline void SigningOutput::set_r(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningOutput.r)
}
inline void SigningOutput::set_r(const void* value,
    size_t size) {
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningOutput.r)
}
inline std::string* SigningOutput::_internal_mutable_r() {
  
  return r_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_r() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.r)
  return r_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_r(std::string* r) {
  if (r != nullptr) {
    
  } else {
    
  }
  r_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.r)
}

// bytes s = 4;
inline void SigningOutput::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& SigningOutput::s() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.s)
  return _internal_s();
}
inline void SigningOutput::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.s)
}
inline std::string* SigningOutput::mutable_s() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.s)
  return _internal_mutable_s();
}
inline const std::string& SigningOutput::_internal_s() const {
  return s_.Get();
}
inline void SigningOutput::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_s(std::string&& value) {
  
  s_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningOutput.s)
}
inline void SigningOutput::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningOutput.s)
}
inline void SigningOutput::set_s(const void* value,
    size_t size) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningOutput.s)
}
inline std::string* SigningOutput::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_s() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.s)
}

// bytes data = 5;
inline void SigningOutput::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SigningOutput::data() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.data)
  return _internal_data();
}
inline void SigningOutput::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.data)
}
inline std::string* SigningOutput::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.data)
  return _internal_mutable_data();
}
inline const std::string& SigningOutput::_internal_data() const {
  return data_.Get();
}
inline void SigningOutput::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Ethereum.Proto.SigningOutput.data)
}
inline void SigningOutput::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Ethereum.Proto.SigningOutput.data)
}
inline void SigningOutput::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Ethereum.Proto.SigningOutput.data)
}
inline std::string* SigningOutput::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_data() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Ethereum
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::Ethereum::Proto::TransactionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Ethereum::Proto::TransactionMode>() {
  return ::TW::Ethereum::Proto::TransactionMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Ethereum_2eproto
