// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NEAR.proto

#include "NEAR.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccessKey_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Action_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddKey_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAccount_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAccount_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteKey_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeployContract_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FullAccessPermission_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FunctionCall_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FunctionCallPermission_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKey_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stake_NEAR_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_NEAR_2eproto;
namespace TW {
namespace NEAR {
namespace Proto {
class PublicKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicKey> _instance;
} _PublicKey_default_instance_;
class FunctionCallPermissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionCallPermission> _instance;
} _FunctionCallPermission_default_instance_;
class FullAccessPermissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullAccessPermission> _instance;
} _FullAccessPermission_default_instance_;
class AccessKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccessKey> _instance;
} _AccessKey_default_instance_;
class CreateAccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAccount> _instance;
} _CreateAccount_default_instance_;
class DeployContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeployContract> _instance;
} _DeployContract_default_instance_;
class FunctionCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionCall> _instance;
} _FunctionCall_default_instance_;
class TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class StakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stake> _instance;
} _Stake_default_instance_;
class AddKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddKey> _instance;
} _AddKey_default_instance_;
class DeleteKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteKey> _instance;
} _DeleteKey_default_instance_;
class DeleteAccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAccount> _instance;
} _DeleteAccount_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Action> _instance;
} _Action_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace NEAR
}  // namespace TW
static void InitDefaultsscc_info_AccessKey_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_AccessKey_default_instance_;
    new (ptr) ::TW::NEAR::Proto::AccessKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccessKey_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AccessKey_NEAR_2eproto}, {
      &scc_info_FunctionCallPermission_NEAR_2eproto.base,
      &scc_info_FullAccessPermission_NEAR_2eproto.base,}};

static void InitDefaultsscc_info_Action_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_Action_default_instance_;
    new (ptr) ::TW::NEAR::Proto::Action();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Action_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Action_NEAR_2eproto}, {
      &scc_info_CreateAccount_NEAR_2eproto.base,
      &scc_info_DeployContract_NEAR_2eproto.base,
      &scc_info_FunctionCall_NEAR_2eproto.base,
      &scc_info_Transfer_NEAR_2eproto.base,
      &scc_info_Stake_NEAR_2eproto.base,
      &scc_info_AddKey_NEAR_2eproto.base,
      &scc_info_DeleteKey_NEAR_2eproto.base,
      &scc_info_DeleteAccount_NEAR_2eproto.base,}};

static void InitDefaultsscc_info_AddKey_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_AddKey_default_instance_;
    new (ptr) ::TW::NEAR::Proto::AddKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddKey_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddKey_NEAR_2eproto}, {
      &scc_info_PublicKey_NEAR_2eproto.base,
      &scc_info_AccessKey_NEAR_2eproto.base,}};

static void InitDefaultsscc_info_CreateAccount_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_CreateAccount_default_instance_;
    new (ptr) ::TW::NEAR::Proto::CreateAccount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAccount_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateAccount_NEAR_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAccount_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_DeleteAccount_default_instance_;
    new (ptr) ::TW::NEAR::Proto::DeleteAccount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAccount_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAccount_NEAR_2eproto}, {}};

static void InitDefaultsscc_info_DeleteKey_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_DeleteKey_default_instance_;
    new (ptr) ::TW::NEAR::Proto::DeleteKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteKey_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteKey_NEAR_2eproto}, {
      &scc_info_PublicKey_NEAR_2eproto.base,}};

static void InitDefaultsscc_info_DeployContract_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_DeployContract_default_instance_;
    new (ptr) ::TW::NEAR::Proto::DeployContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeployContract_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeployContract_NEAR_2eproto}, {}};

static void InitDefaultsscc_info_FullAccessPermission_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_FullAccessPermission_default_instance_;
    new (ptr) ::TW::NEAR::Proto::FullAccessPermission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FullAccessPermission_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FullAccessPermission_NEAR_2eproto}, {}};

static void InitDefaultsscc_info_FunctionCall_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_FunctionCall_default_instance_;
    new (ptr) ::TW::NEAR::Proto::FunctionCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FunctionCall_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FunctionCall_NEAR_2eproto}, {}};

static void InitDefaultsscc_info_FunctionCallPermission_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_FunctionCallPermission_default_instance_;
    new (ptr) ::TW::NEAR::Proto::FunctionCallPermission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FunctionCallPermission_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FunctionCallPermission_NEAR_2eproto}, {}};

static void InitDefaultsscc_info_PublicKey_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_PublicKey_default_instance_;
    new (ptr) ::TW::NEAR::Proto::PublicKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKey_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublicKey_NEAR_2eproto}, {}};

static void InitDefaultsscc_info_SigningInput_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::NEAR::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SigningInput_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SigningInput_NEAR_2eproto}, {
      &scc_info_Action_NEAR_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::NEAR::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_NEAR_2eproto}, {}};

static void InitDefaultsscc_info_Stake_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_Stake_default_instance_;
    new (ptr) ::TW::NEAR::Proto::Stake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stake_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stake_NEAR_2eproto}, {}};

static void InitDefaultsscc_info_Transfer_NEAR_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEAR::Proto::_Transfer_default_instance_;
    new (ptr) ::TW::NEAR::Proto::Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_NEAR_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transfer_NEAR_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NEAR_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NEAR_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NEAR_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NEAR_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::PublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::PublicKey, key_type_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::PublicKey, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCallPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCallPermission, allowance_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCallPermission, receiver_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FullAccessPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AccessKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AccessKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AccessKey, nonce_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AccessKey, permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::CreateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeployContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeployContract, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, method_name_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, args_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, gas_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, deposit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Transfer, deposit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Stake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Stake, stake_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Stake, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AddKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AddKey, public_key_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AddKey, access_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeleteKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeleteKey, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeleteAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeleteAccount, beneficiary_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Action, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, signer_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, block_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, actions_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, private_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningOutput, signed_transaction_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::NEAR::Proto::PublicKey)},
  { 7, -1, sizeof(::TW::NEAR::Proto::FunctionCallPermission)},
  { 14, -1, sizeof(::TW::NEAR::Proto::FullAccessPermission)},
  { 19, -1, sizeof(::TW::NEAR::Proto::AccessKey)},
  { 28, -1, sizeof(::TW::NEAR::Proto::CreateAccount)},
  { 33, -1, sizeof(::TW::NEAR::Proto::DeployContract)},
  { 39, -1, sizeof(::TW::NEAR::Proto::FunctionCall)},
  { 48, -1, sizeof(::TW::NEAR::Proto::Transfer)},
  { 54, -1, sizeof(::TW::NEAR::Proto::Stake)},
  { 61, -1, sizeof(::TW::NEAR::Proto::AddKey)},
  { 68, -1, sizeof(::TW::NEAR::Proto::DeleteKey)},
  { 74, -1, sizeof(::TW::NEAR::Proto::DeleteAccount)},
  { 80, -1, sizeof(::TW::NEAR::Proto::Action)},
  { 94, -1, sizeof(::TW::NEAR::Proto::SigningInput)},
  { 105, -1, sizeof(::TW::NEAR::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_PublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_FunctionCallPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_FullAccessPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_AccessKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_CreateAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_DeployContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_FunctionCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_Stake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_AddKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_DeleteKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_DeleteAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_NEAR_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nNEAR.proto\022\rTW.NEAR.Proto\"+\n\tPublicKey"
  "\022\020\n\010key_type\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"@\n\026Func"
  "tionCallPermission\022\021\n\tallowance\030\001 \001(\014\022\023\n"
  "\013receiver_id\030\002 \001(\t\"\026\n\024FullAccessPermissi"
  "on\"\244\001\n\tAccessKey\022\r\n\005nonce\030\001 \001(\004\022>\n\rfunct"
  "ion_call\030\002 \001(\0132%.TW.NEAR.Proto.FunctionC"
  "allPermissionH\000\022:\n\013full_access\030\003 \001(\0132#.T"
  "W.NEAR.Proto.FullAccessPermissionH\000B\014\n\np"
  "ermission\"\017\n\rCreateAccount\"\036\n\016DeployCont"
  "ract\022\014\n\004code\030\001 \001(\014\"O\n\014FunctionCall\022\023\n\013me"
  "thod_name\030\001 \001(\014\022\014\n\004args\030\002 \001(\014\022\013\n\003gas\030\003 \001"
  "(\004\022\017\n\007deposit\030\004 \001(\014\"\033\n\010Transfer\022\017\n\007depos"
  "it\030\001 \001(\014\"*\n\005Stake\022\r\n\005stake\030\001 \001(\014\022\022\n\npubl"
  "ic_key\030\002 \001(\t\"d\n\006AddKey\022,\n\npublic_key\030\001 \001"
  "(\0132\030.TW.NEAR.Proto.PublicKey\022,\n\naccess_k"
  "ey\030\002 \001(\0132\030.TW.NEAR.Proto.AccessKey\"9\n\tDe"
  "leteKey\022,\n\npublic_key\030\001 \001(\0132\030.TW.NEAR.Pr"
  "oto.PublicKey\"\'\n\rDeleteAccount\022\026\n\016benefi"
  "ciary_id\030\001 \001(\t\"\241\003\n\006Action\0226\n\016create_acco"
  "unt\030\001 \001(\0132\034.TW.NEAR.Proto.CreateAccountH"
  "\000\0228\n\017deploy_contract\030\002 \001(\0132\035.TW.NEAR.Pro"
  "to.DeployContractH\000\0224\n\rfunction_call\030\003 \001"
  "(\0132\033.TW.NEAR.Proto.FunctionCallH\000\022+\n\010tra"
  "nsfer\030\004 \001(\0132\027.TW.NEAR.Proto.TransferH\000\022%"
  "\n\005stake\030\005 \001(\0132\024.TW.NEAR.Proto.StakeH\000\022(\n"
  "\007add_key\030\006 \001(\0132\025.TW.NEAR.Proto.AddKeyH\000\022"
  ".\n\ndelete_key\030\007 \001(\0132\030.TW.NEAR.Proto.Dele"
  "teKeyH\000\0226\n\016delete_account\030\010 \001(\0132\034.TW.NEA"
  "R.Proto.DeleteAccountH\000B\t\n\007payload\"\226\001\n\014S"
  "igningInput\022\021\n\tsigner_id\030\001 \001(\t\022\r\n\005nonce\030"
  "\002 \001(\004\022\023\n\013receiver_id\030\003 \001(\t\022\022\n\nblock_hash"
  "\030\004 \001(\014\022&\n\007actions\030\005 \003(\0132\025.TW.NEAR.Proto."
  "Action\022\023\n\013private_key\030\006 \001(\014\"+\n\rSigningOu"
  "tput\022\032\n\022signed_transaction\030\001 \001(\014B\027\n\025wall"
  "et.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NEAR_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NEAR_2eproto_sccs[15] = {
  &scc_info_AccessKey_NEAR_2eproto.base,
  &scc_info_Action_NEAR_2eproto.base,
  &scc_info_AddKey_NEAR_2eproto.base,
  &scc_info_CreateAccount_NEAR_2eproto.base,
  &scc_info_DeleteAccount_NEAR_2eproto.base,
  &scc_info_DeleteKey_NEAR_2eproto.base,
  &scc_info_DeployContract_NEAR_2eproto.base,
  &scc_info_FullAccessPermission_NEAR_2eproto.base,
  &scc_info_FunctionCall_NEAR_2eproto.base,
  &scc_info_FunctionCallPermission_NEAR_2eproto.base,
  &scc_info_PublicKey_NEAR_2eproto.base,
  &scc_info_SigningInput_NEAR_2eproto.base,
  &scc_info_SigningOutput_NEAR_2eproto.base,
  &scc_info_Stake_NEAR_2eproto.base,
  &scc_info_Transfer_NEAR_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NEAR_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NEAR_2eproto = {
  false, false, descriptor_table_protodef_NEAR_2eproto, "NEAR.proto", 1385,
  &descriptor_table_NEAR_2eproto_once, descriptor_table_NEAR_2eproto_sccs, descriptor_table_NEAR_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_NEAR_2eproto::offsets,
  file_level_metadata_NEAR_2eproto, 15, file_level_enum_descriptors_NEAR_2eproto, file_level_service_descriptors_NEAR_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NEAR_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NEAR_2eproto)), true);
namespace TW {
namespace NEAR {
namespace Proto {

// ===================================================================

class PublicKey::_Internal {
 public:
};

PublicKey::PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.PublicKey)
}
PublicKey::PublicKey(const PublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  key_type_ = from.key_type_;
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.PublicKey)
}

void PublicKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicKey_NEAR_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_type_ = 0u;
}

PublicKey::~PublicKey() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.PublicKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicKey::ArenaDtor(void* object) {
  PublicKey* _this = reinterpret_cast< PublicKey* >(object);
  (void)_this;
}
void PublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicKey& PublicKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicKey_NEAR_2eproto.base);
  return *internal_default_instance();
}


void PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  key_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key_type = 1;
  if (this->key_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_type(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.PublicKey)
  return target;
}

size_t PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.PublicKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 key_type = 1;
  if (this->key_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.PublicKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.PublicKey)
    MergeFrom(*source);
  }
}

void PublicKey::MergeFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.key_type() != 0) {
    _internal_set_key_type(from._internal_key_type());
  }
}

void PublicKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicKey::CopyFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKey::IsInitialized() const {
  return true;
}

void PublicKey::InternalSwap(PublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(key_type_, other->key_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FunctionCallPermission::_Internal {
 public:
};

FunctionCallPermission::FunctionCallPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.FunctionCallPermission)
}
FunctionCallPermission::FunctionCallPermission(const FunctionCallPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allowance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_allowance().empty()) {
    allowance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_allowance(), 
      GetArena());
  }
  receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_id().empty()) {
    receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.FunctionCallPermission)
}

void FunctionCallPermission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FunctionCallPermission_NEAR_2eproto.base);
  allowance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FunctionCallPermission::~FunctionCallPermission() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.FunctionCallPermission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FunctionCallPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  allowance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionCallPermission::ArenaDtor(void* object) {
  FunctionCallPermission* _this = reinterpret_cast< FunctionCallPermission* >(object);
  (void)_this;
}
void FunctionCallPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCallPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionCallPermission& FunctionCallPermission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionCallPermission_NEAR_2eproto.base);
  return *internal_default_instance();
}


void FunctionCallPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.FunctionCallPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowance_.ClearToEmpty();
  receiver_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCallPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes allowance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_allowance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.FunctionCallPermission.receiver_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionCallPermission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.FunctionCallPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes allowance = 1;
  if (this->allowance().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_allowance(), target);
  }

  // string receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_id().data(), static_cast<int>(this->_internal_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.FunctionCallPermission.receiver_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receiver_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.FunctionCallPermission)
  return target;
}

size_t FunctionCallPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.FunctionCallPermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes allowance = 1;
  if (this->allowance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_allowance());
  }

  // string receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionCallPermission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.FunctionCallPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionCallPermission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionCallPermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.FunctionCallPermission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.FunctionCallPermission)
    MergeFrom(*source);
  }
}

void FunctionCallPermission::MergeFrom(const FunctionCallPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.FunctionCallPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allowance().size() > 0) {
    _internal_set_allowance(from._internal_allowance());
  }
  if (from.receiver_id().size() > 0) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
}

void FunctionCallPermission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.FunctionCallPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCallPermission::CopyFrom(const FunctionCallPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.FunctionCallPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCallPermission::IsInitialized() const {
  return true;
}

void FunctionCallPermission::InternalSwap(FunctionCallPermission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  allowance_.Swap(&other->allowance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_id_.Swap(&other->receiver_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCallPermission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FullAccessPermission::_Internal {
 public:
};

FullAccessPermission::FullAccessPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.FullAccessPermission)
}
FullAccessPermission::FullAccessPermission(const FullAccessPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.FullAccessPermission)
}

void FullAccessPermission::SharedCtor() {
}

FullAccessPermission::~FullAccessPermission() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.FullAccessPermission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FullAccessPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FullAccessPermission::ArenaDtor(void* object) {
  FullAccessPermission* _this = reinterpret_cast< FullAccessPermission* >(object);
  (void)_this;
}
void FullAccessPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FullAccessPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullAccessPermission& FullAccessPermission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullAccessPermission_NEAR_2eproto.base);
  return *internal_default_instance();
}


void FullAccessPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.FullAccessPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullAccessPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FullAccessPermission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.FullAccessPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.FullAccessPermission)
  return target;
}

size_t FullAccessPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.FullAccessPermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullAccessPermission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.FullAccessPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const FullAccessPermission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FullAccessPermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.FullAccessPermission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.FullAccessPermission)
    MergeFrom(*source);
  }
}

void FullAccessPermission::MergeFrom(const FullAccessPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.FullAccessPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FullAccessPermission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.FullAccessPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullAccessPermission::CopyFrom(const FullAccessPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.FullAccessPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullAccessPermission::IsInitialized() const {
  return true;
}

void FullAccessPermission::InternalSwap(FullAccessPermission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FullAccessPermission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccessKey::_Internal {
 public:
  static const ::TW::NEAR::Proto::FunctionCallPermission& function_call(const AccessKey* msg);
  static const ::TW::NEAR::Proto::FullAccessPermission& full_access(const AccessKey* msg);
};

const ::TW::NEAR::Proto::FunctionCallPermission&
AccessKey::_Internal::function_call(const AccessKey* msg) {
  return *msg->permission_.function_call_;
}
const ::TW::NEAR::Proto::FullAccessPermission&
AccessKey::_Internal::full_access(const AccessKey* msg) {
  return *msg->permission_.full_access_;
}
void AccessKey::set_allocated_function_call(::TW::NEAR::Proto::FunctionCallPermission* function_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_permission();
  if (function_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(function_call);
    if (message_arena != submessage_arena) {
      function_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_call, submessage_arena);
    }
    set_has_function_call();
    permission_.function_call_ = function_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.AccessKey.function_call)
}
void AccessKey::set_allocated_full_access(::TW::NEAR::Proto::FullAccessPermission* full_access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_permission();
  if (full_access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_access);
    if (message_arena != submessage_arena) {
      full_access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_access, submessage_arena);
    }
    set_has_full_access();
    permission_.full_access_ = full_access;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.AccessKey.full_access)
}
AccessKey::AccessKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.AccessKey)
}
AccessKey::AccessKey(const AccessKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_ = from.nonce_;
  clear_has_permission();
  switch (from.permission_case()) {
    case kFunctionCall: {
      _internal_mutable_function_call()->::TW::NEAR::Proto::FunctionCallPermission::MergeFrom(from._internal_function_call());
      break;
    }
    case kFullAccess: {
      _internal_mutable_full_access()->::TW::NEAR::Proto::FullAccessPermission::MergeFrom(from._internal_full_access());
      break;
    }
    case PERMISSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.AccessKey)
}

void AccessKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccessKey_NEAR_2eproto.base);
  nonce_ = PROTOBUF_ULONGLONG(0);
  clear_has_permission();
}

AccessKey::~AccessKey() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.AccessKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccessKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_permission()) {
    clear_permission();
  }
}

void AccessKey::ArenaDtor(void* object) {
  AccessKey* _this = reinterpret_cast< AccessKey* >(object);
  (void)_this;
}
void AccessKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccessKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccessKey& AccessKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccessKey_NEAR_2eproto.base);
  return *internal_default_instance();
}


void AccessKey::clear_permission() {
// @@protoc_insertion_point(one_of_clear_start:TW.NEAR.Proto.AccessKey)
  switch (permission_case()) {
    case kFunctionCall: {
      if (GetArena() == nullptr) {
        delete permission_.function_call_;
      }
      break;
    }
    case kFullAccess: {
      if (GetArena() == nullptr) {
        delete permission_.full_access_;
      }
      break;
    }
    case PERMISSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PERMISSION_NOT_SET;
}


void AccessKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.AccessKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_ = PROTOBUF_ULONGLONG(0);
  clear_permission();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccessKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.FunctionCallPermission function_call = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.FullAccessPermission full_access = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_access(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.AccessKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  // .TW.NEAR.Proto.FunctionCallPermission function_call = 2;
  if (_internal_has_function_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::function_call(this), target, stream);
  }

  // .TW.NEAR.Proto.FullAccessPermission full_access = 3;
  if (_internal_has_full_access()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::full_access(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.AccessKey)
  return target;
}

size_t AccessKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.AccessKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  switch (permission_case()) {
    // .TW.NEAR.Proto.FunctionCallPermission function_call = 2;
    case kFunctionCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *permission_.function_call_);
      break;
    }
    // .TW.NEAR.Proto.FullAccessPermission full_access = 3;
    case kFullAccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *permission_.full_access_);
      break;
    }
    case PERMISSION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.AccessKey)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccessKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.AccessKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.AccessKey)
    MergeFrom(*source);
  }
}

void AccessKey::MergeFrom(const AccessKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.AccessKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  switch (from.permission_case()) {
    case kFunctionCall: {
      _internal_mutable_function_call()->::TW::NEAR::Proto::FunctionCallPermission::MergeFrom(from._internal_function_call());
      break;
    }
    case kFullAccess: {
      _internal_mutable_full_access()->::TW::NEAR::Proto::FullAccessPermission::MergeFrom(from._internal_full_access());
      break;
    }
    case PERMISSION_NOT_SET: {
      break;
    }
  }
}

void AccessKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.AccessKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessKey::CopyFrom(const AccessKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.AccessKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessKey::IsInitialized() const {
  return true;
}

void AccessKey::InternalSwap(AccessKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(nonce_, other->nonce_);
  swap(permission_, other->permission_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateAccount::_Internal {
 public:
};

CreateAccount::CreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.CreateAccount)
}
CreateAccount::CreateAccount(const CreateAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.CreateAccount)
}

void CreateAccount::SharedCtor() {
}

CreateAccount::~CreateAccount() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.CreateAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateAccount::ArenaDtor(void* object) {
  CreateAccount* _this = reinterpret_cast< CreateAccount* >(object);
  (void)_this;
}
void CreateAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAccount& CreateAccount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAccount_NEAR_2eproto.base);
  return *internal_default_instance();
}


void CreateAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.CreateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.CreateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.CreateAccount)
  return target;
}

size_t CreateAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.CreateAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.CreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.CreateAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.CreateAccount)
    MergeFrom(*source);
  }
}

void CreateAccount::MergeFrom(const CreateAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.CreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.CreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccount::CopyFrom(const CreateAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.CreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccount::IsInitialized() const {
  return true;
}

void CreateAccount::InternalSwap(CreateAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeployContract::_Internal {
 public:
};

DeployContract::DeployContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.DeployContract)
}
DeployContract::DeployContract(const DeployContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.DeployContract)
}

void DeployContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeployContract_NEAR_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeployContract::~DeployContract() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.DeployContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeployContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeployContract::ArenaDtor(void* object) {
  DeployContract* _this = reinterpret_cast< DeployContract* >(object);
  (void)_this;
}
void DeployContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeployContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeployContract& DeployContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeployContract_NEAR_2eproto.base);
  return *internal_default_instance();
}


void DeployContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.DeployContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeployContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeployContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.DeployContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes code = 1;
  if (this->code().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.DeployContract)
  return target;
}

size_t DeployContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.DeployContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeployContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.DeployContract)
  GOOGLE_DCHECK_NE(&from, this);
  const DeployContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeployContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.DeployContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.DeployContract)
    MergeFrom(*source);
  }
}

void DeployContract::MergeFrom(const DeployContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.DeployContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
}

void DeployContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.DeployContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeployContract::CopyFrom(const DeployContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.DeployContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployContract::IsInitialized() const {
  return true;
}

void DeployContract::InternalSwap(DeployContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FunctionCall::_Internal {
 public:
};

FunctionCall::FunctionCall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.FunctionCall)
}
FunctionCall::FunctionCall(const FunctionCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method_name().empty()) {
    method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method_name(), 
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArena());
  }
  deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deposit().empty()) {
    deposit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deposit(), 
      GetArena());
  }
  gas_ = from.gas_;
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.FunctionCall)
}

void FunctionCall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FunctionCall_NEAR_2eproto.base);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_ = PROTOBUF_ULONGLONG(0);
}

FunctionCall::~FunctionCall() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.FunctionCall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FunctionCall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deposit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionCall::ArenaDtor(void* object) {
  FunctionCall* _this = reinterpret_cast< FunctionCall* >(object);
  (void)_this;
}
void FunctionCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionCall& FunctionCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionCall_NEAR_2eproto.base);
  return *internal_default_instance();
}


void FunctionCall::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.FunctionCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_name_.ClearToEmpty();
  args_.ClearToEmpty();
  deposit_.ClearToEmpty();
  gas_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes method_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_method_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes deposit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_deposit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionCall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.FunctionCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes method_name = 1;
  if (this->method_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_method_name(), target);
  }

  // bytes args = 2;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_args(), target);
  }

  // uint64 gas = 3;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gas(), target);
  }

  // bytes deposit = 4;
  if (this->deposit().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_deposit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.FunctionCall)
  return target;
}

size_t FunctionCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.FunctionCall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes method_name = 1;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_method_name());
  }

  // bytes args = 2;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // bytes deposit = 4;
  if (this->deposit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deposit());
  }

  // uint64 gas = 3;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.FunctionCall)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.FunctionCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.FunctionCall)
    MergeFrom(*source);
  }
}

void FunctionCall::MergeFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.FunctionCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.method_name().size() > 0) {
    _internal_set_method_name(from._internal_method_name());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.deposit().size() > 0) {
    _internal_set_deposit(from._internal_deposit());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
}

void FunctionCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.FunctionCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCall::CopyFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.FunctionCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall::IsInitialized() const {
  return true;
}

void FunctionCall::InternalSwap(FunctionCall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  method_name_.Swap(&other->method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deposit_.Swap(&other->deposit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gas_, other->gas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transfer::_Internal {
 public:
};

Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deposit().empty()) {
    deposit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deposit(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.Transfer)
}

void Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transfer_NEAR_2eproto.base);
  deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deposit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transfer_NEAR_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deposit_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes deposit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deposit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deposit = 1;
  if (this->deposit().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_deposit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes deposit = 1;
  if (this->deposit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deposit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deposit().size() > 0) {
    _internal_set_deposit(from._internal_deposit());
  }
}

void Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deposit_.Swap(&other->deposit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Stake::_Internal {
 public:
};

Stake::Stake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.Stake)
}
Stake::Stake(const Stake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stake().empty()) {
    stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake(), 
      GetArena());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.Stake)
}

void Stake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stake_NEAR_2eproto.base);
  stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Stake::~Stake() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.Stake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Stake::ArenaDtor(void* object) {
  Stake* _this = reinterpret_cast< Stake* >(object);
  (void)_this;
}
void Stake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stake& Stake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stake_NEAR_2eproto.base);
  return *internal_default_instance();
}


void Stake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.Stake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes stake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.Stake.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.Stake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes stake = 1;
  if (this->stake().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_stake(), target);
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.Stake.public_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.Stake)
  return target;
}

size_t Stake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.Stake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes stake = 1;
  if (this->stake().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stake());
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.Stake)
  GOOGLE_DCHECK_NE(&from, this);
  const Stake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.Stake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.Stake)
    MergeFrom(*source);
  }
}

void Stake::MergeFrom(const Stake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.Stake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stake().size() > 0) {
    _internal_set_stake(from._internal_stake());
  }
  if (from.public_key().size() > 0) {
    _internal_set_public_key(from._internal_public_key());
  }
}

void Stake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.Stake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stake::CopyFrom(const Stake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.Stake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stake::IsInitialized() const {
  return true;
}

void Stake::InternalSwap(Stake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stake_.Swap(&other->stake_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Stake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddKey::_Internal {
 public:
  static const ::TW::NEAR::Proto::PublicKey& public_key(const AddKey* msg);
  static const ::TW::NEAR::Proto::AccessKey& access_key(const AddKey* msg);
};

const ::TW::NEAR::Proto::PublicKey&
AddKey::_Internal::public_key(const AddKey* msg) {
  return *msg->public_key_;
}
const ::TW::NEAR::Proto::AccessKey&
AddKey::_Internal::access_key(const AddKey* msg) {
  return *msg->access_key_;
}
AddKey::AddKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.AddKey)
}
AddKey::AddKey(const AddKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_key()) {
    public_key_ = new ::TW::NEAR::Proto::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  if (from._internal_has_access_key()) {
    access_key_ = new ::TW::NEAR::Proto::AccessKey(*from.access_key_);
  } else {
    access_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.AddKey)
}

void AddKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddKey_NEAR_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&public_key_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&access_key_) -
      reinterpret_cast<char*>(&public_key_)) + sizeof(access_key_));
}

AddKey::~AddKey() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.AddKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete public_key_;
  if (this != internal_default_instance()) delete access_key_;
}

void AddKey::ArenaDtor(void* object) {
  AddKey* _this = reinterpret_cast< AddKey* >(object);
  (void)_this;
}
void AddKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddKey& AddKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddKey_NEAR_2eproto.base);
  return *internal_default_instance();
}


void AddKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.AddKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  if (GetArena() == nullptr && access_key_ != nullptr) {
    delete access_key_;
  }
  access_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.NEAR.Proto.PublicKey public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.AccessKey access_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_access_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.AddKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.NEAR.Proto.PublicKey public_key = 1;
  if (this->has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  // .TW.NEAR.Proto.AccessKey access_key = 2;
  if (this->has_access_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::access_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.AddKey)
  return target;
}

size_t AddKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.AddKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.NEAR.Proto.PublicKey public_key = 1;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // .TW.NEAR.Proto.AccessKey access_key = 2;
  if (this->has_access_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *access_key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.AddKey)
  GOOGLE_DCHECK_NE(&from, this);
  const AddKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.AddKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.AddKey)
    MergeFrom(*source);
  }
}

void AddKey::MergeFrom(const AddKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.AddKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_key()) {
    _internal_mutable_public_key()->::TW::NEAR::Proto::PublicKey::MergeFrom(from._internal_public_key());
  }
  if (from.has_access_key()) {
    _internal_mutable_access_key()->::TW::NEAR::Proto::AccessKey::MergeFrom(from._internal_access_key());
  }
}

void AddKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.AddKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddKey::CopyFrom(const AddKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.AddKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddKey::IsInitialized() const {
  return true;
}

void AddKey::InternalSwap(AddKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddKey, access_key_)
      + sizeof(AddKey::access_key_)
      - PROTOBUF_FIELD_OFFSET(AddKey, public_key_)>(
          reinterpret_cast<char*>(&public_key_),
          reinterpret_cast<char*>(&other->public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteKey::_Internal {
 public:
  static const ::TW::NEAR::Proto::PublicKey& public_key(const DeleteKey* msg);
};

const ::TW::NEAR::Proto::PublicKey&
DeleteKey::_Internal::public_key(const DeleteKey* msg) {
  return *msg->public_key_;
}
DeleteKey::DeleteKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.DeleteKey)
}
DeleteKey::DeleteKey(const DeleteKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_key()) {
    public_key_ = new ::TW::NEAR::Proto::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.DeleteKey)
}

void DeleteKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteKey_NEAR_2eproto.base);
  public_key_ = nullptr;
}

DeleteKey::~DeleteKey() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.DeleteKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete public_key_;
}

void DeleteKey::ArenaDtor(void* object) {
  DeleteKey* _this = reinterpret_cast< DeleteKey* >(object);
  (void)_this;
}
void DeleteKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteKey& DeleteKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteKey_NEAR_2eproto.base);
  return *internal_default_instance();
}


void DeleteKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.DeleteKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.NEAR.Proto.PublicKey public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.DeleteKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.NEAR.Proto.PublicKey public_key = 1;
  if (this->has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.DeleteKey)
  return target;
}

size_t DeleteKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.DeleteKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.NEAR.Proto.PublicKey public_key = 1;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.DeleteKey)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.DeleteKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.DeleteKey)
    MergeFrom(*source);
  }
}

void DeleteKey::MergeFrom(const DeleteKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.DeleteKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_key()) {
    _internal_mutable_public_key()->::TW::NEAR::Proto::PublicKey::MergeFrom(from._internal_public_key());
  }
}

void DeleteKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.DeleteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteKey::CopyFrom(const DeleteKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.DeleteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKey::IsInitialized() const {
  return true;
}

void DeleteKey::InternalSwap(DeleteKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(public_key_, other->public_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteAccount::_Internal {
 public:
};

DeleteAccount::DeleteAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.DeleteAccount)
}
DeleteAccount::DeleteAccount(const DeleteAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beneficiary_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_beneficiary_id().empty()) {
    beneficiary_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_beneficiary_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.DeleteAccount)
}

void DeleteAccount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAccount_NEAR_2eproto.base);
  beneficiary_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteAccount::~DeleteAccount() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.DeleteAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  beneficiary_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteAccount::ArenaDtor(void* object) {
  DeleteAccount* _this = reinterpret_cast< DeleteAccount* >(object);
  (void)_this;
}
void DeleteAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAccount& DeleteAccount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAccount_NEAR_2eproto.base);
  return *internal_default_instance();
}


void DeleteAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.DeleteAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beneficiary_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string beneficiary_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_beneficiary_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.DeleteAccount.beneficiary_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.DeleteAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string beneficiary_id = 1;
  if (this->beneficiary_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_beneficiary_id().data(), static_cast<int>(this->_internal_beneficiary_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.DeleteAccount.beneficiary_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_beneficiary_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.DeleteAccount)
  return target;
}

size_t DeleteAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.DeleteAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string beneficiary_id = 1;
  if (this->beneficiary_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_beneficiary_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.DeleteAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.DeleteAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.DeleteAccount)
    MergeFrom(*source);
  }
}

void DeleteAccount::MergeFrom(const DeleteAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.DeleteAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.beneficiary_id().size() > 0) {
    _internal_set_beneficiary_id(from._internal_beneficiary_id());
  }
}

void DeleteAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.DeleteAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAccount::CopyFrom(const DeleteAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.DeleteAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAccount::IsInitialized() const {
  return true;
}

void DeleteAccount::InternalSwap(DeleteAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  beneficiary_id_.Swap(&other->beneficiary_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Action::_Internal {
 public:
  static const ::TW::NEAR::Proto::CreateAccount& create_account(const Action* msg);
  static const ::TW::NEAR::Proto::DeployContract& deploy_contract(const Action* msg);
  static const ::TW::NEAR::Proto::FunctionCall& function_call(const Action* msg);
  static const ::TW::NEAR::Proto::Transfer& transfer(const Action* msg);
  static const ::TW::NEAR::Proto::Stake& stake(const Action* msg);
  static const ::TW::NEAR::Proto::AddKey& add_key(const Action* msg);
  static const ::TW::NEAR::Proto::DeleteKey& delete_key(const Action* msg);
  static const ::TW::NEAR::Proto::DeleteAccount& delete_account(const Action* msg);
};

const ::TW::NEAR::Proto::CreateAccount&
Action::_Internal::create_account(const Action* msg) {
  return *msg->payload_.create_account_;
}
const ::TW::NEAR::Proto::DeployContract&
Action::_Internal::deploy_contract(const Action* msg) {
  return *msg->payload_.deploy_contract_;
}
const ::TW::NEAR::Proto::FunctionCall&
Action::_Internal::function_call(const Action* msg) {
  return *msg->payload_.function_call_;
}
const ::TW::NEAR::Proto::Transfer&
Action::_Internal::transfer(const Action* msg) {
  return *msg->payload_.transfer_;
}
const ::TW::NEAR::Proto::Stake&
Action::_Internal::stake(const Action* msg) {
  return *msg->payload_.stake_;
}
const ::TW::NEAR::Proto::AddKey&
Action::_Internal::add_key(const Action* msg) {
  return *msg->payload_.add_key_;
}
const ::TW::NEAR::Proto::DeleteKey&
Action::_Internal::delete_key(const Action* msg) {
  return *msg->payload_.delete_key_;
}
const ::TW::NEAR::Proto::DeleteAccount&
Action::_Internal::delete_account(const Action* msg) {
  return *msg->payload_.delete_account_;
}
void Action::set_allocated_create_account(::TW::NEAR::Proto::CreateAccount* create_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (create_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_account);
    if (message_arena != submessage_arena) {
      create_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_account, submessage_arena);
    }
    set_has_create_account();
    payload_.create_account_ = create_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.create_account)
}
void Action::set_allocated_deploy_contract(::TW::NEAR::Proto::DeployContract* deploy_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (deploy_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deploy_contract);
    if (message_arena != submessage_arena) {
      deploy_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deploy_contract, submessage_arena);
    }
    set_has_deploy_contract();
    payload_.deploy_contract_ = deploy_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.deploy_contract)
}
void Action::set_allocated_function_call(::TW::NEAR::Proto::FunctionCall* function_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (function_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(function_call);
    if (message_arena != submessage_arena) {
      function_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_call, submessage_arena);
    }
    set_has_function_call();
    payload_.function_call_ = function_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.function_call)
}
void Action::set_allocated_transfer(::TW::NEAR::Proto::Transfer* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    payload_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.transfer)
}
void Action::set_allocated_stake(::TW::NEAR::Proto::Stake* stake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (stake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stake);
    if (message_arena != submessage_arena) {
      stake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stake, submessage_arena);
    }
    set_has_stake();
    payload_.stake_ = stake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.stake)
}
void Action::set_allocated_add_key(::TW::NEAR::Proto::AddKey* add_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (add_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_key);
    if (message_arena != submessage_arena) {
      add_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_key, submessage_arena);
    }
    set_has_add_key();
    payload_.add_key_ = add_key;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.add_key)
}
void Action::set_allocated_delete_key(::TW::NEAR::Proto::DeleteKey* delete_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (delete_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_key);
    if (message_arena != submessage_arena) {
      delete_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_key, submessage_arena);
    }
    set_has_delete_key();
    payload_.delete_key_ = delete_key;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.delete_key)
}
void Action::set_allocated_delete_account(::TW::NEAR::Proto::DeleteAccount* delete_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (delete_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_account);
    if (message_arena != submessage_arena) {
      delete_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_account, submessage_arena);
    }
    set_has_delete_account();
    payload_.delete_account_ = delete_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.delete_account)
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kCreateAccount: {
      _internal_mutable_create_account()->::TW::NEAR::Proto::CreateAccount::MergeFrom(from._internal_create_account());
      break;
    }
    case kDeployContract: {
      _internal_mutable_deploy_contract()->::TW::NEAR::Proto::DeployContract::MergeFrom(from._internal_deploy_contract());
      break;
    }
    case kFunctionCall: {
      _internal_mutable_function_call()->::TW::NEAR::Proto::FunctionCall::MergeFrom(from._internal_function_call());
      break;
    }
    case kTransfer: {
      _internal_mutable_transfer()->::TW::NEAR::Proto::Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kStake: {
      _internal_mutable_stake()->::TW::NEAR::Proto::Stake::MergeFrom(from._internal_stake());
      break;
    }
    case kAddKey: {
      _internal_mutable_add_key()->::TW::NEAR::Proto::AddKey::MergeFrom(from._internal_add_key());
      break;
    }
    case kDeleteKey: {
      _internal_mutable_delete_key()->::TW::NEAR::Proto::DeleteKey::MergeFrom(from._internal_delete_key());
      break;
    }
    case kDeleteAccount: {
      _internal_mutable_delete_account()->::TW::NEAR::Proto::DeleteAccount::MergeFrom(from._internal_delete_account());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.Action)
}

void Action::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Action_NEAR_2eproto.base);
  clear_has_payload();
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.Action)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Action_NEAR_2eproto.base);
  return *internal_default_instance();
}


void Action::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:TW.NEAR.Proto.Action)
  switch (payload_case()) {
    case kCreateAccount: {
      if (GetArena() == nullptr) {
        delete payload_.create_account_;
      }
      break;
    }
    case kDeployContract: {
      if (GetArena() == nullptr) {
        delete payload_.deploy_contract_;
      }
      break;
    }
    case kFunctionCall: {
      if (GetArena() == nullptr) {
        delete payload_.function_call_;
      }
      break;
    }
    case kTransfer: {
      if (GetArena() == nullptr) {
        delete payload_.transfer_;
      }
      break;
    }
    case kStake: {
      if (GetArena() == nullptr) {
        delete payload_.stake_;
      }
      break;
    }
    case kAddKey: {
      if (GetArena() == nullptr) {
        delete payload_.add_key_;
      }
      break;
    }
    case kDeleteKey: {
      if (GetArena() == nullptr) {
        delete payload_.delete_key_;
      }
      break;
    }
    case kDeleteAccount: {
      if (GetArena() == nullptr) {
        delete payload_.delete_account_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.NEAR.Proto.CreateAccount create_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.DeployContract deploy_contract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deploy_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.FunctionCall function_call = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.Transfer transfer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.Stake stake = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.AddKey add_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.DeleteKey delete_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.DeleteAccount delete_account = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.NEAR.Proto.CreateAccount create_account = 1;
  if (_internal_has_create_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::create_account(this), target, stream);
  }

  // .TW.NEAR.Proto.DeployContract deploy_contract = 2;
  if (_internal_has_deploy_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deploy_contract(this), target, stream);
  }

  // .TW.NEAR.Proto.FunctionCall function_call = 3;
  if (_internal_has_function_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::function_call(this), target, stream);
  }

  // .TW.NEAR.Proto.Transfer transfer = 4;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transfer(this), target, stream);
  }

  // .TW.NEAR.Proto.Stake stake = 5;
  if (_internal_has_stake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stake(this), target, stream);
  }

  // .TW.NEAR.Proto.AddKey add_key = 6;
  if (_internal_has_add_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::add_key(this), target, stream);
  }

  // .TW.NEAR.Proto.DeleteKey delete_key = 7;
  if (_internal_has_delete_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::delete_key(this), target, stream);
  }

  // .TW.NEAR.Proto.DeleteAccount delete_account = 8;
  if (_internal_has_delete_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::delete_account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .TW.NEAR.Proto.CreateAccount create_account = 1;
    case kCreateAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_account_);
      break;
    }
    // .TW.NEAR.Proto.DeployContract deploy_contract = 2;
    case kDeployContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.deploy_contract_);
      break;
    }
    // .TW.NEAR.Proto.FunctionCall function_call = 3;
    case kFunctionCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.function_call_);
      break;
    }
    // .TW.NEAR.Proto.Transfer transfer = 4;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.transfer_);
      break;
    }
    // .TW.NEAR.Proto.Stake stake = 5;
    case kStake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.stake_);
      break;
    }
    // .TW.NEAR.Proto.AddKey add_key = 6;
    case kAddKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.add_key_);
      break;
    }
    // .TW.NEAR.Proto.DeleteKey delete_key = 7;
    case kDeleteKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_key_);
      break;
    }
    // .TW.NEAR.Proto.DeleteAccount delete_account = 8;
    case kDeleteAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_account_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kCreateAccount: {
      _internal_mutable_create_account()->::TW::NEAR::Proto::CreateAccount::MergeFrom(from._internal_create_account());
      break;
    }
    case kDeployContract: {
      _internal_mutable_deploy_contract()->::TW::NEAR::Proto::DeployContract::MergeFrom(from._internal_deploy_contract());
      break;
    }
    case kFunctionCall: {
      _internal_mutable_function_call()->::TW::NEAR::Proto::FunctionCall::MergeFrom(from._internal_function_call());
      break;
    }
    case kTransfer: {
      _internal_mutable_transfer()->::TW::NEAR::Proto::Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kStake: {
      _internal_mutable_stake()->::TW::NEAR::Proto::Stake::MergeFrom(from._internal_stake());
      break;
    }
    case kAddKey: {
      _internal_mutable_add_key()->::TW::NEAR::Proto::AddKey::MergeFrom(from._internal_add_key());
      break;
    }
    case kDeleteKey: {
      _internal_mutable_delete_key()->::TW::NEAR::Proto::DeleteKey::MergeFrom(from._internal_delete_key());
      break;
    }
    case kDeleteAccount: {
      _internal_mutable_delete_account()->::TW::NEAR::Proto::DeleteAccount::MergeFrom(from._internal_delete_account());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
};

SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signer_id().empty()) {
    signer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signer_id(), 
      GetArena());
  }
  receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_id().empty()) {
    receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_id(), 
      GetArena());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArena());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_NEAR_2eproto.base);
  signer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_ = PROTOBUF_ULONGLONG(0);
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_NEAR_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  signer_id_.ClearToEmpty();
  receiver_id_.ClearToEmpty();
  block_hash_.ClearToEmpty();
  private_key_.ClearToEmpty();
  nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string signer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.SigningInput.signer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.SigningInput.receiver_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.NEAR.Proto.Action actions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes private_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signer_id = 1;
  if (this->signer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signer_id().data(), static_cast<int>(this->_internal_signer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.SigningInput.signer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signer_id(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // string receiver_id = 3;
  if (this->receiver_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_id().data(), static_cast<int>(this->_internal_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.SigningInput.receiver_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receiver_id(), target);
  }

  // bytes block_hash = 4;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_block_hash(), target);
  }

  // repeated .TW.NEAR.Proto.Action actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_actions(i), target, stream);
  }

  // bytes private_key = 6;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_private_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.NEAR.Proto.Action actions = 5;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string signer_id = 1;
  if (this->signer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signer_id());
  }

  // string receiver_id = 3;
  if (this->receiver_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_id());
  }

  // bytes block_hash = 4;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes private_key = 6;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.signer_id().size() > 0) {
    _internal_set_signer_id(from._internal_signer_id());
  }
  if (from.receiver_id().size() > 0) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  actions_.InternalSwap(&other->actions_);
  signer_id_.Swap(&other->signer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_id_.Swap(&other->receiver_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signed_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signed_transaction().empty()) {
    signed_transaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signed_transaction(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_NEAR_2eproto.base);
  signed_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signed_transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_NEAR_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signed_transaction_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signed_transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signed_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signed_transaction = 1;
  if (this->signed_transaction().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signed_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signed_transaction = 1;
  if (this->signed_transaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signed_transaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEAR.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEAR.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEAR.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signed_transaction().size() > 0) {
    _internal_set_signed_transaction(from._internal_signed_transaction());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEAR.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signed_transaction_.Swap(&other->signed_transaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace NEAR
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::PublicKey* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::PublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::FunctionCallPermission* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::FunctionCallPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::FunctionCallPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::FullAccessPermission* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::FullAccessPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::FullAccessPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::AccessKey* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::AccessKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::AccessKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::CreateAccount* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::CreateAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::CreateAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::DeployContract* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::DeployContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::DeployContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::FunctionCall* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::FunctionCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::FunctionCall >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::Transfer* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::Stake* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::Stake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::Stake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::AddKey* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::AddKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::AddKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::DeleteKey* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::DeleteKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::DeleteKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::DeleteAccount* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::DeleteAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::DeleteAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::Action* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
