// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stellar.proto

#include "Stellar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Stellar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Asset_Stellar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Stellar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoHash_Stellar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Stellar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoId_Stellar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Stellar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoText_Stellar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Stellar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoVoid_Stellar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Stellar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationChangeTrust_Stellar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Stellar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationCreateAccount_Stellar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Stellar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationPayment_Stellar_2eproto;
namespace TW {
namespace Stellar {
namespace Proto {
class AssetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Asset> _instance;
} _Asset_default_instance_;
class OperationCreateAccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationCreateAccount> _instance;
} _OperationCreateAccount_default_instance_;
class OperationPaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationPayment> _instance;
} _OperationPayment_default_instance_;
class OperationChangeTrustDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationChangeTrust> _instance;
} _OperationChangeTrust_default_instance_;
class MemoVoidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoVoid> _instance;
} _MemoVoid_default_instance_;
class MemoTextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoText> _instance;
} _MemoText_default_instance_;
class MemoIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoId> _instance;
} _MemoId_default_instance_;
class MemoHashDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoHash> _instance;
} _MemoHash_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Stellar
}  // namespace TW
static void InitDefaultsscc_info_Asset_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_Asset_default_instance_;
    new (ptr) ::TW::Stellar::Proto::Asset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Asset_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Asset_Stellar_2eproto}, {}};

static void InitDefaultsscc_info_MemoHash_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_MemoHash_default_instance_;
    new (ptr) ::TW::Stellar::Proto::MemoHash();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoHash_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoHash_Stellar_2eproto}, {}};

static void InitDefaultsscc_info_MemoId_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_MemoId_default_instance_;
    new (ptr) ::TW::Stellar::Proto::MemoId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoId_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoId_Stellar_2eproto}, {}};

static void InitDefaultsscc_info_MemoText_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_MemoText_default_instance_;
    new (ptr) ::TW::Stellar::Proto::MemoText();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoText_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoText_Stellar_2eproto}, {}};

static void InitDefaultsscc_info_MemoVoid_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_MemoVoid_default_instance_;
    new (ptr) ::TW::Stellar::Proto::MemoVoid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoVoid_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoVoid_Stellar_2eproto}, {}};

static void InitDefaultsscc_info_OperationChangeTrust_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_OperationChangeTrust_default_instance_;
    new (ptr) ::TW::Stellar::Proto::OperationChangeTrust();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationChangeTrust_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperationChangeTrust_Stellar_2eproto}, {
      &scc_info_Asset_Stellar_2eproto.base,}};

static void InitDefaultsscc_info_OperationCreateAccount_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_OperationCreateAccount_default_instance_;
    new (ptr) ::TW::Stellar::Proto::OperationCreateAccount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationCreateAccount_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OperationCreateAccount_Stellar_2eproto}, {}};

static void InitDefaultsscc_info_OperationPayment_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_OperationPayment_default_instance_;
    new (ptr) ::TW::Stellar::Proto::OperationPayment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationPayment_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperationPayment_Stellar_2eproto}, {
      &scc_info_Asset_Stellar_2eproto.base,}};

static void InitDefaultsscc_info_SigningInput_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Stellar::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SigningInput_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_SigningInput_Stellar_2eproto}, {
      &scc_info_OperationCreateAccount_Stellar_2eproto.base,
      &scc_info_OperationPayment_Stellar_2eproto.base,
      &scc_info_OperationChangeTrust_Stellar_2eproto.base,
      &scc_info_MemoVoid_Stellar_2eproto.base,
      &scc_info_MemoText_Stellar_2eproto.base,
      &scc_info_MemoId_Stellar_2eproto.base,
      &scc_info_MemoHash_Stellar_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Stellar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Stellar::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Stellar::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Stellar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Stellar_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Stellar_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Stellar_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Stellar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Stellar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::Asset, issuer_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::Asset, alphanum4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateAccount, destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateAccount, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationPayment, destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationPayment, asset_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationPayment, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationChangeTrust, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationChangeTrust, asset_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationChangeTrust, valid_before_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoVoid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoText, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoHash, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, sequence_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, account_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, passphrase_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, operation_oneof_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, memo_type_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningOutput, signature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Stellar::Proto::Asset)},
  { 7, -1, sizeof(::TW::Stellar::Proto::OperationCreateAccount)},
  { 14, -1, sizeof(::TW::Stellar::Proto::OperationPayment)},
  { 22, -1, sizeof(::TW::Stellar::Proto::OperationChangeTrust)},
  { 29, -1, sizeof(::TW::Stellar::Proto::MemoVoid)},
  { 34, -1, sizeof(::TW::Stellar::Proto::MemoText)},
  { 40, -1, sizeof(::TW::Stellar::Proto::MemoId)},
  { 46, -1, sizeof(::TW::Stellar::Proto::MemoHash)},
  { 52, -1, sizeof(::TW::Stellar::Proto::SigningInput)},
  { 72, -1, sizeof(::TW::Stellar::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_OperationCreateAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_OperationPayment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_OperationChangeTrust_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_MemoVoid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_MemoText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_MemoId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_MemoHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Stellar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rStellar.proto\022\020TW.Stellar.Proto\"*\n\005Ass"
  "et\022\016\n\006issuer\030\001 \001(\t\022\021\n\talphanum4\030\002 \001(\t\"=\n"
  "\026OperationCreateAccount\022\023\n\013destination\030\001"
  " \001(\t\022\016\n\006amount\030\002 \001(\003\"_\n\020OperationPayment"
  "\022\023\n\013destination\030\001 \001(\t\022&\n\005asset\030\002 \001(\0132\027.T"
  "W.Stellar.Proto.Asset\022\016\n\006amount\030\003 \001(\003\"T\n"
  "\024OperationChangeTrust\022&\n\005asset\030\001 \001(\0132\027.T"
  "W.Stellar.Proto.Asset\022\024\n\014valid_before\030\002 "
  "\001(\003\"\n\n\010MemoVoid\"\030\n\010MemoText\022\014\n\004text\030\001 \001("
  "\t\"\024\n\006MemoId\022\n\n\002id\030\001 \001(\003\"\030\n\010MemoHash\022\014\n\004h"
  "ash\030\001 \001(\014\"\311\004\n\014SigningInput\022\013\n\003fee\030\001 \001(\005\022"
  "\020\n\010sequence\030\002 \001(\003\022\017\n\007account\030\003 \001(\t\022\023\n\013pr"
  "ivate_key\030\004 \001(\014\022\022\n\npassphrase\030\005 \001(\t\022E\n\021o"
  "p_create_account\030\006 \001(\0132(.TW.Stellar.Prot"
  "o.OperationCreateAccountH\000\0228\n\nop_payment"
  "\030\007 \001(\0132\".TW.Stellar.Proto.OperationPayme"
  "ntH\000\022A\n\017op_change_trust\030\010 \001(\0132&.TW.Stell"
  "ar.Proto.OperationChangeTrustH\000\022/\n\tmemo_"
  "void\030\t \001(\0132\032.TW.Stellar.Proto.MemoVoidH\001"
  "\022/\n\tmemo_text\030\n \001(\0132\032.TW.Stellar.Proto.M"
  "emoTextH\001\022+\n\007memo_id\030\013 \001(\0132\030.TW.Stellar."
  "Proto.MemoIdH\001\022/\n\tmemo_hash\030\014 \001(\0132\032.TW.S"
  "tellar.Proto.MemoHashH\001\0226\n\020memo_return_h"
  "ash\030\r \001(\0132\032.TW.Stellar.Proto.MemoHashH\001B"
  "\021\n\017operation_oneofB\021\n\017memo_type_oneof\"\"\n"
  "\rSigningOutput\022\021\n\tsignature\030\001 \001(\tB\027\n\025wal"
  "let.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Stellar_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Stellar_2eproto_sccs[10] = {
  &scc_info_Asset_Stellar_2eproto.base,
  &scc_info_MemoHash_Stellar_2eproto.base,
  &scc_info_MemoId_Stellar_2eproto.base,
  &scc_info_MemoText_Stellar_2eproto.base,
  &scc_info_MemoVoid_Stellar_2eproto.base,
  &scc_info_OperationChangeTrust_Stellar_2eproto.base,
  &scc_info_OperationCreateAccount_Stellar_2eproto.base,
  &scc_info_OperationPayment_Stellar_2eproto.base,
  &scc_info_SigningInput_Stellar_2eproto.base,
  &scc_info_SigningOutput_Stellar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Stellar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Stellar_2eproto = {
  false, false, descriptor_table_protodef_Stellar_2eproto, "Stellar.proto", 1066,
  &descriptor_table_Stellar_2eproto_once, descriptor_table_Stellar_2eproto_sccs, descriptor_table_Stellar_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_Stellar_2eproto::offsets,
  file_level_metadata_Stellar_2eproto, 10, file_level_enum_descriptors_Stellar_2eproto, file_level_service_descriptors_Stellar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Stellar_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Stellar_2eproto)), true);
namespace TW {
namespace Stellar {
namespace Proto {

// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_issuer().empty()) {
    issuer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_issuer(), 
      GetArena());
  }
  alphanum4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alphanum4().empty()) {
    alphanum4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alphanum4(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.Asset)
}

void Asset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Asset_Stellar_2eproto.base);
  issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alphanum4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.Asset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  issuer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alphanum4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Asset& Asset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Asset_Stellar_2eproto.base);
  return *internal_default_instance();
}


void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  issuer_.ClearToEmpty();
  alphanum4_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string issuer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_issuer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.Asset.issuer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alphanum4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alphanum4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.Asset.alphanum4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Asset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string issuer = 1;
  if (this->issuer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuer().data(), static_cast<int>(this->_internal_issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.Asset.issuer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_issuer(), target);
  }

  // string alphanum4 = 2;
  if (this->alphanum4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alphanum4().data(), static_cast<int>(this->_internal_alphanum4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.Asset.alphanum4");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alphanum4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.Asset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string issuer = 1;
  if (this->issuer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer());
  }

  // string alphanum4 = 2;
  if (this->alphanum4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alphanum4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Asset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  const Asset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Asset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.Asset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.issuer().size() > 0) {
    _internal_set_issuer(from._internal_issuer());
  }
  if (from.alphanum4().size() > 0) {
    _internal_set_alphanum4(from._internal_alphanum4());
  }
}

void Asset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  issuer_.Swap(&other->issuer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alphanum4_.Swap(&other->alphanum4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationCreateAccount::_Internal {
 public:
};

OperationCreateAccount::OperationCreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.OperationCreateAccount)
}
OperationCreateAccount::OperationCreateAccount(const OperationCreateAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination().empty()) {
    destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.OperationCreateAccount)
}

void OperationCreateAccount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationCreateAccount_Stellar_2eproto.base);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

OperationCreateAccount::~OperationCreateAccount() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.OperationCreateAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationCreateAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationCreateAccount::ArenaDtor(void* object) {
  OperationCreateAccount* _this = reinterpret_cast< OperationCreateAccount* >(object);
  (void)_this;
}
void OperationCreateAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationCreateAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationCreateAccount& OperationCreateAccount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationCreateAccount_Stellar_2eproto.base);
  return *internal_default_instance();
}


void OperationCreateAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.OperationCreateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationCreateAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.OperationCreateAccount.destination"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationCreateAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.OperationCreateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.OperationCreateAccount.destination");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destination(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.OperationCreateAccount)
  return target;
}

size_t OperationCreateAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.OperationCreateAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationCreateAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.OperationCreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationCreateAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationCreateAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.OperationCreateAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.OperationCreateAccount)
    MergeFrom(*source);
  }
}

void OperationCreateAccount::MergeFrom(const OperationCreateAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.OperationCreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination().size() > 0) {
    _internal_set_destination(from._internal_destination());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void OperationCreateAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.OperationCreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationCreateAccount::CopyFrom(const OperationCreateAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.OperationCreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationCreateAccount::IsInitialized() const {
  return true;
}

void OperationCreateAccount::InternalSwap(OperationCreateAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationCreateAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationPayment::_Internal {
 public:
  static const ::TW::Stellar::Proto::Asset& asset(const OperationPayment* msg);
};

const ::TW::Stellar::Proto::Asset&
OperationPayment::_Internal::asset(const OperationPayment* msg) {
  return *msg->asset_;
}
OperationPayment::OperationPayment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.OperationPayment)
}
OperationPayment::OperationPayment(const OperationPayment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination().empty()) {
    destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination(), 
      GetArena());
  }
  if (from._internal_has_asset()) {
    asset_ = new ::TW::Stellar::Proto::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.OperationPayment)
}

void OperationPayment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationPayment_Stellar_2eproto.base);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&asset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&asset_)) + sizeof(amount_));
}

OperationPayment::~OperationPayment() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.OperationPayment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationPayment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete asset_;
}

void OperationPayment::ArenaDtor(void* object) {
  OperationPayment* _this = reinterpret_cast< OperationPayment* >(object);
  (void)_this;
}
void OperationPayment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationPayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationPayment& OperationPayment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationPayment_Stellar_2eproto.base);
  return *internal_default_instance();
}


void OperationPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.OperationPayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmpty();
  if (GetArena() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationPayment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.OperationPayment.destination"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.Asset asset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationPayment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.OperationPayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.OperationPayment.destination");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destination(), target);
  }

  // .TW.Stellar.Proto.Asset asset = 2;
  if (this->has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::asset(this), target, stream);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.OperationPayment)
  return target;
}

size_t OperationPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.OperationPayment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // .TW.Stellar.Proto.Asset asset = 2;
  if (this->has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationPayment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.OperationPayment)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationPayment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationPayment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.OperationPayment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.OperationPayment)
    MergeFrom(*source);
  }
}

void OperationPayment::MergeFrom(const OperationPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.OperationPayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination().size() > 0) {
    _internal_set_destination(from._internal_destination());
  }
  if (from.has_asset()) {
    _internal_mutable_asset()->::TW::Stellar::Proto::Asset::MergeFrom(from._internal_asset());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void OperationPayment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.OperationPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationPayment::CopyFrom(const OperationPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.OperationPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationPayment::IsInitialized() const {
  return true;
}

void OperationPayment::InternalSwap(OperationPayment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationPayment, amount_)
      + sizeof(OperationPayment::amount_)
      - PROTOBUF_FIELD_OFFSET(OperationPayment, asset_)>(
          reinterpret_cast<char*>(&asset_),
          reinterpret_cast<char*>(&other->asset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationPayment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationChangeTrust::_Internal {
 public:
  static const ::TW::Stellar::Proto::Asset& asset(const OperationChangeTrust* msg);
};

const ::TW::Stellar::Proto::Asset&
OperationChangeTrust::_Internal::asset(const OperationChangeTrust* msg) {
  return *msg->asset_;
}
OperationChangeTrust::OperationChangeTrust(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.OperationChangeTrust)
}
OperationChangeTrust::OperationChangeTrust(const OperationChangeTrust& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset()) {
    asset_ = new ::TW::Stellar::Proto::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  valid_before_ = from.valid_before_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.OperationChangeTrust)
}

void OperationChangeTrust::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationChangeTrust_Stellar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&asset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&valid_before_) -
      reinterpret_cast<char*>(&asset_)) + sizeof(valid_before_));
}

OperationChangeTrust::~OperationChangeTrust() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.OperationChangeTrust)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationChangeTrust::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete asset_;
}

void OperationChangeTrust::ArenaDtor(void* object) {
  OperationChangeTrust* _this = reinterpret_cast< OperationChangeTrust* >(object);
  (void)_this;
}
void OperationChangeTrust::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationChangeTrust::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationChangeTrust& OperationChangeTrust::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationChangeTrust_Stellar_2eproto.base);
  return *internal_default_instance();
}


void OperationChangeTrust::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.OperationChangeTrust)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  valid_before_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationChangeTrust::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Stellar.Proto.Asset asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 valid_before = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          valid_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationChangeTrust::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.OperationChangeTrust)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Stellar.Proto.Asset asset = 1;
  if (this->has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  // int64 valid_before = 2;
  if (this->valid_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_valid_before(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.OperationChangeTrust)
  return target;
}

size_t OperationChangeTrust::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.OperationChangeTrust)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Stellar.Proto.Asset asset = 1;
  if (this->has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  // int64 valid_before = 2;
  if (this->valid_before() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_valid_before());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationChangeTrust::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.OperationChangeTrust)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationChangeTrust* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationChangeTrust>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.OperationChangeTrust)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.OperationChangeTrust)
    MergeFrom(*source);
  }
}

void OperationChangeTrust::MergeFrom(const OperationChangeTrust& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.OperationChangeTrust)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset()) {
    _internal_mutable_asset()->::TW::Stellar::Proto::Asset::MergeFrom(from._internal_asset());
  }
  if (from.valid_before() != 0) {
    _internal_set_valid_before(from._internal_valid_before());
  }
}

void OperationChangeTrust::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.OperationChangeTrust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationChangeTrust::CopyFrom(const OperationChangeTrust& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.OperationChangeTrust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationChangeTrust::IsInitialized() const {
  return true;
}

void OperationChangeTrust::InternalSwap(OperationChangeTrust* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationChangeTrust, valid_before_)
      + sizeof(OperationChangeTrust::valid_before_)
      - PROTOBUF_FIELD_OFFSET(OperationChangeTrust, asset_)>(
          reinterpret_cast<char*>(&asset_),
          reinterpret_cast<char*>(&other->asset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationChangeTrust::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoVoid::_Internal {
 public:
};

MemoVoid::MemoVoid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.MemoVoid)
}
MemoVoid::MemoVoid(const MemoVoid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.MemoVoid)
}

void MemoVoid::SharedCtor() {
}

MemoVoid::~MemoVoid() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.MemoVoid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoVoid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemoVoid::ArenaDtor(void* object) {
  MemoVoid* _this = reinterpret_cast< MemoVoid* >(object);
  (void)_this;
}
void MemoVoid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoVoid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoVoid& MemoVoid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoVoid_Stellar_2eproto.base);
  return *internal_default_instance();
}


void MemoVoid::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.MemoVoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoVoid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoVoid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.MemoVoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.MemoVoid)
  return target;
}

size_t MemoVoid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.MemoVoid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoVoid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.MemoVoid)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoVoid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoVoid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.MemoVoid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.MemoVoid)
    MergeFrom(*source);
  }
}

void MemoVoid::MergeFrom(const MemoVoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.MemoVoid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MemoVoid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.MemoVoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoVoid::CopyFrom(const MemoVoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.MemoVoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoVoid::IsInitialized() const {
  return true;
}

void MemoVoid::InternalSwap(MemoVoid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoVoid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoText::_Internal {
 public:
};

MemoText::MemoText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.MemoText)
}
MemoText::MemoText(const MemoText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.MemoText)
}

void MemoText::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoText_Stellar_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MemoText::~MemoText() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.MemoText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoText::ArenaDtor(void* object) {
  MemoText* _this = reinterpret_cast< MemoText* >(object);
  (void)_this;
}
void MemoText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoText& MemoText::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoText_Stellar_2eproto.base);
  return *internal_default_instance();
}


void MemoText::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.MemoText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.MemoText.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.MemoText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.MemoText.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.MemoText)
  return target;
}

size_t MemoText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.MemoText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.MemoText)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.MemoText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.MemoText)
    MergeFrom(*source);
  }
}

void MemoText::MergeFrom(const MemoText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.MemoText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
}

void MemoText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.MemoText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoText::CopyFrom(const MemoText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.MemoText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoText::IsInitialized() const {
  return true;
}

void MemoText::InternalSwap(MemoText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoId::_Internal {
 public:
};

MemoId::MemoId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.MemoId)
}
MemoId::MemoId(const MemoId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.MemoId)
}

void MemoId::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

MemoId::~MemoId() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.MemoId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemoId::ArenaDtor(void* object) {
  MemoId* _this = reinterpret_cast< MemoId* >(object);
  (void)_this;
}
void MemoId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoId& MemoId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoId_Stellar_2eproto.base);
  return *internal_default_instance();
}


void MemoId::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.MemoId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.MemoId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.MemoId)
  return target;
}

size_t MemoId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.MemoId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.MemoId)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.MemoId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.MemoId)
    MergeFrom(*source);
  }
}

void MemoId::MergeFrom(const MemoId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.MemoId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MemoId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.MemoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoId::CopyFrom(const MemoId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.MemoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoId::IsInitialized() const {
  return true;
}

void MemoId::InternalSwap(MemoId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoHash::_Internal {
 public:
};

MemoHash::MemoHash(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.MemoHash)
}
MemoHash::MemoHash(const MemoHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.MemoHash)
}

void MemoHash::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoHash_Stellar_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MemoHash::~MemoHash() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.MemoHash)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoHash::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoHash::ArenaDtor(void* object) {
  MemoHash* _this = reinterpret_cast< MemoHash* >(object);
  (void)_this;
}
void MemoHash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoHash& MemoHash::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoHash_Stellar_2eproto.base);
  return *internal_default_instance();
}


void MemoHash::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.MemoHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoHash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.MemoHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.MemoHash)
  return target;
}

size_t MemoHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.MemoHash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoHash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.MemoHash)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoHash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoHash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.MemoHash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.MemoHash)
    MergeFrom(*source);
  }
}

void MemoHash::MergeFrom(const MemoHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.MemoHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void MemoHash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.MemoHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoHash::CopyFrom(const MemoHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.MemoHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoHash::IsInitialized() const {
  return true;
}

void MemoHash::InternalSwap(MemoHash* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoHash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Stellar::Proto::OperationCreateAccount& op_create_account(const SigningInput* msg);
  static const ::TW::Stellar::Proto::OperationPayment& op_payment(const SigningInput* msg);
  static const ::TW::Stellar::Proto::OperationChangeTrust& op_change_trust(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoVoid& memo_void(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoText& memo_text(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoId& memo_id(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoHash& memo_hash(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoHash& memo_return_hash(const SigningInput* msg);
};

const ::TW::Stellar::Proto::OperationCreateAccount&
SigningInput::_Internal::op_create_account(const SigningInput* msg) {
  return *msg->operation_oneof_.op_create_account_;
}
const ::TW::Stellar::Proto::OperationPayment&
SigningInput::_Internal::op_payment(const SigningInput* msg) {
  return *msg->operation_oneof_.op_payment_;
}
const ::TW::Stellar::Proto::OperationChangeTrust&
SigningInput::_Internal::op_change_trust(const SigningInput* msg) {
  return *msg->operation_oneof_.op_change_trust_;
}
const ::TW::Stellar::Proto::MemoVoid&
SigningInput::_Internal::memo_void(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_void_;
}
const ::TW::Stellar::Proto::MemoText&
SigningInput::_Internal::memo_text(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_text_;
}
const ::TW::Stellar::Proto::MemoId&
SigningInput::_Internal::memo_id(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_id_;
}
const ::TW::Stellar::Proto::MemoHash&
SigningInput::_Internal::memo_hash(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_hash_;
}
const ::TW::Stellar::Proto::MemoHash&
SigningInput::_Internal::memo_return_hash(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_return_hash_;
}
void SigningInput::set_allocated_op_create_account(::TW::Stellar::Proto::OperationCreateAccount* op_create_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_oneof();
  if (op_create_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op_create_account);
    if (message_arena != submessage_arena) {
      op_create_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_create_account, submessage_arena);
    }
    set_has_op_create_account();
    operation_oneof_.op_create_account_ = op_create_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.op_create_account)
}
void SigningInput::set_allocated_op_payment(::TW::Stellar::Proto::OperationPayment* op_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_oneof();
  if (op_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op_payment);
    if (message_arena != submessage_arena) {
      op_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_payment, submessage_arena);
    }
    set_has_op_payment();
    operation_oneof_.op_payment_ = op_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.op_payment)
}
void SigningInput::set_allocated_op_change_trust(::TW::Stellar::Proto::OperationChangeTrust* op_change_trust) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_oneof();
  if (op_change_trust) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op_change_trust);
    if (message_arena != submessage_arena) {
      op_change_trust = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_change_trust, submessage_arena);
    }
    set_has_op_change_trust();
    operation_oneof_.op_change_trust_ = op_change_trust;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.op_change_trust)
}
void SigningInput::set_allocated_memo_void(::TW::Stellar::Proto::MemoVoid* memo_void) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_memo_type_oneof();
  if (memo_void) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memo_void);
    if (message_arena != submessage_arena) {
      memo_void = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_void, submessage_arena);
    }
    set_has_memo_void();
    memo_type_oneof_.memo_void_ = memo_void;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_void)
}
void SigningInput::set_allocated_memo_text(::TW::Stellar::Proto::MemoText* memo_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_memo_type_oneof();
  if (memo_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memo_text);
    if (message_arena != submessage_arena) {
      memo_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_text, submessage_arena);
    }
    set_has_memo_text();
    memo_type_oneof_.memo_text_ = memo_text;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_text)
}
void SigningInput::set_allocated_memo_id(::TW::Stellar::Proto::MemoId* memo_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_memo_type_oneof();
  if (memo_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memo_id);
    if (message_arena != submessage_arena) {
      memo_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_id, submessage_arena);
    }
    set_has_memo_id();
    memo_type_oneof_.memo_id_ = memo_id;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_id)
}
void SigningInput::set_allocated_memo_hash(::TW::Stellar::Proto::MemoHash* memo_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_memo_type_oneof();
  if (memo_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memo_hash);
    if (message_arena != submessage_arena) {
      memo_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_hash, submessage_arena);
    }
    set_has_memo_hash();
    memo_type_oneof_.memo_hash_ = memo_hash;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_hash)
}
void SigningInput::set_allocated_memo_return_hash(::TW::Stellar::Proto::MemoHash* memo_return_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_memo_type_oneof();
  if (memo_return_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memo_return_hash);
    if (message_arena != submessage_arena) {
      memo_return_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_return_hash, submessage_arena);
    }
    set_has_memo_return_hash();
    memo_type_oneof_.memo_return_hash_ = memo_return_hash;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_return_hash)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArena());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passphrase().empty()) {
    passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passphrase(), 
      GetArena());
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(fee_));
  clear_has_operation_oneof();
  switch (from.operation_oneof_case()) {
    case kOpCreateAccount: {
      _internal_mutable_op_create_account()->::TW::Stellar::Proto::OperationCreateAccount::MergeFrom(from._internal_op_create_account());
      break;
    }
    case kOpPayment: {
      _internal_mutable_op_payment()->::TW::Stellar::Proto::OperationPayment::MergeFrom(from._internal_op_payment());
      break;
    }
    case kOpChangeTrust: {
      _internal_mutable_op_change_trust()->::TW::Stellar::Proto::OperationChangeTrust::MergeFrom(from._internal_op_change_trust());
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  clear_has_memo_type_oneof();
  switch (from.memo_type_oneof_case()) {
    case kMemoVoid: {
      _internal_mutable_memo_void()->::TW::Stellar::Proto::MemoVoid::MergeFrom(from._internal_memo_void());
      break;
    }
    case kMemoText: {
      _internal_mutable_memo_text()->::TW::Stellar::Proto::MemoText::MergeFrom(from._internal_memo_text());
      break;
    }
    case kMemoId: {
      _internal_mutable_memo_id()->::TW::Stellar::Proto::MemoId::MergeFrom(from._internal_memo_id());
      break;
    }
    case kMemoHash: {
      _internal_mutable_memo_hash()->::TW::Stellar::Proto::MemoHash::MergeFrom(from._internal_memo_hash());
      break;
    }
    case kMemoReturnHash: {
      _internal_mutable_memo_return_hash()->::TW::Stellar::Proto::MemoHash::MergeFrom(from._internal_memo_return_hash());
      break;
    }
    case MEMO_TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Stellar_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(fee_));
  clear_has_operation_oneof();
  clear_has_memo_type_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_operation_oneof()) {
    clear_operation_oneof();
  }
  if (has_memo_type_oneof()) {
    clear_memo_type_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Stellar_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::clear_operation_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Stellar.Proto.SigningInput)
  switch (operation_oneof_case()) {
    case kOpCreateAccount: {
      if (GetArena() == nullptr) {
        delete operation_oneof_.op_create_account_;
      }
      break;
    }
    case kOpPayment: {
      if (GetArena() == nullptr) {
        delete operation_oneof_.op_payment_;
      }
      break;
    }
    case kOpChangeTrust: {
      if (GetArena() == nullptr) {
        delete operation_oneof_.op_change_trust_;
      }
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_ONEOF_NOT_SET;
}

void SigningInput::clear_memo_type_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Stellar.Proto.SigningInput)
  switch (memo_type_oneof_case()) {
    case kMemoVoid: {
      if (GetArena() == nullptr) {
        delete memo_type_oneof_.memo_void_;
      }
      break;
    }
    case kMemoText: {
      if (GetArena() == nullptr) {
        delete memo_type_oneof_.memo_text_;
      }
      break;
    }
    case kMemoId: {
      if (GetArena() == nullptr) {
        delete memo_type_oneof_.memo_id_;
      }
      break;
    }
    case kMemoHash: {
      if (GetArena() == nullptr) {
        delete memo_type_oneof_.memo_hash_;
      }
      break;
    }
    case kMemoReturnHash: {
      if (GetArena() == nullptr) {
        delete memo_type_oneof_.memo_return_hash_;
      }
      break;
    }
    case MEMO_TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MEMO_TYPE_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  private_key_.ClearToEmpty();
  passphrase_.ClearToEmpty();
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(fee_));
  clear_operation_oneof();
  clear_memo_type_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.SigningInput.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes private_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string passphrase = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.SigningInput.passphrase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.OperationCreateAccount op_create_account = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_create_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.OperationPayment op_payment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.OperationChangeTrust op_change_trust = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_change_trust(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoVoid memo_void = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_void(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoText memo_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoId memo_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoHash memo_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoHash memo_return_hash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_return_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fee = 1;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fee(), target);
  }

  // int64 sequence = 2;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sequence(), target);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.SigningInput.account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account(), target);
  }

  // bytes private_key = 4;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_private_key(), target);
  }

  // string passphrase = 5;
  if (this->passphrase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passphrase().data(), static_cast<int>(this->_internal_passphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.SigningInput.passphrase");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_passphrase(), target);
  }

  // .TW.Stellar.Proto.OperationCreateAccount op_create_account = 6;
  if (_internal_has_op_create_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::op_create_account(this), target, stream);
  }

  // .TW.Stellar.Proto.OperationPayment op_payment = 7;
  if (_internal_has_op_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::op_payment(this), target, stream);
  }

  // .TW.Stellar.Proto.OperationChangeTrust op_change_trust = 8;
  if (_internal_has_op_change_trust()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::op_change_trust(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoVoid memo_void = 9;
  if (_internal_has_memo_void()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::memo_void(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoText memo_text = 10;
  if (_internal_has_memo_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::memo_text(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoId memo_id = 11;
  if (_internal_has_memo_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::memo_id(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoHash memo_hash = 12;
  if (_internal_has_memo_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::memo_hash(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoHash memo_return_hash = 13;
  if (_internal_has_memo_return_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::memo_return_hash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 3;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // bytes private_key = 4;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string passphrase = 5;
  if (this->passphrase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passphrase());
  }

  // int64 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // int32 fee = 1;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fee());
  }

  switch (operation_oneof_case()) {
    // .TW.Stellar.Proto.OperationCreateAccount op_create_account = 6;
    case kOpCreateAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_create_account_);
      break;
    }
    // .TW.Stellar.Proto.OperationPayment op_payment = 7;
    case kOpPayment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_payment_);
      break;
    }
    // .TW.Stellar.Proto.OperationChangeTrust op_change_trust = 8;
    case kOpChangeTrust: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_change_trust_);
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  switch (memo_type_oneof_case()) {
    // .TW.Stellar.Proto.MemoVoid memo_void = 9;
    case kMemoVoid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_void_);
      break;
    }
    // .TW.Stellar.Proto.MemoText memo_text = 10;
    case kMemoText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_text_);
      break;
    }
    // .TW.Stellar.Proto.MemoId memo_id = 11;
    case kMemoId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_id_);
      break;
    }
    // .TW.Stellar.Proto.MemoHash memo_hash = 12;
    case kMemoHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_hash_);
      break;
    }
    // .TW.Stellar.Proto.MemoHash memo_return_hash = 13;
    case kMemoReturnHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_return_hash_);
      break;
    }
    case MEMO_TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.passphrase().size() > 0) {
    _internal_set_passphrase(from._internal_passphrase());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  switch (from.operation_oneof_case()) {
    case kOpCreateAccount: {
      _internal_mutable_op_create_account()->::TW::Stellar::Proto::OperationCreateAccount::MergeFrom(from._internal_op_create_account());
      break;
    }
    case kOpPayment: {
      _internal_mutable_op_payment()->::TW::Stellar::Proto::OperationPayment::MergeFrom(from._internal_op_payment());
      break;
    }
    case kOpChangeTrust: {
      _internal_mutable_op_change_trust()->::TW::Stellar::Proto::OperationChangeTrust::MergeFrom(from._internal_op_change_trust());
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  switch (from.memo_type_oneof_case()) {
    case kMemoVoid: {
      _internal_mutable_memo_void()->::TW::Stellar::Proto::MemoVoid::MergeFrom(from._internal_memo_void());
      break;
    }
    case kMemoText: {
      _internal_mutable_memo_text()->::TW::Stellar::Proto::MemoText::MergeFrom(from._internal_memo_text());
      break;
    }
    case kMemoId: {
      _internal_mutable_memo_id()->::TW::Stellar::Proto::MemoId::MergeFrom(from._internal_memo_id());
      break;
    }
    case kMemoHash: {
      _internal_mutable_memo_hash()->::TW::Stellar::Proto::MemoHash::MergeFrom(from._internal_memo_hash());
      break;
    }
    case kMemoReturnHash: {
      _internal_mutable_memo_return_hash()->::TW::Stellar::Proto::MemoHash::MergeFrom(from._internal_memo_return_hash());
      break;
    }
    case MEMO_TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  passphrase_.Swap(&other->passphrase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, fee_)
      + sizeof(SigningInput::fee_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, sequence_)>(
          reinterpret_cast<char*>(&sequence_),
          reinterpret_cast<char*>(&other->sequence_));
  swap(operation_oneof_, other->operation_oneof_);
  swap(memo_type_oneof_, other->memo_type_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Stellar_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Stellar_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.SigningOutput.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signature = 1;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.SigningOutput.signature");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Stellar.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Stellar.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Stellar.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Stellar.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Stellar
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::Asset* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::OperationCreateAccount* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::OperationCreateAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::OperationCreateAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::OperationPayment* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::OperationPayment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::OperationPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::OperationChangeTrust* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::OperationChangeTrust >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::OperationChangeTrust >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::MemoVoid* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::MemoVoid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::MemoVoid >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::MemoText* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::MemoText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::MemoText >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::MemoId* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::MemoId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::MemoId >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::MemoHash* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::MemoHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::MemoHash >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
