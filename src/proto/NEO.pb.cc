// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NEO.proto

#include "NEO.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NEO_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionInput_NEO_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEO_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionOutput_NEO_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEO_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionOutputPlan_NEO_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NEO_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionPlan_NEO_2eproto;
namespace TW {
namespace NEO {
namespace Proto {
class TransactionInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionInput> _instance;
} _TransactionInput_default_instance_;
class TransactionOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionOutput> _instance;
} _TransactionOutput_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
class TransactionOutputPlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionOutputPlan> _instance;
} _TransactionOutputPlan_default_instance_;
class TransactionPlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionPlan> _instance;
} _TransactionPlan_default_instance_;
}  // namespace Proto
}  // namespace NEO
}  // namespace TW
static void InitDefaultsscc_info_SigningInput_NEO_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEO::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::NEO::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SigningInput_NEO_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SigningInput_NEO_2eproto}, {
      &scc_info_TransactionInput_NEO_2eproto.base,
      &scc_info_TransactionOutput_NEO_2eproto.base,
      &scc_info_TransactionPlan_NEO_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_NEO_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEO::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::NEO::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_NEO_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_NEO_2eproto}, {}};

static void InitDefaultsscc_info_TransactionInput_NEO_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEO::Proto::_TransactionInput_default_instance_;
    new (ptr) ::TW::NEO::Proto::TransactionInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionInput_NEO_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionInput_NEO_2eproto}, {}};

static void InitDefaultsscc_info_TransactionOutput_NEO_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEO::Proto::_TransactionOutput_default_instance_;
    new (ptr) ::TW::NEO::Proto::TransactionOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionOutput_NEO_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionOutput_NEO_2eproto}, {}};

static void InitDefaultsscc_info_TransactionOutputPlan_NEO_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEO::Proto::_TransactionOutputPlan_default_instance_;
    new (ptr) ::TW::NEO::Proto::TransactionOutputPlan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionOutputPlan_NEO_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionOutputPlan_NEO_2eproto}, {}};

static void InitDefaultsscc_info_TransactionPlan_NEO_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::NEO::Proto::_TransactionPlan_default_instance_;
    new (ptr) ::TW::NEO::Proto::TransactionPlan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionPlan_NEO_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransactionPlan_NEO_2eproto}, {
      &scc_info_TransactionOutputPlan_NEO_2eproto.base,
      &scc_info_TransactionInput_NEO_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NEO_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NEO_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NEO_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NEO_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, prev_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, prev_index_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, value_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, asset_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, change_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, inputs_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, outputs_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, gas_asset_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, gas_change_address_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, plan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningOutput, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, available_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, change_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, asset_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, change_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, outputs_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, inputs_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::NEO::Proto::TransactionInput)},
  { 9, -1, sizeof(::TW::NEO::Proto::TransactionOutput)},
  { 18, -1, sizeof(::TW::NEO::Proto::SigningInput)},
  { 30, -1, sizeof(::TW::NEO::Proto::SigningOutput)},
  { 37, -1, sizeof(::TW::NEO::Proto::TransactionOutputPlan)},
  { 48, -1, sizeof(::TW::NEO::Proto::TransactionPlan)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_TransactionInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_TransactionOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_SigningOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_TransactionOutputPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_TransactionPlan_default_instance_),
};

const char descriptor_table_protodef_NEO_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tNEO.proto\022\014TW.NEO.Proto\032\014Common.proto\""
  "Z\n\020TransactionInput\022\021\n\tprev_hash\030\001 \001(\014\022\022"
  "\n\nprev_index\030\002 \001(\007\022\r\n\005value\030\003 \001(\003\022\020\n\010ass"
  "et_id\030\004 \001(\t\"a\n\021TransactionOutput\022\020\n\010asse"
  "t_id\030\001 \001(\t\022\016\n\006amount\030\002 \001(\022\022\022\n\nto_address"
  "\030\003 \001(\t\022\026\n\016change_address\030\004 \001(\t\"\361\001\n\014Signi"
  "ngInput\022.\n\006inputs\030\001 \003(\0132\036.TW.NEO.Proto.T"
  "ransactionInput\0220\n\007outputs\030\002 \003(\0132\037.TW.NE"
  "O.Proto.TransactionOutput\022\023\n\013private_key"
  "\030\003 \001(\014\022\013\n\003fee\030\004 \001(\003\022\024\n\014gas_asset_id\030\005 \001("
  "\t\022\032\n\022gas_change_address\030\006 \001(\t\022+\n\004plan\030\007 "
  "\001(\0132\035.TW.NEO.Proto.TransactionPlan\"N\n\rSi"
  "gningOutput\022\017\n\007encoded\030\001 \001(\014\022,\n\005error\030\002 "
  "\001(\0162\035.TW.Common.Proto.SigningError\"\217\001\n\025T"
  "ransactionOutputPlan\022\016\n\006amount\030\001 \001(\003\022\030\n\020"
  "available_amount\030\002 \001(\003\022\016\n\006change\030\003 \001(\003\022\020"
  "\n\010asset_id\030\004 \001(\t\022\022\n\nto_address\030\005 \001(\t\022\026\n\016"
  "change_address\030\006 \001(\t\"\262\001\n\017TransactionPlan"
  "\0224\n\007outputs\030\001 \003(\0132#.TW.NEO.Proto.Transac"
  "tionOutputPlan\022.\n\006inputs\030\002 \003(\0132\036.TW.NEO."
  "Proto.TransactionInput\022\013\n\003fee\030\003 \001(\003\022,\n\005e"
  "rror\030\004 \001(\0162\035.TW.Common.Proto.SigningErro"
  "rB\027\n\025wallet.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NEO_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NEO_2eproto_sccs[6] = {
  &scc_info_SigningInput_NEO_2eproto.base,
  &scc_info_SigningOutput_NEO_2eproto.base,
  &scc_info_TransactionInput_NEO_2eproto.base,
  &scc_info_TransactionOutput_NEO_2eproto.base,
  &scc_info_TransactionOutputPlan_NEO_2eproto.base,
  &scc_info_TransactionPlan_NEO_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NEO_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NEO_2eproto = {
  false, false, descriptor_table_protodef_NEO_2eproto, "NEO.proto", 914,
  &descriptor_table_NEO_2eproto_once, descriptor_table_NEO_2eproto_sccs, descriptor_table_NEO_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_NEO_2eproto::offsets,
  file_level_metadata_NEO_2eproto, 6, file_level_enum_descriptors_NEO_2eproto, file_level_service_descriptors_NEO_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NEO_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NEO_2eproto)), true);
namespace TW {
namespace NEO {
namespace Proto {

// ===================================================================

class TransactionInput::_Internal {
 public:
};

TransactionInput::TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.TransactionInput)
}
TransactionInput::TransactionInput(const TransactionInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prev_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_hash().empty()) {
    prev_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prev_hash(), 
      GetArena());
  }
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_index_) -
    reinterpret_cast<char*>(&value_)) + sizeof(prev_index_));
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.TransactionInput)
}

void TransactionInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionInput_NEO_2eproto.base);
  prev_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&prev_index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(prev_index_));
}

TransactionInput::~TransactionInput() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.TransactionInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prev_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionInput::ArenaDtor(void* object) {
  TransactionInput* _this = reinterpret_cast< TransactionInput* >(object);
  (void)_this;
}
void TransactionInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionInput& TransactionInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionInput_NEO_2eproto.base);
  return *internal_default_instance();
}


void TransactionInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.TransactionInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prev_hash_.ClearToEmpty();
  asset_id_.ClearToEmpty();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(prev_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes prev_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prev_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 prev_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          prev_index_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // int64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionInput.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.TransactionInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes prev_hash = 1;
  if (this->prev_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_prev_hash(), target);
  }

  // fixed32 prev_index = 2;
  if (this->prev_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_prev_index(), target);
  }

  // int64 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  // string asset_id = 4;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionInput.asset_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.TransactionInput)
  return target;
}

size_t TransactionInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.TransactionInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes prev_hash = 1;
  if (this->prev_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prev_hash());
  }

  // string asset_id = 4;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // int64 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // fixed32 prev_index = 2;
  if (this->prev_index() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEO.Proto.TransactionInput)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEO.Proto.TransactionInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEO.Proto.TransactionInput)
    MergeFrom(*source);
  }
}

void TransactionInput::MergeFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.TransactionInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prev_hash().size() > 0) {
    _internal_set_prev_hash(from._internal_prev_hash());
  }
  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.prev_index() != 0) {
    _internal_set_prev_index(from._internal_prev_index());
  }
}

void TransactionInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEO.Proto.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInput::CopyFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInput::IsInitialized() const {
  return true;
}

void TransactionInput::InternalSwap(TransactionInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prev_hash_.Swap(&other->prev_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionInput, prev_index_)
      + sizeof(TransactionInput::prev_index_)
      - PROTOBUF_FIELD_OFFSET(TransactionInput, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionOutput::_Internal {
 public:
};

TransactionOutput::TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.TransactionOutput)
}
TransactionOutput::TransactionOutput(const TransactionOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_change_address().empty()) {
    change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_address(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.TransactionOutput)
}

void TransactionOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionOutput_NEO_2eproto.base);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TransactionOutput::~TransactionOutput() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.TransactionOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionOutput::ArenaDtor(void* object) {
  TransactionOutput* _this = reinterpret_cast< TransactionOutput* >(object);
  (void)_this;
}
void TransactionOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionOutput& TransactionOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionOutput_NEO_2eproto.base);
  return *internal_default_instance();
}


void TransactionOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.TransactionOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  to_address_.ClearToEmpty();
  change_address_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutput.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutput.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string change_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutput.change_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.TransactionOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutput.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // sint64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_amount(), target);
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutput.to_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to_address(), target);
  }

  // string change_address = 4;
  if (this->change_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_change_address().data(), static_cast<int>(this->_internal_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutput.change_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_change_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.TransactionOutput)
  return target;
}

size_t TransactionOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.TransactionOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string change_address = 4;
  if (this->change_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_address());
  }

  // sint64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEO.Proto.TransactionOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEO.Proto.TransactionOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEO.Proto.TransactionOutput)
    MergeFrom(*source);
  }
}

void TransactionOutput::MergeFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.TransactionOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.change_address().size() > 0) {
    _internal_set_change_address(from._internal_change_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransactionOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEO.Proto.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionOutput::CopyFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOutput::IsInitialized() const {
  return true;
}

void TransactionOutput::InternalSwap(TransactionOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  change_address_.Swap(&other->change_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::NEO::Proto::TransactionPlan& plan(const SigningInput* msg);
};

const ::TW::NEO::Proto::TransactionPlan&
SigningInput::_Internal::plan(const SigningInput* msg) {
  return *msg->plan_;
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  gas_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_asset_id().empty()) {
    gas_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_asset_id(), 
      GetArena());
  }
  gas_change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_change_address().empty()) {
    gas_change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_change_address(), 
      GetArena());
  }
  if (from._internal_has_plan()) {
    plan_ = new ::TW::NEO::Proto::TransactionPlan(*from.plan_);
  } else {
    plan_ = nullptr;
  }
  fee_ = from.fee_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_NEO_2eproto.base);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&plan_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
      reinterpret_cast<char*>(&plan_)) + sizeof(fee_));
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plan_;
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_NEO_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  private_key_.ClearToEmpty();
  gas_asset_id_.ClearToEmpty();
  gas_change_address_.ClearToEmpty();
  if (GetArena() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
  fee_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TW.NEO.Proto.TransactionInput inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes private_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gas_asset_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_gas_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.SigningInput.gas_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gas_change_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gas_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.SigningInput.gas_change_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.NEO.Proto.TransactionPlan plan = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.TransactionInput inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inputs(i), target, stream);
  }

  // repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  // bytes private_key = 3;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_private_key(), target);
  }

  // int64 fee = 4;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_fee(), target);
  }

  // string gas_asset_id = 5;
  if (this->gas_asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_asset_id().data(), static_cast<int>(this->_internal_gas_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.SigningInput.gas_asset_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gas_asset_id(), target);
  }

  // string gas_change_address = 6;
  if (this->gas_change_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_change_address().data(), static_cast<int>(this->_internal_gas_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.SigningInput.gas_change_address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gas_change_address(), target);
  }

  // .TW.NEO.Proto.TransactionPlan plan = 7;
  if (this->has_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::plan(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.TransactionInput inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes private_key = 3;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string gas_asset_id = 5;
  if (this->gas_asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_asset_id());
  }

  // string gas_change_address = 6;
  if (this->gas_change_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_change_address());
  }

  // .TW.NEO.Proto.TransactionPlan plan = 7;
  if (this->has_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_);
  }

  // int64 fee = 4;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEO.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEO.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEO.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.gas_asset_id().size() > 0) {
    _internal_set_gas_asset_id(from._internal_gas_asset_id());
  }
  if (from.gas_change_address().size() > 0) {
    _internal_set_gas_change_address(from._internal_gas_change_address());
  }
  if (from.has_plan()) {
    _internal_mutable_plan()->::TW::NEO::Proto::TransactionPlan::MergeFrom(from._internal_plan());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEO.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_asset_id_.Swap(&other->gas_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_change_address_.Swap(&other->gas_change_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, fee_)
      + sizeof(SigningInput::fee_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, plan_)>(
          reinterpret_cast<char*>(&plan_),
          reinterpret_cast<char*>(&other->plan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_NEO_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_NEO_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEO.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEO.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEO.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEO.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionOutputPlan::_Internal {
 public:
};

TransactionOutputPlan::TransactionOutputPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.TransactionOutputPlan)
}
TransactionOutputPlan::TransactionOutputPlan(const TransactionOutputPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_change_address().empty()) {
    change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_address(), 
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(change_));
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.TransactionOutputPlan)
}

void TransactionOutputPlan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionOutputPlan_NEO_2eproto.base);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&change_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(change_));
}

TransactionOutputPlan::~TransactionOutputPlan() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.TransactionOutputPlan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionOutputPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionOutputPlan::ArenaDtor(void* object) {
  TransactionOutputPlan* _this = reinterpret_cast< TransactionOutputPlan* >(object);
  (void)_this;
}
void TransactionOutputPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOutputPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionOutputPlan& TransactionOutputPlan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionOutputPlan_NEO_2eproto.base);
  return *internal_default_instance();
}


void TransactionOutputPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.TransactionOutputPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  to_address_.ClearToEmpty();
  change_address_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(change_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOutputPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 available_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          available_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutputPlan.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutputPlan.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string change_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutputPlan.change_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionOutputPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.TransactionOutputPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_amount(), target);
  }

  // int64 available_amount = 2;
  if (this->available_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_available_amount(), target);
  }

  // int64 change = 3;
  if (this->change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_change(), target);
  }

  // string asset_id = 4;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutputPlan.asset_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset_id(), target);
  }

  // string to_address = 5;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutputPlan.to_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_to_address(), target);
  }

  // string change_address = 6;
  if (this->change_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_change_address().data(), static_cast<int>(this->_internal_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutputPlan.change_address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_change_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.TransactionOutputPlan)
  return target;
}

size_t TransactionOutputPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.TransactionOutputPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 4;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string to_address = 5;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string change_address = 6;
  if (this->change_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_address());
  }

  // int64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  // int64 available_amount = 2;
  if (this->available_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_available_amount());
  }

  // int64 change = 3;
  if (this->change() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_change());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionOutputPlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEO.Proto.TransactionOutputPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionOutputPlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionOutputPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEO.Proto.TransactionOutputPlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEO.Proto.TransactionOutputPlan)
    MergeFrom(*source);
  }
}

void TransactionOutputPlan::MergeFrom(const TransactionOutputPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.TransactionOutputPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.change_address().size() > 0) {
    _internal_set_change_address(from._internal_change_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.available_amount() != 0) {
    _internal_set_available_amount(from._internal_available_amount());
  }
  if (from.change() != 0) {
    _internal_set_change(from._internal_change());
  }
}

void TransactionOutputPlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEO.Proto.TransactionOutputPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionOutputPlan::CopyFrom(const TransactionOutputPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.TransactionOutputPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOutputPlan::IsInitialized() const {
  return true;
}

void TransactionOutputPlan::InternalSwap(TransactionOutputPlan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  change_address_.Swap(&other->change_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionOutputPlan, change_)
      + sizeof(TransactionOutputPlan::change_)
      - PROTOBUF_FIELD_OFFSET(TransactionOutputPlan, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOutputPlan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionPlan::_Internal {
 public:
};

TransactionPlan::TransactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  outputs_(arena),
  inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.TransactionPlan)
}
TransactionPlan::TransactionPlan(const TransactionPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outputs_(from.outputs_),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.TransactionPlan)
}

void TransactionPlan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionPlan_NEO_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fee_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(error_));
}

TransactionPlan::~TransactionPlan() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.TransactionPlan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransactionPlan::ArenaDtor(void* object) {
  TransactionPlan* _this = reinterpret_cast< TransactionPlan* >(object);
  (void)_this;
}
void TransactionPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionPlan& TransactionPlan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionPlan_NEO_2eproto.base);
  return *internal_default_instance();
}


void TransactionPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.TransactionPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  inputs_.Clear();
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.NEO.Proto.TransactionInput inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.TransactionPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_outputs(i), target, stream);
  }

  // repeated .TW.NEO.Proto.TransactionInput inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // int64 fee = 3;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fee(), target);
  }

  // .TW.Common.Proto.SigningError error = 4;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.TransactionPlan)
  return target;
}

size_t TransactionPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.TransactionPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.NEO.Proto.TransactionInput inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 fee = 3;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  // .TW.Common.Proto.SigningError error = 4;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionPlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.NEO.Proto.TransactionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionPlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.NEO.Proto.TransactionPlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.NEO.Proto.TransactionPlan)
    MergeFrom(*source);
  }
}

void TransactionPlan::MergeFrom(const TransactionPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.TransactionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  inputs_.MergeFrom(from.inputs_);
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void TransactionPlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.NEO.Proto.TransactionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPlan::CopyFrom(const TransactionPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.TransactionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPlan::IsInitialized() const {
  return true;
}

void TransactionPlan::InternalSwap(TransactionPlan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionPlan, error_)
      + sizeof(TransactionPlan::error_)
      - PROTOBUF_FIELD_OFFSET(TransactionPlan, fee_)>(
          reinterpret_cast<char*>(&fee_),
          reinterpret_cast<char*>(&other->fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionPlan::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace NEO
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::TransactionInput* Arena::CreateMaybeMessage< ::TW::NEO::Proto::TransactionInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::TransactionInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::TransactionOutput* Arena::CreateMaybeMessage< ::TW::NEO::Proto::TransactionOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::TransactionOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::NEO::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::NEO::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::SigningOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::TransactionOutputPlan* Arena::CreateMaybeMessage< ::TW::NEO::Proto::TransactionOutputPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::TransactionOutputPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::TransactionPlan* Arena::CreateMaybeMessage< ::TW::NEO::Proto::TransactionPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::TransactionPlan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
