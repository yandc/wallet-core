// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NEO.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NEO_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NEO_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NEO_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NEO_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NEO_2eproto;
namespace TW {
namespace NEO {
namespace Proto {
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class TransactionInput;
class TransactionInputDefaultTypeInternal;
extern TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;
class TransactionOutput;
class TransactionOutputDefaultTypeInternal;
extern TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;
class TransactionOutputPlan;
class TransactionOutputPlanDefaultTypeInternal;
extern TransactionOutputPlanDefaultTypeInternal _TransactionOutputPlan_default_instance_;
class TransactionPlan;
class TransactionPlanDefaultTypeInternal;
extern TransactionPlanDefaultTypeInternal _TransactionPlan_default_instance_;
}  // namespace Proto
}  // namespace NEO
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::NEO::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::NEO::Proto::SigningInput>(Arena*);
template<> ::TW::NEO::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::NEO::Proto::SigningOutput>(Arena*);
template<> ::TW::NEO::Proto::TransactionInput* Arena::CreateMaybeMessage<::TW::NEO::Proto::TransactionInput>(Arena*);
template<> ::TW::NEO::Proto::TransactionOutput* Arena::CreateMaybeMessage<::TW::NEO::Proto::TransactionOutput>(Arena*);
template<> ::TW::NEO::Proto::TransactionOutputPlan* Arena::CreateMaybeMessage<::TW::NEO::Proto::TransactionOutputPlan>(Arena*);
template<> ::TW::NEO::Proto::TransactionPlan* Arena::CreateMaybeMessage<::TW::NEO::Proto::TransactionPlan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace NEO {
namespace Proto {

// ===================================================================

class TransactionInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.TransactionInput) */ {
 public:
  inline TransactionInput() : TransactionInput(nullptr) {}
  virtual ~TransactionInput();

  TransactionInput(const TransactionInput& from);
  TransactionInput(TransactionInput&& from) noexcept
    : TransactionInput() {
    *this = ::std::move(from);
  }

  inline TransactionInput& operator=(const TransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInput& operator=(TransactionInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionInput& default_instance();

  static inline const TransactionInput* internal_default_instance() {
    return reinterpret_cast<const TransactionInput*>(
               &_TransactionInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionInput& a, TransactionInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionInput* New() const final {
    return CreateMaybeMessage<TransactionInput>(nullptr);
  }

  TransactionInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionInput& from);
  void MergeFrom(const TransactionInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.TransactionInput";
  }
  protected:
  explicit TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NEO_2eproto);
    return ::descriptor_table_NEO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevHashFieldNumber = 1,
    kAssetIdFieldNumber = 4,
    kValueFieldNumber = 3,
    kPrevIndexFieldNumber = 2,
  };
  // bytes prev_hash = 1;
  void clear_prev_hash();
  const std::string& prev_hash() const;
  void set_prev_hash(const std::string& value);
  void set_prev_hash(std::string&& value);
  void set_prev_hash(const char* value);
  void set_prev_hash(const void* value, size_t size);
  std::string* mutable_prev_hash();
  std::string* release_prev_hash();
  void set_allocated_prev_hash(std::string* prev_hash);
  private:
  const std::string& _internal_prev_hash() const;
  void _internal_set_prev_hash(const std::string& value);
  std::string* _internal_mutable_prev_hash();
  public:

  // string asset_id = 4;
  void clear_asset_id();
  const std::string& asset_id() const;
  void set_asset_id(const std::string& value);
  void set_asset_id(std::string&& value);
  void set_asset_id(const char* value);
  void set_asset_id(const char* value, size_t size);
  std::string* mutable_asset_id();
  std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // int64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed32 prev_index = 2;
  void clear_prev_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_index() const;
  void set_prev_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prev_index() const;
  void _internal_set_prev_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.TransactionInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.TransactionOutput) */ {
 public:
  inline TransactionOutput() : TransactionOutput(nullptr) {}
  virtual ~TransactionOutput();

  TransactionOutput(const TransactionOutput& from);
  TransactionOutput(TransactionOutput&& from) noexcept
    : TransactionOutput() {
    *this = ::std::move(from);
  }

  inline TransactionOutput& operator=(const TransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutput& operator=(TransactionOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionOutput& default_instance();

  static inline const TransactionOutput* internal_default_instance() {
    return reinterpret_cast<const TransactionOutput*>(
               &_TransactionOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionOutput& a, TransactionOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionOutput* New() const final {
    return CreateMaybeMessage<TransactionOutput>(nullptr);
  }

  TransactionOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionOutput& from);
  void MergeFrom(const TransactionOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.TransactionOutput";
  }
  protected:
  explicit TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NEO_2eproto);
    return ::descriptor_table_NEO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIdFieldNumber = 1,
    kToAddressFieldNumber = 3,
    kChangeAddressFieldNumber = 4,
    kAmountFieldNumber = 2,
  };
  // string asset_id = 1;
  void clear_asset_id();
  const std::string& asset_id() const;
  void set_asset_id(const std::string& value);
  void set_asset_id(std::string&& value);
  void set_asset_id(const char* value);
  void set_asset_id(const char* value, size_t size);
  std::string* mutable_asset_id();
  std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // string to_address = 3;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string change_address = 4;
  void clear_change_address();
  const std::string& change_address() const;
  void set_change_address(const std::string& value);
  void set_change_address(std::string&& value);
  void set_change_address(const char* value);
  void set_change_address(const char* value, size_t size);
  std::string* mutable_change_address();
  std::string* release_change_address();
  void set_allocated_change_address(std::string* change_address);
  private:
  const std::string& _internal_change_address() const;
  void _internal_set_change_address(const std::string& value);
  std::string* _internal_mutable_change_address();
  public:

  // sint64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.TransactionOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NEO_2eproto);
    return ::descriptor_table_NEO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
    kPrivateKeyFieldNumber = 3,
    kGasAssetIdFieldNumber = 5,
    kGasChangeAddressFieldNumber = 6,
    kPlanFieldNumber = 7,
    kFeeFieldNumber = 4,
  };
  // repeated .TW.NEO.Proto.TransactionInput inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::TW::NEO::Proto::TransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >*
      mutable_inputs();
  private:
  const ::TW::NEO::Proto::TransactionInput& _internal_inputs(int index) const;
  ::TW::NEO::Proto::TransactionInput* _internal_add_inputs();
  public:
  const ::TW::NEO::Proto::TransactionInput& inputs(int index) const;
  ::TW::NEO::Proto::TransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >&
      inputs() const;

  // repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::TW::NEO::Proto::TransactionOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput >*
      mutable_outputs();
  private:
  const ::TW::NEO::Proto::TransactionOutput& _internal_outputs(int index) const;
  ::TW::NEO::Proto::TransactionOutput* _internal_add_outputs();
  public:
  const ::TW::NEO::Proto::TransactionOutput& outputs(int index) const;
  ::TW::NEO::Proto::TransactionOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput >&
      outputs() const;

  // bytes private_key = 3;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // string gas_asset_id = 5;
  void clear_gas_asset_id();
  const std::string& gas_asset_id() const;
  void set_gas_asset_id(const std::string& value);
  void set_gas_asset_id(std::string&& value);
  void set_gas_asset_id(const char* value);
  void set_gas_asset_id(const char* value, size_t size);
  std::string* mutable_gas_asset_id();
  std::string* release_gas_asset_id();
  void set_allocated_gas_asset_id(std::string* gas_asset_id);
  private:
  const std::string& _internal_gas_asset_id() const;
  void _internal_set_gas_asset_id(const std::string& value);
  std::string* _internal_mutable_gas_asset_id();
  public:

  // string gas_change_address = 6;
  void clear_gas_change_address();
  const std::string& gas_change_address() const;
  void set_gas_change_address(const std::string& value);
  void set_gas_change_address(std::string&& value);
  void set_gas_change_address(const char* value);
  void set_gas_change_address(const char* value, size_t size);
  std::string* mutable_gas_change_address();
  std::string* release_gas_change_address();
  void set_allocated_gas_change_address(std::string* gas_change_address);
  private:
  const std::string& _internal_gas_change_address() const;
  void _internal_set_gas_change_address(const std::string& value);
  std::string* _internal_mutable_gas_change_address();
  public:

  // .TW.NEO.Proto.TransactionPlan plan = 7;
  bool has_plan() const;
  private:
  bool _internal_has_plan() const;
  public:
  void clear_plan();
  const ::TW::NEO::Proto::TransactionPlan& plan() const;
  ::TW::NEO::Proto::TransactionPlan* release_plan();
  ::TW::NEO::Proto::TransactionPlan* mutable_plan();
  void set_allocated_plan(::TW::NEO::Proto::TransactionPlan* plan);
  private:
  const ::TW::NEO::Proto::TransactionPlan& _internal_plan() const;
  ::TW::NEO::Proto::TransactionPlan* _internal_mutable_plan();
  public:
  void unsafe_arena_set_allocated_plan(
      ::TW::NEO::Proto::TransactionPlan* plan);
  ::TW::NEO::Proto::TransactionPlan* unsafe_arena_release_plan();

  // int64 fee = 4;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_change_address_;
  ::TW::NEO::Proto::TransactionPlan* plan_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NEO_2eproto);
    return ::descriptor_table_NEO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutputPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.TransactionOutputPlan) */ {
 public:
  inline TransactionOutputPlan() : TransactionOutputPlan(nullptr) {}
  virtual ~TransactionOutputPlan();

  TransactionOutputPlan(const TransactionOutputPlan& from);
  TransactionOutputPlan(TransactionOutputPlan&& from) noexcept
    : TransactionOutputPlan() {
    *this = ::std::move(from);
  }

  inline TransactionOutputPlan& operator=(const TransactionOutputPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutputPlan& operator=(TransactionOutputPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionOutputPlan& default_instance();

  static inline const TransactionOutputPlan* internal_default_instance() {
    return reinterpret_cast<const TransactionOutputPlan*>(
               &_TransactionOutputPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionOutputPlan& a, TransactionOutputPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutputPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutputPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionOutputPlan* New() const final {
    return CreateMaybeMessage<TransactionOutputPlan>(nullptr);
  }

  TransactionOutputPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionOutputPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionOutputPlan& from);
  void MergeFrom(const TransactionOutputPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutputPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.TransactionOutputPlan";
  }
  protected:
  explicit TransactionOutputPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NEO_2eproto);
    return ::descriptor_table_NEO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIdFieldNumber = 4,
    kToAddressFieldNumber = 5,
    kChangeAddressFieldNumber = 6,
    kAmountFieldNumber = 1,
    kAvailableAmountFieldNumber = 2,
    kChangeFieldNumber = 3,
  };
  // string asset_id = 4;
  void clear_asset_id();
  const std::string& asset_id() const;
  void set_asset_id(const std::string& value);
  void set_asset_id(std::string&& value);
  void set_asset_id(const char* value);
  void set_asset_id(const char* value, size_t size);
  std::string* mutable_asset_id();
  std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // string to_address = 5;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string change_address = 6;
  void clear_change_address();
  const std::string& change_address() const;
  void set_change_address(const std::string& value);
  void set_change_address(std::string&& value);
  void set_change_address(const char* value);
  void set_change_address(const char* value, size_t size);
  std::string* mutable_change_address();
  std::string* release_change_address();
  void set_allocated_change_address(std::string* change_address);
  private:
  const std::string& _internal_change_address() const;
  void _internal_set_change_address(const std::string& value);
  std::string* _internal_mutable_change_address();
  public:

  // int64 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 available_amount = 2;
  void clear_available_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 available_amount() const;
  void set_available_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_available_amount() const;
  void _internal_set_available_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 change = 3;
  void clear_change();
  ::PROTOBUF_NAMESPACE_ID::int64 change() const;
  void set_change(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_change() const;
  void _internal_set_change(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.TransactionOutputPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 available_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class TransactionPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.TransactionPlan) */ {
 public:
  inline TransactionPlan() : TransactionPlan(nullptr) {}
  virtual ~TransactionPlan();

  TransactionPlan(const TransactionPlan& from);
  TransactionPlan(TransactionPlan&& from) noexcept
    : TransactionPlan() {
    *this = ::std::move(from);
  }

  inline TransactionPlan& operator=(const TransactionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionPlan& operator=(TransactionPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionPlan& default_instance();

  static inline const TransactionPlan* internal_default_instance() {
    return reinterpret_cast<const TransactionPlan*>(
               &_TransactionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransactionPlan& a, TransactionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionPlan* New() const final {
    return CreateMaybeMessage<TransactionPlan>(nullptr);
  }

  TransactionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionPlan& from);
  void MergeFrom(const TransactionPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.TransactionPlan";
  }
  protected:
  explicit TransactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NEO_2eproto);
    return ::descriptor_table_NEO_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 1,
    kInputsFieldNumber = 2,
    kFeeFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::TW::NEO::Proto::TransactionOutputPlan* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan >*
      mutable_outputs();
  private:
  const ::TW::NEO::Proto::TransactionOutputPlan& _internal_outputs(int index) const;
  ::TW::NEO::Proto::TransactionOutputPlan* _internal_add_outputs();
  public:
  const ::TW::NEO::Proto::TransactionOutputPlan& outputs(int index) const;
  ::TW::NEO::Proto::TransactionOutputPlan* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan >&
      outputs() const;

  // repeated .TW.NEO.Proto.TransactionInput inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::TW::NEO::Proto::TransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >*
      mutable_inputs();
  private:
  const ::TW::NEO::Proto::TransactionInput& _internal_inputs(int index) const;
  ::TW::NEO::Proto::TransactionInput* _internal_add_inputs();
  public:
  const ::TW::NEO::Proto::TransactionInput& inputs(int index) const;
  ::TW::NEO::Proto::TransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >&
      inputs() const;

  // int64 fee = 3;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .TW.Common.Proto.SigningError error = 4;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.TransactionPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan > outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionInput

// bytes prev_hash = 1;
inline void TransactionInput::clear_prev_hash() {
  prev_hash_.ClearToEmpty();
}
inline const std::string& TransactionInput::prev_hash() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionInput.prev_hash)
  return _internal_prev_hash();
}
inline void TransactionInput::set_prev_hash(const std::string& value) {
  _internal_set_prev_hash(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionInput.prev_hash)
}
inline std::string* TransactionInput::mutable_prev_hash() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionInput.prev_hash)
  return _internal_mutable_prev_hash();
}
inline const std::string& TransactionInput::_internal_prev_hash() const {
  return prev_hash_.Get();
}
inline void TransactionInput::_internal_set_prev_hash(const std::string& value) {
  
  prev_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionInput::set_prev_hash(std::string&& value) {
  
  prev_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.TransactionInput.prev_hash)
}
inline void TransactionInput::set_prev_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.TransactionInput.prev_hash)
}
inline void TransactionInput::set_prev_hash(const void* value,
    size_t size) {
  
  prev_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.TransactionInput.prev_hash)
}
inline std::string* TransactionInput::_internal_mutable_prev_hash() {
  
  return prev_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionInput::release_prev_hash() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionInput.prev_hash)
  return prev_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionInput::set_allocated_prev_hash(std::string* prev_hash) {
  if (prev_hash != nullptr) {
    
  } else {
    
  }
  prev_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionInput.prev_hash)
}

// fixed32 prev_index = 2;
inline void TransactionInput::clear_prev_index() {
  prev_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionInput::_internal_prev_index() const {
  return prev_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionInput::prev_index() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionInput.prev_index)
  return _internal_prev_index();
}
inline void TransactionInput::_internal_set_prev_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prev_index_ = value;
}
inline void TransactionInput::set_prev_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prev_index(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionInput.prev_index)
}

// int64 value = 3;
inline void TransactionInput::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInput::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInput::value() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionInput.value)
  return _internal_value();
}
inline void TransactionInput::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void TransactionInput::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionInput.value)
}

// string asset_id = 4;
inline void TransactionInput::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& TransactionInput::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionInput.asset_id)
  return _internal_asset_id();
}
inline void TransactionInput::set_asset_id(const std::string& value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionInput.asset_id)
}
inline std::string* TransactionInput::mutable_asset_id() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionInput.asset_id)
  return _internal_mutable_asset_id();
}
inline const std::string& TransactionInput::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void TransactionInput::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionInput::set_asset_id(std::string&& value) {
  
  asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.TransactionInput.asset_id)
}
inline void TransactionInput::set_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.TransactionInput.asset_id)
}
inline void TransactionInput::set_asset_id(const char* value,
    size_t size) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.TransactionInput.asset_id)
}
inline std::string* TransactionInput::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionInput::release_asset_id() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionInput.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionInput::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionInput.asset_id)
}

// -------------------------------------------------------------------

// TransactionOutput

// string asset_id = 1;
inline void TransactionOutput::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& TransactionOutput::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutput.asset_id)
  return _internal_asset_id();
}
inline void TransactionOutput::set_asset_id(const std::string& value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutput.asset_id)
}
inline std::string* TransactionOutput::mutable_asset_id() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutput.asset_id)
  return _internal_mutable_asset_id();
}
inline const std::string& TransactionOutput::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void TransactionOutput::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionOutput::set_asset_id(std::string&& value) {
  
  asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.TransactionOutput.asset_id)
}
inline void TransactionOutput::set_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.TransactionOutput.asset_id)
}
inline void TransactionOutput::set_asset_id(const char* value,
    size_t size) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.TransactionOutput.asset_id)
}
inline std::string* TransactionOutput::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionOutput::release_asset_id() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutput.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionOutput::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutput.asset_id)
}

// sint64 amount = 2;
inline void TransactionOutput::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionOutput::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionOutput::amount() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutput.amount)
  return _internal_amount();
}
inline void TransactionOutput::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void TransactionOutput::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutput.amount)
}

// string to_address = 3;
inline void TransactionOutput::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& TransactionOutput::to_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutput.to_address)
  return _internal_to_address();
}
inline void TransactionOutput::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutput.to_address)
}
inline std::string* TransactionOutput::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutput.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& TransactionOutput::_internal_to_address() const {
  return to_address_.Get();
}
inline void TransactionOutput::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionOutput::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.TransactionOutput.to_address)
}
inline void TransactionOutput::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.TransactionOutput.to_address)
}
inline void TransactionOutput::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.TransactionOutput.to_address)
}
inline std::string* TransactionOutput::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionOutput::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutput.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionOutput::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutput.to_address)
}

// string change_address = 4;
inline void TransactionOutput::clear_change_address() {
  change_address_.ClearToEmpty();
}
inline const std::string& TransactionOutput::change_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutput.change_address)
  return _internal_change_address();
}
inline void TransactionOutput::set_change_address(const std::string& value) {
  _internal_set_change_address(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutput.change_address)
}
inline std::string* TransactionOutput::mutable_change_address() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutput.change_address)
  return _internal_mutable_change_address();
}
inline const std::string& TransactionOutput::_internal_change_address() const {
  return change_address_.Get();
}
inline void TransactionOutput::_internal_set_change_address(const std::string& value) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionOutput::set_change_address(std::string&& value) {
  
  change_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.TransactionOutput.change_address)
}
inline void TransactionOutput::set_change_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.TransactionOutput.change_address)
}
inline void TransactionOutput::set_change_address(const char* value,
    size_t size) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.TransactionOutput.change_address)
}
inline std::string* TransactionOutput::_internal_mutable_change_address() {
  
  return change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionOutput::release_change_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutput.change_address)
  return change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionOutput::set_allocated_change_address(std::string* change_address) {
  if (change_address != nullptr) {
    
  } else {
    
  }
  change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutput.change_address)
}

// -------------------------------------------------------------------

// SigningInput

// repeated .TW.NEO.Proto.TransactionInput inputs = 1;
inline int SigningInput::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SigningInput::inputs_size() const {
  return _internal_inputs_size();
}
inline void SigningInput::clear_inputs() {
  inputs_.Clear();
}
inline ::TW::NEO::Proto::TransactionInput* SigningInput::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >*
SigningInput::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.SigningInput.inputs)
  return &inputs_;
}
inline const ::TW::NEO::Proto::TransactionInput& SigningInput::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::TW::NEO::Proto::TransactionInput& SigningInput::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.inputs)
  return _internal_inputs(index);
}
inline ::TW::NEO::Proto::TransactionInput* SigningInput::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::TW::NEO::Proto::TransactionInput* SigningInput::add_inputs() {
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.SigningInput.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >&
SigningInput::inputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.SigningInput.inputs)
  return inputs_;
}

// repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
inline int SigningInput::_internal_outputs_size() const {
  return outputs_.size();
}
inline int SigningInput::outputs_size() const {
  return _internal_outputs_size();
}
inline void SigningInput::clear_outputs() {
  outputs_.Clear();
}
inline ::TW::NEO::Proto::TransactionOutput* SigningInput::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput >*
SigningInput::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.SigningInput.outputs)
  return &outputs_;
}
inline const ::TW::NEO::Proto::TransactionOutput& SigningInput::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::TW::NEO::Proto::TransactionOutput& SigningInput::outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.outputs)
  return _internal_outputs(index);
}
inline ::TW::NEO::Proto::TransactionOutput* SigningInput::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::TW::NEO::Proto::TransactionOutput* SigningInput::add_outputs() {
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.SigningInput.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput >&
SigningInput::outputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.SigningInput.outputs)
  return outputs_;
}

// bytes private_key = 3;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningInput.private_key)
}

// int64 fee = 4;
inline void SigningInput::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigningInput::fee() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.fee)
  return _internal_fee();
}
inline void SigningInput::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
}
inline void SigningInput::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningInput.fee)
}

// string gas_asset_id = 5;
inline void SigningInput::clear_gas_asset_id() {
  gas_asset_id_.ClearToEmpty();
}
inline const std::string& SigningInput::gas_asset_id() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.gas_asset_id)
  return _internal_gas_asset_id();
}
inline void SigningInput::set_gas_asset_id(const std::string& value) {
  _internal_set_gas_asset_id(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningInput.gas_asset_id)
}
inline std::string* SigningInput::mutable_gas_asset_id() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.gas_asset_id)
  return _internal_mutable_gas_asset_id();
}
inline const std::string& SigningInput::_internal_gas_asset_id() const {
  return gas_asset_id_.Get();
}
inline void SigningInput::_internal_set_gas_asset_id(const std::string& value) {
  
  gas_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_gas_asset_id(std::string&& value) {
  
  gas_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.SigningInput.gas_asset_id)
}
inline void SigningInput::set_gas_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gas_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.SigningInput.gas_asset_id)
}
inline void SigningInput::set_gas_asset_id(const char* value,
    size_t size) {
  
  gas_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.SigningInput.gas_asset_id)
}
inline std::string* SigningInput::_internal_mutable_gas_asset_id() {
  
  return gas_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_gas_asset_id() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningInput.gas_asset_id)
  return gas_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_gas_asset_id(std::string* gas_asset_id) {
  if (gas_asset_id != nullptr) {
    
  } else {
    
  }
  gas_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningInput.gas_asset_id)
}

// string gas_change_address = 6;
inline void SigningInput::clear_gas_change_address() {
  gas_change_address_.ClearToEmpty();
}
inline const std::string& SigningInput::gas_change_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.gas_change_address)
  return _internal_gas_change_address();
}
inline void SigningInput::set_gas_change_address(const std::string& value) {
  _internal_set_gas_change_address(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningInput.gas_change_address)
}
inline std::string* SigningInput::mutable_gas_change_address() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.gas_change_address)
  return _internal_mutable_gas_change_address();
}
inline const std::string& SigningInput::_internal_gas_change_address() const {
  return gas_change_address_.Get();
}
inline void SigningInput::_internal_set_gas_change_address(const std::string& value) {
  
  gas_change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_gas_change_address(std::string&& value) {
  
  gas_change_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.SigningInput.gas_change_address)
}
inline void SigningInput::set_gas_change_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gas_change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.SigningInput.gas_change_address)
}
inline void SigningInput::set_gas_change_address(const char* value,
    size_t size) {
  
  gas_change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.SigningInput.gas_change_address)
}
inline std::string* SigningInput::_internal_mutable_gas_change_address() {
  
  return gas_change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_gas_change_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningInput.gas_change_address)
  return gas_change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_gas_change_address(std::string* gas_change_address) {
  if (gas_change_address != nullptr) {
    
  } else {
    
  }
  gas_change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_change_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningInput.gas_change_address)
}

// .TW.NEO.Proto.TransactionPlan plan = 7;
inline bool SigningInput::_internal_has_plan() const {
  return this != internal_default_instance() && plan_ != nullptr;
}
inline bool SigningInput::has_plan() const {
  return _internal_has_plan();
}
inline void SigningInput::clear_plan() {
  if (GetArena() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
}
inline const ::TW::NEO::Proto::TransactionPlan& SigningInput::_internal_plan() const {
  const ::TW::NEO::Proto::TransactionPlan* p = plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NEO::Proto::TransactionPlan&>(
      ::TW::NEO::Proto::_TransactionPlan_default_instance_);
}
inline const ::TW::NEO::Proto::TransactionPlan& SigningInput::plan() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.plan)
  return _internal_plan();
}
inline void SigningInput::unsafe_arena_set_allocated_plan(
    ::TW::NEO::Proto::TransactionPlan* plan) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan_);
  }
  plan_ = plan;
  if (plan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEO.Proto.SigningInput.plan)
}
inline ::TW::NEO::Proto::TransactionPlan* SigningInput::release_plan() {
  
  ::TW::NEO::Proto::TransactionPlan* temp = plan_;
  plan_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::NEO::Proto::TransactionPlan* SigningInput::unsafe_arena_release_plan() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningInput.plan)
  
  ::TW::NEO::Proto::TransactionPlan* temp = plan_;
  plan_ = nullptr;
  return temp;
}
inline ::TW::NEO::Proto::TransactionPlan* SigningInput::_internal_mutable_plan() {
  
  if (plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NEO::Proto::TransactionPlan>(GetArena());
    plan_ = p;
  }
  return plan_;
}
inline ::TW::NEO::Proto::TransactionPlan* SigningInput::mutable_plan() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.plan)
  return _internal_mutable_plan();
}
inline void SigningInput::set_allocated_plan(::TW::NEO::Proto::TransactionPlan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete plan_;
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plan);
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningInput.plan)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningOutput.encoded)
}

// .TW.Common.Proto.SigningError error = 2;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningOutput.error)
}

// -------------------------------------------------------------------

// TransactionOutputPlan

// int64 amount = 1;
inline void TransactionOutputPlan::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionOutputPlan::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionOutputPlan::amount() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.amount)
  return _internal_amount();
}
inline void TransactionOutputPlan::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void TransactionOutputPlan::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.amount)
}

// int64 available_amount = 2;
inline void TransactionOutputPlan::clear_available_amount() {
  available_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionOutputPlan::_internal_available_amount() const {
  return available_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionOutputPlan::available_amount() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.available_amount)
  return _internal_available_amount();
}
inline void TransactionOutputPlan::_internal_set_available_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  available_amount_ = value;
}
inline void TransactionOutputPlan::set_available_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_available_amount(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.available_amount)
}

// int64 change = 3;
inline void TransactionOutputPlan::clear_change() {
  change_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionOutputPlan::_internal_change() const {
  return change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionOutputPlan::change() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.change)
  return _internal_change();
}
inline void TransactionOutputPlan::_internal_set_change(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  change_ = value;
}
inline void TransactionOutputPlan::set_change(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.change)
}

// string asset_id = 4;
inline void TransactionOutputPlan::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& TransactionOutputPlan::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.asset_id)
  return _internal_asset_id();
}
inline void TransactionOutputPlan::set_asset_id(const std::string& value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.asset_id)
}
inline std::string* TransactionOutputPlan::mutable_asset_id() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutputPlan.asset_id)
  return _internal_mutable_asset_id();
}
inline const std::string& TransactionOutputPlan::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void TransactionOutputPlan::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionOutputPlan::set_asset_id(std::string&& value) {
  
  asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.TransactionOutputPlan.asset_id)
}
inline void TransactionOutputPlan::set_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.TransactionOutputPlan.asset_id)
}
inline void TransactionOutputPlan::set_asset_id(const char* value,
    size_t size) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.TransactionOutputPlan.asset_id)
}
inline std::string* TransactionOutputPlan::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionOutputPlan::release_asset_id() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutputPlan.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionOutputPlan::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutputPlan.asset_id)
}

// string to_address = 5;
inline void TransactionOutputPlan::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& TransactionOutputPlan::to_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.to_address)
  return _internal_to_address();
}
inline void TransactionOutputPlan::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.to_address)
}
inline std::string* TransactionOutputPlan::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutputPlan.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& TransactionOutputPlan::_internal_to_address() const {
  return to_address_.Get();
}
inline void TransactionOutputPlan::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionOutputPlan::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.TransactionOutputPlan.to_address)
}
inline void TransactionOutputPlan::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.TransactionOutputPlan.to_address)
}
inline void TransactionOutputPlan::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.TransactionOutputPlan.to_address)
}
inline std::string* TransactionOutputPlan::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionOutputPlan::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutputPlan.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionOutputPlan::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutputPlan.to_address)
}

// string change_address = 6;
inline void TransactionOutputPlan::clear_change_address() {
  change_address_.ClearToEmpty();
}
inline const std::string& TransactionOutputPlan::change_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.change_address)
  return _internal_change_address();
}
inline void TransactionOutputPlan::set_change_address(const std::string& value) {
  _internal_set_change_address(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.change_address)
}
inline std::string* TransactionOutputPlan::mutable_change_address() {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutputPlan.change_address)
  return _internal_mutable_change_address();
}
inline const std::string& TransactionOutputPlan::_internal_change_address() const {
  return change_address_.Get();
}
inline void TransactionOutputPlan::_internal_set_change_address(const std::string& value) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionOutputPlan::set_change_address(std::string&& value) {
  
  change_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NEO.Proto.TransactionOutputPlan.change_address)
}
inline void TransactionOutputPlan::set_change_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NEO.Proto.TransactionOutputPlan.change_address)
}
inline void TransactionOutputPlan::set_change_address(const char* value,
    size_t size) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NEO.Proto.TransactionOutputPlan.change_address)
}
inline std::string* TransactionOutputPlan::_internal_mutable_change_address() {
  
  return change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionOutputPlan::release_change_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutputPlan.change_address)
  return change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionOutputPlan::set_allocated_change_address(std::string* change_address) {
  if (change_address != nullptr) {
    
  } else {
    
  }
  change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutputPlan.change_address)
}

// -------------------------------------------------------------------

// TransactionPlan

// repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
inline int TransactionPlan::_internal_outputs_size() const {
  return outputs_.size();
}
inline int TransactionPlan::outputs_size() const {
  return _internal_outputs_size();
}
inline void TransactionPlan::clear_outputs() {
  outputs_.Clear();
}
inline ::TW::NEO::Proto::TransactionOutputPlan* TransactionPlan::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionPlan.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan >*
TransactionPlan::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.TransactionPlan.outputs)
  return &outputs_;
}
inline const ::TW::NEO::Proto::TransactionOutputPlan& TransactionPlan::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::TW::NEO::Proto::TransactionOutputPlan& TransactionPlan::outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionPlan.outputs)
  return _internal_outputs(index);
}
inline ::TW::NEO::Proto::TransactionOutputPlan* TransactionPlan::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::TW::NEO::Proto::TransactionOutputPlan* TransactionPlan::add_outputs() {
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.TransactionPlan.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan >&
TransactionPlan::outputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.TransactionPlan.outputs)
  return outputs_;
}

// repeated .TW.NEO.Proto.TransactionInput inputs = 2;
inline int TransactionPlan::_internal_inputs_size() const {
  return inputs_.size();
}
inline int TransactionPlan::inputs_size() const {
  return _internal_inputs_size();
}
inline void TransactionPlan::clear_inputs() {
  inputs_.Clear();
}
inline ::TW::NEO::Proto::TransactionInput* TransactionPlan::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionPlan.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >*
TransactionPlan::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.TransactionPlan.inputs)
  return &inputs_;
}
inline const ::TW::NEO::Proto::TransactionInput& TransactionPlan::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::TW::NEO::Proto::TransactionInput& TransactionPlan::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionPlan.inputs)
  return _internal_inputs(index);
}
inline ::TW::NEO::Proto::TransactionInput* TransactionPlan::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::TW::NEO::Proto::TransactionInput* TransactionPlan::add_inputs() {
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.TransactionPlan.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >&
TransactionPlan::inputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.TransactionPlan.inputs)
  return inputs_;
}

// int64 fee = 3;
inline void TransactionPlan::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionPlan::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionPlan::fee() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionPlan.fee)
  return _internal_fee();
}
inline void TransactionPlan::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
}
inline void TransactionPlan::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionPlan.fee)
}

// .TW.Common.Proto.SigningError error = 4;
inline void TransactionPlan::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError TransactionPlan::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError TransactionPlan::error() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionPlan.error)
  return _internal_error();
}
inline void TransactionPlan::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void TransactionPlan::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionPlan.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace NEO
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NEO_2eproto
