// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Polkadot.proto

#include "Polkadot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Balance_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Balance_Transfer_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Era_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Staking_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Bond_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_BondAndNominate_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_BondExtra_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Chill_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Nominate_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Unbond_Polkadot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_WithdrawUnbonded_Polkadot_2eproto;
namespace TW {
namespace Polkadot {
namespace Proto {
class EraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Era> _instance;
} _Era_default_instance_;
class Balance_TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Balance_Transfer> _instance;
} _Balance_Transfer_default_instance_;
class BalanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Balance> _instance;
} _Balance_default_instance_;
class Staking_BondDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_Bond> _instance;
} _Staking_Bond_default_instance_;
class Staking_BondAndNominateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_BondAndNominate> _instance;
} _Staking_BondAndNominate_default_instance_;
class Staking_BondExtraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_BondExtra> _instance;
} _Staking_BondExtra_default_instance_;
class Staking_UnbondDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_Unbond> _instance;
} _Staking_Unbond_default_instance_;
class Staking_WithdrawUnbondedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_WithdrawUnbonded> _instance;
} _Staking_WithdrawUnbonded_default_instance_;
class Staking_NominateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_Nominate> _instance;
} _Staking_Nominate_default_instance_;
class Staking_ChillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_Chill> _instance;
} _Staking_Chill_default_instance_;
class StakingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking> _instance;
} _Staking_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Polkadot
}  // namespace TW
static void InitDefaultsscc_info_Balance_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Balance_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Balance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Balance_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Balance_Polkadot_2eproto}, {
      &scc_info_Balance_Transfer_Polkadot_2eproto.base,}};

static void InitDefaultsscc_info_Balance_Transfer_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Balance_Transfer_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Balance_Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Balance_Transfer_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Balance_Transfer_Polkadot_2eproto}, {}};

static void InitDefaultsscc_info_Era_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Era_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Era();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Era_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Era_Polkadot_2eproto}, {}};

static void InitDefaultsscc_info_SigningInput_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SigningInput_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SigningInput_Polkadot_2eproto}, {
      &scc_info_Era_Polkadot_2eproto.base,
      &scc_info_Balance_Polkadot_2eproto.base,
      &scc_info_Staking_Polkadot_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Polkadot_2eproto}, {}};

static void InitDefaultsscc_info_Staking_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Staking_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Staking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Staking_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Staking_Polkadot_2eproto}, {
      &scc_info_Staking_Bond_Polkadot_2eproto.base,
      &scc_info_Staking_BondAndNominate_Polkadot_2eproto.base,
      &scc_info_Staking_BondExtra_Polkadot_2eproto.base,
      &scc_info_Staking_Unbond_Polkadot_2eproto.base,
      &scc_info_Staking_WithdrawUnbonded_Polkadot_2eproto.base,
      &scc_info_Staking_Nominate_Polkadot_2eproto.base,
      &scc_info_Staking_Chill_Polkadot_2eproto.base,}};

static void InitDefaultsscc_info_Staking_Bond_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Staking_Bond_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Staking_Bond();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Bond_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_Bond_Polkadot_2eproto}, {}};

static void InitDefaultsscc_info_Staking_BondAndNominate_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Staking_BondAndNominate_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Staking_BondAndNominate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_BondAndNominate_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_BondAndNominate_Polkadot_2eproto}, {}};

static void InitDefaultsscc_info_Staking_BondExtra_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Staking_BondExtra_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Staking_BondExtra();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_BondExtra_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_BondExtra_Polkadot_2eproto}, {}};

static void InitDefaultsscc_info_Staking_Chill_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Staking_Chill_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Staking_Chill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Chill_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_Chill_Polkadot_2eproto}, {}};

static void InitDefaultsscc_info_Staking_Nominate_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Staking_Nominate_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Staking_Nominate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Nominate_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_Nominate_Polkadot_2eproto}, {}};

static void InitDefaultsscc_info_Staking_Unbond_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Staking_Unbond_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Staking_Unbond();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Unbond_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_Unbond_Polkadot_2eproto}, {}};

static void InitDefaultsscc_info_Staking_WithdrawUnbonded_Polkadot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Polkadot::Proto::_Staking_WithdrawUnbonded_default_instance_;
    new (ptr) ::TW::Polkadot::Proto::Staking_WithdrawUnbonded();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_WithdrawUnbonded_Polkadot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_WithdrawUnbonded_Polkadot_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Polkadot_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Polkadot_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Polkadot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Polkadot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Era, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Era, block_number_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Era, period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_Transfer, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_Transfer, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Bond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Bond, controller_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Bond, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Bond, reward_destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, controller_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, reward_destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, nominators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondExtra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondExtra, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Unbond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Unbond, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_WithdrawUnbonded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_WithdrawUnbonded, slashing_spans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Nominate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Nominate, nominators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Chill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, block_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, genesis_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, spec_version_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, transaction_version_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, tip_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, era_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, network_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, chain_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, block_number_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningOutput, encoded_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Polkadot::Proto::Era)},
  { 7, -1, sizeof(::TW::Polkadot::Proto::Balance_Transfer)},
  { 14, -1, sizeof(::TW::Polkadot::Proto::Balance)},
  { 21, -1, sizeof(::TW::Polkadot::Proto::Staking_Bond)},
  { 29, -1, sizeof(::TW::Polkadot::Proto::Staking_BondAndNominate)},
  { 38, -1, sizeof(::TW::Polkadot::Proto::Staking_BondExtra)},
  { 44, -1, sizeof(::TW::Polkadot::Proto::Staking_Unbond)},
  { 50, -1, sizeof(::TW::Polkadot::Proto::Staking_WithdrawUnbonded)},
  { 56, -1, sizeof(::TW::Polkadot::Proto::Staking_Nominate)},
  { 62, -1, sizeof(::TW::Polkadot::Proto::Staking_Chill)},
  { 67, -1, sizeof(::TW::Polkadot::Proto::Staking)},
  { 80, -1, sizeof(::TW::Polkadot::Proto::SigningInput)},
  { 99, -1, sizeof(::TW::Polkadot::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Era_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Balance_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Balance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_Bond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_BondAndNominate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_BondExtra_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_Unbond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_WithdrawUnbonded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_Nominate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_Chill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Polkadot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Polkadot.proto\022\021TW.Polkadot.Proto\"+\n\003E"
  "ra\022\024\n\014block_number\030\001 \001(\004\022\016\n\006period\030\002 \001(\004"
  "\"\202\001\n\007Balance\0227\n\010transfer\030\001 \001(\0132#.TW.Polk"
  "adot.Proto.Balance.TransferH\000\032-\n\010Transfe"
  "r\022\022\n\nto_address\030\001 \001(\t\022\r\n\005value\030\002 \001(\014B\017\n\r"
  "message_oneof\"\277\006\n\007Staking\022/\n\004bond\030\001 \001(\0132"
  "\037.TW.Polkadot.Proto.Staking.BondH\000\022G\n\021bo"
  "nd_and_nominate\030\002 \001(\0132*.TW.Polkadot.Prot"
  "o.Staking.BondAndNominateH\000\022:\n\nbond_extr"
  "a\030\003 \001(\0132$.TW.Polkadot.Proto.Staking.Bond"
  "ExtraH\000\0223\n\006unbond\030\004 \001(\0132!.TW.Polkadot.Pr"
  "oto.Staking.UnbondH\000\022H\n\021withdraw_unbonde"
  "d\030\005 \001(\0132+.TW.Polkadot.Proto.Staking.With"
  "drawUnbondedH\000\0227\n\010nominate\030\006 \001(\0132#.TW.Po"
  "lkadot.Proto.Staking.NominateH\000\0221\n\005chill"
  "\030\007 \001(\0132 .TW.Polkadot.Proto.Staking.Chill"
  "H\000\032k\n\004Bond\022\022\n\ncontroller\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\014\022@\n\022reward_destination\030\003 \001(\0162$.TW.P"
  "olkadot.Proto.RewardDestination\032\212\001\n\017Bond"
  "AndNominate\022\022\n\ncontroller\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\014\022@\n\022reward_destination\030\003 \001(\0162$.TW."
  "Polkadot.Proto.RewardDestination\022\022\n\nnomi"
  "nators\030\004 \003(\t\032\032\n\tBondExtra\022\r\n\005value\030\001 \001(\014"
  "\032\027\n\006Unbond\022\r\n\005value\030\001 \001(\014\032*\n\020WithdrawUnb"
  "onded\022\026\n\016slashing_spans\030\001 \001(\005\032\036\n\010Nominat"
  "e\022\022\n\nnominators\030\001 \003(\t\032\007\n\005ChillB\017\n\rmessag"
  "e_oneof\"\253\003\n\014SigningInput\022\022\n\nblock_hash\030\001"
  " \001(\014\022\024\n\014genesis_hash\030\002 \001(\014\022\r\n\005nonce\030\003 \001("
  "\004\022\024\n\014spec_version\030\004 \001(\r\022\033\n\023transaction_v"
  "ersion\030\005 \001(\r\022\013\n\003tip\030\006 \001(\014\022#\n\003era\030\007 \001(\0132\026"
  ".TW.Polkadot.Proto.Era\022\023\n\013private_key\030\010 "
  "\001(\014\022+\n\007network\030\t \001(\0162\032.TW.Polkadot.Proto"
  ".Network\0222\n\014balance_call\030\n \001(\0132\032.TW.Polk"
  "adot.Proto.BalanceH\000\0222\n\014staking_call\030\013 \001"
  "(\0132\032.TW.Polkadot.Proto.StakingH\000\022,\n\010chai"
  "n_id\030\014 \001(\0162\032.TW.Polkadot.Proto.Network\022\024"
  "\n\014block_number\030\r \001(\004B\017\n\rmessage_oneof\" \n"
  "\rSigningOutput\022\017\n\007encoded\030\001 \001(\014*#\n\007Netwo"
  "rk\022\014\n\010POLKADOT\020\000\022\n\n\006KUSAMA\020\002*:\n\021RewardDe"
  "stination\022\n\n\006STAKED\020\000\022\t\n\005STASH\020\001\022\016\n\nCONT"
  "ROLLER\020\002B\027\n\025wallet.core.jni.protob\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Polkadot_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Polkadot_2eproto_sccs[13] = {
  &scc_info_Balance_Polkadot_2eproto.base,
  &scc_info_Balance_Transfer_Polkadot_2eproto.base,
  &scc_info_Era_Polkadot_2eproto.base,
  &scc_info_SigningInput_Polkadot_2eproto.base,
  &scc_info_SigningOutput_Polkadot_2eproto.base,
  &scc_info_Staking_Polkadot_2eproto.base,
  &scc_info_Staking_Bond_Polkadot_2eproto.base,
  &scc_info_Staking_BondAndNominate_Polkadot_2eproto.base,
  &scc_info_Staking_BondExtra_Polkadot_2eproto.base,
  &scc_info_Staking_Chill_Polkadot_2eproto.base,
  &scc_info_Staking_Nominate_Polkadot_2eproto.base,
  &scc_info_Staking_Unbond_Polkadot_2eproto.base,
  &scc_info_Staking_WithdrawUnbonded_Polkadot_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Polkadot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Polkadot_2eproto = {
  false, false, descriptor_table_protodef_Polkadot_2eproto, "Polkadot.proto", 1641,
  &descriptor_table_Polkadot_2eproto_once, descriptor_table_Polkadot_2eproto_sccs, descriptor_table_Polkadot_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_Polkadot_2eproto::offsets,
  file_level_metadata_Polkadot_2eproto, 13, file_level_enum_descriptors_Polkadot_2eproto, file_level_service_descriptors_Polkadot_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Polkadot_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Polkadot_2eproto)), true);
namespace TW {
namespace Polkadot {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Network_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Polkadot_2eproto);
  return file_level_enum_descriptors_Polkadot_2eproto[0];
}
bool Network_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardDestination_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Polkadot_2eproto);
  return file_level_enum_descriptors_Polkadot_2eproto[1];
}
bool RewardDestination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Era::_Internal {
 public:
};

Era::Era(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Era)
}
Era::Era(const Era& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_number_, &from.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&block_number_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Era)
}

void Era::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&block_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&block_number_)) + sizeof(period_));
}

Era::~Era() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Era)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Era::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Era::ArenaDtor(void* object) {
  Era* _this = reinterpret_cast< Era* >(object);
  (void)_this;
}
void Era::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Era::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Era& Era::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Era_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Era::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Era)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&block_number_)) + sizeof(period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Era::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 block_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Era::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Era)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_number = 1;
  if (this->block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_number(), target);
  }

  // uint64 period = 2;
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Era)
  return target;
}

size_t Era::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Era)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_number = 1;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_number());
  }

  // uint64 period = 2;
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_period());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Era::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Era)
  GOOGLE_DCHECK_NE(&from, this);
  const Era* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Era>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Era)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Era)
    MergeFrom(*source);
  }
}

void Era::MergeFrom(const Era& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Era)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_number() != 0) {
    _internal_set_block_number(from._internal_block_number());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
}

void Era::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Era)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Era::CopyFrom(const Era& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Era)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Era::IsInitialized() const {
  return true;
}

void Era::InternalSwap(Era* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Era, period_)
      + sizeof(Era::period_)
      - PROTOBUF_FIELD_OFFSET(Era, block_number_)>(
          reinterpret_cast<char*>(&block_number_),
          reinterpret_cast<char*>(&other->block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Era::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Balance_Transfer::_Internal {
 public:
};

Balance_Transfer::Balance_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Balance.Transfer)
}
Balance_Transfer::Balance_Transfer(const Balance_Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Balance.Transfer)
}

void Balance_Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Balance_Transfer_Polkadot_2eproto.base);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Balance_Transfer::~Balance_Transfer() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Balance.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Balance_Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Balance_Transfer::ArenaDtor(void* object) {
  Balance_Transfer* _this = reinterpret_cast< Balance_Transfer* >(object);
  (void)_this;
}
void Balance_Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balance_Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Balance_Transfer& Balance_Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Balance_Transfer_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Balance_Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Balance.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_address_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balance_Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string to_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Balance.Transfer.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Balance_Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Balance.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string to_address = 1;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Balance.Transfer.to_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to_address(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Balance.Transfer)
  return target;
}

size_t Balance_Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Balance.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to_address = 1;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Balance_Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Balance.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Balance_Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Balance_Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Balance.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Balance.Transfer)
    MergeFrom(*source);
  }
}

void Balance_Transfer::MergeFrom(const Balance_Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Balance.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Balance_Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Balance.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Balance_Transfer::CopyFrom(const Balance_Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Balance.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance_Transfer::IsInitialized() const {
  return true;
}

void Balance_Transfer::InternalSwap(Balance_Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Balance_Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Balance::_Internal {
 public:
  static const ::TW::Polkadot::Proto::Balance_Transfer& transfer(const Balance* msg);
};

const ::TW::Polkadot::Proto::Balance_Transfer&
Balance::_Internal::transfer(const Balance* msg) {
  return *msg->message_oneof_.transfer_;
}
void Balance::set_allocated_transfer(::TW::Polkadot::Proto::Balance_Transfer* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    message_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.transfer)
}
Balance::Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Balance)
}
Balance::Balance(const Balance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Polkadot::Proto::Balance_Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Balance)
}

void Balance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Balance_Polkadot_2eproto.base);
  clear_has_message_oneof();
}

Balance::~Balance() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Balance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Balance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void Balance::ArenaDtor(void* object) {
  Balance* _this = reinterpret_cast< Balance* >(object);
  (void)_this;
}
void Balance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Balance& Balance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Balance_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Balance::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Polkadot.Proto.Balance)
  switch (message_oneof_case()) {
    case kTransfer: {
      if (GetArena() == nullptr) {
        delete message_oneof_.transfer_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void Balance::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Balance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Balance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Balance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transfer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Balance)
  return target;
}

size_t Balance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Balance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_oneof_case()) {
    // .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.transfer_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Balance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  const Balance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Balance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Balance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Balance)
    MergeFrom(*source);
  }
}

void Balance::MergeFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Polkadot::Proto::Balance_Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Balance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Balance::CopyFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance::IsInitialized() const {
  return true;
}

void Balance::InternalSwap(Balance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Balance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_Bond::_Internal {
 public:
};

Staking_Bond::Staking_Bond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.Bond)
}
Staking_Bond::Staking_Bond(const Staking_Bond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_controller().empty()) {
    controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  reward_destination_ = from.reward_destination_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.Bond)
}

void Staking_Bond::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_Bond_Polkadot_2eproto.base);
  controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_destination_ = 0;
}

Staking_Bond::~Staking_Bond() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.Bond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_Bond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  controller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_Bond::ArenaDtor(void* object) {
  Staking_Bond* _this = reinterpret_cast< Staking_Bond* >(object);
  (void)_this;
}
void Staking_Bond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Bond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_Bond& Staking_Bond::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_Bond_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Staking_Bond::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.Bond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_.ClearToEmpty();
  value_.ClearToEmpty();
  reward_destination_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Bond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_controller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Staking.Bond.controller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reward_destination(static_cast<::TW::Polkadot::Proto::RewardDestination>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_Bond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.Bond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string controller = 1;
  if (this->controller().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_controller().data(), static_cast<int>(this->_internal_controller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Staking.Bond.controller");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_controller(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  if (this->reward_destination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reward_destination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.Bond)
  return target;
}

size_t Staking_Bond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.Bond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string controller = 1;
  if (this->controller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_controller());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  if (this->reward_destination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reward_destination());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_Bond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Staking.Bond)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_Bond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_Bond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Staking.Bond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Staking.Bond)
    MergeFrom(*source);
  }
}

void Staking_Bond::MergeFrom(const Staking_Bond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.Bond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controller().size() > 0) {
    _internal_set_controller(from._internal_controller());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.reward_destination() != 0) {
    _internal_set_reward_destination(from._internal_reward_destination());
  }
}

void Staking_Bond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Staking.Bond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_Bond::CopyFrom(const Staking_Bond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.Bond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Bond::IsInitialized() const {
  return true;
}

void Staking_Bond::InternalSwap(Staking_Bond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  controller_.Swap(&other->controller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(reward_destination_, other->reward_destination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Bond::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_BondAndNominate::_Internal {
 public:
};

Staking_BondAndNominate::Staking_BondAndNominate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nominators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.BondAndNominate)
}
Staking_BondAndNominate::Staking_BondAndNominate(const Staking_BondAndNominate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nominators_(from.nominators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_controller().empty()) {
    controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  reward_destination_ = from.reward_destination_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.BondAndNominate)
}

void Staking_BondAndNominate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_BondAndNominate_Polkadot_2eproto.base);
  controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_destination_ = 0;
}

Staking_BondAndNominate::~Staking_BondAndNominate() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.BondAndNominate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_BondAndNominate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  controller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_BondAndNominate::ArenaDtor(void* object) {
  Staking_BondAndNominate* _this = reinterpret_cast< Staking_BondAndNominate* >(object);
  (void)_this;
}
void Staking_BondAndNominate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_BondAndNominate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_BondAndNominate& Staking_BondAndNominate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_BondAndNominate_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Staking_BondAndNominate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nominators_.Clear();
  controller_.ClearToEmpty();
  value_.ClearToEmpty();
  reward_destination_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_BondAndNominate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_controller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Staking.BondAndNominate.controller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reward_destination(static_cast<::TW::Polkadot::Proto::RewardDestination>(val));
        } else goto handle_unusual;
        continue;
      // repeated string nominators = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nominators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Staking.BondAndNominate.nominators"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_BondAndNominate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string controller = 1;
  if (this->controller().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_controller().data(), static_cast<int>(this->_internal_controller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Staking.BondAndNominate.controller");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_controller(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  if (this->reward_destination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reward_destination(), target);
  }

  // repeated string nominators = 4;
  for (int i = 0, n = this->_internal_nominators_size(); i < n; i++) {
    const auto& s = this->_internal_nominators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Staking.BondAndNominate.nominators");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.BondAndNominate)
  return target;
}

size_t Staking_BondAndNominate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string nominators = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nominators_.size());
  for (int i = 0, n = nominators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nominators_.Get(i));
  }

  // string controller = 1;
  if (this->controller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_controller());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  if (this->reward_destination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reward_destination());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_BondAndNominate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_BondAndNominate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_BondAndNominate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Staking.BondAndNominate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Staking.BondAndNominate)
    MergeFrom(*source);
  }
}

void Staking_BondAndNominate::MergeFrom(const Staking_BondAndNominate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nominators_.MergeFrom(from.nominators_);
  if (from.controller().size() > 0) {
    _internal_set_controller(from._internal_controller());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.reward_destination() != 0) {
    _internal_set_reward_destination(from._internal_reward_destination());
  }
}

void Staking_BondAndNominate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_BondAndNominate::CopyFrom(const Staking_BondAndNominate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_BondAndNominate::IsInitialized() const {
  return true;
}

void Staking_BondAndNominate::InternalSwap(Staking_BondAndNominate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nominators_.InternalSwap(&other->nominators_);
  controller_.Swap(&other->controller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(reward_destination_, other->reward_destination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_BondAndNominate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_BondExtra::_Internal {
 public:
};

Staking_BondExtra::Staking_BondExtra(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.BondExtra)
}
Staking_BondExtra::Staking_BondExtra(const Staking_BondExtra& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.BondExtra)
}

void Staking_BondExtra::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_BondExtra_Polkadot_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Staking_BondExtra::~Staking_BondExtra() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.BondExtra)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_BondExtra::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_BondExtra::ArenaDtor(void* object) {
  Staking_BondExtra* _this = reinterpret_cast< Staking_BondExtra* >(object);
  (void)_this;
}
void Staking_BondExtra::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_BondExtra::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_BondExtra& Staking_BondExtra::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_BondExtra_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Staking_BondExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.BondExtra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_BondExtra::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_BondExtra::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.BondExtra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.BondExtra)
  return target;
}

size_t Staking_BondExtra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.BondExtra)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_BondExtra::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Staking.BondExtra)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_BondExtra* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_BondExtra>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Staking.BondExtra)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Staking.BondExtra)
    MergeFrom(*source);
  }
}

void Staking_BondExtra::MergeFrom(const Staking_BondExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.BondExtra)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Staking_BondExtra::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Staking.BondExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_BondExtra::CopyFrom(const Staking_BondExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.BondExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_BondExtra::IsInitialized() const {
  return true;
}

void Staking_BondExtra::InternalSwap(Staking_BondExtra* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_BondExtra::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_Unbond::_Internal {
 public:
};

Staking_Unbond::Staking_Unbond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.Unbond)
}
Staking_Unbond::Staking_Unbond(const Staking_Unbond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.Unbond)
}

void Staking_Unbond::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_Unbond_Polkadot_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Staking_Unbond::~Staking_Unbond() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.Unbond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_Unbond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_Unbond::ArenaDtor(void* object) {
  Staking_Unbond* _this = reinterpret_cast< Staking_Unbond* >(object);
  (void)_this;
}
void Staking_Unbond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Unbond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_Unbond& Staking_Unbond::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_Unbond_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Staking_Unbond::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.Unbond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Unbond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_Unbond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.Unbond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.Unbond)
  return target;
}

size_t Staking_Unbond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.Unbond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_Unbond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Staking.Unbond)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_Unbond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_Unbond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Staking.Unbond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Staking.Unbond)
    MergeFrom(*source);
  }
}

void Staking_Unbond::MergeFrom(const Staking_Unbond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.Unbond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Staking_Unbond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Staking.Unbond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_Unbond::CopyFrom(const Staking_Unbond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.Unbond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Unbond::IsInitialized() const {
  return true;
}

void Staking_Unbond::InternalSwap(Staking_Unbond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Unbond::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_WithdrawUnbonded::_Internal {
 public:
};

Staking_WithdrawUnbonded::Staking_WithdrawUnbonded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
}
Staking_WithdrawUnbonded::Staking_WithdrawUnbonded(const Staking_WithdrawUnbonded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slashing_spans_ = from.slashing_spans_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
}

void Staking_WithdrawUnbonded::SharedCtor() {
  slashing_spans_ = 0;
}

Staking_WithdrawUnbonded::~Staking_WithdrawUnbonded() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_WithdrawUnbonded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Staking_WithdrawUnbonded::ArenaDtor(void* object) {
  Staking_WithdrawUnbonded* _this = reinterpret_cast< Staking_WithdrawUnbonded* >(object);
  (void)_this;
}
void Staking_WithdrawUnbonded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_WithdrawUnbonded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_WithdrawUnbonded& Staking_WithdrawUnbonded::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_WithdrawUnbonded_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Staking_WithdrawUnbonded::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slashing_spans_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_WithdrawUnbonded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 slashing_spans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slashing_spans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_WithdrawUnbonded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slashing_spans = 1;
  if (this->slashing_spans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slashing_spans(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  return target;
}

size_t Staking_WithdrawUnbonded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 slashing_spans = 1;
  if (this->slashing_spans() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slashing_spans());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_WithdrawUnbonded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_WithdrawUnbonded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_WithdrawUnbonded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
    MergeFrom(*source);
  }
}

void Staking_WithdrawUnbonded::MergeFrom(const Staking_WithdrawUnbonded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slashing_spans() != 0) {
    _internal_set_slashing_spans(from._internal_slashing_spans());
  }
}

void Staking_WithdrawUnbonded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_WithdrawUnbonded::CopyFrom(const Staking_WithdrawUnbonded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_WithdrawUnbonded::IsInitialized() const {
  return true;
}

void Staking_WithdrawUnbonded::InternalSwap(Staking_WithdrawUnbonded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(slashing_spans_, other->slashing_spans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_WithdrawUnbonded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_Nominate::_Internal {
 public:
};

Staking_Nominate::Staking_Nominate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nominators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.Nominate)
}
Staking_Nominate::Staking_Nominate(const Staking_Nominate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nominators_(from.nominators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.Nominate)
}

void Staking_Nominate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_Nominate_Polkadot_2eproto.base);
}

Staking_Nominate::~Staking_Nominate() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.Nominate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_Nominate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Staking_Nominate::ArenaDtor(void* object) {
  Staking_Nominate* _this = reinterpret_cast< Staking_Nominate* >(object);
  (void)_this;
}
void Staking_Nominate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Nominate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_Nominate& Staking_Nominate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_Nominate_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Staking_Nominate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.Nominate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nominators_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Nominate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string nominators = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nominators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Staking.Nominate.nominators"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_Nominate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.Nominate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string nominators = 1;
  for (int i = 0, n = this->_internal_nominators_size(); i < n; i++) {
    const auto& s = this->_internal_nominators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Staking.Nominate.nominators");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.Nominate)
  return target;
}

size_t Staking_Nominate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.Nominate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string nominators = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nominators_.size());
  for (int i = 0, n = nominators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nominators_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_Nominate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Staking.Nominate)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_Nominate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_Nominate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Staking.Nominate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Staking.Nominate)
    MergeFrom(*source);
  }
}

void Staking_Nominate::MergeFrom(const Staking_Nominate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.Nominate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nominators_.MergeFrom(from.nominators_);
}

void Staking_Nominate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Staking.Nominate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_Nominate::CopyFrom(const Staking_Nominate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.Nominate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Nominate::IsInitialized() const {
  return true;
}

void Staking_Nominate::InternalSwap(Staking_Nominate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nominators_.InternalSwap(&other->nominators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Nominate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_Chill::_Internal {
 public:
};

Staking_Chill::Staking_Chill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.Chill)
}
Staking_Chill::Staking_Chill(const Staking_Chill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.Chill)
}

void Staking_Chill::SharedCtor() {
}

Staking_Chill::~Staking_Chill() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.Chill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_Chill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Staking_Chill::ArenaDtor(void* object) {
  Staking_Chill* _this = reinterpret_cast< Staking_Chill* >(object);
  (void)_this;
}
void Staking_Chill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Chill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_Chill& Staking_Chill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_Chill_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Staking_Chill::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.Chill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Chill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_Chill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.Chill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.Chill)
  return target;
}

size_t Staking_Chill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.Chill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_Chill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Staking.Chill)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_Chill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_Chill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Staking.Chill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Staking.Chill)
    MergeFrom(*source);
  }
}

void Staking_Chill::MergeFrom(const Staking_Chill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.Chill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Staking_Chill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Staking.Chill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_Chill::CopyFrom(const Staking_Chill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.Chill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Chill::IsInitialized() const {
  return true;
}

void Staking_Chill::InternalSwap(Staking_Chill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Chill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking::_Internal {
 public:
  static const ::TW::Polkadot::Proto::Staking_Bond& bond(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_BondAndNominate& bond_and_nominate(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_BondExtra& bond_extra(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_Unbond& unbond(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& withdraw_unbonded(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_Nominate& nominate(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_Chill& chill(const Staking* msg);
};

const ::TW::Polkadot::Proto::Staking_Bond&
Staking::_Internal::bond(const Staking* msg) {
  return *msg->message_oneof_.bond_;
}
const ::TW::Polkadot::Proto::Staking_BondAndNominate&
Staking::_Internal::bond_and_nominate(const Staking* msg) {
  return *msg->message_oneof_.bond_and_nominate_;
}
const ::TW::Polkadot::Proto::Staking_BondExtra&
Staking::_Internal::bond_extra(const Staking* msg) {
  return *msg->message_oneof_.bond_extra_;
}
const ::TW::Polkadot::Proto::Staking_Unbond&
Staking::_Internal::unbond(const Staking* msg) {
  return *msg->message_oneof_.unbond_;
}
const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded&
Staking::_Internal::withdraw_unbonded(const Staking* msg) {
  return *msg->message_oneof_.withdraw_unbonded_;
}
const ::TW::Polkadot::Proto::Staking_Nominate&
Staking::_Internal::nominate(const Staking* msg) {
  return *msg->message_oneof_.nominate_;
}
const ::TW::Polkadot::Proto::Staking_Chill&
Staking::_Internal::chill(const Staking* msg) {
  return *msg->message_oneof_.chill_;
}
void Staking::set_allocated_bond(::TW::Polkadot::Proto::Staking_Bond* bond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (bond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bond);
    if (message_arena != submessage_arena) {
      bond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bond, submessage_arena);
    }
    set_has_bond();
    message_oneof_.bond_ = bond;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.bond)
}
void Staking::set_allocated_bond_and_nominate(::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (bond_and_nominate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bond_and_nominate);
    if (message_arena != submessage_arena) {
      bond_and_nominate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bond_and_nominate, submessage_arena);
    }
    set_has_bond_and_nominate();
    message_oneof_.bond_and_nominate_ = bond_and_nominate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.bond_and_nominate)
}
void Staking::set_allocated_bond_extra(::TW::Polkadot::Proto::Staking_BondExtra* bond_extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (bond_extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bond_extra);
    if (message_arena != submessage_arena) {
      bond_extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bond_extra, submessage_arena);
    }
    set_has_bond_extra();
    message_oneof_.bond_extra_ = bond_extra;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.bond_extra)
}
void Staking::set_allocated_unbond(::TW::Polkadot::Proto::Staking_Unbond* unbond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (unbond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unbond);
    if (message_arena != submessage_arena) {
      unbond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unbond, submessage_arena);
    }
    set_has_unbond();
    message_oneof_.unbond_ = unbond;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.unbond)
}
void Staking::set_allocated_withdraw_unbonded(::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (withdraw_unbonded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(withdraw_unbonded);
    if (message_arena != submessage_arena) {
      withdraw_unbonded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_unbonded, submessage_arena);
    }
    set_has_withdraw_unbonded();
    message_oneof_.withdraw_unbonded_ = withdraw_unbonded;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.withdraw_unbonded)
}
void Staking::set_allocated_nominate(::TW::Polkadot::Proto::Staking_Nominate* nominate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (nominate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nominate);
    if (message_arena != submessage_arena) {
      nominate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nominate, submessage_arena);
    }
    set_has_nominate();
    message_oneof_.nominate_ = nominate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.nominate)
}
void Staking::set_allocated_chill(::TW::Polkadot::Proto::Staking_Chill* chill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (chill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chill);
    if (message_arena != submessage_arena) {
      chill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chill, submessage_arena);
    }
    set_has_chill();
    message_oneof_.chill_ = chill;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.chill)
}
Staking::Staking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking)
}
Staking::Staking(const Staking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kBond: {
      _internal_mutable_bond()->::TW::Polkadot::Proto::Staking_Bond::MergeFrom(from._internal_bond());
      break;
    }
    case kBondAndNominate: {
      _internal_mutable_bond_and_nominate()->::TW::Polkadot::Proto::Staking_BondAndNominate::MergeFrom(from._internal_bond_and_nominate());
      break;
    }
    case kBondExtra: {
      _internal_mutable_bond_extra()->::TW::Polkadot::Proto::Staking_BondExtra::MergeFrom(from._internal_bond_extra());
      break;
    }
    case kUnbond: {
      _internal_mutable_unbond()->::TW::Polkadot::Proto::Staking_Unbond::MergeFrom(from._internal_unbond());
      break;
    }
    case kWithdrawUnbonded: {
      _internal_mutable_withdraw_unbonded()->::TW::Polkadot::Proto::Staking_WithdrawUnbonded::MergeFrom(from._internal_withdraw_unbonded());
      break;
    }
    case kNominate: {
      _internal_mutable_nominate()->::TW::Polkadot::Proto::Staking_Nominate::MergeFrom(from._internal_nominate());
      break;
    }
    case kChill: {
      _internal_mutable_chill()->::TW::Polkadot::Proto::Staking_Chill::MergeFrom(from._internal_chill());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking)
}

void Staking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_Polkadot_2eproto.base);
  clear_has_message_oneof();
}

Staking::~Staking() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void Staking::ArenaDtor(void* object) {
  Staking* _this = reinterpret_cast< Staking* >(object);
  (void)_this;
}
void Staking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking& Staking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void Staking::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Polkadot.Proto.Staking)
  switch (message_oneof_case()) {
    case kBond: {
      if (GetArena() == nullptr) {
        delete message_oneof_.bond_;
      }
      break;
    }
    case kBondAndNominate: {
      if (GetArena() == nullptr) {
        delete message_oneof_.bond_and_nominate_;
      }
      break;
    }
    case kBondExtra: {
      if (GetArena() == nullptr) {
        delete message_oneof_.bond_extra_;
      }
      break;
    }
    case kUnbond: {
      if (GetArena() == nullptr) {
        delete message_oneof_.unbond_;
      }
      break;
    }
    case kWithdrawUnbonded: {
      if (GetArena() == nullptr) {
        delete message_oneof_.withdraw_unbonded_;
      }
      break;
    }
    case kNominate: {
      if (GetArena() == nullptr) {
        delete message_oneof_.nominate_;
      }
      break;
    }
    case kChill: {
      if (GetArena() == nullptr) {
        delete message_oneof_.chill_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void Staking::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.Staking.Bond bond = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bond(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bond_and_nominate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bond_extra(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbond(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_unbonded(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.Chill chill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_chill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.Staking.Bond bond = 1;
  if (_internal_has_bond()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bond(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
  if (_internal_has_bond_and_nominate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bond_and_nominate(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
  if (_internal_has_bond_extra()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bond_extra(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
  if (_internal_has_unbond()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::unbond(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
  if (_internal_has_withdraw_unbonded()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::withdraw_unbonded(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
  if (_internal_has_nominate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::nominate(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.Chill chill = 7;
  if (_internal_has_chill()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::chill(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking)
  return target;
}

size_t Staking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_oneof_case()) {
    // .TW.Polkadot.Proto.Staking.Bond bond = 1;
    case kBond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.bond_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
    case kBondAndNominate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.bond_and_nominate_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
    case kBondExtra: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.bond_extra_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
    case kUnbond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.unbond_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
    case kWithdrawUnbonded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.withdraw_unbonded_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
    case kNominate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.nominate_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.Chill chill = 7;
    case kChill: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.chill_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.Staking)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.Staking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.Staking)
    MergeFrom(*source);
  }
}

void Staking::MergeFrom(const Staking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_oneof_case()) {
    case kBond: {
      _internal_mutable_bond()->::TW::Polkadot::Proto::Staking_Bond::MergeFrom(from._internal_bond());
      break;
    }
    case kBondAndNominate: {
      _internal_mutable_bond_and_nominate()->::TW::Polkadot::Proto::Staking_BondAndNominate::MergeFrom(from._internal_bond_and_nominate());
      break;
    }
    case kBondExtra: {
      _internal_mutable_bond_extra()->::TW::Polkadot::Proto::Staking_BondExtra::MergeFrom(from._internal_bond_extra());
      break;
    }
    case kUnbond: {
      _internal_mutable_unbond()->::TW::Polkadot::Proto::Staking_Unbond::MergeFrom(from._internal_unbond());
      break;
    }
    case kWithdrawUnbonded: {
      _internal_mutable_withdraw_unbonded()->::TW::Polkadot::Proto::Staking_WithdrawUnbonded::MergeFrom(from._internal_withdraw_unbonded());
      break;
    }
    case kNominate: {
      _internal_mutable_nominate()->::TW::Polkadot::Proto::Staking_Nominate::MergeFrom(from._internal_nominate());
      break;
    }
    case kChill: {
      _internal_mutable_chill()->::TW::Polkadot::Proto::Staking_Chill::MergeFrom(from._internal_chill());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Staking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.Staking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking::CopyFrom(const Staking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking::IsInitialized() const {
  return true;
}

void Staking::InternalSwap(Staking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Polkadot::Proto::Era& era(const SigningInput* msg);
  static const ::TW::Polkadot::Proto::Balance& balance_call(const SigningInput* msg);
  static const ::TW::Polkadot::Proto::Staking& staking_call(const SigningInput* msg);
};

const ::TW::Polkadot::Proto::Era&
SigningInput::_Internal::era(const SigningInput* msg) {
  return *msg->era_;
}
const ::TW::Polkadot::Proto::Balance&
SigningInput::_Internal::balance_call(const SigningInput* msg) {
  return *msg->message_oneof_.balance_call_;
}
const ::TW::Polkadot::Proto::Staking&
SigningInput::_Internal::staking_call(const SigningInput* msg) {
  return *msg->message_oneof_.staking_call_;
}
void SigningInput::set_allocated_balance_call(::TW::Polkadot::Proto::Balance* balance_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (balance_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(balance_call);
    if (message_arena != submessage_arena) {
      balance_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balance_call, submessage_arena);
    }
    set_has_balance_call();
    message_oneof_.balance_call_ = balance_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.balance_call)
}
void SigningInput::set_allocated_staking_call(::TW::Polkadot::Proto::Staking* staking_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (staking_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(staking_call);
    if (message_arena != submessage_arena) {
      staking_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staking_call, submessage_arena);
    }
    set_has_staking_call();
    message_oneof_.staking_call_ = staking_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.staking_call)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArena());
  }
  genesis_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_genesis_hash().empty()) {
    genesis_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_genesis_hash(), 
      GetArena());
  }
  tip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tip().empty()) {
    tip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tip(), 
      GetArena());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  if (from._internal_has_era()) {
    era_ = new ::TW::Polkadot::Proto::Era(*from.era_);
  } else {
    era_ = nullptr;
  }
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_number_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(block_number_));
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kBalanceCall: {
      _internal_mutable_balance_call()->::TW::Polkadot::Proto::Balance::MergeFrom(from._internal_balance_call());
      break;
    }
    case kStakingCall: {
      _internal_mutable_staking_call()->::TW::Polkadot::Proto::Staking::MergeFrom(from._internal_staking_call());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Polkadot_2eproto.base);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  genesis_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&era_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&block_number_) -
      reinterpret_cast<char*>(&era_)) + sizeof(block_number_));
  clear_has_message_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  genesis_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete era_;
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Polkadot.Proto.SigningInput)
  switch (message_oneof_case()) {
    case kBalanceCall: {
      if (GetArena() == nullptr) {
        delete message_oneof_.balance_call_;
      }
      break;
    }
    case kStakingCall: {
      if (GetArena() == nullptr) {
        delete message_oneof_.staking_call_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_hash_.ClearToEmpty();
  genesis_hash_.ClearToEmpty();
  tip_.ClearToEmpty();
  private_key_.ClearToEmpty();
  if (GetArena() == nullptr && era_ != nullptr) {
    delete era_;
  }
  era_ = nullptr;
  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_number_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(block_number_));
  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes genesis_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_genesis_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 spec_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          spec_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 transaction_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          transaction_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Era era = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_era(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes private_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Network network = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network(static_cast<::TW::Polkadot::Proto::Network>(val));
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Balance balance_call = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_balance_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking staking_call = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_staking_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Network chain_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chain_id(static_cast<::TW::Polkadot::Proto::Network>(val));
        } else goto handle_unusual;
        continue;
      // uint64 block_number = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_hash = 1;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_hash(), target);
  }

  // bytes genesis_hash = 2;
  if (this->genesis_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_genesis_hash(), target);
  }

  // uint64 nonce = 3;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_nonce(), target);
  }

  // uint32 spec_version = 4;
  if (this->spec_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_spec_version(), target);
  }

  // uint32 transaction_version = 5;
  if (this->transaction_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_transaction_version(), target);
  }

  // bytes tip = 6;
  if (this->tip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_tip(), target);
  }

  // .TW.Polkadot.Proto.Era era = 7;
  if (this->has_era()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::era(this), target, stream);
  }

  // bytes private_key = 8;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_private_key(), target);
  }

  // .TW.Polkadot.Proto.Network network = 9;
  if (this->network() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_network(), target);
  }

  // .TW.Polkadot.Proto.Balance balance_call = 10;
  if (_internal_has_balance_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::balance_call(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking staking_call = 11;
  if (_internal_has_staking_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::staking_call(this), target, stream);
  }

  // .TW.Polkadot.Proto.Network chain_id = 12;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_chain_id(), target);
  }

  // uint64 block_number = 13;
  if (this->block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_block_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_hash = 1;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes genesis_hash = 2;
  if (this->genesis_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_genesis_hash());
  }

  // bytes tip = 6;
  if (this->tip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tip());
  }

  // bytes private_key = 8;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // .TW.Polkadot.Proto.Era era = 7;
  if (this->has_era()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *era_);
  }

  // uint64 nonce = 3;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // uint32 spec_version = 4;
  if (this->spec_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spec_version());
  }

  // uint32 transaction_version = 5;
  if (this->transaction_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_transaction_version());
  }

  // .TW.Polkadot.Proto.Network network = 9;
  if (this->network() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network());
  }

  // .TW.Polkadot.Proto.Network chain_id = 12;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chain_id());
  }

  // uint64 block_number = 13;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_number());
  }

  switch (message_oneof_case()) {
    // .TW.Polkadot.Proto.Balance balance_call = 10;
    case kBalanceCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.balance_call_);
      break;
    }
    // .TW.Polkadot.Proto.Staking staking_call = 11;
    case kStakingCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.staking_call_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.genesis_hash().size() > 0) {
    _internal_set_genesis_hash(from._internal_genesis_hash());
  }
  if (from.tip().size() > 0) {
    _internal_set_tip(from._internal_tip());
  }
  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.has_era()) {
    _internal_mutable_era()->::TW::Polkadot::Proto::Era::MergeFrom(from._internal_era());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.spec_version() != 0) {
    _internal_set_spec_version(from._internal_spec_version());
  }
  if (from.transaction_version() != 0) {
    _internal_set_transaction_version(from._internal_transaction_version());
  }
  if (from.network() != 0) {
    _internal_set_network(from._internal_network());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.block_number() != 0) {
    _internal_set_block_number(from._internal_block_number());
  }
  switch (from.message_oneof_case()) {
    case kBalanceCall: {
      _internal_mutable_balance_call()->::TW::Polkadot::Proto::Balance::MergeFrom(from._internal_balance_call());
      break;
    }
    case kStakingCall: {
      _internal_mutable_staking_call()->::TW::Polkadot::Proto::Staking::MergeFrom(from._internal_staking_call());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  genesis_hash_.Swap(&other->genesis_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tip_.Swap(&other->tip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, block_number_)
      + sizeof(SigningInput::block_number_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, era_)>(
          reinterpret_cast<char*>(&era_),
          reinterpret_cast<char*>(&other->era_));
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Polkadot_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Polkadot_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Polkadot.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Polkadot.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Polkadot.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Polkadot.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Polkadot
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Era* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Era >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Era >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Balance_Transfer* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Balance_Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Balance* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Balance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Balance >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_Bond* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Bond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_Bond >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_BondAndNominate* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_BondAndNominate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_BondAndNominate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_BondExtra* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_BondExtra >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_BondExtra >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_Unbond* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Unbond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_Unbond >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_WithdrawUnbonded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_WithdrawUnbonded >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_Nominate* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Nominate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_Nominate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_Chill* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Chill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_Chill >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
