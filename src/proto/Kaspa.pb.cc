// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Kaspa.proto

#include "Kaspa.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Kaspa_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Outpoint_Kaspa_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Kaspa_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScriptPublicKey_Kaspa_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Kaspa_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_Kaspa_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Kaspa_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionInput_Kaspa_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Kaspa_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionOutput_Kaspa_2eproto;
namespace TW {
namespace Kaspa {
namespace Proto {
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class TransactionInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionInput> _instance;
} _TransactionInput_default_instance_;
class OutpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Outpoint> _instance;
} _Outpoint_default_instance_;
class ScriptPublicKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScriptPublicKey> _instance;
} _ScriptPublicKey_default_instance_;
class TransactionOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionOutput> _instance;
} _TransactionOutput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Kaspa
}  // namespace TW
static void InitDefaultsscc_info_Outpoint_Kaspa_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Kaspa::Proto::_Outpoint_default_instance_;
    new (ptr) ::TW::Kaspa::Proto::Outpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Outpoint_Kaspa_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Outpoint_Kaspa_2eproto}, {}};

static void InitDefaultsscc_info_ScriptPublicKey_Kaspa_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Kaspa::Proto::_ScriptPublicKey_default_instance_;
    new (ptr) ::TW::Kaspa::Proto::ScriptPublicKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScriptPublicKey_Kaspa_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScriptPublicKey_Kaspa_2eproto}, {}};

static void InitDefaultsscc_info_SigningOutput_Kaspa_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Kaspa::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Kaspa::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SigningOutput_Kaspa_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SigningOutput_Kaspa_2eproto}, {
      &scc_info_Transaction_Kaspa_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_Kaspa_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Kaspa::Proto::_Transaction_default_instance_;
    new (ptr) ::TW::Kaspa::Proto::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_Kaspa_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Transaction_Kaspa_2eproto}, {
      &scc_info_TransactionInput_Kaspa_2eproto.base,
      &scc_info_TransactionOutput_Kaspa_2eproto.base,}};

static void InitDefaultsscc_info_TransactionInput_Kaspa_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Kaspa::Proto::_TransactionInput_default_instance_;
    new (ptr) ::TW::Kaspa::Proto::TransactionInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionInput_Kaspa_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionInput_Kaspa_2eproto}, {
      &scc_info_Outpoint_Kaspa_2eproto.base,}};

static void InitDefaultsscc_info_TransactionOutput_Kaspa_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Kaspa::Proto::_TransactionOutput_default_instance_;
    new (ptr) ::TW::Kaspa::Proto::TransactionOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionOutput_Kaspa_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionOutput_Kaspa_2eproto}, {
      &scc_info_ScriptPublicKey_Kaspa_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Kaspa_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Kaspa_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Kaspa_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Kaspa_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Transaction, version_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Transaction, inputs_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Transaction, outputs_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Transaction, locktime_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Transaction, subnetworkid_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Transaction, gas_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Transaction, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::TransactionInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::TransactionInput, previousoutpoint_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::TransactionInput, signaturescript_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::TransactionInput, sequence_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::TransactionInput, sigopcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Outpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Outpoint, transactionid_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::Outpoint, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::ScriptPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::ScriptPublicKey, scriptpublickey_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::ScriptPublicKey, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::TransactionOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::TransactionOutput, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::TransactionOutput, scriptpublickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::SigningOutput, transaction_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::SigningOutput, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Kaspa::Proto::SigningOutput, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Kaspa::Proto::Transaction)},
  { 12, -1, sizeof(::TW::Kaspa::Proto::TransactionInput)},
  { 21, -1, sizeof(::TW::Kaspa::Proto::Outpoint)},
  { 28, -1, sizeof(::TW::Kaspa::Proto::ScriptPublicKey)},
  { 35, -1, sizeof(::TW::Kaspa::Proto::TransactionOutput)},
  { 42, -1, sizeof(::TW::Kaspa::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Kaspa::Proto::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Kaspa::Proto::_TransactionInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Kaspa::Proto::_Outpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Kaspa::Proto::_ScriptPublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Kaspa::Proto::_TransactionOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Kaspa::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Kaspa_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Kaspa.proto\022\016TW.Kaspa.Proto\032\014Common.pr"
  "oto\"\312\001\n\013Transaction\022\017\n\007version\030\001 \001(\r\0220\n\006"
  "inputs\030\002 \003(\0132 .TW.Kaspa.Proto.Transactio"
  "nInput\0222\n\007outputs\030\003 \003(\0132!.TW.Kaspa.Proto"
  ".TransactionOutput\022\020\n\010lockTime\030\004 \001(\004\022\024\n\014"
  "subnetworkId\030\005 \001(\t\022\013\n\003gas\030\006 \001(\004\022\017\n\007paylo"
  "ad\030\010 \001(\014\"\205\001\n\020TransactionInput\0222\n\020previou"
  "sOutpoint\030\001 \001(\0132\030.TW.Kaspa.Proto.Outpoin"
  "t\022\027\n\017signatureScript\030\002 \001(\t\022\020\n\010sequence\030\003"
  " \001(\004\022\022\n\nsigOpCount\030\004 \001(\r\"0\n\010Outpoint\022\025\n\r"
  "transactionId\030\001 \001(\t\022\r\n\005index\030\002 \001(\r\";\n\017Sc"
  "riptPublicKey\022\027\n\017scriptPublicKey\030\001 \001(\t\022\017"
  "\n\007version\030\002 \001(\r\"]\n\021TransactionOutput\022\016\n\006"
  "amount\030\001 \001(\004\0228\n\017scriptPublicKey\030\002 \001(\0132\037."
  "TW.Kaspa.Proto.ScriptPublicKey\"\230\001\n\rSigni"
  "ngOutput\0220\n\013transaction\030\001 \001(\0132\033.TW.Kaspa"
  ".Proto.Transaction\022\017\n\007encoded\030\002 \001(\014\022\026\n\016t"
  "ransaction_id\030\003 \001(\t\022,\n\005error\030\004 \001(\0162\035.TW."
  "Common.Proto.SigningErrorB\027\n\025wallet.core"
  ".jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Kaspa_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Kaspa_2eproto_sccs[6] = {
  &scc_info_Outpoint_Kaspa_2eproto.base,
  &scc_info_ScriptPublicKey_Kaspa_2eproto.base,
  &scc_info_SigningOutput_Kaspa_2eproto.base,
  &scc_info_Transaction_Kaspa_2eproto.base,
  &scc_info_TransactionInput_Kaspa_2eproto.base,
  &scc_info_TransactionOutput_Kaspa_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Kaspa_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Kaspa_2eproto = {
  false, false, descriptor_table_protodef_Kaspa_2eproto, "Kaspa.proto", 778,
  &descriptor_table_Kaspa_2eproto_once, descriptor_table_Kaspa_2eproto_sccs, descriptor_table_Kaspa_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_Kaspa_2eproto::offsets,
  file_level_metadata_Kaspa_2eproto, 6, file_level_enum_descriptors_Kaspa_2eproto, file_level_service_descriptors_Kaspa_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Kaspa_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Kaspa_2eproto)), true);
namespace TW {
namespace Kaspa {
namespace Proto {

// ===================================================================

class Transaction::_Internal {
 public:
};

Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Kaspa.Proto.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subnetworkid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subnetworkid().empty()) {
    subnetworkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subnetworkid(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  ::memcpy(&locktime_, &from.locktime_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&locktime_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:TW.Kaspa.Proto.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Kaspa_2eproto.base);
  subnetworkid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&locktime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&locktime_)) + sizeof(version_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:TW.Kaspa.Proto.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subnetworkid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Kaspa_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Kaspa.Proto.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  subnetworkid_.ClearToEmpty();
  payload_.ClearToEmpty();
  ::memset(&locktime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&locktime_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.Kaspa.Proto.TransactionInput inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.Kaspa.Proto.TransactionOutput outputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 lockTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          locktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subnetworkId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_subnetworkid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Kaspa.Proto.Transaction.subnetworkId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Kaspa.Proto.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .TW.Kaspa.Proto.TransactionInput inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // repeated .TW.Kaspa.Proto.TransactionOutput outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_outputs(i), target, stream);
  }

  // uint64 lockTime = 4;
  if (this->locktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_locktime(), target);
  }

  // string subnetworkId = 5;
  if (this->subnetworkid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subnetworkid().data(), static_cast<int>(this->_internal_subnetworkid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Kaspa.Proto.Transaction.subnetworkId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subnetworkid(), target);
  }

  // uint64 gas = 6;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas(), target);
  }

  // bytes payload = 8;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Kaspa.Proto.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Kaspa.Proto.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Kaspa.Proto.TransactionInput inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.Kaspa.Proto.TransactionOutput outputs = 3;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subnetworkId = 5;
  if (this->subnetworkid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subnetworkid());
  }

  // bytes payload = 8;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint64 lockTime = 4;
  if (this->locktime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_locktime());
  }

  // uint64 gas = 6;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Kaspa.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Kaspa.Proto.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Kaspa.Proto.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Kaspa.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.subnetworkid().size() > 0) {
    _internal_set_subnetworkid(from._internal_subnetworkid());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.locktime() != 0) {
    _internal_set_locktime(from._internal_locktime());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Kaspa.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Kaspa.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  subnetworkid_.Swap(&other->subnetworkid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, version_)
      + sizeof(Transaction::version_)
      - PROTOBUF_FIELD_OFFSET(Transaction, locktime_)>(
          reinterpret_cast<char*>(&locktime_),
          reinterpret_cast<char*>(&other->locktime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionInput::_Internal {
 public:
  static const ::TW::Kaspa::Proto::Outpoint& previousoutpoint(const TransactionInput* msg);
};

const ::TW::Kaspa::Proto::Outpoint&
TransactionInput::_Internal::previousoutpoint(const TransactionInput* msg) {
  return *msg->previousoutpoint_;
}
TransactionInput::TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Kaspa.Proto.TransactionInput)
}
TransactionInput::TransactionInput(const TransactionInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signaturescript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signaturescript().empty()) {
    signaturescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signaturescript(), 
      GetArena());
  }
  if (from._internal_has_previousoutpoint()) {
    previousoutpoint_ = new ::TW::Kaspa::Proto::Outpoint(*from.previousoutpoint_);
  } else {
    previousoutpoint_ = nullptr;
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigopcount_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(sigopcount_));
  // @@protoc_insertion_point(copy_constructor:TW.Kaspa.Proto.TransactionInput)
}

void TransactionInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionInput_Kaspa_2eproto.base);
  signaturescript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&previousoutpoint_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sigopcount_) -
      reinterpret_cast<char*>(&previousoutpoint_)) + sizeof(sigopcount_));
}

TransactionInput::~TransactionInput() {
  // @@protoc_insertion_point(destructor:TW.Kaspa.Proto.TransactionInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signaturescript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete previousoutpoint_;
}

void TransactionInput::ArenaDtor(void* object) {
  TransactionInput* _this = reinterpret_cast< TransactionInput* >(object);
  (void)_this;
}
void TransactionInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionInput& TransactionInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionInput_Kaspa_2eproto.base);
  return *internal_default_instance();
}


void TransactionInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Kaspa.Proto.TransactionInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signaturescript_.ClearToEmpty();
  if (GetArena() == nullptr && previousoutpoint_ != nullptr) {
    delete previousoutpoint_;
  }
  previousoutpoint_ = nullptr;
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigopcount_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(sigopcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Kaspa.Proto.Outpoint previousOutpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_previousoutpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signatureScript = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signaturescript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Kaspa.Proto.TransactionInput.signatureScript"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sigOpCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sigopcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Kaspa.Proto.TransactionInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Kaspa.Proto.Outpoint previousOutpoint = 1;
  if (this->has_previousoutpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::previousoutpoint(this), target, stream);
  }

  // string signatureScript = 2;
  if (this->signaturescript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signaturescript().data(), static_cast<int>(this->_internal_signaturescript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Kaspa.Proto.TransactionInput.signatureScript");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signaturescript(), target);
  }

  // uint64 sequence = 3;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence(), target);
  }

  // uint32 sigOpCount = 4;
  if (this->sigopcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sigopcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Kaspa.Proto.TransactionInput)
  return target;
}

size_t TransactionInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Kaspa.Proto.TransactionInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signatureScript = 2;
  if (this->signaturescript().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signaturescript());
  }

  // .TW.Kaspa.Proto.Outpoint previousOutpoint = 1;
  if (this->has_previousoutpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previousoutpoint_);
  }

  // uint64 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence());
  }

  // uint32 sigOpCount = 4;
  if (this->sigopcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sigopcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Kaspa.Proto.TransactionInput)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Kaspa.Proto.TransactionInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Kaspa.Proto.TransactionInput)
    MergeFrom(*source);
  }
}

void TransactionInput::MergeFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Kaspa.Proto.TransactionInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signaturescript().size() > 0) {
    _internal_set_signaturescript(from._internal_signaturescript());
  }
  if (from.has_previousoutpoint()) {
    _internal_mutable_previousoutpoint()->::TW::Kaspa::Proto::Outpoint::MergeFrom(from._internal_previousoutpoint());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.sigopcount() != 0) {
    _internal_set_sigopcount(from._internal_sigopcount());
  }
}

void TransactionInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Kaspa.Proto.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInput::CopyFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Kaspa.Proto.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInput::IsInitialized() const {
  return true;
}

void TransactionInput::InternalSwap(TransactionInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signaturescript_.Swap(&other->signaturescript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionInput, sigopcount_)
      + sizeof(TransactionInput::sigopcount_)
      - PROTOBUF_FIELD_OFFSET(TransactionInput, previousoutpoint_)>(
          reinterpret_cast<char*>(&previousoutpoint_),
          reinterpret_cast<char*>(&other->previousoutpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Outpoint::_Internal {
 public:
};

Outpoint::Outpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Kaspa.Proto.Outpoint)
}
Outpoint::Outpoint(const Outpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionid().empty()) {
    transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transactionid(), 
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TW.Kaspa.Proto.Outpoint)
}

void Outpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Outpoint_Kaspa_2eproto.base);
  transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

Outpoint::~Outpoint() {
  // @@protoc_insertion_point(destructor:TW.Kaspa.Proto.Outpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Outpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transactionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Outpoint::ArenaDtor(void* object) {
  Outpoint* _this = reinterpret_cast< Outpoint* >(object);
  (void)_this;
}
void Outpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Outpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Outpoint& Outpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Outpoint_Kaspa_2eproto.base);
  return *internal_default_instance();
}


void Outpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Kaspa.Proto.Outpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactionid_.ClearToEmpty();
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Outpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transactionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transactionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Kaspa.Proto.Outpoint.transactionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Outpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Kaspa.Proto.Outpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transactionId = 1;
  if (this->transactionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transactionid().data(), static_cast<int>(this->_internal_transactionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Kaspa.Proto.Outpoint.transactionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transactionid(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Kaspa.Proto.Outpoint)
  return target;
}

size_t Outpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Kaspa.Proto.Outpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transactionId = 1;
  if (this->transactionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transactionid());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Outpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Kaspa.Proto.Outpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Outpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Outpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Kaspa.Proto.Outpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Kaspa.Proto.Outpoint)
    MergeFrom(*source);
  }
}

void Outpoint::MergeFrom(const Outpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Kaspa.Proto.Outpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transactionid().size() > 0) {
    _internal_set_transactionid(from._internal_transactionid());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Outpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Kaspa.Proto.Outpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Outpoint::CopyFrom(const Outpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Kaspa.Proto.Outpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outpoint::IsInitialized() const {
  return true;
}

void Outpoint::InternalSwap(Outpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactionid_.Swap(&other->transactionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Outpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScriptPublicKey::_Internal {
 public:
};

ScriptPublicKey::ScriptPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Kaspa.Proto.ScriptPublicKey)
}
ScriptPublicKey::ScriptPublicKey(const ScriptPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scriptpublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scriptpublickey().empty()) {
    scriptpublickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scriptpublickey(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:TW.Kaspa.Proto.ScriptPublicKey)
}

void ScriptPublicKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScriptPublicKey_Kaspa_2eproto.base);
  scriptpublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

ScriptPublicKey::~ScriptPublicKey() {
  // @@protoc_insertion_point(destructor:TW.Kaspa.Proto.ScriptPublicKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScriptPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scriptpublickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScriptPublicKey::ArenaDtor(void* object) {
  ScriptPublicKey* _this = reinterpret_cast< ScriptPublicKey* >(object);
  (void)_this;
}
void ScriptPublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScriptPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScriptPublicKey& ScriptPublicKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScriptPublicKey_Kaspa_2eproto.base);
  return *internal_default_instance();
}


void ScriptPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Kaspa.Proto.ScriptPublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scriptpublickey_.ClearToEmpty();
  version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScriptPublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scriptPublicKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scriptpublickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScriptPublicKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Kaspa.Proto.ScriptPublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scriptPublicKey = 1;
  if (this->scriptpublickey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scriptpublickey().data(), static_cast<int>(this->_internal_scriptpublickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scriptpublickey(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Kaspa.Proto.ScriptPublicKey)
  return target;
}

size_t ScriptPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Kaspa.Proto.ScriptPublicKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scriptPublicKey = 1;
  if (this->scriptpublickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scriptpublickey());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScriptPublicKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Kaspa.Proto.ScriptPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ScriptPublicKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScriptPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Kaspa.Proto.ScriptPublicKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Kaspa.Proto.ScriptPublicKey)
    MergeFrom(*source);
  }
}

void ScriptPublicKey::MergeFrom(const ScriptPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Kaspa.Proto.ScriptPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scriptpublickey().size() > 0) {
    _internal_set_scriptpublickey(from._internal_scriptpublickey());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void ScriptPublicKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Kaspa.Proto.ScriptPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScriptPublicKey::CopyFrom(const ScriptPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Kaspa.Proto.ScriptPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScriptPublicKey::IsInitialized() const {
  return true;
}

void ScriptPublicKey::InternalSwap(ScriptPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scriptpublickey_.Swap(&other->scriptpublickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScriptPublicKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionOutput::_Internal {
 public:
  static const ::TW::Kaspa::Proto::ScriptPublicKey& scriptpublickey(const TransactionOutput* msg);
};

const ::TW::Kaspa::Proto::ScriptPublicKey&
TransactionOutput::_Internal::scriptpublickey(const TransactionOutput* msg) {
  return *msg->scriptpublickey_;
}
TransactionOutput::TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Kaspa.Proto.TransactionOutput)
}
TransactionOutput::TransactionOutput(const TransactionOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scriptpublickey()) {
    scriptpublickey_ = new ::TW::Kaspa::Proto::ScriptPublicKey(*from.scriptpublickey_);
  } else {
    scriptpublickey_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Kaspa.Proto.TransactionOutput)
}

void TransactionOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionOutput_Kaspa_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scriptpublickey_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&scriptpublickey_)) + sizeof(amount_));
}

TransactionOutput::~TransactionOutput() {
  // @@protoc_insertion_point(destructor:TW.Kaspa.Proto.TransactionOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scriptpublickey_;
}

void TransactionOutput::ArenaDtor(void* object) {
  TransactionOutput* _this = reinterpret_cast< TransactionOutput* >(object);
  (void)_this;
}
void TransactionOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionOutput& TransactionOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionOutput_Kaspa_2eproto.base);
  return *internal_default_instance();
}


void TransactionOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Kaspa.Proto.TransactionOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scriptpublickey_ != nullptr) {
    delete scriptpublickey_;
  }
  scriptpublickey_ = nullptr;
  amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Kaspa.Proto.ScriptPublicKey scriptPublicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptpublickey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Kaspa.Proto.TransactionOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // .TW.Kaspa.Proto.ScriptPublicKey scriptPublicKey = 2;
  if (this->has_scriptpublickey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scriptpublickey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Kaspa.Proto.TransactionOutput)
  return target;
}

size_t TransactionOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Kaspa.Proto.TransactionOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Kaspa.Proto.ScriptPublicKey scriptPublicKey = 2;
  if (this->has_scriptpublickey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scriptpublickey_);
  }

  // uint64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Kaspa.Proto.TransactionOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Kaspa.Proto.TransactionOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Kaspa.Proto.TransactionOutput)
    MergeFrom(*source);
  }
}

void TransactionOutput::MergeFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Kaspa.Proto.TransactionOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scriptpublickey()) {
    _internal_mutable_scriptpublickey()->::TW::Kaspa::Proto::ScriptPublicKey::MergeFrom(from._internal_scriptpublickey());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransactionOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Kaspa.Proto.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionOutput::CopyFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Kaspa.Proto.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOutput::IsInitialized() const {
  return true;
}

void TransactionOutput::InternalSwap(TransactionOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionOutput, amount_)
      + sizeof(TransactionOutput::amount_)
      - PROTOBUF_FIELD_OFFSET(TransactionOutput, scriptpublickey_)>(
          reinterpret_cast<char*>(&scriptpublickey_),
          reinterpret_cast<char*>(&other->scriptpublickey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
  static const ::TW::Kaspa::Proto::Transaction& transaction(const SigningOutput* msg);
};

const ::TW::Kaspa::Proto::Transaction&
SigningOutput::_Internal::transaction(const SigningOutput* msg) {
  return *msg->transaction_;
}
SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Kaspa.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArena());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::TW::Kaspa::Proto::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Kaspa.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Kaspa_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(error_));
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Kaspa.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Kaspa_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Kaspa.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Kaspa.Proto.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encoded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transaction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Kaspa.Proto.SigningOutput.transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Kaspa.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Kaspa.Proto.Transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // bytes encoded = 2;
  if (this->encoded().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encoded(), target);
  }

  // string transaction_id = 3;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Kaspa.Proto.SigningOutput.transaction_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_transaction_id(), target);
  }

  // .TW.Common.Proto.SigningError error = 4;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Kaspa.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Kaspa.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 2;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // string transaction_id = 3;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // .TW.Kaspa.Proto.Transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .TW.Common.Proto.SigningError error = 4;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Kaspa.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Kaspa.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Kaspa.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Kaspa.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (from.transaction_id().size() > 0) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from.has_transaction()) {
    _internal_mutable_transaction()->::TW::Kaspa::Proto::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Kaspa.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Kaspa.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningOutput, error_)
      + sizeof(SigningOutput::error_)
      - PROTOBUF_FIELD_OFFSET(SigningOutput, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Kaspa
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Kaspa::Proto::Transaction* Arena::CreateMaybeMessage< ::TW::Kaspa::Proto::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Kaspa::Proto::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Kaspa::Proto::TransactionInput* Arena::CreateMaybeMessage< ::TW::Kaspa::Proto::TransactionInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Kaspa::Proto::TransactionInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Kaspa::Proto::Outpoint* Arena::CreateMaybeMessage< ::TW::Kaspa::Proto::Outpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Kaspa::Proto::Outpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Kaspa::Proto::ScriptPublicKey* Arena::CreateMaybeMessage< ::TW::Kaspa::Proto::ScriptPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Kaspa::Proto::ScriptPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Kaspa::Proto::TransactionOutput* Arena::CreateMaybeMessage< ::TW::Kaspa::Proto::TransactionOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Kaspa::Proto::TransactionOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Kaspa::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Kaspa::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Kaspa::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
