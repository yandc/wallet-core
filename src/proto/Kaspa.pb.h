// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Kaspa.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Kaspa_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Kaspa_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Kaspa_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Kaspa_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Kaspa_2eproto;
namespace TW {
namespace Kaspa {
namespace Proto {
class Outpoint;
class OutpointDefaultTypeInternal;
extern OutpointDefaultTypeInternal _Outpoint_default_instance_;
class ScriptPublicKey;
class ScriptPublicKeyDefaultTypeInternal;
extern ScriptPublicKeyDefaultTypeInternal _ScriptPublicKey_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionInput;
class TransactionInputDefaultTypeInternal;
extern TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;
class TransactionOutput;
class TransactionOutputDefaultTypeInternal;
extern TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;
}  // namespace Proto
}  // namespace Kaspa
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Kaspa::Proto::Outpoint* Arena::CreateMaybeMessage<::TW::Kaspa::Proto::Outpoint>(Arena*);
template<> ::TW::Kaspa::Proto::ScriptPublicKey* Arena::CreateMaybeMessage<::TW::Kaspa::Proto::ScriptPublicKey>(Arena*);
template<> ::TW::Kaspa::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Kaspa::Proto::SigningOutput>(Arena*);
template<> ::TW::Kaspa::Proto::Transaction* Arena::CreateMaybeMessage<::TW::Kaspa::Proto::Transaction>(Arena*);
template<> ::TW::Kaspa::Proto::TransactionInput* Arena::CreateMaybeMessage<::TW::Kaspa::Proto::TransactionInput>(Arena*);
template<> ::TW::Kaspa::Proto::TransactionOutput* Arena::CreateMaybeMessage<::TW::Kaspa::Proto::TransactionOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Kaspa {
namespace Proto {

// ===================================================================

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Kaspa.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Kaspa.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Kaspa_2eproto);
    return ::descriptor_table_Kaspa_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kOutputsFieldNumber = 3,
    kSubnetworkIdFieldNumber = 5,
    kPayloadFieldNumber = 8,
    kLockTimeFieldNumber = 4,
    kGasFieldNumber = 6,
    kVersionFieldNumber = 1,
  };
  // repeated .TW.Kaspa.Proto.TransactionInput inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::TW::Kaspa::Proto::TransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionInput >*
      mutable_inputs();
  private:
  const ::TW::Kaspa::Proto::TransactionInput& _internal_inputs(int index) const;
  ::TW::Kaspa::Proto::TransactionInput* _internal_add_inputs();
  public:
  const ::TW::Kaspa::Proto::TransactionInput& inputs(int index) const;
  ::TW::Kaspa::Proto::TransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionInput >&
      inputs() const;

  // repeated .TW.Kaspa.Proto.TransactionOutput outputs = 3;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::TW::Kaspa::Proto::TransactionOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionOutput >*
      mutable_outputs();
  private:
  const ::TW::Kaspa::Proto::TransactionOutput& _internal_outputs(int index) const;
  ::TW::Kaspa::Proto::TransactionOutput* _internal_add_outputs();
  public:
  const ::TW::Kaspa::Proto::TransactionOutput& outputs(int index) const;
  ::TW::Kaspa::Proto::TransactionOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionOutput >&
      outputs() const;

  // string subnetworkId = 5;
  void clear_subnetworkid();
  const std::string& subnetworkid() const;
  void set_subnetworkid(const std::string& value);
  void set_subnetworkid(std::string&& value);
  void set_subnetworkid(const char* value);
  void set_subnetworkid(const char* value, size_t size);
  std::string* mutable_subnetworkid();
  std::string* release_subnetworkid();
  void set_allocated_subnetworkid(std::string* subnetworkid);
  private:
  const std::string& _internal_subnetworkid() const;
  void _internal_set_subnetworkid(const std::string& value);
  std::string* _internal_mutable_subnetworkid();
  public:

  // bytes payload = 8;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 lockTime = 4;
  void clear_locktime();
  ::PROTOBUF_NAMESPACE_ID::uint64 locktime() const;
  void set_locktime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_locktime() const;
  void _internal_set_locktime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 gas = 6;
  void clear_gas();
  ::PROTOBUF_NAMESPACE_ID::uint64 gas() const;
  void set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gas() const;
  void _internal_set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Kaspa.Proto.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionOutput > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnetworkid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 locktime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Kaspa_2eproto;
};
// -------------------------------------------------------------------

class TransactionInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Kaspa.Proto.TransactionInput) */ {
 public:
  inline TransactionInput() : TransactionInput(nullptr) {}
  virtual ~TransactionInput();

  TransactionInput(const TransactionInput& from);
  TransactionInput(TransactionInput&& from) noexcept
    : TransactionInput() {
    *this = ::std::move(from);
  }

  inline TransactionInput& operator=(const TransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInput& operator=(TransactionInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionInput& default_instance();

  static inline const TransactionInput* internal_default_instance() {
    return reinterpret_cast<const TransactionInput*>(
               &_TransactionInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionInput& a, TransactionInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionInput* New() const final {
    return CreateMaybeMessage<TransactionInput>(nullptr);
  }

  TransactionInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionInput& from);
  void MergeFrom(const TransactionInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Kaspa.Proto.TransactionInput";
  }
  protected:
  explicit TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Kaspa_2eproto);
    return ::descriptor_table_Kaspa_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureScriptFieldNumber = 2,
    kPreviousOutpointFieldNumber = 1,
    kSequenceFieldNumber = 3,
    kSigOpCountFieldNumber = 4,
  };
  // string signatureScript = 2;
  void clear_signaturescript();
  const std::string& signaturescript() const;
  void set_signaturescript(const std::string& value);
  void set_signaturescript(std::string&& value);
  void set_signaturescript(const char* value);
  void set_signaturescript(const char* value, size_t size);
  std::string* mutable_signaturescript();
  std::string* release_signaturescript();
  void set_allocated_signaturescript(std::string* signaturescript);
  private:
  const std::string& _internal_signaturescript() const;
  void _internal_set_signaturescript(const std::string& value);
  std::string* _internal_mutable_signaturescript();
  public:

  // .TW.Kaspa.Proto.Outpoint previousOutpoint = 1;
  bool has_previousoutpoint() const;
  private:
  bool _internal_has_previousoutpoint() const;
  public:
  void clear_previousoutpoint();
  const ::TW::Kaspa::Proto::Outpoint& previousoutpoint() const;
  ::TW::Kaspa::Proto::Outpoint* release_previousoutpoint();
  ::TW::Kaspa::Proto::Outpoint* mutable_previousoutpoint();
  void set_allocated_previousoutpoint(::TW::Kaspa::Proto::Outpoint* previousoutpoint);
  private:
  const ::TW::Kaspa::Proto::Outpoint& _internal_previousoutpoint() const;
  ::TW::Kaspa::Proto::Outpoint* _internal_mutable_previousoutpoint();
  public:
  void unsafe_arena_set_allocated_previousoutpoint(
      ::TW::Kaspa::Proto::Outpoint* previousoutpoint);
  ::TW::Kaspa::Proto::Outpoint* unsafe_arena_release_previousoutpoint();

  // uint64 sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sigOpCount = 4;
  void clear_sigopcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 sigopcount() const;
  void set_sigopcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sigopcount() const;
  void _internal_set_sigopcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Kaspa.Proto.TransactionInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signaturescript_;
  ::TW::Kaspa::Proto::Outpoint* previousoutpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sigopcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Kaspa_2eproto;
};
// -------------------------------------------------------------------

class Outpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Kaspa.Proto.Outpoint) */ {
 public:
  inline Outpoint() : Outpoint(nullptr) {}
  virtual ~Outpoint();

  Outpoint(const Outpoint& from);
  Outpoint(Outpoint&& from) noexcept
    : Outpoint() {
    *this = ::std::move(from);
  }

  inline Outpoint& operator=(const Outpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Outpoint& operator=(Outpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Outpoint& default_instance();

  static inline const Outpoint* internal_default_instance() {
    return reinterpret_cast<const Outpoint*>(
               &_Outpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Outpoint& a, Outpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Outpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Outpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Outpoint* New() const final {
    return CreateMaybeMessage<Outpoint>(nullptr);
  }

  Outpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Outpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Outpoint& from);
  void MergeFrom(const Outpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Outpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Kaspa.Proto.Outpoint";
  }
  protected:
  explicit Outpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Kaspa_2eproto);
    return ::descriptor_table_Kaspa_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string transactionId = 1;
  void clear_transactionid();
  const std::string& transactionid() const;
  void set_transactionid(const std::string& value);
  void set_transactionid(std::string&& value);
  void set_transactionid(const char* value);
  void set_transactionid(const char* value, size_t size);
  std::string* mutable_transactionid();
  std::string* release_transactionid();
  void set_allocated_transactionid(std::string* transactionid);
  private:
  const std::string& _internal_transactionid() const;
  void _internal_set_transactionid(const std::string& value);
  std::string* _internal_mutable_transactionid();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Kaspa.Proto.Outpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Kaspa_2eproto;
};
// -------------------------------------------------------------------

class ScriptPublicKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Kaspa.Proto.ScriptPublicKey) */ {
 public:
  inline ScriptPublicKey() : ScriptPublicKey(nullptr) {}
  virtual ~ScriptPublicKey();

  ScriptPublicKey(const ScriptPublicKey& from);
  ScriptPublicKey(ScriptPublicKey&& from) noexcept
    : ScriptPublicKey() {
    *this = ::std::move(from);
  }

  inline ScriptPublicKey& operator=(const ScriptPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScriptPublicKey& operator=(ScriptPublicKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScriptPublicKey& default_instance();

  static inline const ScriptPublicKey* internal_default_instance() {
    return reinterpret_cast<const ScriptPublicKey*>(
               &_ScriptPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScriptPublicKey& a, ScriptPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(ScriptPublicKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScriptPublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScriptPublicKey* New() const final {
    return CreateMaybeMessage<ScriptPublicKey>(nullptr);
  }

  ScriptPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScriptPublicKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScriptPublicKey& from);
  void MergeFrom(const ScriptPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptPublicKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Kaspa.Proto.ScriptPublicKey";
  }
  protected:
  explicit ScriptPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Kaspa_2eproto);
    return ::descriptor_table_Kaspa_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPublicKeyFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string scriptPublicKey = 1;
  void clear_scriptpublickey();
  const std::string& scriptpublickey() const;
  void set_scriptpublickey(const std::string& value);
  void set_scriptpublickey(std::string&& value);
  void set_scriptpublickey(const char* value);
  void set_scriptpublickey(const char* value, size_t size);
  std::string* mutable_scriptpublickey();
  std::string* release_scriptpublickey();
  void set_allocated_scriptpublickey(std::string* scriptpublickey);
  private:
  const std::string& _internal_scriptpublickey() const;
  void _internal_set_scriptpublickey(const std::string& value);
  std::string* _internal_mutable_scriptpublickey();
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Kaspa.Proto.ScriptPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptpublickey_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Kaspa_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Kaspa.Proto.TransactionOutput) */ {
 public:
  inline TransactionOutput() : TransactionOutput(nullptr) {}
  virtual ~TransactionOutput();

  TransactionOutput(const TransactionOutput& from);
  TransactionOutput(TransactionOutput&& from) noexcept
    : TransactionOutput() {
    *this = ::std::move(from);
  }

  inline TransactionOutput& operator=(const TransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutput& operator=(TransactionOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionOutput& default_instance();

  static inline const TransactionOutput* internal_default_instance() {
    return reinterpret_cast<const TransactionOutput*>(
               &_TransactionOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionOutput& a, TransactionOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionOutput* New() const final {
    return CreateMaybeMessage<TransactionOutput>(nullptr);
  }

  TransactionOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionOutput& from);
  void MergeFrom(const TransactionOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Kaspa.Proto.TransactionOutput";
  }
  protected:
  explicit TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Kaspa_2eproto);
    return ::descriptor_table_Kaspa_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPublicKeyFieldNumber = 2,
    kAmountFieldNumber = 1,
  };
  // .TW.Kaspa.Proto.ScriptPublicKey scriptPublicKey = 2;
  bool has_scriptpublickey() const;
  private:
  bool _internal_has_scriptpublickey() const;
  public:
  void clear_scriptpublickey();
  const ::TW::Kaspa::Proto::ScriptPublicKey& scriptpublickey() const;
  ::TW::Kaspa::Proto::ScriptPublicKey* release_scriptpublickey();
  ::TW::Kaspa::Proto::ScriptPublicKey* mutable_scriptpublickey();
  void set_allocated_scriptpublickey(::TW::Kaspa::Proto::ScriptPublicKey* scriptpublickey);
  private:
  const ::TW::Kaspa::Proto::ScriptPublicKey& _internal_scriptpublickey() const;
  ::TW::Kaspa::Proto::ScriptPublicKey* _internal_mutable_scriptpublickey();
  public:
  void unsafe_arena_set_allocated_scriptpublickey(
      ::TW::Kaspa::Proto::ScriptPublicKey* scriptpublickey);
  ::TW::Kaspa::Proto::ScriptPublicKey* unsafe_arena_release_scriptpublickey();

  // uint64 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Kaspa.Proto.TransactionOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Kaspa::Proto::ScriptPublicKey* scriptpublickey_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Kaspa_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Kaspa.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Kaspa.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Kaspa_2eproto);
    return ::descriptor_table_Kaspa_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 2,
    kTransactionIdFieldNumber = 3,
    kTransactionFieldNumber = 1,
    kErrorFieldNumber = 4,
  };
  // bytes encoded = 2;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string transaction_id = 3;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // .TW.Kaspa.Proto.Transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::TW::Kaspa::Proto::Transaction& transaction() const;
  ::TW::Kaspa::Proto::Transaction* release_transaction();
  ::TW::Kaspa::Proto::Transaction* mutable_transaction();
  void set_allocated_transaction(::TW::Kaspa::Proto::Transaction* transaction);
  private:
  const ::TW::Kaspa::Proto::Transaction& _internal_transaction() const;
  ::TW::Kaspa::Proto::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::TW::Kaspa::Proto::Transaction* transaction);
  ::TW::Kaspa::Proto::Transaction* unsafe_arena_release_transaction();

  // .TW.Common.Proto.SigningError error = 4;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Kaspa.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::TW::Kaspa::Proto::Transaction* transaction_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Kaspa_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// uint32 version = 1;
inline void Transaction::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::version() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.Transaction.version)
  return _internal_version();
}
inline void Transaction::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void Transaction::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.Transaction.version)
}

// repeated .TW.Kaspa.Proto.TransactionInput inputs = 2;
inline int Transaction::_internal_inputs_size() const {
  return inputs_.size();
}
inline int Transaction::inputs_size() const {
  return _internal_inputs_size();
}
inline void Transaction::clear_inputs() {
  inputs_.Clear();
}
inline ::TW::Kaspa::Proto::TransactionInput* Transaction::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.Transaction.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionInput >*
Transaction::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Kaspa.Proto.Transaction.inputs)
  return &inputs_;
}
inline const ::TW::Kaspa::Proto::TransactionInput& Transaction::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::TW::Kaspa::Proto::TransactionInput& Transaction::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.Transaction.inputs)
  return _internal_inputs(index);
}
inline ::TW::Kaspa::Proto::TransactionInput* Transaction::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::TW::Kaspa::Proto::TransactionInput* Transaction::add_inputs() {
  // @@protoc_insertion_point(field_add:TW.Kaspa.Proto.Transaction.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionInput >&
Transaction::inputs() const {
  // @@protoc_insertion_point(field_list:TW.Kaspa.Proto.Transaction.inputs)
  return inputs_;
}

// repeated .TW.Kaspa.Proto.TransactionOutput outputs = 3;
inline int Transaction::_internal_outputs_size() const {
  return outputs_.size();
}
inline int Transaction::outputs_size() const {
  return _internal_outputs_size();
}
inline void Transaction::clear_outputs() {
  outputs_.Clear();
}
inline ::TW::Kaspa::Proto::TransactionOutput* Transaction::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.Transaction.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionOutput >*
Transaction::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Kaspa.Proto.Transaction.outputs)
  return &outputs_;
}
inline const ::TW::Kaspa::Proto::TransactionOutput& Transaction::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::TW::Kaspa::Proto::TransactionOutput& Transaction::outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.Transaction.outputs)
  return _internal_outputs(index);
}
inline ::TW::Kaspa::Proto::TransactionOutput* Transaction::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::TW::Kaspa::Proto::TransactionOutput* Transaction::add_outputs() {
  // @@protoc_insertion_point(field_add:TW.Kaspa.Proto.Transaction.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Kaspa::Proto::TransactionOutput >&
Transaction::outputs() const {
  // @@protoc_insertion_point(field_list:TW.Kaspa.Proto.Transaction.outputs)
  return outputs_;
}

// uint64 lockTime = 4;
inline void Transaction::clear_locktime() {
  locktime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_locktime() const {
  return locktime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::locktime() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.Transaction.lockTime)
  return _internal_locktime();
}
inline void Transaction::_internal_set_locktime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  locktime_ = value;
}
inline void Transaction::set_locktime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_locktime(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.Transaction.lockTime)
}

// string subnetworkId = 5;
inline void Transaction::clear_subnetworkid() {
  subnetworkid_.ClearToEmpty();
}
inline const std::string& Transaction::subnetworkid() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.Transaction.subnetworkId)
  return _internal_subnetworkid();
}
inline void Transaction::set_subnetworkid(const std::string& value) {
  _internal_set_subnetworkid(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.Transaction.subnetworkId)
}
inline std::string* Transaction::mutable_subnetworkid() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.Transaction.subnetworkId)
  return _internal_mutable_subnetworkid();
}
inline const std::string& Transaction::_internal_subnetworkid() const {
  return subnetworkid_.Get();
}
inline void Transaction::_internal_set_subnetworkid(const std::string& value) {
  
  subnetworkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_subnetworkid(std::string&& value) {
  
  subnetworkid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Kaspa.Proto.Transaction.subnetworkId)
}
inline void Transaction::set_subnetworkid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnetworkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Kaspa.Proto.Transaction.subnetworkId)
}
inline void Transaction::set_subnetworkid(const char* value,
    size_t size) {
  
  subnetworkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Kaspa.Proto.Transaction.subnetworkId)
}
inline std::string* Transaction::_internal_mutable_subnetworkid() {
  
  return subnetworkid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_subnetworkid() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.Transaction.subnetworkId)
  return subnetworkid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_subnetworkid(std::string* subnetworkid) {
  if (subnetworkid != nullptr) {
    
  } else {
    
  }
  subnetworkid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnetworkid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.Transaction.subnetworkId)
}

// uint64 gas = 6;
inline void Transaction::clear_gas() {
  gas_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_gas() const {
  return gas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::gas() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.Transaction.gas)
  return _internal_gas();
}
inline void Transaction::_internal_set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gas_ = value;
}
inline void Transaction::set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.Transaction.gas)
}

// bytes payload = 8;
inline void Transaction::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Transaction::payload() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.Transaction.payload)
  return _internal_payload();
}
inline void Transaction::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.Transaction.payload)
}
inline std::string* Transaction::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.Transaction.payload)
  return _internal_mutable_payload();
}
inline const std::string& Transaction::_internal_payload() const {
  return payload_.Get();
}
inline void Transaction::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Kaspa.Proto.Transaction.payload)
}
inline void Transaction::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Kaspa.Proto.Transaction.payload)
}
inline void Transaction::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Kaspa.Proto.Transaction.payload)
}
inline std::string* Transaction::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_payload() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.Transaction.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.Transaction.payload)
}

// -------------------------------------------------------------------

// TransactionInput

// .TW.Kaspa.Proto.Outpoint previousOutpoint = 1;
inline bool TransactionInput::_internal_has_previousoutpoint() const {
  return this != internal_default_instance() && previousoutpoint_ != nullptr;
}
inline bool TransactionInput::has_previousoutpoint() const {
  return _internal_has_previousoutpoint();
}
inline void TransactionInput::clear_previousoutpoint() {
  if (GetArena() == nullptr && previousoutpoint_ != nullptr) {
    delete previousoutpoint_;
  }
  previousoutpoint_ = nullptr;
}
inline const ::TW::Kaspa::Proto::Outpoint& TransactionInput::_internal_previousoutpoint() const {
  const ::TW::Kaspa::Proto::Outpoint* p = previousoutpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Kaspa::Proto::Outpoint&>(
      ::TW::Kaspa::Proto::_Outpoint_default_instance_);
}
inline const ::TW::Kaspa::Proto::Outpoint& TransactionInput::previousoutpoint() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.TransactionInput.previousOutpoint)
  return _internal_previousoutpoint();
}
inline void TransactionInput::unsafe_arena_set_allocated_previousoutpoint(
    ::TW::Kaspa::Proto::Outpoint* previousoutpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previousoutpoint_);
  }
  previousoutpoint_ = previousoutpoint;
  if (previousoutpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Kaspa.Proto.TransactionInput.previousOutpoint)
}
inline ::TW::Kaspa::Proto::Outpoint* TransactionInput::release_previousoutpoint() {
  
  ::TW::Kaspa::Proto::Outpoint* temp = previousoutpoint_;
  previousoutpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Kaspa::Proto::Outpoint* TransactionInput::unsafe_arena_release_previousoutpoint() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.TransactionInput.previousOutpoint)
  
  ::TW::Kaspa::Proto::Outpoint* temp = previousoutpoint_;
  previousoutpoint_ = nullptr;
  return temp;
}
inline ::TW::Kaspa::Proto::Outpoint* TransactionInput::_internal_mutable_previousoutpoint() {
  
  if (previousoutpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Kaspa::Proto::Outpoint>(GetArena());
    previousoutpoint_ = p;
  }
  return previousoutpoint_;
}
inline ::TW::Kaspa::Proto::Outpoint* TransactionInput::mutable_previousoutpoint() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.TransactionInput.previousOutpoint)
  return _internal_mutable_previousoutpoint();
}
inline void TransactionInput::set_allocated_previousoutpoint(::TW::Kaspa::Proto::Outpoint* previousoutpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previousoutpoint_;
  }
  if (previousoutpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previousoutpoint);
    if (message_arena != submessage_arena) {
      previousoutpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previousoutpoint, submessage_arena);
    }
    
  } else {
    
  }
  previousoutpoint_ = previousoutpoint;
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.TransactionInput.previousOutpoint)
}

// string signatureScript = 2;
inline void TransactionInput::clear_signaturescript() {
  signaturescript_.ClearToEmpty();
}
inline const std::string& TransactionInput::signaturescript() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.TransactionInput.signatureScript)
  return _internal_signaturescript();
}
inline void TransactionInput::set_signaturescript(const std::string& value) {
  _internal_set_signaturescript(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.TransactionInput.signatureScript)
}
inline std::string* TransactionInput::mutable_signaturescript() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.TransactionInput.signatureScript)
  return _internal_mutable_signaturescript();
}
inline const std::string& TransactionInput::_internal_signaturescript() const {
  return signaturescript_.Get();
}
inline void TransactionInput::_internal_set_signaturescript(const std::string& value) {
  
  signaturescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionInput::set_signaturescript(std::string&& value) {
  
  signaturescript_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Kaspa.Proto.TransactionInput.signatureScript)
}
inline void TransactionInput::set_signaturescript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signaturescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Kaspa.Proto.TransactionInput.signatureScript)
}
inline void TransactionInput::set_signaturescript(const char* value,
    size_t size) {
  
  signaturescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Kaspa.Proto.TransactionInput.signatureScript)
}
inline std::string* TransactionInput::_internal_mutable_signaturescript() {
  
  return signaturescript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionInput::release_signaturescript() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.TransactionInput.signatureScript)
  return signaturescript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionInput::set_allocated_signaturescript(std::string* signaturescript) {
  if (signaturescript != nullptr) {
    
  } else {
    
  }
  signaturescript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signaturescript,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.TransactionInput.signatureScript)
}

// uint64 sequence = 3;
inline void TransactionInput::clear_sequence() {
  sequence_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionInput::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionInput::sequence() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.TransactionInput.sequence)
  return _internal_sequence();
}
inline void TransactionInput::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_ = value;
}
inline void TransactionInput::set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.TransactionInput.sequence)
}

// uint32 sigOpCount = 4;
inline void TransactionInput::clear_sigopcount() {
  sigopcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionInput::_internal_sigopcount() const {
  return sigopcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionInput::sigopcount() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.TransactionInput.sigOpCount)
  return _internal_sigopcount();
}
inline void TransactionInput::_internal_set_sigopcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sigopcount_ = value;
}
inline void TransactionInput::set_sigopcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sigopcount(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.TransactionInput.sigOpCount)
}

// -------------------------------------------------------------------

// Outpoint

// string transactionId = 1;
inline void Outpoint::clear_transactionid() {
  transactionid_.ClearToEmpty();
}
inline const std::string& Outpoint::transactionid() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.Outpoint.transactionId)
  return _internal_transactionid();
}
inline void Outpoint::set_transactionid(const std::string& value) {
  _internal_set_transactionid(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.Outpoint.transactionId)
}
inline std::string* Outpoint::mutable_transactionid() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.Outpoint.transactionId)
  return _internal_mutable_transactionid();
}
inline const std::string& Outpoint::_internal_transactionid() const {
  return transactionid_.Get();
}
inline void Outpoint::_internal_set_transactionid(const std::string& value) {
  
  transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Outpoint::set_transactionid(std::string&& value) {
  
  transactionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Kaspa.Proto.Outpoint.transactionId)
}
inline void Outpoint::set_transactionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Kaspa.Proto.Outpoint.transactionId)
}
inline void Outpoint::set_transactionid(const char* value,
    size_t size) {
  
  transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Kaspa.Proto.Outpoint.transactionId)
}
inline std::string* Outpoint::_internal_mutable_transactionid() {
  
  return transactionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Outpoint::release_transactionid() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.Outpoint.transactionId)
  return transactionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Outpoint::set_allocated_transactionid(std::string* transactionid) {
  if (transactionid != nullptr) {
    
  } else {
    
  }
  transactionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.Outpoint.transactionId)
}

// uint32 index = 2;
inline void Outpoint::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Outpoint::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Outpoint::index() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.Outpoint.index)
  return _internal_index();
}
inline void Outpoint::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void Outpoint::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.Outpoint.index)
}

// -------------------------------------------------------------------

// ScriptPublicKey

// string scriptPublicKey = 1;
inline void ScriptPublicKey::clear_scriptpublickey() {
  scriptpublickey_.ClearToEmpty();
}
inline const std::string& ScriptPublicKey::scriptpublickey() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey)
  return _internal_scriptpublickey();
}
inline void ScriptPublicKey::set_scriptpublickey(const std::string& value) {
  _internal_set_scriptpublickey(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey)
}
inline std::string* ScriptPublicKey::mutable_scriptpublickey() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey)
  return _internal_mutable_scriptpublickey();
}
inline const std::string& ScriptPublicKey::_internal_scriptpublickey() const {
  return scriptpublickey_.Get();
}
inline void ScriptPublicKey::_internal_set_scriptpublickey(const std::string& value) {
  
  scriptpublickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScriptPublicKey::set_scriptpublickey(std::string&& value) {
  
  scriptpublickey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey)
}
inline void ScriptPublicKey::set_scriptpublickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scriptpublickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey)
}
inline void ScriptPublicKey::set_scriptpublickey(const char* value,
    size_t size) {
  
  scriptpublickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey)
}
inline std::string* ScriptPublicKey::_internal_mutable_scriptpublickey() {
  
  return scriptpublickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScriptPublicKey::release_scriptpublickey() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey)
  return scriptpublickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScriptPublicKey::set_allocated_scriptpublickey(std::string* scriptpublickey) {
  if (scriptpublickey != nullptr) {
    
  } else {
    
  }
  scriptpublickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptpublickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.ScriptPublicKey.scriptPublicKey)
}

// uint32 version = 2;
inline void ScriptPublicKey::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScriptPublicKey::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScriptPublicKey::version() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.ScriptPublicKey.version)
  return _internal_version();
}
inline void ScriptPublicKey::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void ScriptPublicKey::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.ScriptPublicKey.version)
}

// -------------------------------------------------------------------

// TransactionOutput

// uint64 amount = 1;
inline void TransactionOutput::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionOutput::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionOutput::amount() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.TransactionOutput.amount)
  return _internal_amount();
}
inline void TransactionOutput::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void TransactionOutput::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.TransactionOutput.amount)
}

// .TW.Kaspa.Proto.ScriptPublicKey scriptPublicKey = 2;
inline bool TransactionOutput::_internal_has_scriptpublickey() const {
  return this != internal_default_instance() && scriptpublickey_ != nullptr;
}
inline bool TransactionOutput::has_scriptpublickey() const {
  return _internal_has_scriptpublickey();
}
inline void TransactionOutput::clear_scriptpublickey() {
  if (GetArena() == nullptr && scriptpublickey_ != nullptr) {
    delete scriptpublickey_;
  }
  scriptpublickey_ = nullptr;
}
inline const ::TW::Kaspa::Proto::ScriptPublicKey& TransactionOutput::_internal_scriptpublickey() const {
  const ::TW::Kaspa::Proto::ScriptPublicKey* p = scriptpublickey_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Kaspa::Proto::ScriptPublicKey&>(
      ::TW::Kaspa::Proto::_ScriptPublicKey_default_instance_);
}
inline const ::TW::Kaspa::Proto::ScriptPublicKey& TransactionOutput::scriptpublickey() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.TransactionOutput.scriptPublicKey)
  return _internal_scriptpublickey();
}
inline void TransactionOutput::unsafe_arena_set_allocated_scriptpublickey(
    ::TW::Kaspa::Proto::ScriptPublicKey* scriptpublickey) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scriptpublickey_);
  }
  scriptpublickey_ = scriptpublickey;
  if (scriptpublickey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Kaspa.Proto.TransactionOutput.scriptPublicKey)
}
inline ::TW::Kaspa::Proto::ScriptPublicKey* TransactionOutput::release_scriptpublickey() {
  
  ::TW::Kaspa::Proto::ScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Kaspa::Proto::ScriptPublicKey* TransactionOutput::unsafe_arena_release_scriptpublickey() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.TransactionOutput.scriptPublicKey)
  
  ::TW::Kaspa::Proto::ScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
  return temp;
}
inline ::TW::Kaspa::Proto::ScriptPublicKey* TransactionOutput::_internal_mutable_scriptpublickey() {
  
  if (scriptpublickey_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Kaspa::Proto::ScriptPublicKey>(GetArena());
    scriptpublickey_ = p;
  }
  return scriptpublickey_;
}
inline ::TW::Kaspa::Proto::ScriptPublicKey* TransactionOutput::mutable_scriptpublickey() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.TransactionOutput.scriptPublicKey)
  return _internal_mutable_scriptpublickey();
}
inline void TransactionOutput::set_allocated_scriptpublickey(::TW::Kaspa::Proto::ScriptPublicKey* scriptpublickey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scriptpublickey_;
  }
  if (scriptpublickey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scriptpublickey);
    if (message_arena != submessage_arena) {
      scriptpublickey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptpublickey, submessage_arena);
    }
    
  } else {
    
  }
  scriptpublickey_ = scriptpublickey;
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.TransactionOutput.scriptPublicKey)
}

// -------------------------------------------------------------------

// SigningOutput

// .TW.Kaspa.Proto.Transaction transaction = 1;
inline bool SigningOutput::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool SigningOutput::has_transaction() const {
  return _internal_has_transaction();
}
inline void SigningOutput::clear_transaction() {
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::TW::Kaspa::Proto::Transaction& SigningOutput::_internal_transaction() const {
  const ::TW::Kaspa::Proto::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Kaspa::Proto::Transaction&>(
      ::TW::Kaspa::Proto::_Transaction_default_instance_);
}
inline const ::TW::Kaspa::Proto::Transaction& SigningOutput::transaction() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.SigningOutput.transaction)
  return _internal_transaction();
}
inline void SigningOutput::unsafe_arena_set_allocated_transaction(
    ::TW::Kaspa::Proto::Transaction* transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Kaspa.Proto.SigningOutput.transaction)
}
inline ::TW::Kaspa::Proto::Transaction* SigningOutput::release_transaction() {
  
  ::TW::Kaspa::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Kaspa::Proto::Transaction* SigningOutput::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.SigningOutput.transaction)
  
  ::TW::Kaspa::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::TW::Kaspa::Proto::Transaction* SigningOutput::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Kaspa::Proto::Transaction>(GetArena());
    transaction_ = p;
  }
  return transaction_;
}
inline ::TW::Kaspa::Proto::Transaction* SigningOutput::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.SigningOutput.transaction)
  return _internal_mutable_transaction();
}
inline void SigningOutput::set_allocated_transaction(::TW::Kaspa::Proto::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.SigningOutput.transaction)
}

// bytes encoded = 2;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Kaspa.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Kaspa.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Kaspa.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.SigningOutput.encoded)
}

// string transaction_id = 3;
inline void SigningOutput::clear_transaction_id() {
  transaction_id_.ClearToEmpty();
}
inline const std::string& SigningOutput::transaction_id() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.SigningOutput.transaction_id)
  return _internal_transaction_id();
}
inline void SigningOutput::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.SigningOutput.transaction_id)
}
inline std::string* SigningOutput::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:TW.Kaspa.Proto.SigningOutput.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& SigningOutput::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void SigningOutput::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_transaction_id(std::string&& value) {
  
  transaction_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Kaspa.Proto.SigningOutput.transaction_id)
}
inline void SigningOutput::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Kaspa.Proto.SigningOutput.transaction_id)
}
inline void SigningOutput::set_transaction_id(const char* value,
    size_t size) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Kaspa.Proto.SigningOutput.transaction_id)
}
inline std::string* SigningOutput::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_transaction_id() {
  // @@protoc_insertion_point(field_release:TW.Kaspa.Proto.SigningOutput.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Kaspa.Proto.SigningOutput.transaction_id)
}

// .TW.Common.Proto.SigningError error = 4;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Kaspa.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Kaspa.Proto.SigningOutput.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Kaspa
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Kaspa_2eproto
