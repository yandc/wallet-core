// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NULS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NULS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NULS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NULS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NULS_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NULS_2eproto;
namespace TW {
namespace NULS {
namespace Proto {
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionCoinFrom;
class TransactionCoinFromDefaultTypeInternal;
extern TransactionCoinFromDefaultTypeInternal _TransactionCoinFrom_default_instance_;
class TransactionCoinTo;
class TransactionCoinToDefaultTypeInternal;
extern TransactionCoinToDefaultTypeInternal _TransactionCoinTo_default_instance_;
}  // namespace Proto
}  // namespace NULS
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::NULS::Proto::Signature* Arena::CreateMaybeMessage<::TW::NULS::Proto::Signature>(Arena*);
template<> ::TW::NULS::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::NULS::Proto::SigningInput>(Arena*);
template<> ::TW::NULS::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::NULS::Proto::SigningOutput>(Arena*);
template<> ::TW::NULS::Proto::Transaction* Arena::CreateMaybeMessage<::TW::NULS::Proto::Transaction>(Arena*);
template<> ::TW::NULS::Proto::TransactionCoinFrom* Arena::CreateMaybeMessage<::TW::NULS::Proto::TransactionCoinFrom>(Arena*);
template<> ::TW::NULS::Proto::TransactionCoinTo* Arena::CreateMaybeMessage<::TW::NULS::Proto::TransactionCoinTo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace NULS {
namespace Proto {

// ===================================================================

class TransactionCoinFrom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NULS.Proto.TransactionCoinFrom) */ {
 public:
  inline TransactionCoinFrom() : TransactionCoinFrom(nullptr) {}
  virtual ~TransactionCoinFrom();

  TransactionCoinFrom(const TransactionCoinFrom& from);
  TransactionCoinFrom(TransactionCoinFrom&& from) noexcept
    : TransactionCoinFrom() {
    *this = ::std::move(from);
  }

  inline TransactionCoinFrom& operator=(const TransactionCoinFrom& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionCoinFrom& operator=(TransactionCoinFrom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionCoinFrom& default_instance();

  static inline const TransactionCoinFrom* internal_default_instance() {
    return reinterpret_cast<const TransactionCoinFrom*>(
               &_TransactionCoinFrom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionCoinFrom& a, TransactionCoinFrom& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionCoinFrom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionCoinFrom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionCoinFrom* New() const final {
    return CreateMaybeMessage<TransactionCoinFrom>(nullptr);
  }

  TransactionCoinFrom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionCoinFrom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionCoinFrom& from);
  void MergeFrom(const TransactionCoinFrom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionCoinFrom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NULS.Proto.TransactionCoinFrom";
  }
  protected:
  explicit TransactionCoinFrom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NULS_2eproto);
    return ::descriptor_table_NULS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 1,
    kIdAmountFieldNumber = 4,
    kNonceFieldNumber = 5,
    kAssetsChainidFieldNumber = 2,
    kAssetsIdFieldNumber = 3,
    kLockedFieldNumber = 6,
  };
  // string from_address = 1;
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // bytes id_amount = 4;
  void clear_id_amount();
  const std::string& id_amount() const;
  void set_id_amount(const std::string& value);
  void set_id_amount(std::string&& value);
  void set_id_amount(const char* value);
  void set_id_amount(const void* value, size_t size);
  std::string* mutable_id_amount();
  std::string* release_id_amount();
  void set_allocated_id_amount(std::string* id_amount);
  private:
  const std::string& _internal_id_amount() const;
  void _internal_set_id_amount(const std::string& value);
  std::string* _internal_mutable_id_amount();
  public:

  // bytes nonce = 5;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // uint32 assets_chainid = 2;
  void clear_assets_chainid();
  ::PROTOBUF_NAMESPACE_ID::uint32 assets_chainid() const;
  void set_assets_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assets_chainid() const;
  void _internal_set_assets_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 assets_id = 3;
  void clear_assets_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 assets_id() const;
  void set_assets_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assets_id() const;
  void _internal_set_assets_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 locked = 6;
  void clear_locked();
  ::PROTOBUF_NAMESPACE_ID::uint32 locked() const;
  void set_locked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_locked() const;
  void _internal_set_locked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NULS.Proto.TransactionCoinFrom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assets_chainid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assets_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NULS_2eproto;
};
// -------------------------------------------------------------------

class TransactionCoinTo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NULS.Proto.TransactionCoinTo) */ {
 public:
  inline TransactionCoinTo() : TransactionCoinTo(nullptr) {}
  virtual ~TransactionCoinTo();

  TransactionCoinTo(const TransactionCoinTo& from);
  TransactionCoinTo(TransactionCoinTo&& from) noexcept
    : TransactionCoinTo() {
    *this = ::std::move(from);
  }

  inline TransactionCoinTo& operator=(const TransactionCoinTo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionCoinTo& operator=(TransactionCoinTo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionCoinTo& default_instance();

  static inline const TransactionCoinTo* internal_default_instance() {
    return reinterpret_cast<const TransactionCoinTo*>(
               &_TransactionCoinTo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionCoinTo& a, TransactionCoinTo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionCoinTo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionCoinTo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionCoinTo* New() const final {
    return CreateMaybeMessage<TransactionCoinTo>(nullptr);
  }

  TransactionCoinTo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionCoinTo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionCoinTo& from);
  void MergeFrom(const TransactionCoinTo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionCoinTo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NULS.Proto.TransactionCoinTo";
  }
  protected:
  explicit TransactionCoinTo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NULS_2eproto);
    return ::descriptor_table_NULS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 1,
    kIdAmountFieldNumber = 4,
    kAssetsChainidFieldNumber = 2,
    kAssetsIdFieldNumber = 3,
    kLockTimeFieldNumber = 5,
  };
  // string to_address = 1;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // bytes id_amount = 4;
  void clear_id_amount();
  const std::string& id_amount() const;
  void set_id_amount(const std::string& value);
  void set_id_amount(std::string&& value);
  void set_id_amount(const char* value);
  void set_id_amount(const void* value, size_t size);
  std::string* mutable_id_amount();
  std::string* release_id_amount();
  void set_allocated_id_amount(std::string* id_amount);
  private:
  const std::string& _internal_id_amount() const;
  void _internal_set_id_amount(const std::string& value);
  std::string* _internal_mutable_id_amount();
  public:

  // uint32 assets_chainid = 2;
  void clear_assets_chainid();
  ::PROTOBUF_NAMESPACE_ID::uint32 assets_chainid() const;
  void set_assets_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assets_chainid() const;
  void _internal_set_assets_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 assets_id = 3;
  void clear_assets_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 assets_id() const;
  void set_assets_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assets_id() const;
  void _internal_set_assets_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lock_time = 5;
  void clear_lock_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 lock_time() const;
  void set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lock_time() const;
  void _internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NULS.Proto.TransactionCoinTo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assets_chainid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assets_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lock_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NULS_2eproto;
};
// -------------------------------------------------------------------

class Signature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NULS.Proto.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  virtual ~Signature();

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signature& default_instance();

  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(nullptr);
  }

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NULS.Proto.Signature";
  }
  protected:
  explicit Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NULS_2eproto);
    return ::descriptor_table_NULS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 2,
    kSignatureFieldNumber = 4,
    kPkeyLenFieldNumber = 1,
    kSigLenFieldNumber = 3,
  };
  // bytes public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes signature = 4;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint32 pkey_len = 1;
  void clear_pkey_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 pkey_len() const;
  void set_pkey_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pkey_len() const;
  void _internal_set_pkey_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sig_len = 3;
  void clear_sig_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 sig_len() const;
  void set_sig_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sig_len() const;
  void _internal_set_sig_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NULS.Proto.Signature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pkey_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sig_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NULS_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NULS.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NULS.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NULS_2eproto);
    return ::descriptor_table_NULS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemarkFieldNumber = 3,
    kTxDataFieldNumber = 4,
    kInputFieldNumber = 5,
    kOutputFieldNumber = 6,
    kTxSigsFieldNumber = 7,
    kTypeFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kHashFieldNumber = 8,
  };
  // string remark = 3;
  void clear_remark();
  const std::string& remark() const;
  void set_remark(const std::string& value);
  void set_remark(std::string&& value);
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  std::string* mutable_remark();
  std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // bytes tx_data = 4;
  void clear_tx_data();
  const std::string& tx_data() const;
  void set_tx_data(const std::string& value);
  void set_tx_data(std::string&& value);
  void set_tx_data(const char* value);
  void set_tx_data(const void* value, size_t size);
  std::string* mutable_tx_data();
  std::string* release_tx_data();
  void set_allocated_tx_data(std::string* tx_data);
  private:
  const std::string& _internal_tx_data() const;
  void _internal_set_tx_data(const std::string& value);
  std::string* _internal_mutable_tx_data();
  public:

  // .TW.NULS.Proto.TransactionCoinFrom input = 5;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::TW::NULS::Proto::TransactionCoinFrom& input() const;
  ::TW::NULS::Proto::TransactionCoinFrom* release_input();
  ::TW::NULS::Proto::TransactionCoinFrom* mutable_input();
  void set_allocated_input(::TW::NULS::Proto::TransactionCoinFrom* input);
  private:
  const ::TW::NULS::Proto::TransactionCoinFrom& _internal_input() const;
  ::TW::NULS::Proto::TransactionCoinFrom* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::TW::NULS::Proto::TransactionCoinFrom* input);
  ::TW::NULS::Proto::TransactionCoinFrom* unsafe_arena_release_input();

  // .TW.NULS.Proto.TransactionCoinTo output = 6;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::TW::NULS::Proto::TransactionCoinTo& output() const;
  ::TW::NULS::Proto::TransactionCoinTo* release_output();
  ::TW::NULS::Proto::TransactionCoinTo* mutable_output();
  void set_allocated_output(::TW::NULS::Proto::TransactionCoinTo* output);
  private:
  const ::TW::NULS::Proto::TransactionCoinTo& _internal_output() const;
  ::TW::NULS::Proto::TransactionCoinTo* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::TW::NULS::Proto::TransactionCoinTo* output);
  ::TW::NULS::Proto::TransactionCoinTo* unsafe_arena_release_output();

  // .TW.NULS.Proto.Signature tx_sigs = 7;
  bool has_tx_sigs() const;
  private:
  bool _internal_has_tx_sigs() const;
  public:
  void clear_tx_sigs();
  const ::TW::NULS::Proto::Signature& tx_sigs() const;
  ::TW::NULS::Proto::Signature* release_tx_sigs();
  ::TW::NULS::Proto::Signature* mutable_tx_sigs();
  void set_allocated_tx_sigs(::TW::NULS::Proto::Signature* tx_sigs);
  private:
  const ::TW::NULS::Proto::Signature& _internal_tx_sigs() const;
  ::TW::NULS::Proto::Signature* _internal_mutable_tx_sigs();
  public:
  void unsafe_arena_set_allocated_tx_sigs(
      ::TW::NULS::Proto::Signature* tx_sigs);
  ::TW::NULS::Proto::Signature* unsafe_arena_release_tx_sigs();

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hash = 8;
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NULS.Proto.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_data_;
  ::TW::NULS::Proto::TransactionCoinFrom* input_;
  ::TW::NULS::Proto::TransactionCoinTo* output_;
  ::TW::NULS::Proto::Signature* tx_sigs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NULS_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NULS.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NULS.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NULS_2eproto);
    return ::descriptor_table_NULS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kAmountFieldNumber = 4,
    kNonceFieldNumber = 7,
    kRemarkFieldNumber = 8,
    kBalanceFieldNumber = 9,
    kChainIdFieldNumber = 5,
    kIdassetsIdFieldNumber = 6,
    kTimestampFieldNumber = 10,
  };
  // bytes private_key = 1;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // string from = 2;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 3;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes amount = 4;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes nonce = 7;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // string remark = 8;
  void clear_remark();
  const std::string& remark() const;
  void set_remark(const std::string& value);
  void set_remark(std::string&& value);
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  std::string* mutable_remark();
  std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // bytes balance = 9;
  void clear_balance();
  const std::string& balance() const;
  void set_balance(const std::string& value);
  void set_balance(std::string&& value);
  void set_balance(const char* value);
  void set_balance(const void* value, size_t size);
  std::string* mutable_balance();
  std::string* release_balance();
  void set_allocated_balance(std::string* balance);
  private:
  const std::string& _internal_balance() const;
  void _internal_set_balance(const std::string& value);
  std::string* _internal_mutable_balance();
  public:

  // uint32 chain_id = 5;
  void clear_chain_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_id() const;
  void set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chain_id() const;
  void _internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idassets_id = 6;
  void clear_idassets_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 idassets_id() const;
  void set_idassets_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idassets_id() const;
  void _internal_set_idassets_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 timestamp = 10;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NULS.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr balance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idassets_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NULS_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NULS.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NULS.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NULS_2eproto);
    return ::descriptor_table_NULS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // @@protoc_insertion_point(class_scope:TW.NULS.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NULS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionCoinFrom

// string from_address = 1;
inline void TransactionCoinFrom::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& TransactionCoinFrom::from_address() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinFrom.from_address)
  return _internal_from_address();
}
inline void TransactionCoinFrom::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinFrom.from_address)
}
inline std::string* TransactionCoinFrom::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.TransactionCoinFrom.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& TransactionCoinFrom::_internal_from_address() const {
  return from_address_.Get();
}
inline void TransactionCoinFrom::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionCoinFrom::set_from_address(std::string&& value) {
  
  from_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.TransactionCoinFrom.from_address)
}
inline void TransactionCoinFrom::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.TransactionCoinFrom.from_address)
}
inline void TransactionCoinFrom::set_from_address(const char* value,
    size_t size) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.TransactionCoinFrom.from_address)
}
inline std::string* TransactionCoinFrom::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionCoinFrom::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.TransactionCoinFrom.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionCoinFrom::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.TransactionCoinFrom.from_address)
}

// uint32 assets_chainid = 2;
inline void TransactionCoinFrom::clear_assets_chainid() {
  assets_chainid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinFrom::_internal_assets_chainid() const {
  return assets_chainid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinFrom::assets_chainid() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinFrom.assets_chainid)
  return _internal_assets_chainid();
}
inline void TransactionCoinFrom::_internal_set_assets_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assets_chainid_ = value;
}
inline void TransactionCoinFrom::set_assets_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assets_chainid(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinFrom.assets_chainid)
}

// uint32 assets_id = 3;
inline void TransactionCoinFrom::clear_assets_id() {
  assets_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinFrom::_internal_assets_id() const {
  return assets_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinFrom::assets_id() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinFrom.assets_id)
  return _internal_assets_id();
}
inline void TransactionCoinFrom::_internal_set_assets_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assets_id_ = value;
}
inline void TransactionCoinFrom::set_assets_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assets_id(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinFrom.assets_id)
}

// bytes id_amount = 4;
inline void TransactionCoinFrom::clear_id_amount() {
  id_amount_.ClearToEmpty();
}
inline const std::string& TransactionCoinFrom::id_amount() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinFrom.id_amount)
  return _internal_id_amount();
}
inline void TransactionCoinFrom::set_id_amount(const std::string& value) {
  _internal_set_id_amount(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinFrom.id_amount)
}
inline std::string* TransactionCoinFrom::mutable_id_amount() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.TransactionCoinFrom.id_amount)
  return _internal_mutable_id_amount();
}
inline const std::string& TransactionCoinFrom::_internal_id_amount() const {
  return id_amount_.Get();
}
inline void TransactionCoinFrom::_internal_set_id_amount(const std::string& value) {
  
  id_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionCoinFrom::set_id_amount(std::string&& value) {
  
  id_amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.TransactionCoinFrom.id_amount)
}
inline void TransactionCoinFrom::set_id_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.TransactionCoinFrom.id_amount)
}
inline void TransactionCoinFrom::set_id_amount(const void* value,
    size_t size) {
  
  id_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.TransactionCoinFrom.id_amount)
}
inline std::string* TransactionCoinFrom::_internal_mutable_id_amount() {
  
  return id_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionCoinFrom::release_id_amount() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.TransactionCoinFrom.id_amount)
  return id_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionCoinFrom::set_allocated_id_amount(std::string* id_amount) {
  if (id_amount != nullptr) {
    
  } else {
    
  }
  id_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.TransactionCoinFrom.id_amount)
}

// bytes nonce = 5;
inline void TransactionCoinFrom::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& TransactionCoinFrom::nonce() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinFrom.nonce)
  return _internal_nonce();
}
inline void TransactionCoinFrom::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinFrom.nonce)
}
inline std::string* TransactionCoinFrom::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.TransactionCoinFrom.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& TransactionCoinFrom::_internal_nonce() const {
  return nonce_.Get();
}
inline void TransactionCoinFrom::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionCoinFrom::set_nonce(std::string&& value) {
  
  nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.TransactionCoinFrom.nonce)
}
inline void TransactionCoinFrom::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.TransactionCoinFrom.nonce)
}
inline void TransactionCoinFrom::set_nonce(const void* value,
    size_t size) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.TransactionCoinFrom.nonce)
}
inline std::string* TransactionCoinFrom::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionCoinFrom::release_nonce() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.TransactionCoinFrom.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionCoinFrom::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.TransactionCoinFrom.nonce)
}

// uint32 locked = 6;
inline void TransactionCoinFrom::clear_locked() {
  locked_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinFrom::_internal_locked() const {
  return locked_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinFrom::locked() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinFrom.locked)
  return _internal_locked();
}
inline void TransactionCoinFrom::_internal_set_locked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  locked_ = value;
}
inline void TransactionCoinFrom::set_locked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinFrom.locked)
}

// -------------------------------------------------------------------

// TransactionCoinTo

// string to_address = 1;
inline void TransactionCoinTo::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& TransactionCoinTo::to_address() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinTo.to_address)
  return _internal_to_address();
}
inline void TransactionCoinTo::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinTo.to_address)
}
inline std::string* TransactionCoinTo::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.TransactionCoinTo.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& TransactionCoinTo::_internal_to_address() const {
  return to_address_.Get();
}
inline void TransactionCoinTo::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionCoinTo::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.TransactionCoinTo.to_address)
}
inline void TransactionCoinTo::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.TransactionCoinTo.to_address)
}
inline void TransactionCoinTo::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.TransactionCoinTo.to_address)
}
inline std::string* TransactionCoinTo::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionCoinTo::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.TransactionCoinTo.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionCoinTo::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.TransactionCoinTo.to_address)
}

// uint32 assets_chainid = 2;
inline void TransactionCoinTo::clear_assets_chainid() {
  assets_chainid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinTo::_internal_assets_chainid() const {
  return assets_chainid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinTo::assets_chainid() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinTo.assets_chainid)
  return _internal_assets_chainid();
}
inline void TransactionCoinTo::_internal_set_assets_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assets_chainid_ = value;
}
inline void TransactionCoinTo::set_assets_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assets_chainid(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinTo.assets_chainid)
}

// uint32 assets_id = 3;
inline void TransactionCoinTo::clear_assets_id() {
  assets_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinTo::_internal_assets_id() const {
  return assets_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinTo::assets_id() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinTo.assets_id)
  return _internal_assets_id();
}
inline void TransactionCoinTo::_internal_set_assets_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assets_id_ = value;
}
inline void TransactionCoinTo::set_assets_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assets_id(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinTo.assets_id)
}

// bytes id_amount = 4;
inline void TransactionCoinTo::clear_id_amount() {
  id_amount_.ClearToEmpty();
}
inline const std::string& TransactionCoinTo::id_amount() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinTo.id_amount)
  return _internal_id_amount();
}
inline void TransactionCoinTo::set_id_amount(const std::string& value) {
  _internal_set_id_amount(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinTo.id_amount)
}
inline std::string* TransactionCoinTo::mutable_id_amount() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.TransactionCoinTo.id_amount)
  return _internal_mutable_id_amount();
}
inline const std::string& TransactionCoinTo::_internal_id_amount() const {
  return id_amount_.Get();
}
inline void TransactionCoinTo::_internal_set_id_amount(const std::string& value) {
  
  id_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionCoinTo::set_id_amount(std::string&& value) {
  
  id_amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.TransactionCoinTo.id_amount)
}
inline void TransactionCoinTo::set_id_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.TransactionCoinTo.id_amount)
}
inline void TransactionCoinTo::set_id_amount(const void* value,
    size_t size) {
  
  id_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.TransactionCoinTo.id_amount)
}
inline std::string* TransactionCoinTo::_internal_mutable_id_amount() {
  
  return id_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionCoinTo::release_id_amount() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.TransactionCoinTo.id_amount)
  return id_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionCoinTo::set_allocated_id_amount(std::string* id_amount) {
  if (id_amount != nullptr) {
    
  } else {
    
  }
  id_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.TransactionCoinTo.id_amount)
}

// uint32 lock_time = 5;
inline void TransactionCoinTo::clear_lock_time() {
  lock_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinTo::_internal_lock_time() const {
  return lock_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCoinTo::lock_time() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.TransactionCoinTo.lock_time)
  return _internal_lock_time();
}
inline void TransactionCoinTo::_internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lock_time_ = value;
}
inline void TransactionCoinTo::set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lock_time(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.TransactionCoinTo.lock_time)
}

// -------------------------------------------------------------------

// Signature

// uint32 pkey_len = 1;
inline void Signature::clear_pkey_len() {
  pkey_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Signature::_internal_pkey_len() const {
  return pkey_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Signature::pkey_len() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Signature.pkey_len)
  return _internal_pkey_len();
}
inline void Signature::_internal_set_pkey_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pkey_len_ = value;
}
inline void Signature::set_pkey_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pkey_len(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.Signature.pkey_len)
}

// bytes public_key = 2;
inline void Signature::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& Signature::public_key() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Signature.public_key)
  return _internal_public_key();
}
inline void Signature::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.Signature.public_key)
}
inline std::string* Signature::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.Signature.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& Signature::_internal_public_key() const {
  return public_key_.Get();
}
inline void Signature::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Signature::set_public_key(std::string&& value) {
  
  public_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.Signature.public_key)
}
inline void Signature::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.Signature.public_key)
}
inline void Signature::set_public_key(const void* value,
    size_t size) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.Signature.public_key)
}
inline std::string* Signature::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Signature::release_public_key() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.Signature.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.Signature.public_key)
}

// uint32 sig_len = 3;
inline void Signature::clear_sig_len() {
  sig_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Signature::_internal_sig_len() const {
  return sig_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Signature::sig_len() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Signature.sig_len)
  return _internal_sig_len();
}
inline void Signature::_internal_set_sig_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sig_len_ = value;
}
inline void Signature::set_sig_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sig_len(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.Signature.sig_len)
}

// bytes signature = 4;
inline void Signature::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Signature.signature)
  return _internal_signature();
}
inline void Signature::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.Signature.signature)
}
inline std::string* Signature::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.Signature.signature)
  return _internal_mutable_signature();
}
inline const std::string& Signature::_internal_signature() const {
  return signature_.Get();
}
inline void Signature::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Signature::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.Signature.signature)
}
inline void Signature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.Signature.signature)
}
inline void Signature::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.Signature.signature)
}
inline std::string* Signature::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.Signature.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.Signature.signature)
}

// -------------------------------------------------------------------

// Transaction

// uint32 type = 1;
inline void Transaction::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::type() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Transaction.type)
  return _internal_type();
}
inline void Transaction::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Transaction::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.Transaction.type)
}

// uint32 timestamp = 2;
inline void Transaction::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Transaction.timestamp)
  return _internal_timestamp();
}
inline void Transaction::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void Transaction::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.Transaction.timestamp)
}

// string remark = 3;
inline void Transaction::clear_remark() {
  remark_.ClearToEmpty();
}
inline const std::string& Transaction::remark() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Transaction.remark)
  return _internal_remark();
}
inline void Transaction::set_remark(const std::string& value) {
  _internal_set_remark(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.Transaction.remark)
}
inline std::string* Transaction::mutable_remark() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.Transaction.remark)
  return _internal_mutable_remark();
}
inline const std::string& Transaction::_internal_remark() const {
  return remark_.Get();
}
inline void Transaction::_internal_set_remark(const std::string& value) {
  
  remark_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_remark(std::string&& value) {
  
  remark_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.Transaction.remark)
}
inline void Transaction::set_remark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remark_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.Transaction.remark)
}
inline void Transaction::set_remark(const char* value,
    size_t size) {
  
  remark_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.Transaction.remark)
}
inline std::string* Transaction::_internal_mutable_remark() {
  
  return remark_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_remark() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.Transaction.remark)
  return remark_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remark,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.Transaction.remark)
}

// bytes tx_data = 4;
inline void Transaction::clear_tx_data() {
  tx_data_.ClearToEmpty();
}
inline const std::string& Transaction::tx_data() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Transaction.tx_data)
  return _internal_tx_data();
}
inline void Transaction::set_tx_data(const std::string& value) {
  _internal_set_tx_data(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.Transaction.tx_data)
}
inline std::string* Transaction::mutable_tx_data() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.Transaction.tx_data)
  return _internal_mutable_tx_data();
}
inline const std::string& Transaction::_internal_tx_data() const {
  return tx_data_.Get();
}
inline void Transaction::_internal_set_tx_data(const std::string& value) {
  
  tx_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_tx_data(std::string&& value) {
  
  tx_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.Transaction.tx_data)
}
inline void Transaction::set_tx_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.Transaction.tx_data)
}
inline void Transaction::set_tx_data(const void* value,
    size_t size) {
  
  tx_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.Transaction.tx_data)
}
inline std::string* Transaction::_internal_mutable_tx_data() {
  
  return tx_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_tx_data() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.Transaction.tx_data)
  return tx_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_tx_data(std::string* tx_data) {
  if (tx_data != nullptr) {
    
  } else {
    
  }
  tx_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.Transaction.tx_data)
}

// .TW.NULS.Proto.TransactionCoinFrom input = 5;
inline bool Transaction::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Transaction::has_input() const {
  return _internal_has_input();
}
inline void Transaction::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::TW::NULS::Proto::TransactionCoinFrom& Transaction::_internal_input() const {
  const ::TW::NULS::Proto::TransactionCoinFrom* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NULS::Proto::TransactionCoinFrom&>(
      ::TW::NULS::Proto::_TransactionCoinFrom_default_instance_);
}
inline const ::TW::NULS::Proto::TransactionCoinFrom& Transaction::input() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Transaction.input)
  return _internal_input();
}
inline void Transaction::unsafe_arena_set_allocated_input(
    ::TW::NULS::Proto::TransactionCoinFrom* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NULS.Proto.Transaction.input)
}
inline ::TW::NULS::Proto::TransactionCoinFrom* Transaction::release_input() {
  
  ::TW::NULS::Proto::TransactionCoinFrom* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::NULS::Proto::TransactionCoinFrom* Transaction::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.Transaction.input)
  
  ::TW::NULS::Proto::TransactionCoinFrom* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::TW::NULS::Proto::TransactionCoinFrom* Transaction::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NULS::Proto::TransactionCoinFrom>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::TW::NULS::Proto::TransactionCoinFrom* Transaction::mutable_input() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.Transaction.input)
  return _internal_mutable_input();
}
inline void Transaction::set_allocated_input(::TW::NULS::Proto::TransactionCoinFrom* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.Transaction.input)
}

// .TW.NULS.Proto.TransactionCoinTo output = 6;
inline bool Transaction::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool Transaction::has_output() const {
  return _internal_has_output();
}
inline void Transaction::clear_output() {
  if (GetArena() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
inline const ::TW::NULS::Proto::TransactionCoinTo& Transaction::_internal_output() const {
  const ::TW::NULS::Proto::TransactionCoinTo* p = output_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NULS::Proto::TransactionCoinTo&>(
      ::TW::NULS::Proto::_TransactionCoinTo_default_instance_);
}
inline const ::TW::NULS::Proto::TransactionCoinTo& Transaction::output() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Transaction.output)
  return _internal_output();
}
inline void Transaction::unsafe_arena_set_allocated_output(
    ::TW::NULS::Proto::TransactionCoinTo* output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NULS.Proto.Transaction.output)
}
inline ::TW::NULS::Proto::TransactionCoinTo* Transaction::release_output() {
  
  ::TW::NULS::Proto::TransactionCoinTo* temp = output_;
  output_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::NULS::Proto::TransactionCoinTo* Transaction::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.Transaction.output)
  
  ::TW::NULS::Proto::TransactionCoinTo* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::TW::NULS::Proto::TransactionCoinTo* Transaction::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NULS::Proto::TransactionCoinTo>(GetArena());
    output_ = p;
  }
  return output_;
}
inline ::TW::NULS::Proto::TransactionCoinTo* Transaction::mutable_output() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.Transaction.output)
  return _internal_mutable_output();
}
inline void Transaction::set_allocated_output(::TW::NULS::Proto::TransactionCoinTo* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(output);
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.Transaction.output)
}

// .TW.NULS.Proto.Signature tx_sigs = 7;
inline bool Transaction::_internal_has_tx_sigs() const {
  return this != internal_default_instance() && tx_sigs_ != nullptr;
}
inline bool Transaction::has_tx_sigs() const {
  return _internal_has_tx_sigs();
}
inline void Transaction::clear_tx_sigs() {
  if (GetArena() == nullptr && tx_sigs_ != nullptr) {
    delete tx_sigs_;
  }
  tx_sigs_ = nullptr;
}
inline const ::TW::NULS::Proto::Signature& Transaction::_internal_tx_sigs() const {
  const ::TW::NULS::Proto::Signature* p = tx_sigs_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NULS::Proto::Signature&>(
      ::TW::NULS::Proto::_Signature_default_instance_);
}
inline const ::TW::NULS::Proto::Signature& Transaction::tx_sigs() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Transaction.tx_sigs)
  return _internal_tx_sigs();
}
inline void Transaction::unsafe_arena_set_allocated_tx_sigs(
    ::TW::NULS::Proto::Signature* tx_sigs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_sigs_);
  }
  tx_sigs_ = tx_sigs;
  if (tx_sigs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NULS.Proto.Transaction.tx_sigs)
}
inline ::TW::NULS::Proto::Signature* Transaction::release_tx_sigs() {
  
  ::TW::NULS::Proto::Signature* temp = tx_sigs_;
  tx_sigs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::NULS::Proto::Signature* Transaction::unsafe_arena_release_tx_sigs() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.Transaction.tx_sigs)
  
  ::TW::NULS::Proto::Signature* temp = tx_sigs_;
  tx_sigs_ = nullptr;
  return temp;
}
inline ::TW::NULS::Proto::Signature* Transaction::_internal_mutable_tx_sigs() {
  
  if (tx_sigs_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NULS::Proto::Signature>(GetArena());
    tx_sigs_ = p;
  }
  return tx_sigs_;
}
inline ::TW::NULS::Proto::Signature* Transaction::mutable_tx_sigs() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.Transaction.tx_sigs)
  return _internal_mutable_tx_sigs();
}
inline void Transaction::set_allocated_tx_sigs(::TW::NULS::Proto::Signature* tx_sigs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tx_sigs_;
  }
  if (tx_sigs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tx_sigs);
    if (message_arena != submessage_arena) {
      tx_sigs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_sigs, submessage_arena);
    }
    
  } else {
    
  }
  tx_sigs_ = tx_sigs;
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.Transaction.tx_sigs)
}

// uint32 hash = 8;
inline void Transaction::clear_hash() {
  hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::hash() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.Transaction.hash)
  return _internal_hash();
}
inline void Transaction::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_ = value;
}
inline void Transaction::set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.Transaction.hash)
}

// -------------------------------------------------------------------

// SigningInput

// bytes private_key = 1;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.SigningInput.private_key)
}

// string from = 2;
inline void SigningInput::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& SigningInput::from() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.from)
  return _internal_from();
}
inline void SigningInput::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.from)
}
inline std::string* SigningInput::mutable_from() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.SigningInput.from)
  return _internal_mutable_from();
}
inline const std::string& SigningInput::_internal_from() const {
  return from_.Get();
}
inline void SigningInput::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.SigningInput.from)
}
inline void SigningInput::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.SigningInput.from)
}
inline void SigningInput::set_from(const char* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.SigningInput.from)
}
inline std::string* SigningInput::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_from() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.SigningInput.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.SigningInput.from)
}

// string to = 3;
inline void SigningInput::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& SigningInput::to() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.to)
  return _internal_to();
}
inline void SigningInput::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.to)
}
inline std::string* SigningInput::mutable_to() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.SigningInput.to)
  return _internal_mutable_to();
}
inline const std::string& SigningInput::_internal_to() const {
  return to_.Get();
}
inline void SigningInput::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.SigningInput.to)
}
inline void SigningInput::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.SigningInput.to)
}
inline void SigningInput::set_to(const char* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.SigningInput.to)
}
inline std::string* SigningInput::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_to() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.SigningInput.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.SigningInput.to)
}

// bytes amount = 4;
inline void SigningInput::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& SigningInput::amount() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.amount)
  return _internal_amount();
}
inline void SigningInput::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.amount)
}
inline std::string* SigningInput::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.SigningInput.amount)
  return _internal_mutable_amount();
}
inline const std::string& SigningInput::_internal_amount() const {
  return amount_.Get();
}
inline void SigningInput::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.SigningInput.amount)
}
inline void SigningInput::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.SigningInput.amount)
}
inline void SigningInput::set_amount(const void* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.SigningInput.amount)
}
inline std::string* SigningInput::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_amount() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.SigningInput.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.SigningInput.amount)
}

// uint32 chain_id = 5;
inline void SigningInput::clear_chain_id() {
  chain_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_chain_id() const {
  return chain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.chain_id)
  return _internal_chain_id();
}
inline void SigningInput::_internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chain_id_ = value;
}
inline void SigningInput::set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.chain_id)
}

// uint32 idassets_id = 6;
inline void SigningInput::clear_idassets_id() {
  idassets_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_idassets_id() const {
  return idassets_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::idassets_id() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.idassets_id)
  return _internal_idassets_id();
}
inline void SigningInput::_internal_set_idassets_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idassets_id_ = value;
}
inline void SigningInput::set_idassets_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idassets_id(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.idassets_id)
}

// bytes nonce = 7;
inline void SigningInput::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& SigningInput::nonce() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.nonce)
  return _internal_nonce();
}
inline void SigningInput::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.nonce)
}
inline std::string* SigningInput::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.SigningInput.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& SigningInput::_internal_nonce() const {
  return nonce_.Get();
}
inline void SigningInput::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_nonce(std::string&& value) {
  
  nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.SigningInput.nonce)
}
inline void SigningInput::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.SigningInput.nonce)
}
inline void SigningInput::set_nonce(const void* value,
    size_t size) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.SigningInput.nonce)
}
inline std::string* SigningInput::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_nonce() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.SigningInput.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.SigningInput.nonce)
}

// string remark = 8;
inline void SigningInput::clear_remark() {
  remark_.ClearToEmpty();
}
inline const std::string& SigningInput::remark() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.remark)
  return _internal_remark();
}
inline void SigningInput::set_remark(const std::string& value) {
  _internal_set_remark(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.remark)
}
inline std::string* SigningInput::mutable_remark() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.SigningInput.remark)
  return _internal_mutable_remark();
}
inline const std::string& SigningInput::_internal_remark() const {
  return remark_.Get();
}
inline void SigningInput::_internal_set_remark(const std::string& value) {
  
  remark_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_remark(std::string&& value) {
  
  remark_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.SigningInput.remark)
}
inline void SigningInput::set_remark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remark_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.SigningInput.remark)
}
inline void SigningInput::set_remark(const char* value,
    size_t size) {
  
  remark_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.SigningInput.remark)
}
inline std::string* SigningInput::_internal_mutable_remark() {
  
  return remark_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_remark() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.SigningInput.remark)
  return remark_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remark,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.SigningInput.remark)
}

// bytes balance = 9;
inline void SigningInput::clear_balance() {
  balance_.ClearToEmpty();
}
inline const std::string& SigningInput::balance() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.balance)
  return _internal_balance();
}
inline void SigningInput::set_balance(const std::string& value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.balance)
}
inline std::string* SigningInput::mutable_balance() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.SigningInput.balance)
  return _internal_mutable_balance();
}
inline const std::string& SigningInput::_internal_balance() const {
  return balance_.Get();
}
inline void SigningInput::_internal_set_balance(const std::string& value) {
  
  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_balance(std::string&& value) {
  
  balance_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.SigningInput.balance)
}
inline void SigningInput::set_balance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.SigningInput.balance)
}
inline void SigningInput::set_balance(const void* value,
    size_t size) {
  
  balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.SigningInput.balance)
}
inline std::string* SigningInput::_internal_mutable_balance() {
  
  return balance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_balance() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.SigningInput.balance)
  return balance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_balance(std::string* balance) {
  if (balance != nullptr) {
    
  } else {
    
  }
  balance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), balance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.SigningInput.balance)
}

// uint32 timestamp = 10;
inline void SigningInput::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::timestamp() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningInput.timestamp)
  return _internal_timestamp();
}
inline void SigningInput::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void SigningInput::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningInput.timestamp)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.NULS.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.NULS.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.NULS.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.NULS.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.NULS.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.NULS.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.NULS.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.NULS.Proto.SigningOutput.encoded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace NULS
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NULS_2eproto
