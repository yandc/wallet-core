// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Algorand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Algorand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Algorand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Algorand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Algorand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Algorand_2eproto;
namespace TW {
namespace Algorand {
namespace Proto {
class AssetOptIn;
class AssetOptInDefaultTypeInternal;
extern AssetOptInDefaultTypeInternal _AssetOptIn_default_instance_;
class AssetTransfer;
class AssetTransferDefaultTypeInternal;
extern AssetTransferDefaultTypeInternal _AssetTransfer_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
}  // namespace Proto
}  // namespace Algorand
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Algorand::Proto::AssetOptIn* Arena::CreateMaybeMessage<::TW::Algorand::Proto::AssetOptIn>(Arena*);
template<> ::TW::Algorand::Proto::AssetTransfer* Arena::CreateMaybeMessage<::TW::Algorand::Proto::AssetTransfer>(Arena*);
template<> ::TW::Algorand::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Algorand::Proto::SigningInput>(Arena*);
template<> ::TW::Algorand::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Algorand::Proto::SigningOutput>(Arena*);
template<> ::TW::Algorand::Proto::Transfer* Arena::CreateMaybeMessage<::TW::Algorand::Proto::Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Algorand {
namespace Proto {

// ===================================================================

class Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Algorand.Proto.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  virtual ~Transfer();

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transfer& default_instance();

  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Algorand.Proto.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Algorand_2eproto);
    return ::descriptor_table_Algorand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string to_address = 1;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // uint64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Algorand.Proto.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Algorand_2eproto;
};
// -------------------------------------------------------------------

class AssetTransfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Algorand.Proto.AssetTransfer) */ {
 public:
  inline AssetTransfer() : AssetTransfer(nullptr) {}
  virtual ~AssetTransfer();

  AssetTransfer(const AssetTransfer& from);
  AssetTransfer(AssetTransfer&& from) noexcept
    : AssetTransfer() {
    *this = ::std::move(from);
  }

  inline AssetTransfer& operator=(const AssetTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetTransfer& operator=(AssetTransfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetTransfer& default_instance();

  static inline const AssetTransfer* internal_default_instance() {
    return reinterpret_cast<const AssetTransfer*>(
               &_AssetTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AssetTransfer& a, AssetTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetTransfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetTransfer* New() const final {
    return CreateMaybeMessage<AssetTransfer>(nullptr);
  }

  AssetTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetTransfer& from);
  void MergeFrom(const AssetTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Algorand.Proto.AssetTransfer";
  }
  protected:
  explicit AssetTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Algorand_2eproto);
    return ::descriptor_table_Algorand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
    kAssetIdFieldNumber = 3,
  };
  // string to_address = 1;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // uint64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 asset_id = 3;
  void clear_asset_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 asset_id() const;
  void set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_asset_id() const;
  void _internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Algorand.Proto.AssetTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 asset_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Algorand_2eproto;
};
// -------------------------------------------------------------------

class AssetOptIn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Algorand.Proto.AssetOptIn) */ {
 public:
  inline AssetOptIn() : AssetOptIn(nullptr) {}
  virtual ~AssetOptIn();

  AssetOptIn(const AssetOptIn& from);
  AssetOptIn(AssetOptIn&& from) noexcept
    : AssetOptIn() {
    *this = ::std::move(from);
  }

  inline AssetOptIn& operator=(const AssetOptIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetOptIn& operator=(AssetOptIn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetOptIn& default_instance();

  static inline const AssetOptIn* internal_default_instance() {
    return reinterpret_cast<const AssetOptIn*>(
               &_AssetOptIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AssetOptIn& a, AssetOptIn& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetOptIn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetOptIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetOptIn* New() const final {
    return CreateMaybeMessage<AssetOptIn>(nullptr);
  }

  AssetOptIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetOptIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetOptIn& from);
  void MergeFrom(const AssetOptIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetOptIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Algorand.Proto.AssetOptIn";
  }
  protected:
  explicit AssetOptIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Algorand_2eproto);
    return ::descriptor_table_Algorand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIdFieldNumber = 1,
  };
  // uint64 asset_id = 1;
  void clear_asset_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 asset_id() const;
  void set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_asset_id() const;
  void _internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Algorand.Proto.AssetOptIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 asset_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Algorand_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Algorand.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  enum MessageOneofCase {
    kTransfer = 10,
    kAssetTransfer = 11,
    kAssetOptIn = 12,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Algorand.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Algorand_2eproto);
    return ::descriptor_table_Algorand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenesisIdFieldNumber = 1,
    kGenesisHashFieldNumber = 2,
    kNoteFieldNumber = 3,
    kPrivateKeyFieldNumber = 4,
    kFirstRoundFieldNumber = 5,
    kLastRoundFieldNumber = 6,
    kFeeFieldNumber = 7,
    kTransferFieldNumber = 10,
    kAssetTransferFieldNumber = 11,
    kAssetOptInFieldNumber = 12,
  };
  // string genesis_id = 1;
  void clear_genesis_id();
  const std::string& genesis_id() const;
  void set_genesis_id(const std::string& value);
  void set_genesis_id(std::string&& value);
  void set_genesis_id(const char* value);
  void set_genesis_id(const char* value, size_t size);
  std::string* mutable_genesis_id();
  std::string* release_genesis_id();
  void set_allocated_genesis_id(std::string* genesis_id);
  private:
  const std::string& _internal_genesis_id() const;
  void _internal_set_genesis_id(const std::string& value);
  std::string* _internal_mutable_genesis_id();
  public:

  // bytes genesis_hash = 2;
  void clear_genesis_hash();
  const std::string& genesis_hash() const;
  void set_genesis_hash(const std::string& value);
  void set_genesis_hash(std::string&& value);
  void set_genesis_hash(const char* value);
  void set_genesis_hash(const void* value, size_t size);
  std::string* mutable_genesis_hash();
  std::string* release_genesis_hash();
  void set_allocated_genesis_hash(std::string* genesis_hash);
  private:
  const std::string& _internal_genesis_hash() const;
  void _internal_set_genesis_hash(const std::string& value);
  std::string* _internal_mutable_genesis_hash();
  public:

  // bytes note = 3;
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const void* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // bytes private_key = 4;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // uint64 first_round = 5;
  void clear_first_round();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_round() const;
  void set_first_round(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_round() const;
  void _internal_set_first_round(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_round = 6;
  void clear_last_round();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_round() const;
  void set_last_round(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_round() const;
  void _internal_set_last_round(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fee = 7;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .TW.Algorand.Proto.Transfer transfer = 10;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::Algorand::Proto::Transfer& transfer() const;
  ::TW::Algorand::Proto::Transfer* release_transfer();
  ::TW::Algorand::Proto::Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::Algorand::Proto::Transfer* transfer);
  private:
  const ::TW::Algorand::Proto::Transfer& _internal_transfer() const;
  ::TW::Algorand::Proto::Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::Algorand::Proto::Transfer* transfer);
  ::TW::Algorand::Proto::Transfer* unsafe_arena_release_transfer();

  // .TW.Algorand.Proto.AssetTransfer asset_transfer = 11;
  bool has_asset_transfer() const;
  private:
  bool _internal_has_asset_transfer() const;
  public:
  void clear_asset_transfer();
  const ::TW::Algorand::Proto::AssetTransfer& asset_transfer() const;
  ::TW::Algorand::Proto::AssetTransfer* release_asset_transfer();
  ::TW::Algorand::Proto::AssetTransfer* mutable_asset_transfer();
  void set_allocated_asset_transfer(::TW::Algorand::Proto::AssetTransfer* asset_transfer);
  private:
  const ::TW::Algorand::Proto::AssetTransfer& _internal_asset_transfer() const;
  ::TW::Algorand::Proto::AssetTransfer* _internal_mutable_asset_transfer();
  public:
  void unsafe_arena_set_allocated_asset_transfer(
      ::TW::Algorand::Proto::AssetTransfer* asset_transfer);
  ::TW::Algorand::Proto::AssetTransfer* unsafe_arena_release_asset_transfer();

  // .TW.Algorand.Proto.AssetOptIn asset_opt_in = 12;
  bool has_asset_opt_in() const;
  private:
  bool _internal_has_asset_opt_in() const;
  public:
  void clear_asset_opt_in();
  const ::TW::Algorand::Proto::AssetOptIn& asset_opt_in() const;
  ::TW::Algorand::Proto::AssetOptIn* release_asset_opt_in();
  ::TW::Algorand::Proto::AssetOptIn* mutable_asset_opt_in();
  void set_allocated_asset_opt_in(::TW::Algorand::Proto::AssetOptIn* asset_opt_in);
  private:
  const ::TW::Algorand::Proto::AssetOptIn& _internal_asset_opt_in() const;
  ::TW::Algorand::Proto::AssetOptIn* _internal_mutable_asset_opt_in();
  public:
  void unsafe_arena_set_allocated_asset_opt_in(
      ::TW::Algorand::Proto::AssetOptIn* asset_opt_in);
  ::TW::Algorand::Proto::AssetOptIn* unsafe_arena_release_asset_opt_in();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Algorand.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_asset_transfer();
  void set_has_asset_opt_in();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genesis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genesis_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_round_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_round_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  union MessageOneofUnion {
    MessageOneofUnion() {}
    ::TW::Algorand::Proto::Transfer* transfer_;
    ::TW::Algorand::Proto::AssetTransfer* asset_transfer_;
    ::TW::Algorand::Proto::AssetOptIn* asset_opt_in_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Algorand_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Algorand.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Algorand.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Algorand_2eproto);
    return ::descriptor_table_Algorand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // @@protoc_insertion_point(class_scope:TW.Algorand.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Algorand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transfer

// string to_address = 1;
inline void Transfer::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& Transfer::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.Transfer.to_address)
  return _internal_to_address();
}
inline void Transfer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.Transfer.to_address)
}
inline std::string* Transfer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.Transfer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& Transfer::_internal_to_address() const {
  return to_address_.Get();
}
inline void Transfer::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transfer::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Algorand.Proto.Transfer.to_address)
}
inline void Transfer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Algorand.Proto.Transfer.to_address)
}
inline void Transfer::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Algorand.Proto.Transfer.to_address)
}
inline std::string* Transfer::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transfer::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.Transfer.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Algorand.Proto.Transfer.to_address)
}

// uint64 amount = 2;
inline void Transfer::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.Transfer.amount)
  return _internal_amount();
}
inline void Transfer::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void Transfer::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.Transfer.amount)
}

// -------------------------------------------------------------------

// AssetTransfer

// string to_address = 1;
inline void AssetTransfer::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& AssetTransfer::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.AssetTransfer.to_address)
  return _internal_to_address();
}
inline void AssetTransfer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.AssetTransfer.to_address)
}
inline std::string* AssetTransfer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.AssetTransfer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& AssetTransfer::_internal_to_address() const {
  return to_address_.Get();
}
inline void AssetTransfer::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetTransfer::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Algorand.Proto.AssetTransfer.to_address)
}
inline void AssetTransfer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Algorand.Proto.AssetTransfer.to_address)
}
inline void AssetTransfer::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Algorand.Proto.AssetTransfer.to_address)
}
inline std::string* AssetTransfer::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetTransfer::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.AssetTransfer.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetTransfer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Algorand.Proto.AssetTransfer.to_address)
}

// uint64 amount = 2;
inline void AssetTransfer::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetTransfer::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.AssetTransfer.amount)
  return _internal_amount();
}
inline void AssetTransfer::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void AssetTransfer::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.AssetTransfer.amount)
}

// uint64 asset_id = 3;
inline void AssetTransfer::clear_asset_id() {
  asset_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetTransfer::_internal_asset_id() const {
  return asset_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetTransfer::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.AssetTransfer.asset_id)
  return _internal_asset_id();
}
inline void AssetTransfer::_internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  asset_id_ = value;
}
inline void AssetTransfer::set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.AssetTransfer.asset_id)
}

// -------------------------------------------------------------------

// AssetOptIn

// uint64 asset_id = 1;
inline void AssetOptIn::clear_asset_id() {
  asset_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetOptIn::_internal_asset_id() const {
  return asset_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetOptIn::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.AssetOptIn.asset_id)
  return _internal_asset_id();
}
inline void AssetOptIn::_internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  asset_id_ = value;
}
inline void AssetOptIn::set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.AssetOptIn.asset_id)
}

// -------------------------------------------------------------------

// SigningInput

// string genesis_id = 1;
inline void SigningInput::clear_genesis_id() {
  genesis_id_.ClearToEmpty();
}
inline const std::string& SigningInput::genesis_id() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.genesis_id)
  return _internal_genesis_id();
}
inline void SigningInput::set_genesis_id(const std::string& value) {
  _internal_set_genesis_id(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.SigningInput.genesis_id)
}
inline std::string* SigningInput::mutable_genesis_id() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.SigningInput.genesis_id)
  return _internal_mutable_genesis_id();
}
inline const std::string& SigningInput::_internal_genesis_id() const {
  return genesis_id_.Get();
}
inline void SigningInput::_internal_set_genesis_id(const std::string& value) {
  
  genesis_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_genesis_id(std::string&& value) {
  
  genesis_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Algorand.Proto.SigningInput.genesis_id)
}
inline void SigningInput::set_genesis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  genesis_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Algorand.Proto.SigningInput.genesis_id)
}
inline void SigningInput::set_genesis_id(const char* value,
    size_t size) {
  
  genesis_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Algorand.Proto.SigningInput.genesis_id)
}
inline std::string* SigningInput::_internal_mutable_genesis_id() {
  
  return genesis_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_genesis_id() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.SigningInput.genesis_id)
  return genesis_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_genesis_id(std::string* genesis_id) {
  if (genesis_id != nullptr) {
    
  } else {
    
  }
  genesis_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genesis_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Algorand.Proto.SigningInput.genesis_id)
}

// bytes genesis_hash = 2;
inline void SigningInput::clear_genesis_hash() {
  genesis_hash_.ClearToEmpty();
}
inline const std::string& SigningInput::genesis_hash() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.genesis_hash)
  return _internal_genesis_hash();
}
inline void SigningInput::set_genesis_hash(const std::string& value) {
  _internal_set_genesis_hash(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.SigningInput.genesis_hash)
}
inline std::string* SigningInput::mutable_genesis_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.SigningInput.genesis_hash)
  return _internal_mutable_genesis_hash();
}
inline const std::string& SigningInput::_internal_genesis_hash() const {
  return genesis_hash_.Get();
}
inline void SigningInput::_internal_set_genesis_hash(const std::string& value) {
  
  genesis_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_genesis_hash(std::string&& value) {
  
  genesis_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Algorand.Proto.SigningInput.genesis_hash)
}
inline void SigningInput::set_genesis_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  genesis_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Algorand.Proto.SigningInput.genesis_hash)
}
inline void SigningInput::set_genesis_hash(const void* value,
    size_t size) {
  
  genesis_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Algorand.Proto.SigningInput.genesis_hash)
}
inline std::string* SigningInput::_internal_mutable_genesis_hash() {
  
  return genesis_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_genesis_hash() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.SigningInput.genesis_hash)
  return genesis_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_genesis_hash(std::string* genesis_hash) {
  if (genesis_hash != nullptr) {
    
  } else {
    
  }
  genesis_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genesis_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Algorand.Proto.SigningInput.genesis_hash)
}

// bytes note = 3;
inline void SigningInput::clear_note() {
  note_.ClearToEmpty();
}
inline const std::string& SigningInput::note() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.note)
  return _internal_note();
}
inline void SigningInput::set_note(const std::string& value) {
  _internal_set_note(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.SigningInput.note)
}
inline std::string* SigningInput::mutable_note() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.SigningInput.note)
  return _internal_mutable_note();
}
inline const std::string& SigningInput::_internal_note() const {
  return note_.Get();
}
inline void SigningInput::_internal_set_note(const std::string& value) {
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_note(std::string&& value) {
  
  note_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Algorand.Proto.SigningInput.note)
}
inline void SigningInput::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Algorand.Proto.SigningInput.note)
}
inline void SigningInput::set_note(const void* value,
    size_t size) {
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Algorand.Proto.SigningInput.note)
}
inline std::string* SigningInput::_internal_mutable_note() {
  
  return note_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_note() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.SigningInput.note)
  return note_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Algorand.Proto.SigningInput.note)
}

// bytes private_key = 4;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Algorand.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Algorand.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Algorand.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Algorand.Proto.SigningInput.private_key)
}

// uint64 first_round = 5;
inline void SigningInput::clear_first_round() {
  first_round_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_first_round() const {
  return first_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::first_round() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.first_round)
  return _internal_first_round();
}
inline void SigningInput::_internal_set_first_round(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  first_round_ = value;
}
inline void SigningInput::set_first_round(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_round(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.SigningInput.first_round)
}

// uint64 last_round = 6;
inline void SigningInput::clear_last_round() {
  last_round_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_last_round() const {
  return last_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::last_round() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.last_round)
  return _internal_last_round();
}
inline void SigningInput::_internal_set_last_round(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_round_ = value;
}
inline void SigningInput::set_last_round(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_round(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.SigningInput.last_round)
}

// uint64 fee = 7;
inline void SigningInput::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::fee() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.fee)
  return _internal_fee();
}
inline void SigningInput::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void SigningInput::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.SigningInput.fee)
}

// .TW.Algorand.Proto.Transfer transfer = 10;
inline bool SigningInput::_internal_has_transfer() const {
  return message_oneof_case() == kTransfer;
}
inline bool SigningInput::has_transfer() const {
  return _internal_has_transfer();
}
inline void SigningInput::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void SigningInput::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Algorand::Proto::Transfer* SigningInput::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_message_oneof();
      ::TW::Algorand::Proto::Transfer* temp = message_oneof_.transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Algorand::Proto::Transfer& SigningInput::_internal_transfer() const {
  return _internal_has_transfer()
      ? *message_oneof_.transfer_
      : reinterpret_cast< ::TW::Algorand::Proto::Transfer&>(::TW::Algorand::Proto::_Transfer_default_instance_);
}
inline const ::TW::Algorand::Proto::Transfer& SigningInput::transfer() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.transfer)
  return _internal_transfer();
}
inline ::TW::Algorand::Proto::Transfer* SigningInput::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Algorand.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_message_oneof();
    ::TW::Algorand::Proto::Transfer* temp = message_oneof_.transfer_;
    message_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transfer(::TW::Algorand::Proto::Transfer* transfer) {
  clear_message_oneof();
  if (transfer) {
    set_has_transfer();
    message_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Algorand.Proto.SigningInput.transfer)
}
inline ::TW::Algorand::Proto::Transfer* SigningInput::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_message_oneof();
    set_has_transfer();
    message_oneof_.transfer_ = CreateMaybeMessage< ::TW::Algorand::Proto::Transfer >(GetArena());
  }
  return message_oneof_.transfer_;
}
inline ::TW::Algorand::Proto::Transfer* SigningInput::mutable_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.SigningInput.transfer)
  return _internal_mutable_transfer();
}

// .TW.Algorand.Proto.AssetTransfer asset_transfer = 11;
inline bool SigningInput::_internal_has_asset_transfer() const {
  return message_oneof_case() == kAssetTransfer;
}
inline bool SigningInput::has_asset_transfer() const {
  return _internal_has_asset_transfer();
}
inline void SigningInput::set_has_asset_transfer() {
  _oneof_case_[0] = kAssetTransfer;
}
inline void SigningInput::clear_asset_transfer() {
  if (_internal_has_asset_transfer()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.asset_transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Algorand::Proto::AssetTransfer* SigningInput::release_asset_transfer() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.SigningInput.asset_transfer)
  if (_internal_has_asset_transfer()) {
    clear_has_message_oneof();
      ::TW::Algorand::Proto::AssetTransfer* temp = message_oneof_.asset_transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.asset_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Algorand::Proto::AssetTransfer& SigningInput::_internal_asset_transfer() const {
  return _internal_has_asset_transfer()
      ? *message_oneof_.asset_transfer_
      : reinterpret_cast< ::TW::Algorand::Proto::AssetTransfer&>(::TW::Algorand::Proto::_AssetTransfer_default_instance_);
}
inline const ::TW::Algorand::Proto::AssetTransfer& SigningInput::asset_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.asset_transfer)
  return _internal_asset_transfer();
}
inline ::TW::Algorand::Proto::AssetTransfer* SigningInput::unsafe_arena_release_asset_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Algorand.Proto.SigningInput.asset_transfer)
  if (_internal_has_asset_transfer()) {
    clear_has_message_oneof();
    ::TW::Algorand::Proto::AssetTransfer* temp = message_oneof_.asset_transfer_;
    message_oneof_.asset_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_asset_transfer(::TW::Algorand::Proto::AssetTransfer* asset_transfer) {
  clear_message_oneof();
  if (asset_transfer) {
    set_has_asset_transfer();
    message_oneof_.asset_transfer_ = asset_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Algorand.Proto.SigningInput.asset_transfer)
}
inline ::TW::Algorand::Proto::AssetTransfer* SigningInput::_internal_mutable_asset_transfer() {
  if (!_internal_has_asset_transfer()) {
    clear_message_oneof();
    set_has_asset_transfer();
    message_oneof_.asset_transfer_ = CreateMaybeMessage< ::TW::Algorand::Proto::AssetTransfer >(GetArena());
  }
  return message_oneof_.asset_transfer_;
}
inline ::TW::Algorand::Proto::AssetTransfer* SigningInput::mutable_asset_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.SigningInput.asset_transfer)
  return _internal_mutable_asset_transfer();
}

// .TW.Algorand.Proto.AssetOptIn asset_opt_in = 12;
inline bool SigningInput::_internal_has_asset_opt_in() const {
  return message_oneof_case() == kAssetOptIn;
}
inline bool SigningInput::has_asset_opt_in() const {
  return _internal_has_asset_opt_in();
}
inline void SigningInput::set_has_asset_opt_in() {
  _oneof_case_[0] = kAssetOptIn;
}
inline void SigningInput::clear_asset_opt_in() {
  if (_internal_has_asset_opt_in()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.asset_opt_in_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Algorand::Proto::AssetOptIn* SigningInput::release_asset_opt_in() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.SigningInput.asset_opt_in)
  if (_internal_has_asset_opt_in()) {
    clear_has_message_oneof();
      ::TW::Algorand::Proto::AssetOptIn* temp = message_oneof_.asset_opt_in_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.asset_opt_in_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Algorand::Proto::AssetOptIn& SigningInput::_internal_asset_opt_in() const {
  return _internal_has_asset_opt_in()
      ? *message_oneof_.asset_opt_in_
      : reinterpret_cast< ::TW::Algorand::Proto::AssetOptIn&>(::TW::Algorand::Proto::_AssetOptIn_default_instance_);
}
inline const ::TW::Algorand::Proto::AssetOptIn& SigningInput::asset_opt_in() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningInput.asset_opt_in)
  return _internal_asset_opt_in();
}
inline ::TW::Algorand::Proto::AssetOptIn* SigningInput::unsafe_arena_release_asset_opt_in() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Algorand.Proto.SigningInput.asset_opt_in)
  if (_internal_has_asset_opt_in()) {
    clear_has_message_oneof();
    ::TW::Algorand::Proto::AssetOptIn* temp = message_oneof_.asset_opt_in_;
    message_oneof_.asset_opt_in_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_asset_opt_in(::TW::Algorand::Proto::AssetOptIn* asset_opt_in) {
  clear_message_oneof();
  if (asset_opt_in) {
    set_has_asset_opt_in();
    message_oneof_.asset_opt_in_ = asset_opt_in;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Algorand.Proto.SigningInput.asset_opt_in)
}
inline ::TW::Algorand::Proto::AssetOptIn* SigningInput::_internal_mutable_asset_opt_in() {
  if (!_internal_has_asset_opt_in()) {
    clear_message_oneof();
    set_has_asset_opt_in();
    message_oneof_.asset_opt_in_ = CreateMaybeMessage< ::TW::Algorand::Proto::AssetOptIn >(GetArena());
  }
  return message_oneof_.asset_opt_in_;
}
inline ::TW::Algorand::Proto::AssetOptIn* SigningInput::mutable_asset_opt_in() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.SigningInput.asset_opt_in)
  return _internal_mutable_asset_opt_in();
}

inline bool SigningInput::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline SigningInput::MessageOneofCase SigningInput::message_oneof_case() const {
  return SigningInput::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Algorand.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.Algorand.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.Algorand.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Algorand.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Algorand.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Algorand.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Algorand.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Algorand.Proto.SigningOutput.encoded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Algorand
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Algorand_2eproto
