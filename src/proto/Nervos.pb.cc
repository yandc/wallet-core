// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nervos.proto

#include "Nervos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Cell_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CellDep_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CellOutput_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DaoDeposit_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DaoWithdrawPhase1_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DaoWithdrawPhase2_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NativeTransfer_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutPoint_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Script_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SudtTransfer_Nervos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nervos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransactionPlan_Nervos_2eproto;
namespace TW {
namespace Nervos {
namespace Proto {
class TransactionPlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionPlan> _instance;
} _TransactionPlan_default_instance_;
class CellDepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CellDep> _instance;
} _CellDep_default_instance_;
class OutPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutPoint> _instance;
} _OutPoint_default_instance_;
class CellOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CellOutput> _instance;
} _CellOutput_default_instance_;
class ScriptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Script> _instance;
} _Script_default_instance_;
class NativeTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NativeTransfer> _instance;
} _NativeTransfer_default_instance_;
class SudtTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SudtTransfer> _instance;
} _SudtTransfer_default_instance_;
class DaoDepositDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DaoDeposit> _instance;
} _DaoDeposit_default_instance_;
class DaoWithdrawPhase1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DaoWithdrawPhase1> _instance;
} _DaoWithdrawPhase1_default_instance_;
class DaoWithdrawPhase2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DaoWithdrawPhase2> _instance;
} _DaoWithdrawPhase2_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class CellDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cell> _instance;
} _Cell_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Nervos
}  // namespace TW
static void InitDefaultsscc_info_Cell_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_Cell_default_instance_;
    new (ptr) ::TW::Nervos::Proto::Cell();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Cell_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Cell_Nervos_2eproto}, {
      &scc_info_OutPoint_Nervos_2eproto.base,
      &scc_info_Script_Nervos_2eproto.base,}};

static void InitDefaultsscc_info_CellDep_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_CellDep_default_instance_;
    new (ptr) ::TW::Nervos::Proto::CellDep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CellDep_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CellDep_Nervos_2eproto}, {
      &scc_info_OutPoint_Nervos_2eproto.base,}};

static void InitDefaultsscc_info_CellOutput_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_CellOutput_default_instance_;
    new (ptr) ::TW::Nervos::Proto::CellOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CellOutput_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CellOutput_Nervos_2eproto}, {
      &scc_info_Script_Nervos_2eproto.base,}};

static void InitDefaultsscc_info_DaoDeposit_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_DaoDeposit_default_instance_;
    new (ptr) ::TW::Nervos::Proto::DaoDeposit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DaoDeposit_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DaoDeposit_Nervos_2eproto}, {}};

static void InitDefaultsscc_info_DaoWithdrawPhase1_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_DaoWithdrawPhase1_default_instance_;
    new (ptr) ::TW::Nervos::Proto::DaoWithdrawPhase1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DaoWithdrawPhase1_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DaoWithdrawPhase1_Nervos_2eproto}, {
      &scc_info_Cell_Nervos_2eproto.base,}};

static void InitDefaultsscc_info_DaoWithdrawPhase2_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_DaoWithdrawPhase2_default_instance_;
    new (ptr) ::TW::Nervos::Proto::DaoWithdrawPhase2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DaoWithdrawPhase2_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DaoWithdrawPhase2_Nervos_2eproto}, {
      &scc_info_Cell_Nervos_2eproto.base,}};

static void InitDefaultsscc_info_NativeTransfer_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_NativeTransfer_default_instance_;
    new (ptr) ::TW::Nervos::Proto::NativeTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NativeTransfer_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NativeTransfer_Nervos_2eproto}, {}};

static void InitDefaultsscc_info_OutPoint_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_OutPoint_default_instance_;
    new (ptr) ::TW::Nervos::Proto::OutPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutPoint_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutPoint_Nervos_2eproto}, {}};

static void InitDefaultsscc_info_Script_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_Script_default_instance_;
    new (ptr) ::TW::Nervos::Proto::Script();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Script_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Script_Nervos_2eproto}, {}};

static void InitDefaultsscc_info_SigningInput_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Nervos::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SigningInput_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_SigningInput_Nervos_2eproto}, {
      &scc_info_Cell_Nervos_2eproto.base,
      &scc_info_TransactionPlan_Nervos_2eproto.base,
      &scc_info_NativeTransfer_Nervos_2eproto.base,
      &scc_info_SudtTransfer_Nervos_2eproto.base,
      &scc_info_DaoDeposit_Nervos_2eproto.base,
      &scc_info_DaoWithdrawPhase1_Nervos_2eproto.base,
      &scc_info_DaoWithdrawPhase2_Nervos_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Nervos::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Nervos_2eproto}, {}};

static void InitDefaultsscc_info_SudtTransfer_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_SudtTransfer_default_instance_;
    new (ptr) ::TW::Nervos::Proto::SudtTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SudtTransfer_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SudtTransfer_Nervos_2eproto}, {}};

static void InitDefaultsscc_info_TransactionPlan_Nervos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Nervos::Proto::_TransactionPlan_default_instance_;
    new (ptr) ::TW::Nervos::Proto::TransactionPlan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransactionPlan_Nervos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TransactionPlan_Nervos_2eproto}, {
      &scc_info_CellDep_Nervos_2eproto.base,
      &scc_info_Cell_Nervos_2eproto.base,
      &scc_info_CellOutput_Nervos_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Nervos_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Nervos_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Nervos_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Nervos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::TransactionPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::TransactionPlan, cell_deps_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::TransactionPlan, header_deps_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::TransactionPlan, selected_cells_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::TransactionPlan, outputs_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::TransactionPlan, outputs_data_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::TransactionPlan, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::CellDep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::CellDep, dep_type_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::CellDep, out_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::OutPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::OutPoint, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::OutPoint, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::CellOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::CellOutput, capacity_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::CellOutput, lock_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::CellOutput, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Script, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Script, code_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Script, hash_type_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Script, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::NativeTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::NativeTransfer, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::NativeTransfer, change_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::NativeTransfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::NativeTransfer, use_max_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SudtTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SudtTransfer, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SudtTransfer, change_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SudtTransfer, sudt_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SudtTransfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SudtTransfer, use_max_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoDeposit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoDeposit, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoDeposit, change_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoDeposit, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoWithdrawPhase1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoWithdrawPhase1, deposit_cell_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoWithdrawPhase1, change_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoWithdrawPhase2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoWithdrawPhase2, deposit_cell_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoWithdrawPhase2, withdrawing_cell_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::DaoWithdrawPhase2, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningInput, byte_fee_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningInput, cell_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningInput, plan_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningInput, operation_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, out_point_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, capacity_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, lock_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, type_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, data_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, block_number_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, block_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, since_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, input_type_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::Cell, output_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningOutput, transaction_json_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningOutput, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Nervos::Proto::SigningOutput, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Nervos::Proto::TransactionPlan)},
  { 11, -1, sizeof(::TW::Nervos::Proto::CellDep)},
  { 18, -1, sizeof(::TW::Nervos::Proto::OutPoint)},
  { 25, -1, sizeof(::TW::Nervos::Proto::CellOutput)},
  { 33, -1, sizeof(::TW::Nervos::Proto::Script)},
  { 41, -1, sizeof(::TW::Nervos::Proto::NativeTransfer)},
  { 50, -1, sizeof(::TW::Nervos::Proto::SudtTransfer)},
  { 60, -1, sizeof(::TW::Nervos::Proto::DaoDeposit)},
  { 68, -1, sizeof(::TW::Nervos::Proto::DaoWithdrawPhase1)},
  { 75, -1, sizeof(::TW::Nervos::Proto::DaoWithdrawPhase2)},
  { 83, -1, sizeof(::TW::Nervos::Proto::SigningInput)},
  { 98, -1, sizeof(::TW::Nervos::Proto::Cell)},
  { 113, -1, sizeof(::TW::Nervos::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_TransactionPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_CellDep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_OutPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_CellOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_Script_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_NativeTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_SudtTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_DaoDeposit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_DaoWithdrawPhase1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_DaoWithdrawPhase2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_Cell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Nervos::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Nervos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Nervos.proto\022\017TW.Nervos.Proto\032\014Common."
  "proto\"\364\001\n\017TransactionPlan\022+\n\tcell_deps\030\001"
  " \003(\0132\030.TW.Nervos.Proto.CellDep\022\023\n\013header"
  "_deps\030\002 \003(\014\022-\n\016selected_cells\030\003 \003(\0132\025.TW"
  ".Nervos.Proto.Cell\022,\n\007outputs\030\004 \003(\0132\033.TW"
  ".Nervos.Proto.CellOutput\022\024\n\014outputs_data"
  "\030\005 \003(\014\022,\n\005error\030\006 \001(\0162\035.TW.Common.Proto."
  "SigningError\"I\n\007CellDep\022\020\n\010dep_type\030\001 \001("
  "\t\022,\n\tout_point\030\002 \001(\0132\031.TW.Nervos.Proto.O"
  "utPoint\"*\n\010OutPoint\022\017\n\007tx_hash\030\001 \001(\014\022\r\n\005"
  "index\030\002 \001(\r\"l\n\nCellOutput\022\020\n\010capacity\030\001 "
  "\001(\004\022%\n\004lock\030\002 \001(\0132\027.TW.Nervos.Proto.Scri"
  "pt\022%\n\004type\030\003 \001(\0132\027.TW.Nervos.Proto.Scrip"
  "t\"<\n\006Script\022\021\n\tcode_hash\030\001 \001(\014\022\021\n\thash_t"
  "ype\030\002 \001(\t\022\014\n\004args\030\003 \001(\014\"d\n\016NativeTransfe"
  "r\022\022\n\nto_address\030\001 \001(\t\022\026\n\016change_address\030"
  "\002 \001(\t\022\016\n\006amount\030\003 \001(\004\022\026\n\016use_max_amount\030"
  "\004 \001(\010\"x\n\014SudtTransfer\022\022\n\nto_address\030\001 \001("
  "\t\022\026\n\016change_address\030\002 \001(\t\022\024\n\014sudt_addres"
  "s\030\003 \001(\014\022\016\n\006amount\030\004 \001(\t\022\026\n\016use_max_amoun"
  "t\030\005 \001(\010\"H\n\nDaoDeposit\022\022\n\nto_address\030\001 \001("
  "\t\022\026\n\016change_address\030\002 \001(\t\022\016\n\006amount\030\003 \001("
  "\004\"X\n\021DaoWithdrawPhase1\022+\n\014deposit_cell\030\001"
  " \001(\0132\025.TW.Nervos.Proto.Cell\022\026\n\016change_ad"
  "dress\030\002 \001(\t\"\201\001\n\021DaoWithdrawPhase2\022+\n\014dep"
  "osit_cell\030\001 \001(\0132\025.TW.Nervos.Proto.Cell\022/"
  "\n\020withdrawing_cell\030\002 \001(\0132\025.TW.Nervos.Pro"
  "to.Cell\022\016\n\006amount\030\003 \001(\004\"\313\003\n\014SigningInput"
  "\022\020\n\010byte_fee\030\001 \001(\004\022\023\n\013private_key\030\002 \003(\014\022"
  "#\n\004cell\030\003 \003(\0132\025.TW.Nervos.Proto.Cell\022.\n\004"
  "plan\030\004 \001(\0132 .TW.Nervos.Proto.Transaction"
  "Plan\022:\n\017native_transfer\030\005 \001(\0132\037.TW.Nervo"
  "s.Proto.NativeTransferH\000\0226\n\rsudt_transfe"
  "r\030\006 \001(\0132\035.TW.Nervos.Proto.SudtTransferH\000"
  "\0222\n\013dao_deposit\030\007 \001(\0132\033.TW.Nervos.Proto."
  "DaoDepositH\000\022A\n\023dao_withdraw_phase1\030\010 \001("
  "\0132\".TW.Nervos.Proto.DaoWithdrawPhase1H\000\022"
  "A\n\023dao_withdraw_phase2\030\t \001(\0132\".TW.Nervos"
  ".Proto.DaoWithdrawPhase2H\000B\021\n\017operation_"
  "oneof\"\204\002\n\004Cell\022,\n\tout_point\030\001 \001(\0132\031.TW.N"
  "ervos.Proto.OutPoint\022\020\n\010capacity\030\002 \001(\004\022%"
  "\n\004lock\030\003 \001(\0132\027.TW.Nervos.Proto.Script\022%\n"
  "\004type\030\004 \001(\0132\027.TW.Nervos.Proto.Script\022\014\n\004"
  "data\030\005 \001(\014\022\024\n\014block_number\030\006 \001(\004\022\022\n\nbloc"
  "k_hash\030\007 \001(\014\022\r\n\005since\030\010 \001(\004\022\022\n\ninput_typ"
  "e\030\t \001(\014\022\023\n\013output_type\030\n \001(\014\"o\n\rSigningO"
  "utput\022\030\n\020transaction_json\030\001 \001(\t\022\026\n\016trans"
  "action_id\030\002 \001(\t\022,\n\005error\030\003 \001(\0162\035.TW.Comm"
  "on.Proto.SigningErrorB\027\n\025wallet.core.jni"
  ".protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Nervos_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Nervos_2eproto_sccs[13] = {
  &scc_info_Cell_Nervos_2eproto.base,
  &scc_info_CellDep_Nervos_2eproto.base,
  &scc_info_CellOutput_Nervos_2eproto.base,
  &scc_info_DaoDeposit_Nervos_2eproto.base,
  &scc_info_DaoWithdrawPhase1_Nervos_2eproto.base,
  &scc_info_DaoWithdrawPhase2_Nervos_2eproto.base,
  &scc_info_NativeTransfer_Nervos_2eproto.base,
  &scc_info_OutPoint_Nervos_2eproto.base,
  &scc_info_Script_Nervos_2eproto.base,
  &scc_info_SigningInput_Nervos_2eproto.base,
  &scc_info_SigningOutput_Nervos_2eproto.base,
  &scc_info_SudtTransfer_Nervos_2eproto.base,
  &scc_info_TransactionPlan_Nervos_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Nervos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Nervos_2eproto = {
  false, false, descriptor_table_protodef_Nervos_2eproto, "Nervos.proto", 1974,
  &descriptor_table_Nervos_2eproto_once, descriptor_table_Nervos_2eproto_sccs, descriptor_table_Nervos_2eproto_deps, 13, 1,
  schemas, file_default_instances, TableStruct_Nervos_2eproto::offsets,
  file_level_metadata_Nervos_2eproto, 13, file_level_enum_descriptors_Nervos_2eproto, file_level_service_descriptors_Nervos_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Nervos_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Nervos_2eproto)), true);
namespace TW {
namespace Nervos {
namespace Proto {

// ===================================================================

class TransactionPlan::_Internal {
 public:
};

TransactionPlan::TransactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_deps_(arena),
  header_deps_(arena),
  selected_cells_(arena),
  outputs_(arena),
  outputs_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.TransactionPlan)
}
TransactionPlan::TransactionPlan(const TransactionPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_deps_(from.cell_deps_),
      header_deps_(from.header_deps_),
      selected_cells_(from.selected_cells_),
      outputs_(from.outputs_),
      outputs_data_(from.outputs_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.TransactionPlan)
}

void TransactionPlan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionPlan_Nervos_2eproto.base);
  error_ = 0;
}

TransactionPlan::~TransactionPlan() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.TransactionPlan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransactionPlan::ArenaDtor(void* object) {
  TransactionPlan* _this = reinterpret_cast< TransactionPlan* >(object);
  (void)_this;
}
void TransactionPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionPlan& TransactionPlan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionPlan_Nervos_2eproto.base);
  return *internal_default_instance();
}


void TransactionPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.TransactionPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_deps_.Clear();
  header_deps_.Clear();
  selected_cells_.Clear();
  outputs_.Clear();
  outputs_data_.Clear();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TW.Nervos.Proto.CellDep cell_deps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes header_deps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_header_deps();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.Nervos.Proto.Cell selected_cells = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selected_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.Nervos.Proto.CellOutput outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes outputs_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_outputs_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.TransactionPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.Nervos.Proto.CellDep cell_deps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_deps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_deps(i), target, stream);
  }

  // repeated bytes header_deps = 2;
  for (int i = 0, n = this->_internal_header_deps_size(); i < n; i++) {
    const auto& s = this->_internal_header_deps(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated .TW.Nervos.Proto.Cell selected_cells = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selected_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_selected_cells(i), target, stream);
  }

  // repeated .TW.Nervos.Proto.CellOutput outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_outputs(i), target, stream);
  }

  // repeated bytes outputs_data = 5;
  for (int i = 0, n = this->_internal_outputs_data_size(); i < n; i++) {
    const auto& s = this->_internal_outputs_data(i);
    target = stream->WriteBytes(5, s, target);
  }

  // .TW.Common.Proto.SigningError error = 6;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.TransactionPlan)
  return target;
}

size_t TransactionPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.TransactionPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Nervos.Proto.CellDep cell_deps = 1;
  total_size += 1UL * this->_internal_cell_deps_size();
  for (const auto& msg : this->cell_deps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes header_deps = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(header_deps_.size());
  for (int i = 0, n = header_deps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      header_deps_.Get(i));
  }

  // repeated .TW.Nervos.Proto.Cell selected_cells = 3;
  total_size += 1UL * this->_internal_selected_cells_size();
  for (const auto& msg : this->selected_cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.Nervos.Proto.CellOutput outputs = 4;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes outputs_data = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(outputs_data_.size());
  for (int i = 0, n = outputs_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      outputs_data_.Get(i));
  }

  // .TW.Common.Proto.SigningError error = 6;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionPlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.TransactionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionPlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.TransactionPlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.TransactionPlan)
    MergeFrom(*source);
  }
}

void TransactionPlan::MergeFrom(const TransactionPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.TransactionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_deps_.MergeFrom(from.cell_deps_);
  header_deps_.MergeFrom(from.header_deps_);
  selected_cells_.MergeFrom(from.selected_cells_);
  outputs_.MergeFrom(from.outputs_);
  outputs_data_.MergeFrom(from.outputs_data_);
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void TransactionPlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.TransactionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPlan::CopyFrom(const TransactionPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.TransactionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPlan::IsInitialized() const {
  return true;
}

void TransactionPlan::InternalSwap(TransactionPlan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cell_deps_.InternalSwap(&other->cell_deps_);
  header_deps_.InternalSwap(&other->header_deps_);
  selected_cells_.InternalSwap(&other->selected_cells_);
  outputs_.InternalSwap(&other->outputs_);
  outputs_data_.InternalSwap(&other->outputs_data_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionPlan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CellDep::_Internal {
 public:
  static const ::TW::Nervos::Proto::OutPoint& out_point(const CellDep* msg);
};

const ::TW::Nervos::Proto::OutPoint&
CellDep::_Internal::out_point(const CellDep* msg) {
  return *msg->out_point_;
}
CellDep::CellDep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.CellDep)
}
CellDep::CellDep(const CellDep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dep_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dep_type().empty()) {
    dep_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dep_type(), 
      GetArena());
  }
  if (from._internal_has_out_point()) {
    out_point_ = new ::TW::Nervos::Proto::OutPoint(*from.out_point_);
  } else {
    out_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.CellDep)
}

void CellDep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CellDep_Nervos_2eproto.base);
  dep_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  out_point_ = nullptr;
}

CellDep::~CellDep() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.CellDep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellDep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dep_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_point_;
}

void CellDep::ArenaDtor(void* object) {
  CellDep* _this = reinterpret_cast< CellDep* >(object);
  (void)_this;
}
void CellDep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellDep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CellDep& CellDep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CellDep_Nervos_2eproto.base);
  return *internal_default_instance();
}


void CellDep::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.CellDep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dep_type_.ClearToEmpty();
  if (GetArena() == nullptr && out_point_ != nullptr) {
    delete out_point_;
  }
  out_point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dep_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dep_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.CellDep.dep_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.OutPoint out_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellDep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.CellDep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dep_type = 1;
  if (this->dep_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dep_type().data(), static_cast<int>(this->_internal_dep_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.CellDep.dep_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dep_type(), target);
  }

  // .TW.Nervos.Proto.OutPoint out_point = 2;
  if (this->has_out_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::out_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.CellDep)
  return target;
}

size_t CellDep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.CellDep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dep_type = 1;
  if (this->dep_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dep_type());
  }

  // .TW.Nervos.Proto.OutPoint out_point = 2;
  if (this->has_out_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellDep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.CellDep)
  GOOGLE_DCHECK_NE(&from, this);
  const CellDep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellDep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.CellDep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.CellDep)
    MergeFrom(*source);
  }
}

void CellDep::MergeFrom(const CellDep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.CellDep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dep_type().size() > 0) {
    _internal_set_dep_type(from._internal_dep_type());
  }
  if (from.has_out_point()) {
    _internal_mutable_out_point()->::TW::Nervos::Proto::OutPoint::MergeFrom(from._internal_out_point());
  }
}

void CellDep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.CellDep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellDep::CopyFrom(const CellDep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.CellDep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDep::IsInitialized() const {
  return true;
}

void CellDep::InternalSwap(CellDep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dep_type_.Swap(&other->dep_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(out_point_, other->out_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OutPoint::_Internal {
 public:
};

OutPoint::OutPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.OutPoint)
}
OutPoint::OutPoint(const OutPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_hash(), 
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.OutPoint)
}

void OutPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutPoint_Nervos_2eproto.base);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

OutPoint::~OutPoint() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.OutPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutPoint::ArenaDtor(void* object) {
  OutPoint* _this = reinterpret_cast< OutPoint* >(object);
  (void)_this;
}
void OutPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutPoint& OutPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutPoint_Nervos_2eproto.base);
  return *internal_default_instance();
}


void OutPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.OutPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_hash_.ClearToEmpty();
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.OutPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.OutPoint)
  return target;
}

size_t OutPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.OutPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.OutPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const OutPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.OutPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.OutPoint)
    MergeFrom(*source);
  }
}

void OutPoint::MergeFrom(const OutPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.OutPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void OutPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.OutPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutPoint::CopyFrom(const OutPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.OutPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutPoint::IsInitialized() const {
  return true;
}

void OutPoint::InternalSwap(OutPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CellOutput::_Internal {
 public:
  static const ::TW::Nervos::Proto::Script& lock(const CellOutput* msg);
  static const ::TW::Nervos::Proto::Script& type(const CellOutput* msg);
};

const ::TW::Nervos::Proto::Script&
CellOutput::_Internal::lock(const CellOutput* msg) {
  return *msg->lock_;
}
const ::TW::Nervos::Proto::Script&
CellOutput::_Internal::type(const CellOutput* msg) {
  return *msg->type_;
}
CellOutput::CellOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.CellOutput)
}
CellOutput::CellOutput(const CellOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lock()) {
    lock_ = new ::TW::Nervos::Proto::Script(*from.lock_);
  } else {
    lock_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::TW::Nervos::Proto::Script(*from.type_);
  } else {
    type_ = nullptr;
  }
  capacity_ = from.capacity_;
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.CellOutput)
}

void CellOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CellOutput_Nervos_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lock_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&lock_)) + sizeof(capacity_));
}

CellOutput::~CellOutput() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.CellOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lock_;
  if (this != internal_default_instance()) delete type_;
}

void CellOutput::ArenaDtor(void* object) {
  CellOutput* _this = reinterpret_cast< CellOutput* >(object);
  (void)_this;
}
void CellOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CellOutput& CellOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CellOutput_Nervos_2eproto.base);
  return *internal_default_instance();
}


void CellOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.CellOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lock_ != nullptr) {
    delete lock_;
  }
  lock_ = nullptr;
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  capacity_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.Script lock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.Script type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.CellOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 capacity = 1;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_capacity(), target);
  }

  // .TW.Nervos.Proto.Script lock = 2;
  if (this->has_lock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lock(this), target, stream);
  }

  // .TW.Nervos.Proto.Script type = 3;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.CellOutput)
  return target;
}

size_t CellOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.CellOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Nervos.Proto.Script lock = 2;
  if (this->has_lock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lock_);
  }

  // .TW.Nervos.Proto.Script type = 3;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // uint64 capacity = 1;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.CellOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const CellOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.CellOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.CellOutput)
    MergeFrom(*source);
  }
}

void CellOutput::MergeFrom(const CellOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.CellOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lock()) {
    _internal_mutable_lock()->::TW::Nervos::Proto::Script::MergeFrom(from._internal_lock());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::TW::Nervos::Proto::Script::MergeFrom(from._internal_type());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
}

void CellOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.CellOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellOutput::CopyFrom(const CellOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.CellOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellOutput::IsInitialized() const {
  return true;
}

void CellOutput::InternalSwap(CellOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellOutput, capacity_)
      + sizeof(CellOutput::capacity_)
      - PROTOBUF_FIELD_OFFSET(CellOutput, lock_)>(
          reinterpret_cast<char*>(&lock_),
          reinterpret_cast<char*>(&other->lock_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Script::_Internal {
 public:
};

Script::Script(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.Script)
}
Script::Script(const Script& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code_hash().empty()) {
    code_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_hash(), 
      GetArena());
  }
  hash_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash_type().empty()) {
    hash_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash_type(), 
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.Script)
}

void Script::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Script_Nervos_2eproto.base);
  code_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Script::~Script() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.Script)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Script::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Script::ArenaDtor(void* object) {
  Script* _this = reinterpret_cast< Script* >(object);
  (void)_this;
}
void Script::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Script::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Script& Script::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Script_Nervos_2eproto.base);
  return *internal_default_instance();
}


void Script::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.Script)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_hash_.ClearToEmpty();
  hash_type_.ClearToEmpty();
  args_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Script::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes code_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.Script.hash_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Script::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.Script)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes code_hash = 1;
  if (this->code_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_code_hash(), target);
  }

  // string hash_type = 2;
  if (this->hash_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash_type().data(), static_cast<int>(this->_internal_hash_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.Script.hash_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash_type(), target);
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.Script)
  return target;
}

size_t Script::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.Script)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes code_hash = 1;
  if (this->code_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code_hash());
  }

  // string hash_type = 2;
  if (this->hash_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash_type());
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Script::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.Script)
  GOOGLE_DCHECK_NE(&from, this);
  const Script* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Script>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.Script)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.Script)
    MergeFrom(*source);
  }
}

void Script::MergeFrom(const Script& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.Script)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code_hash().size() > 0) {
    _internal_set_code_hash(from._internal_code_hash());
  }
  if (from.hash_type().size() > 0) {
    _internal_set_hash_type(from._internal_hash_type());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
}

void Script::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.Script)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Script::CopyFrom(const Script& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.Script)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Script::IsInitialized() const {
  return true;
}

void Script::InternalSwap(Script* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_hash_.Swap(&other->code_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_type_.Swap(&other->hash_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Script::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NativeTransfer::_Internal {
 public:
};

NativeTransfer::NativeTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.NativeTransfer)
}
NativeTransfer::NativeTransfer(const NativeTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_change_address().empty()) {
    change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_address(), 
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_max_amount_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(use_max_amount_));
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.NativeTransfer)
}

void NativeTransfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NativeTransfer_Nervos_2eproto.base);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_max_amount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(use_max_amount_));
}

NativeTransfer::~NativeTransfer() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.NativeTransfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NativeTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NativeTransfer::ArenaDtor(void* object) {
  NativeTransfer* _this = reinterpret_cast< NativeTransfer* >(object);
  (void)_this;
}
void NativeTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NativeTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NativeTransfer& NativeTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NativeTransfer_Nervos_2eproto.base);
  return *internal_default_instance();
}


void NativeTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.NativeTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_address_.ClearToEmpty();
  change_address_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_max_amount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(use_max_amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NativeTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string to_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.NativeTransfer.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string change_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.NativeTransfer.change_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_max_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_max_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NativeTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.NativeTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string to_address = 1;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.NativeTransfer.to_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to_address(), target);
  }

  // string change_address = 2;
  if (this->change_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_change_address().data(), static_cast<int>(this->_internal_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.NativeTransfer.change_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_change_address(), target);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // bool use_max_amount = 4;
  if (this->use_max_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_max_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.NativeTransfer)
  return target;
}

size_t NativeTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.NativeTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to_address = 1;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string change_address = 2;
  if (this->change_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_address());
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // bool use_max_amount = 4;
  if (this->use_max_amount() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NativeTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.NativeTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const NativeTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NativeTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.NativeTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.NativeTransfer)
    MergeFrom(*source);
  }
}

void NativeTransfer::MergeFrom(const NativeTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.NativeTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.change_address().size() > 0) {
    _internal_set_change_address(from._internal_change_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.use_max_amount() != 0) {
    _internal_set_use_max_amount(from._internal_use_max_amount());
  }
}

void NativeTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.NativeTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeTransfer::CopyFrom(const NativeTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.NativeTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeTransfer::IsInitialized() const {
  return true;
}

void NativeTransfer::InternalSwap(NativeTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  change_address_.Swap(&other->change_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NativeTransfer, use_max_amount_)
      + sizeof(NativeTransfer::use_max_amount_)
      - PROTOBUF_FIELD_OFFSET(NativeTransfer, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NativeTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SudtTransfer::_Internal {
 public:
};

SudtTransfer::SudtTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.SudtTransfer)
}
SudtTransfer::SudtTransfer(const SudtTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_change_address().empty()) {
    change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_address(), 
      GetArena());
  }
  sudt_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sudt_address().empty()) {
    sudt_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sudt_address(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  use_max_amount_ = from.use_max_amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.SudtTransfer)
}

void SudtTransfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SudtTransfer_Nervos_2eproto.base);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sudt_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_max_amount_ = false;
}

SudtTransfer::~SudtTransfer() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.SudtTransfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SudtTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sudt_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SudtTransfer::ArenaDtor(void* object) {
  SudtTransfer* _this = reinterpret_cast< SudtTransfer* >(object);
  (void)_this;
}
void SudtTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SudtTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SudtTransfer& SudtTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SudtTransfer_Nervos_2eproto.base);
  return *internal_default_instance();
}


void SudtTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.SudtTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_address_.ClearToEmpty();
  change_address_.ClearToEmpty();
  sudt_address_.ClearToEmpty();
  amount_.ClearToEmpty();
  use_max_amount_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SudtTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string to_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.SudtTransfer.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string change_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.SudtTransfer.change_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sudt_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sudt_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.SudtTransfer.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_max_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          use_max_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SudtTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.SudtTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string to_address = 1;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.SudtTransfer.to_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to_address(), target);
  }

  // string change_address = 2;
  if (this->change_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_change_address().data(), static_cast<int>(this->_internal_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.SudtTransfer.change_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_change_address(), target);
  }

  // bytes sudt_address = 3;
  if (this->sudt_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sudt_address(), target);
  }

  // string amount = 4;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.SudtTransfer.amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_amount(), target);
  }

  // bool use_max_amount = 5;
  if (this->use_max_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_max_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.SudtTransfer)
  return target;
}

size_t SudtTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.SudtTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to_address = 1;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string change_address = 2;
  if (this->change_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_address());
  }

  // bytes sudt_address = 3;
  if (this->sudt_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sudt_address());
  }

  // string amount = 4;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // bool use_max_amount = 5;
  if (this->use_max_amount() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SudtTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.SudtTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const SudtTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SudtTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.SudtTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.SudtTransfer)
    MergeFrom(*source);
  }
}

void SudtTransfer::MergeFrom(const SudtTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.SudtTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.change_address().size() > 0) {
    _internal_set_change_address(from._internal_change_address());
  }
  if (from.sudt_address().size() > 0) {
    _internal_set_sudt_address(from._internal_sudt_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.use_max_amount() != 0) {
    _internal_set_use_max_amount(from._internal_use_max_amount());
  }
}

void SudtTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.SudtTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SudtTransfer::CopyFrom(const SudtTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.SudtTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SudtTransfer::IsInitialized() const {
  return true;
}

void SudtTransfer::InternalSwap(SudtTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  change_address_.Swap(&other->change_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sudt_address_.Swap(&other->sudt_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(use_max_amount_, other->use_max_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SudtTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DaoDeposit::_Internal {
 public:
};

DaoDeposit::DaoDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.DaoDeposit)
}
DaoDeposit::DaoDeposit(const DaoDeposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_change_address().empty()) {
    change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_address(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.DaoDeposit)
}

void DaoDeposit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DaoDeposit_Nervos_2eproto.base);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

DaoDeposit::~DaoDeposit() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.DaoDeposit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DaoDeposit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DaoDeposit::ArenaDtor(void* object) {
  DaoDeposit* _this = reinterpret_cast< DaoDeposit* >(object);
  (void)_this;
}
void DaoDeposit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DaoDeposit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DaoDeposit& DaoDeposit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DaoDeposit_Nervos_2eproto.base);
  return *internal_default_instance();
}


void DaoDeposit::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.DaoDeposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_address_.ClearToEmpty();
  change_address_.ClearToEmpty();
  amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DaoDeposit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string to_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.DaoDeposit.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string change_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.DaoDeposit.change_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DaoDeposit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.DaoDeposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string to_address = 1;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.DaoDeposit.to_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to_address(), target);
  }

  // string change_address = 2;
  if (this->change_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_change_address().data(), static_cast<int>(this->_internal_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.DaoDeposit.change_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_change_address(), target);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.DaoDeposit)
  return target;
}

size_t DaoDeposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.DaoDeposit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to_address = 1;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string change_address = 2;
  if (this->change_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_address());
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DaoDeposit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.DaoDeposit)
  GOOGLE_DCHECK_NE(&from, this);
  const DaoDeposit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DaoDeposit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.DaoDeposit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.DaoDeposit)
    MergeFrom(*source);
  }
}

void DaoDeposit::MergeFrom(const DaoDeposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.DaoDeposit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.change_address().size() > 0) {
    _internal_set_change_address(from._internal_change_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void DaoDeposit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.DaoDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaoDeposit::CopyFrom(const DaoDeposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.DaoDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaoDeposit::IsInitialized() const {
  return true;
}

void DaoDeposit::InternalSwap(DaoDeposit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  change_address_.Swap(&other->change_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DaoDeposit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DaoWithdrawPhase1::_Internal {
 public:
  static const ::TW::Nervos::Proto::Cell& deposit_cell(const DaoWithdrawPhase1* msg);
};

const ::TW::Nervos::Proto::Cell&
DaoWithdrawPhase1::_Internal::deposit_cell(const DaoWithdrawPhase1* msg) {
  return *msg->deposit_cell_;
}
DaoWithdrawPhase1::DaoWithdrawPhase1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.DaoWithdrawPhase1)
}
DaoWithdrawPhase1::DaoWithdrawPhase1(const DaoWithdrawPhase1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_change_address().empty()) {
    change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_address(), 
      GetArena());
  }
  if (from._internal_has_deposit_cell()) {
    deposit_cell_ = new ::TW::Nervos::Proto::Cell(*from.deposit_cell_);
  } else {
    deposit_cell_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.DaoWithdrawPhase1)
}

void DaoWithdrawPhase1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DaoWithdrawPhase1_Nervos_2eproto.base);
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deposit_cell_ = nullptr;
}

DaoWithdrawPhase1::~DaoWithdrawPhase1() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.DaoWithdrawPhase1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DaoWithdrawPhase1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete deposit_cell_;
}

void DaoWithdrawPhase1::ArenaDtor(void* object) {
  DaoWithdrawPhase1* _this = reinterpret_cast< DaoWithdrawPhase1* >(object);
  (void)_this;
}
void DaoWithdrawPhase1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DaoWithdrawPhase1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DaoWithdrawPhase1& DaoWithdrawPhase1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DaoWithdrawPhase1_Nervos_2eproto.base);
  return *internal_default_instance();
}


void DaoWithdrawPhase1::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.DaoWithdrawPhase1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_address_.ClearToEmpty();
  if (GetArena() == nullptr && deposit_cell_ != nullptr) {
    delete deposit_cell_;
  }
  deposit_cell_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DaoWithdrawPhase1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Nervos.Proto.Cell deposit_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string change_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.DaoWithdrawPhase1.change_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DaoWithdrawPhase1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.DaoWithdrawPhase1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Nervos.Proto.Cell deposit_cell = 1;
  if (this->has_deposit_cell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::deposit_cell(this), target, stream);
  }

  // string change_address = 2;
  if (this->change_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_change_address().data(), static_cast<int>(this->_internal_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.DaoWithdrawPhase1.change_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_change_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.DaoWithdrawPhase1)
  return target;
}

size_t DaoWithdrawPhase1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.DaoWithdrawPhase1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string change_address = 2;
  if (this->change_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_address());
  }

  // .TW.Nervos.Proto.Cell deposit_cell = 1;
  if (this->has_deposit_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deposit_cell_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DaoWithdrawPhase1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.DaoWithdrawPhase1)
  GOOGLE_DCHECK_NE(&from, this);
  const DaoWithdrawPhase1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DaoWithdrawPhase1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.DaoWithdrawPhase1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.DaoWithdrawPhase1)
    MergeFrom(*source);
  }
}

void DaoWithdrawPhase1::MergeFrom(const DaoWithdrawPhase1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.DaoWithdrawPhase1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.change_address().size() > 0) {
    _internal_set_change_address(from._internal_change_address());
  }
  if (from.has_deposit_cell()) {
    _internal_mutable_deposit_cell()->::TW::Nervos::Proto::Cell::MergeFrom(from._internal_deposit_cell());
  }
}

void DaoWithdrawPhase1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.DaoWithdrawPhase1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaoWithdrawPhase1::CopyFrom(const DaoWithdrawPhase1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.DaoWithdrawPhase1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaoWithdrawPhase1::IsInitialized() const {
  return true;
}

void DaoWithdrawPhase1::InternalSwap(DaoWithdrawPhase1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  change_address_.Swap(&other->change_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(deposit_cell_, other->deposit_cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DaoWithdrawPhase1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DaoWithdrawPhase2::_Internal {
 public:
  static const ::TW::Nervos::Proto::Cell& deposit_cell(const DaoWithdrawPhase2* msg);
  static const ::TW::Nervos::Proto::Cell& withdrawing_cell(const DaoWithdrawPhase2* msg);
};

const ::TW::Nervos::Proto::Cell&
DaoWithdrawPhase2::_Internal::deposit_cell(const DaoWithdrawPhase2* msg) {
  return *msg->deposit_cell_;
}
const ::TW::Nervos::Proto::Cell&
DaoWithdrawPhase2::_Internal::withdrawing_cell(const DaoWithdrawPhase2* msg) {
  return *msg->withdrawing_cell_;
}
DaoWithdrawPhase2::DaoWithdrawPhase2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.DaoWithdrawPhase2)
}
DaoWithdrawPhase2::DaoWithdrawPhase2(const DaoWithdrawPhase2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deposit_cell()) {
    deposit_cell_ = new ::TW::Nervos::Proto::Cell(*from.deposit_cell_);
  } else {
    deposit_cell_ = nullptr;
  }
  if (from._internal_has_withdrawing_cell()) {
    withdrawing_cell_ = new ::TW::Nervos::Proto::Cell(*from.withdrawing_cell_);
  } else {
    withdrawing_cell_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.DaoWithdrawPhase2)
}

void DaoWithdrawPhase2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DaoWithdrawPhase2_Nervos_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&deposit_cell_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&deposit_cell_)) + sizeof(amount_));
}

DaoWithdrawPhase2::~DaoWithdrawPhase2() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.DaoWithdrawPhase2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DaoWithdrawPhase2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete deposit_cell_;
  if (this != internal_default_instance()) delete withdrawing_cell_;
}

void DaoWithdrawPhase2::ArenaDtor(void* object) {
  DaoWithdrawPhase2* _this = reinterpret_cast< DaoWithdrawPhase2* >(object);
  (void)_this;
}
void DaoWithdrawPhase2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DaoWithdrawPhase2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DaoWithdrawPhase2& DaoWithdrawPhase2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DaoWithdrawPhase2_Nervos_2eproto.base);
  return *internal_default_instance();
}


void DaoWithdrawPhase2::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.DaoWithdrawPhase2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && deposit_cell_ != nullptr) {
    delete deposit_cell_;
  }
  deposit_cell_ = nullptr;
  if (GetArena() == nullptr && withdrawing_cell_ != nullptr) {
    delete withdrawing_cell_;
  }
  withdrawing_cell_ = nullptr;
  amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DaoWithdrawPhase2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Nervos.Proto.Cell deposit_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.Cell withdrawing_cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawing_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DaoWithdrawPhase2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.DaoWithdrawPhase2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Nervos.Proto.Cell deposit_cell = 1;
  if (this->has_deposit_cell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::deposit_cell(this), target, stream);
  }

  // .TW.Nervos.Proto.Cell withdrawing_cell = 2;
  if (this->has_withdrawing_cell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::withdrawing_cell(this), target, stream);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.DaoWithdrawPhase2)
  return target;
}

size_t DaoWithdrawPhase2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.DaoWithdrawPhase2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Nervos.Proto.Cell deposit_cell = 1;
  if (this->has_deposit_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deposit_cell_);
  }

  // .TW.Nervos.Proto.Cell withdrawing_cell = 2;
  if (this->has_withdrawing_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *withdrawing_cell_);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DaoWithdrawPhase2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.DaoWithdrawPhase2)
  GOOGLE_DCHECK_NE(&from, this);
  const DaoWithdrawPhase2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DaoWithdrawPhase2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.DaoWithdrawPhase2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.DaoWithdrawPhase2)
    MergeFrom(*source);
  }
}

void DaoWithdrawPhase2::MergeFrom(const DaoWithdrawPhase2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.DaoWithdrawPhase2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_deposit_cell()) {
    _internal_mutable_deposit_cell()->::TW::Nervos::Proto::Cell::MergeFrom(from._internal_deposit_cell());
  }
  if (from.has_withdrawing_cell()) {
    _internal_mutable_withdrawing_cell()->::TW::Nervos::Proto::Cell::MergeFrom(from._internal_withdrawing_cell());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void DaoWithdrawPhase2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.DaoWithdrawPhase2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaoWithdrawPhase2::CopyFrom(const DaoWithdrawPhase2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.DaoWithdrawPhase2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaoWithdrawPhase2::IsInitialized() const {
  return true;
}

void DaoWithdrawPhase2::InternalSwap(DaoWithdrawPhase2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DaoWithdrawPhase2, amount_)
      + sizeof(DaoWithdrawPhase2::amount_)
      - PROTOBUF_FIELD_OFFSET(DaoWithdrawPhase2, deposit_cell_)>(
          reinterpret_cast<char*>(&deposit_cell_),
          reinterpret_cast<char*>(&other->deposit_cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DaoWithdrawPhase2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Nervos::Proto::TransactionPlan& plan(const SigningInput* msg);
  static const ::TW::Nervos::Proto::NativeTransfer& native_transfer(const SigningInput* msg);
  static const ::TW::Nervos::Proto::SudtTransfer& sudt_transfer(const SigningInput* msg);
  static const ::TW::Nervos::Proto::DaoDeposit& dao_deposit(const SigningInput* msg);
  static const ::TW::Nervos::Proto::DaoWithdrawPhase1& dao_withdraw_phase1(const SigningInput* msg);
  static const ::TW::Nervos::Proto::DaoWithdrawPhase2& dao_withdraw_phase2(const SigningInput* msg);
};

const ::TW::Nervos::Proto::TransactionPlan&
SigningInput::_Internal::plan(const SigningInput* msg) {
  return *msg->plan_;
}
const ::TW::Nervos::Proto::NativeTransfer&
SigningInput::_Internal::native_transfer(const SigningInput* msg) {
  return *msg->operation_oneof_.native_transfer_;
}
const ::TW::Nervos::Proto::SudtTransfer&
SigningInput::_Internal::sudt_transfer(const SigningInput* msg) {
  return *msg->operation_oneof_.sudt_transfer_;
}
const ::TW::Nervos::Proto::DaoDeposit&
SigningInput::_Internal::dao_deposit(const SigningInput* msg) {
  return *msg->operation_oneof_.dao_deposit_;
}
const ::TW::Nervos::Proto::DaoWithdrawPhase1&
SigningInput::_Internal::dao_withdraw_phase1(const SigningInput* msg) {
  return *msg->operation_oneof_.dao_withdraw_phase1_;
}
const ::TW::Nervos::Proto::DaoWithdrawPhase2&
SigningInput::_Internal::dao_withdraw_phase2(const SigningInput* msg) {
  return *msg->operation_oneof_.dao_withdraw_phase2_;
}
void SigningInput::set_allocated_native_transfer(::TW::Nervos::Proto::NativeTransfer* native_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_oneof();
  if (native_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native_transfer);
    if (message_arena != submessage_arena) {
      native_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native_transfer, submessage_arena);
    }
    set_has_native_transfer();
    operation_oneof_.native_transfer_ = native_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SigningInput.native_transfer)
}
void SigningInput::set_allocated_sudt_transfer(::TW::Nervos::Proto::SudtTransfer* sudt_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_oneof();
  if (sudt_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sudt_transfer);
    if (message_arena != submessage_arena) {
      sudt_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sudt_transfer, submessage_arena);
    }
    set_has_sudt_transfer();
    operation_oneof_.sudt_transfer_ = sudt_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SigningInput.sudt_transfer)
}
void SigningInput::set_allocated_dao_deposit(::TW::Nervos::Proto::DaoDeposit* dao_deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_oneof();
  if (dao_deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dao_deposit);
    if (message_arena != submessage_arena) {
      dao_deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dao_deposit, submessage_arena);
    }
    set_has_dao_deposit();
    operation_oneof_.dao_deposit_ = dao_deposit;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SigningInput.dao_deposit)
}
void SigningInput::set_allocated_dao_withdraw_phase1(::TW::Nervos::Proto::DaoWithdrawPhase1* dao_withdraw_phase1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_oneof();
  if (dao_withdraw_phase1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dao_withdraw_phase1);
    if (message_arena != submessage_arena) {
      dao_withdraw_phase1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dao_withdraw_phase1, submessage_arena);
    }
    set_has_dao_withdraw_phase1();
    operation_oneof_.dao_withdraw_phase1_ = dao_withdraw_phase1;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SigningInput.dao_withdraw_phase1)
}
void SigningInput::set_allocated_dao_withdraw_phase2(::TW::Nervos::Proto::DaoWithdrawPhase2* dao_withdraw_phase2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_oneof();
  if (dao_withdraw_phase2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dao_withdraw_phase2);
    if (message_arena != submessage_arena) {
      dao_withdraw_phase2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dao_withdraw_phase2, submessage_arena);
    }
    set_has_dao_withdraw_phase2();
    operation_oneof_.dao_withdraw_phase2_ = dao_withdraw_phase2;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Nervos.Proto.SigningInput.dao_withdraw_phase2)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  private_key_(arena),
  cell_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      private_key_(from.private_key_),
      cell_(from.cell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plan()) {
    plan_ = new ::TW::Nervos::Proto::TransactionPlan(*from.plan_);
  } else {
    plan_ = nullptr;
  }
  byte_fee_ = from.byte_fee_;
  clear_has_operation_oneof();
  switch (from.operation_oneof_case()) {
    case kNativeTransfer: {
      _internal_mutable_native_transfer()->::TW::Nervos::Proto::NativeTransfer::MergeFrom(from._internal_native_transfer());
      break;
    }
    case kSudtTransfer: {
      _internal_mutable_sudt_transfer()->::TW::Nervos::Proto::SudtTransfer::MergeFrom(from._internal_sudt_transfer());
      break;
    }
    case kDaoDeposit: {
      _internal_mutable_dao_deposit()->::TW::Nervos::Proto::DaoDeposit::MergeFrom(from._internal_dao_deposit());
      break;
    }
    case kDaoWithdrawPhase1: {
      _internal_mutable_dao_withdraw_phase1()->::TW::Nervos::Proto::DaoWithdrawPhase1::MergeFrom(from._internal_dao_withdraw_phase1());
      break;
    }
    case kDaoWithdrawPhase2: {
      _internal_mutable_dao_withdraw_phase2()->::TW::Nervos::Proto::DaoWithdrawPhase2::MergeFrom(from._internal_dao_withdraw_phase2());
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Nervos_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&plan_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&byte_fee_) -
      reinterpret_cast<char*>(&plan_)) + sizeof(byte_fee_));
  clear_has_operation_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plan_;
  if (has_operation_oneof()) {
    clear_operation_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Nervos_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::clear_operation_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Nervos.Proto.SigningInput)
  switch (operation_oneof_case()) {
    case kNativeTransfer: {
      if (GetArena() == nullptr) {
        delete operation_oneof_.native_transfer_;
      }
      break;
    }
    case kSudtTransfer: {
      if (GetArena() == nullptr) {
        delete operation_oneof_.sudt_transfer_;
      }
      break;
    }
    case kDaoDeposit: {
      if (GetArena() == nullptr) {
        delete operation_oneof_.dao_deposit_;
      }
      break;
    }
    case kDaoWithdrawPhase1: {
      if (GetArena() == nullptr) {
        delete operation_oneof_.dao_withdraw_phase1_;
      }
      break;
    }
    case kDaoWithdrawPhase2: {
      if (GetArena() == nullptr) {
        delete operation_oneof_.dao_withdraw_phase2_;
      }
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.Clear();
  cell_.Clear();
  if (GetArena() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
  byte_fee_ = PROTOBUF_ULONGLONG(0);
  clear_operation_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 byte_fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          byte_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes private_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_private_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TW.Nervos.Proto.Cell cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.TransactionPlan plan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.NativeTransfer native_transfer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_native_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.SudtTransfer sudt_transfer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sudt_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.DaoDeposit dao_deposit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dao_deposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.DaoWithdrawPhase1 dao_withdraw_phase1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dao_withdraw_phase1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.DaoWithdrawPhase2 dao_withdraw_phase2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dao_withdraw_phase2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 byte_fee = 1;
  if (this->byte_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_byte_fee(), target);
  }

  // repeated bytes private_key = 2;
  for (int i = 0, n = this->_internal_private_key_size(); i < n; i++) {
    const auto& s = this->_internal_private_key(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated .TW.Nervos.Proto.Cell cell = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cell(i), target, stream);
  }

  // .TW.Nervos.Proto.TransactionPlan plan = 4;
  if (this->has_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::plan(this), target, stream);
  }

  // .TW.Nervos.Proto.NativeTransfer native_transfer = 5;
  if (_internal_has_native_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::native_transfer(this), target, stream);
  }

  // .TW.Nervos.Proto.SudtTransfer sudt_transfer = 6;
  if (_internal_has_sudt_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sudt_transfer(this), target, stream);
  }

  // .TW.Nervos.Proto.DaoDeposit dao_deposit = 7;
  if (_internal_has_dao_deposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dao_deposit(this), target, stream);
  }

  // .TW.Nervos.Proto.DaoWithdrawPhase1 dao_withdraw_phase1 = 8;
  if (_internal_has_dao_withdraw_phase1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dao_withdraw_phase1(this), target, stream);
  }

  // .TW.Nervos.Proto.DaoWithdrawPhase2 dao_withdraw_phase2 = 9;
  if (_internal_has_dao_withdraw_phase2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::dao_withdraw_phase2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes private_key = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(private_key_.size());
  for (int i = 0, n = private_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      private_key_.Get(i));
  }

  // repeated .TW.Nervos.Proto.Cell cell = 3;
  total_size += 1UL * this->_internal_cell_size();
  for (const auto& msg : this->cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .TW.Nervos.Proto.TransactionPlan plan = 4;
  if (this->has_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_);
  }

  // uint64 byte_fee = 1;
  if (this->byte_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_byte_fee());
  }

  switch (operation_oneof_case()) {
    // .TW.Nervos.Proto.NativeTransfer native_transfer = 5;
    case kNativeTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.native_transfer_);
      break;
    }
    // .TW.Nervos.Proto.SudtTransfer sudt_transfer = 6;
    case kSudtTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.sudt_transfer_);
      break;
    }
    // .TW.Nervos.Proto.DaoDeposit dao_deposit = 7;
    case kDaoDeposit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.dao_deposit_);
      break;
    }
    // .TW.Nervos.Proto.DaoWithdrawPhase1 dao_withdraw_phase1 = 8;
    case kDaoWithdrawPhase1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.dao_withdraw_phase1_);
      break;
    }
    // .TW.Nervos.Proto.DaoWithdrawPhase2 dao_withdraw_phase2 = 9;
    case kDaoWithdrawPhase2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.dao_withdraw_phase2_);
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  private_key_.MergeFrom(from.private_key_);
  cell_.MergeFrom(from.cell_);
  if (from.has_plan()) {
    _internal_mutable_plan()->::TW::Nervos::Proto::TransactionPlan::MergeFrom(from._internal_plan());
  }
  if (from.byte_fee() != 0) {
    _internal_set_byte_fee(from._internal_byte_fee());
  }
  switch (from.operation_oneof_case()) {
    case kNativeTransfer: {
      _internal_mutable_native_transfer()->::TW::Nervos::Proto::NativeTransfer::MergeFrom(from._internal_native_transfer());
      break;
    }
    case kSudtTransfer: {
      _internal_mutable_sudt_transfer()->::TW::Nervos::Proto::SudtTransfer::MergeFrom(from._internal_sudt_transfer());
      break;
    }
    case kDaoDeposit: {
      _internal_mutable_dao_deposit()->::TW::Nervos::Proto::DaoDeposit::MergeFrom(from._internal_dao_deposit());
      break;
    }
    case kDaoWithdrawPhase1: {
      _internal_mutable_dao_withdraw_phase1()->::TW::Nervos::Proto::DaoWithdrawPhase1::MergeFrom(from._internal_dao_withdraw_phase1());
      break;
    }
    case kDaoWithdrawPhase2: {
      _internal_mutable_dao_withdraw_phase2()->::TW::Nervos::Proto::DaoWithdrawPhase2::MergeFrom(from._internal_dao_withdraw_phase2());
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  private_key_.InternalSwap(&other->private_key_);
  cell_.InternalSwap(&other->cell_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, byte_fee_)
      + sizeof(SigningInput::byte_fee_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, plan_)>(
          reinterpret_cast<char*>(&plan_),
          reinterpret_cast<char*>(&other->plan_));
  swap(operation_oneof_, other->operation_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Cell::_Internal {
 public:
  static const ::TW::Nervos::Proto::OutPoint& out_point(const Cell* msg);
  static const ::TW::Nervos::Proto::Script& lock(const Cell* msg);
  static const ::TW::Nervos::Proto::Script& type(const Cell* msg);
};

const ::TW::Nervos::Proto::OutPoint&
Cell::_Internal::out_point(const Cell* msg) {
  return *msg->out_point_;
}
const ::TW::Nervos::Proto::Script&
Cell::_Internal::lock(const Cell* msg) {
  return *msg->lock_;
}
const ::TW::Nervos::Proto::Script&
Cell::_Internal::type(const Cell* msg) {
  return *msg->type_;
}
Cell::Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.Cell)
}
Cell::Cell(const Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArena());
  }
  input_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_type().empty()) {
    input_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_type(), 
      GetArena());
  }
  output_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_type().empty()) {
    output_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_type(), 
      GetArena());
  }
  if (from._internal_has_out_point()) {
    out_point_ = new ::TW::Nervos::Proto::OutPoint(*from.out_point_);
  } else {
    out_point_ = nullptr;
  }
  if (from._internal_has_lock()) {
    lock_ = new ::TW::Nervos::Proto::Script(*from.lock_);
  } else {
    lock_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::TW::Nervos::Proto::Script(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&since_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(since_));
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.Cell)
}

void Cell::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Cell_Nervos_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&out_point_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&since_) -
      reinterpret_cast<char*>(&out_point_)) + sizeof(since_));
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.Cell)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Cell::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_point_;
  if (this != internal_default_instance()) delete lock_;
  if (this != internal_default_instance()) delete type_;
}

void Cell::ArenaDtor(void* object) {
  Cell* _this = reinterpret_cast< Cell* >(object);
  (void)_this;
}
void Cell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cell& Cell::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cell_Nervos_2eproto.base);
  return *internal_default_instance();
}


void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.Cell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  block_hash_.ClearToEmpty();
  input_type_.ClearToEmpty();
  output_type_.ClearToEmpty();
  if (GetArena() == nullptr && out_point_ != nullptr) {
    delete out_point_;
  }
  out_point_ = nullptr;
  if (GetArena() == nullptr && lock_ != nullptr) {
    delete lock_;
  }
  lock_ = nullptr;
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&since_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(since_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Nervos.Proto.OutPoint out_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.Script lock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Nervos.Proto.Script type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 since = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes input_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_input_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes output_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_output_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cell::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.Cell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Nervos.Proto.OutPoint out_point = 1;
  if (this->has_out_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::out_point(this), target, stream);
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_capacity(), target);
  }

  // .TW.Nervos.Proto.Script lock = 3;
  if (this->has_lock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lock(this), target, stream);
  }

  // .TW.Nervos.Proto.Script type = 4;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::type(this), target, stream);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // uint64 block_number = 6;
  if (this->block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_block_number(), target);
  }

  // bytes block_hash = 7;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_block_hash(), target);
  }

  // uint64 since = 8;
  if (this->since() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_since(), target);
  }

  // bytes input_type = 9;
  if (this->input_type().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_input_type(), target);
  }

  // bytes output_type = 10;
  if (this->output_type().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_output_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.Cell)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes block_hash = 7;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes input_type = 9;
  if (this->input_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input_type());
  }

  // bytes output_type = 10;
  if (this->output_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output_type());
  }

  // .TW.Nervos.Proto.OutPoint out_point = 1;
  if (this->has_out_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_point_);
  }

  // .TW.Nervos.Proto.Script lock = 3;
  if (this->has_lock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lock_);
  }

  // .TW.Nervos.Proto.Script type = 4;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_capacity());
  }

  // uint64 block_number = 6;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_number());
  }

  // uint64 since = 8;
  if (this->since() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_since());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cell::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  const Cell* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cell>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.Cell)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.Cell)
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.input_type().size() > 0) {
    _internal_set_input_type(from._internal_input_type());
  }
  if (from.output_type().size() > 0) {
    _internal_set_output_type(from._internal_output_type());
  }
  if (from.has_out_point()) {
    _internal_mutable_out_point()->::TW::Nervos::Proto::OutPoint::MergeFrom(from._internal_out_point());
  }
  if (from.has_lock()) {
    _internal_mutable_lock()->::TW::Nervos::Proto::Script::MergeFrom(from._internal_lock());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::TW::Nervos::Proto::Script::MergeFrom(from._internal_type());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.block_number() != 0) {
    _internal_set_block_number(from._internal_block_number());
  }
  if (from.since() != 0) {
    _internal_set_since(from._internal_since());
  }
}

void Cell::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  return true;
}

void Cell::InternalSwap(Cell* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_type_.Swap(&other->input_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_type_.Swap(&other->output_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cell, since_)
      + sizeof(Cell::since_)
      - PROTOBUF_FIELD_OFFSET(Cell, out_point_)>(
          reinterpret_cast<char*>(&out_point_),
          reinterpret_cast<char*>(&other->out_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cell::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Nervos.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_json().empty()) {
    transaction_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_json(), 
      GetArena());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArena());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Nervos.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Nervos_2eproto.base);
  transaction_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Nervos.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transaction_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Nervos_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Nervos.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_json_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transaction_json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.SigningOutput.transaction_json"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Nervos.Proto.SigningOutput.transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Nervos.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction_json = 1;
  if (this->transaction_json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_json().data(), static_cast<int>(this->_internal_transaction_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.SigningOutput.transaction_json");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transaction_json(), target);
  }

  // string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Nervos.Proto.SigningOutput.transaction_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transaction_id(), target);
  }

  // .TW.Common.Proto.SigningError error = 3;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Nervos.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Nervos.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transaction_json = 1;
  if (this->transaction_json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_json());
  }

  // string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // .TW.Common.Proto.SigningError error = 3;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Nervos.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Nervos.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Nervos.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Nervos.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction_json().size() > 0) {
    _internal_set_transaction_json(from._internal_transaction_json());
  }
  if (from.transaction_id().size() > 0) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Nervos.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Nervos.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transaction_json_.Swap(&other->transaction_json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Nervos
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::TransactionPlan* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::TransactionPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::TransactionPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::CellDep* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::CellDep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::CellDep >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::OutPoint* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::OutPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::OutPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::CellOutput* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::CellOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::CellOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::Script* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::Script >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::Script >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::NativeTransfer* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::NativeTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::NativeTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::SudtTransfer* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::SudtTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::SudtTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::DaoDeposit* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::DaoDeposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::DaoDeposit >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::DaoWithdrawPhase1* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::DaoWithdrawPhase1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::DaoWithdrawPhase1 >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::DaoWithdrawPhase2* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::DaoWithdrawPhase2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::DaoWithdrawPhase2 >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::Cell* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Nervos::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Nervos::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Nervos::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
