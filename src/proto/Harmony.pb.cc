// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Harmony.proto

#include "Harmony.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommissionRate_Harmony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_Harmony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Description_Harmony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectiveCollectRewards_Harmony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DirectiveCreateValidator_Harmony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectiveDelegate_Harmony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DirectiveEditValidator_Harmony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectiveUndelegate_Harmony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StakingMessage_Harmony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionMessage_Harmony_2eproto;
namespace TW {
namespace Harmony {
namespace Proto {
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
class TransactionMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionMessage> _instance;
} _TransactionMessage_default_instance_;
class StakingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StakingMessage> _instance;
} _StakingMessage_default_instance_;
class DescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Description> _instance;
} _Description_default_instance_;
class DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decimal> _instance;
} _Decimal_default_instance_;
class CommissionRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommissionRate> _instance;
} _CommissionRate_default_instance_;
class DirectiveCreateValidatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectiveCreateValidator> _instance;
} _DirectiveCreateValidator_default_instance_;
class DirectiveEditValidatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectiveEditValidator> _instance;
} _DirectiveEditValidator_default_instance_;
class DirectiveDelegateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectiveDelegate> _instance;
} _DirectiveDelegate_default_instance_;
class DirectiveUndelegateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectiveUndelegate> _instance;
} _DirectiveUndelegate_default_instance_;
class DirectiveCollectRewardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectiveCollectRewards> _instance;
} _DirectiveCollectRewards_default_instance_;
}  // namespace Proto
}  // namespace Harmony
}  // namespace TW
static void InitDefaultsscc_info_CommissionRate_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_CommissionRate_default_instance_;
    new (ptr) ::TW::Harmony::Proto::CommissionRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommissionRate_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommissionRate_Harmony_2eproto}, {
      &scc_info_Decimal_Harmony_2eproto.base,}};

static void InitDefaultsscc_info_Decimal_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_Decimal_default_instance_;
    new (ptr) ::TW::Harmony::Proto::Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Decimal_Harmony_2eproto}, {}};

static void InitDefaultsscc_info_Description_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_Description_default_instance_;
    new (ptr) ::TW::Harmony::Proto::Description();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Description_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Description_Harmony_2eproto}, {}};

static void InitDefaultsscc_info_DirectiveCollectRewards_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_DirectiveCollectRewards_default_instance_;
    new (ptr) ::TW::Harmony::Proto::DirectiveCollectRewards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectiveCollectRewards_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DirectiveCollectRewards_Harmony_2eproto}, {}};

static void InitDefaultsscc_info_DirectiveCreateValidator_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_DirectiveCreateValidator_default_instance_;
    new (ptr) ::TW::Harmony::Proto::DirectiveCreateValidator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DirectiveCreateValidator_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DirectiveCreateValidator_Harmony_2eproto}, {
      &scc_info_Description_Harmony_2eproto.base,
      &scc_info_CommissionRate_Harmony_2eproto.base,}};

static void InitDefaultsscc_info_DirectiveDelegate_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_DirectiveDelegate_default_instance_;
    new (ptr) ::TW::Harmony::Proto::DirectiveDelegate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectiveDelegate_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DirectiveDelegate_Harmony_2eproto}, {}};

static void InitDefaultsscc_info_DirectiveEditValidator_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_DirectiveEditValidator_default_instance_;
    new (ptr) ::TW::Harmony::Proto::DirectiveEditValidator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DirectiveEditValidator_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DirectiveEditValidator_Harmony_2eproto}, {
      &scc_info_Description_Harmony_2eproto.base,
      &scc_info_Decimal_Harmony_2eproto.base,}};

static void InitDefaultsscc_info_DirectiveUndelegate_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_DirectiveUndelegate_default_instance_;
    new (ptr) ::TW::Harmony::Proto::DirectiveUndelegate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectiveUndelegate_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DirectiveUndelegate_Harmony_2eproto}, {}};

static void InitDefaultsscc_info_SigningInput_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Harmony::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SigningInput_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SigningInput_Harmony_2eproto}, {
      &scc_info_TransactionMessage_Harmony_2eproto.base,
      &scc_info_StakingMessage_Harmony_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Harmony::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Harmony_2eproto}, {}};

static void InitDefaultsscc_info_StakingMessage_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_StakingMessage_default_instance_;
    new (ptr) ::TW::Harmony::Proto::StakingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StakingMessage_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_StakingMessage_Harmony_2eproto}, {
      &scc_info_DirectiveCreateValidator_Harmony_2eproto.base,
      &scc_info_DirectiveEditValidator_Harmony_2eproto.base,
      &scc_info_DirectiveDelegate_Harmony_2eproto.base,
      &scc_info_DirectiveUndelegate_Harmony_2eproto.base,
      &scc_info_DirectiveCollectRewards_Harmony_2eproto.base,}};

static void InitDefaultsscc_info_TransactionMessage_Harmony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Harmony::Proto::_TransactionMessage_default_instance_;
    new (ptr) ::TW::Harmony::Proto::TransactionMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionMessage_Harmony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionMessage_Harmony_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Harmony_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Harmony_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Harmony_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Harmony_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningInput, chain_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningInput, private_key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningInput, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningOutput, v_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningOutput, r_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::SigningOutput, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::TransactionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::TransactionMessage, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::TransactionMessage, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::TransactionMessage, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::TransactionMessage, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::TransactionMessage, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::TransactionMessage, payload_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::TransactionMessage, from_shard_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::TransactionMessage, to_shard_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::StakingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::StakingMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::StakingMessage, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::StakingMessage, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::StakingMessage, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::StakingMessage, stake_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::Description, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::Description, name_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::Description, identity_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::Description, website_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::Description, security_contact_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::Description, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::Decimal, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::Decimal, precision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::CommissionRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::CommissionRate, rate_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::CommissionRate, max_rate_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::CommissionRate, max_change_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCreateValidator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCreateValidator, validator_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCreateValidator, description_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCreateValidator, commission_rates_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCreateValidator, min_self_delegation_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCreateValidator, max_total_delegation_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCreateValidator, slot_pub_keys_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCreateValidator, slot_key_sigs_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCreateValidator, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, validator_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, description_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, commission_rate_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, min_self_delegation_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, max_total_delegation_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, slot_key_to_remove_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, slot_key_to_add_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, slot_key_to_add_sig_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveEditValidator, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveDelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveDelegate, delegator_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveDelegate, validator_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveDelegate, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveUndelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveUndelegate, delegator_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveUndelegate, validator_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveUndelegate, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCollectRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Harmony::Proto::DirectiveCollectRewards, delegator_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Harmony::Proto::SigningInput)},
  { 10, -1, sizeof(::TW::Harmony::Proto::SigningOutput)},
  { 19, -1, sizeof(::TW::Harmony::Proto::TransactionMessage)},
  { 32, -1, sizeof(::TW::Harmony::Proto::StakingMessage)},
  { 46, -1, sizeof(::TW::Harmony::Proto::Description)},
  { 56, -1, sizeof(::TW::Harmony::Proto::Decimal)},
  { 63, -1, sizeof(::TW::Harmony::Proto::CommissionRate)},
  { 71, -1, sizeof(::TW::Harmony::Proto::DirectiveCreateValidator)},
  { 84, -1, sizeof(::TW::Harmony::Proto::DirectiveEditValidator)},
  { 98, -1, sizeof(::TW::Harmony::Proto::DirectiveDelegate)},
  { 106, -1, sizeof(::TW::Harmony::Proto::DirectiveUndelegate)},
  { 114, -1, sizeof(::TW::Harmony::Proto::DirectiveCollectRewards)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_SigningOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_TransactionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_StakingMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_Description_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_CommissionRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_DirectiveCreateValidator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_DirectiveEditValidator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_DirectiveDelegate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_DirectiveUndelegate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Harmony::Proto::_DirectiveCollectRewards_default_instance_),
};

const char descriptor_table_protodef_Harmony_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rHarmony.proto\022\020TW.Harmony.Proto\"\310\001\n\014Si"
  "gningInput\022\020\n\010chain_id\030\001 \001(\014\022\023\n\013private_"
  "key\030\002 \001(\014\022C\n\023transaction_message\030\003 \001(\0132$"
  ".TW.Harmony.Proto.TransactionMessageH\000\022;"
  "\n\017staking_message\030\004 \001(\0132 .TW.Harmony.Pro"
  "to.StakingMessageH\000B\017\n\rmessage_oneof\"A\n\r"
  "SigningOutput\022\017\n\007encoded\030\001 \001(\014\022\t\n\001v\030\002 \001("
  "\014\022\t\n\001r\030\003 \001(\014\022\t\n\001s\030\004 \001(\014\"\252\001\n\022TransactionM"
  "essage\022\r\n\005nonce\030\001 \001(\014\022\021\n\tgas_price\030\002 \001(\014"
  "\022\021\n\tgas_limit\030\003 \001(\014\022\022\n\nto_address\030\004 \001(\t\022"
  "\016\n\006amount\030\005 \001(\014\022\017\n\007payload\030\006 \001(\014\022\025\n\rfrom"
  "_shard_id\030\007 \001(\014\022\023\n\013to_shard_id\030\010 \001(\014\"\272\003\n"
  "\016StakingMessage\022N\n\030create_validator_mess"
  "age\030\001 \001(\0132*.TW.Harmony.Proto.DirectiveCr"
  "eateValidatorH\000\022J\n\026edit_validator_messag"
  "e\030\002 \001(\0132(.TW.Harmony.Proto.DirectiveEdit"
  "ValidatorH\000\022\?\n\020delegate_message\030\003 \001(\0132#."
  "TW.Harmony.Proto.DirectiveDelegateH\000\022C\n\022"
  "undelegate_message\030\004 \001(\0132%.TW.Harmony.Pr"
  "oto.DirectiveUndelegateH\000\022D\n\017collect_rew"
  "ards\030\005 \001(\0132).TW.Harmony.Proto.DirectiveC"
  "ollectRewardsH\000\022\r\n\005nonce\030\006 \001(\014\022\021\n\tgas_pr"
  "ice\030\007 \001(\014\022\021\n\tgas_limit\030\010 \001(\014B\013\n\tstake_ms"
  "g\"i\n\013Description\022\014\n\004name\030\001 \001(\t\022\020\n\010identi"
  "ty\030\002 \001(\t\022\017\n\007website\030\003 \001(\t\022\030\n\020security_co"
  "ntact\030\004 \001(\t\022\017\n\007details\030\005 \001(\t\"+\n\007Decimal\022"
  "\r\n\005value\030\001 \001(\014\022\021\n\tprecision\030\002 \001(\014\"\232\001\n\016Co"
  "mmissionRate\022\'\n\004rate\030\001 \001(\0132\031.TW.Harmony."
  "Proto.Decimal\022+\n\010max_rate\030\002 \001(\0132\031.TW.Har"
  "mony.Proto.Decimal\0222\n\017max_change_rate\030\003 "
  "\001(\0132\031.TW.Harmony.Proto.Decimal\"\236\002\n\030Direc"
  "tiveCreateValidator\022\031\n\021validator_address"
  "\030\001 \001(\t\0222\n\013description\030\002 \001(\0132\035.TW.Harmony"
  ".Proto.Description\022:\n\020commission_rates\030\003"
  " \001(\0132 .TW.Harmony.Proto.CommissionRate\022\033"
  "\n\023min_self_delegation\030\004 \001(\014\022\034\n\024max_total"
  "_delegation\030\005 \001(\014\022\025\n\rslot_pub_keys\030\006 \003(\014"
  "\022\025\n\rslot_key_sigs\030\007 \003(\014\022\016\n\006amount\030\010 \001(\014\""
  "\270\002\n\026DirectiveEditValidator\022\031\n\021validator_"
  "address\030\001 \001(\t\0222\n\013description\030\002 \001(\0132\035.TW."
  "Harmony.Proto.Description\0222\n\017commission_"
  "rate\030\003 \001(\0132\031.TW.Harmony.Proto.Decimal\022\033\n"
  "\023min_self_delegation\030\004 \001(\014\022\034\n\024max_total_"
  "delegation\030\005 \001(\014\022\032\n\022slot_key_to_remove\030\006"
  " \001(\014\022\027\n\017slot_key_to_add\030\007 \001(\014\022\033\n\023slot_ke"
  "y_to_add_sig\030\010 \001(\014\022\016\n\006active\030\t \001(\014\"Y\n\021Di"
  "rectiveDelegate\022\031\n\021delegator_address\030\001 \001"
  "(\t\022\031\n\021validator_address\030\002 \001(\t\022\016\n\006amount\030"
  "\003 \001(\014\"[\n\023DirectiveUndelegate\022\031\n\021delegato"
  "r_address\030\001 \001(\t\022\031\n\021validator_address\030\002 \001"
  "(\t\022\016\n\006amount\030\003 \001(\014\"4\n\027DirectiveCollectRe"
  "wards\022\031\n\021delegator_address\030\001 \001(\tB\027\n\025wall"
  "et.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Harmony_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Harmony_2eproto_sccs[12] = {
  &scc_info_CommissionRate_Harmony_2eproto.base,
  &scc_info_Decimal_Harmony_2eproto.base,
  &scc_info_Description_Harmony_2eproto.base,
  &scc_info_DirectiveCollectRewards_Harmony_2eproto.base,
  &scc_info_DirectiveCreateValidator_Harmony_2eproto.base,
  &scc_info_DirectiveDelegate_Harmony_2eproto.base,
  &scc_info_DirectiveEditValidator_Harmony_2eproto.base,
  &scc_info_DirectiveUndelegate_Harmony_2eproto.base,
  &scc_info_SigningInput_Harmony_2eproto.base,
  &scc_info_SigningOutput_Harmony_2eproto.base,
  &scc_info_StakingMessage_Harmony_2eproto.base,
  &scc_info_TransactionMessage_Harmony_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Harmony_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Harmony_2eproto = {
  false, false, descriptor_table_protodef_Harmony_2eproto, "Harmony.proto", 2105,
  &descriptor_table_Harmony_2eproto_once, descriptor_table_Harmony_2eproto_sccs, descriptor_table_Harmony_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_Harmony_2eproto::offsets,
  file_level_metadata_Harmony_2eproto, 12, file_level_enum_descriptors_Harmony_2eproto, file_level_service_descriptors_Harmony_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Harmony_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Harmony_2eproto)), true);
namespace TW {
namespace Harmony {
namespace Proto {

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Harmony::Proto::TransactionMessage& transaction_message(const SigningInput* msg);
  static const ::TW::Harmony::Proto::StakingMessage& staking_message(const SigningInput* msg);
};

const ::TW::Harmony::Proto::TransactionMessage&
SigningInput::_Internal::transaction_message(const SigningInput* msg) {
  return *msg->message_oneof_.transaction_message_;
}
const ::TW::Harmony::Proto::StakingMessage&
SigningInput::_Internal::staking_message(const SigningInput* msg) {
  return *msg->message_oneof_.staking_message_;
}
void SigningInput::set_allocated_transaction_message(::TW::Harmony::Proto::TransactionMessage* transaction_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (transaction_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction_message);
    if (message_arena != submessage_arena) {
      transaction_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_message, submessage_arena);
    }
    set_has_transaction_message();
    message_oneof_.transaction_message_ = transaction_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.SigningInput.transaction_message)
}
void SigningInput::set_allocated_staking_message(::TW::Harmony::Proto::StakingMessage* staking_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message_oneof();
  if (staking_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(staking_message);
    if (message_arena != submessage_arena) {
      staking_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staking_message, submessage_arena);
    }
    set_has_staking_message();
    message_oneof_.staking_message_ = staking_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.SigningInput.staking_message)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArena());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kTransactionMessage: {
      _internal_mutable_transaction_message()->::TW::Harmony::Proto::TransactionMessage::MergeFrom(from._internal_transaction_message());
      break;
    }
    case kStakingMessage: {
      _internal_mutable_staking_message()->::TW::Harmony::Proto::StakingMessage::MergeFrom(from._internal_staking_message());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Harmony_2eproto.base);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_message_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Harmony_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Harmony.Proto.SigningInput)
  switch (message_oneof_case()) {
    case kTransactionMessage: {
      if (GetArena() == nullptr) {
        delete message_oneof_.transaction_message_;
      }
      break;
    }
    case kStakingMessage: {
      if (GetArena() == nullptr) {
        delete message_oneof_.staking_message_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  private_key_.ClearToEmpty();
  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes private_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.TransactionMessage transaction_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.StakingMessage staking_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_staking_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (this->chain_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  // bytes private_key = 2;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_private_key(), target);
  }

  // .TW.Harmony.Proto.TransactionMessage transaction_message = 3;
  if (_internal_has_transaction_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transaction_message(this), target, stream);
  }

  // .TW.Harmony.Proto.StakingMessage staking_message = 4;
  if (_internal_has_staking_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::staking_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_id());
  }

  // bytes private_key = 2;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  switch (message_oneof_case()) {
    // .TW.Harmony.Proto.TransactionMessage transaction_message = 3;
    case kTransactionMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.transaction_message_);
      break;
    }
    // .TW.Harmony.Proto.StakingMessage staking_message = 4;
    case kStakingMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.staking_message_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  switch (from.message_oneof_case()) {
    case kTransactionMessage: {
      _internal_mutable_transaction_message()->::TW::Harmony::Proto::TransactionMessage::MergeFrom(from._internal_transaction_message());
      break;
    }
    case kStakingMessage: {
      _internal_mutable_staking_message()->::TW::Harmony::Proto::StakingMessage::MergeFrom(from._internal_staking_message());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArena());
  }
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r().empty()) {
    r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_r(), 
      GetArena());
  }
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s().empty()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Harmony_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Harmony_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  v_.ClearToEmpty();
  r_.ClearToEmpty();
  s_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_r();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // bytes v = 2;
  if (this->v().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_v(), target);
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_r(), target);
  }

  // bytes s = 4;
  if (this->s().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // bytes v = 2;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r());
  }

  // bytes s = 4;
  if (this->s().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (from.v().size() > 0) {
    _internal_set_v(from._internal_v());
  }
  if (from.r().size() > 0) {
    _internal_set_r(from._internal_r());
  }
  if (from.s().size() > 0) {
    _internal_set_s(from._internal_s());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  r_.Swap(&other->r_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s_.Swap(&other->s_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionMessage::_Internal {
 public:
};

TransactionMessage::TransactionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.TransactionMessage)
}
TransactionMessage::TransactionMessage(const TransactionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArena());
  }
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_price().empty()) {
    gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_price(), 
      GetArena());
  }
  gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_limit().empty()) {
    gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_limit(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  from_shard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_shard_id().empty()) {
    from_shard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_shard_id(), 
      GetArena());
  }
  to_shard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_shard_id().empty()) {
    to_shard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_shard_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.TransactionMessage)
}

void TransactionMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionMessage_Harmony_2eproto.base);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_shard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_shard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransactionMessage::~TransactionMessage() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.TransactionMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_shard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_shard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionMessage::ArenaDtor(void* object) {
  TransactionMessage* _this = reinterpret_cast< TransactionMessage* >(object);
  (void)_this;
}
void TransactionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionMessage& TransactionMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionMessage_Harmony_2eproto.base);
  return *internal_default_instance();
}


void TransactionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.TransactionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty();
  gas_price_.ClearToEmpty();
  gas_limit_.ClearToEmpty();
  to_address_.ClearToEmpty();
  amount_.ClearToEmpty();
  payload_.ClearToEmpty();
  from_shard_id_.ClearToEmpty();
  to_shard_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gas_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gas_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gas_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.TransactionMessage.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes from_shard_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_from_shard_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to_shard_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_to_shard_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.TransactionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // bytes gas_price = 2;
  if (this->gas_price().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_gas_price(), target);
  }

  // bytes gas_limit = 3;
  if (this->gas_limit().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_gas_limit(), target);
  }

  // string to_address = 4;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.TransactionMessage.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // bytes amount = 5;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_amount(), target);
  }

  // bytes payload = 6;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_payload(), target);
  }

  // bytes from_shard_id = 7;
  if (this->from_shard_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_from_shard_id(), target);
  }

  // bytes to_shard_id = 8;
  if (this->to_shard_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_to_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.TransactionMessage)
  return target;
}

size_t TransactionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.TransactionMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // bytes gas_price = 2;
  if (this->gas_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gas_price());
  }

  // bytes gas_limit = 3;
  if (this->gas_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gas_limit());
  }

  // string to_address = 4;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // bytes amount = 5;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // bytes payload = 6;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // bytes from_shard_id = 7;
  if (this->from_shard_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from_shard_id());
  }

  // bytes to_shard_id = 8;
  if (this->to_shard_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_shard_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.TransactionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.TransactionMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.TransactionMessage)
    MergeFrom(*source);
  }
}

void TransactionMessage::MergeFrom(const TransactionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.TransactionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce().size() > 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.gas_price().size() > 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from.gas_limit().size() > 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.from_shard_id().size() > 0) {
    _internal_set_from_shard_id(from._internal_from_shard_id());
  }
  if (from.to_shard_id().size() > 0) {
    _internal_set_to_shard_id(from._internal_to_shard_id());
  }
}

void TransactionMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.TransactionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionMessage::CopyFrom(const TransactionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.TransactionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionMessage::IsInitialized() const {
  return true;
}

void TransactionMessage::InternalSwap(TransactionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_price_.Swap(&other->gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_limit_.Swap(&other->gas_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_shard_id_.Swap(&other->from_shard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_shard_id_.Swap(&other->to_shard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StakingMessage::_Internal {
 public:
  static const ::TW::Harmony::Proto::DirectiveCreateValidator& create_validator_message(const StakingMessage* msg);
  static const ::TW::Harmony::Proto::DirectiveEditValidator& edit_validator_message(const StakingMessage* msg);
  static const ::TW::Harmony::Proto::DirectiveDelegate& delegate_message(const StakingMessage* msg);
  static const ::TW::Harmony::Proto::DirectiveUndelegate& undelegate_message(const StakingMessage* msg);
  static const ::TW::Harmony::Proto::DirectiveCollectRewards& collect_rewards(const StakingMessage* msg);
};

const ::TW::Harmony::Proto::DirectiveCreateValidator&
StakingMessage::_Internal::create_validator_message(const StakingMessage* msg) {
  return *msg->stake_msg_.create_validator_message_;
}
const ::TW::Harmony::Proto::DirectiveEditValidator&
StakingMessage::_Internal::edit_validator_message(const StakingMessage* msg) {
  return *msg->stake_msg_.edit_validator_message_;
}
const ::TW::Harmony::Proto::DirectiveDelegate&
StakingMessage::_Internal::delegate_message(const StakingMessage* msg) {
  return *msg->stake_msg_.delegate_message_;
}
const ::TW::Harmony::Proto::DirectiveUndelegate&
StakingMessage::_Internal::undelegate_message(const StakingMessage* msg) {
  return *msg->stake_msg_.undelegate_message_;
}
const ::TW::Harmony::Proto::DirectiveCollectRewards&
StakingMessage::_Internal::collect_rewards(const StakingMessage* msg) {
  return *msg->stake_msg_.collect_rewards_;
}
void StakingMessage::set_allocated_create_validator_message(::TW::Harmony::Proto::DirectiveCreateValidator* create_validator_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stake_msg();
  if (create_validator_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_validator_message);
    if (message_arena != submessage_arena) {
      create_validator_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_validator_message, submessage_arena);
    }
    set_has_create_validator_message();
    stake_msg_.create_validator_message_ = create_validator_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.StakingMessage.create_validator_message)
}
void StakingMessage::set_allocated_edit_validator_message(::TW::Harmony::Proto::DirectiveEditValidator* edit_validator_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stake_msg();
  if (edit_validator_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(edit_validator_message);
    if (message_arena != submessage_arena) {
      edit_validator_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit_validator_message, submessage_arena);
    }
    set_has_edit_validator_message();
    stake_msg_.edit_validator_message_ = edit_validator_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.StakingMessage.edit_validator_message)
}
void StakingMessage::set_allocated_delegate_message(::TW::Harmony::Proto::DirectiveDelegate* delegate_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stake_msg();
  if (delegate_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delegate_message);
    if (message_arena != submessage_arena) {
      delegate_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegate_message, submessage_arena);
    }
    set_has_delegate_message();
    stake_msg_.delegate_message_ = delegate_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.StakingMessage.delegate_message)
}
void StakingMessage::set_allocated_undelegate_message(::TW::Harmony::Proto::DirectiveUndelegate* undelegate_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stake_msg();
  if (undelegate_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(undelegate_message);
    if (message_arena != submessage_arena) {
      undelegate_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undelegate_message, submessage_arena);
    }
    set_has_undelegate_message();
    stake_msg_.undelegate_message_ = undelegate_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.StakingMessage.undelegate_message)
}
void StakingMessage::set_allocated_collect_rewards(::TW::Harmony::Proto::DirectiveCollectRewards* collect_rewards) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stake_msg();
  if (collect_rewards) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(collect_rewards);
    if (message_arena != submessage_arena) {
      collect_rewards = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collect_rewards, submessage_arena);
    }
    set_has_collect_rewards();
    stake_msg_.collect_rewards_ = collect_rewards;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.StakingMessage.collect_rewards)
}
StakingMessage::StakingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.StakingMessage)
}
StakingMessage::StakingMessage(const StakingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArena());
  }
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_price().empty()) {
    gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_price(), 
      GetArena());
  }
  gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_limit().empty()) {
    gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_limit(), 
      GetArena());
  }
  clear_has_stake_msg();
  switch (from.stake_msg_case()) {
    case kCreateValidatorMessage: {
      _internal_mutable_create_validator_message()->::TW::Harmony::Proto::DirectiveCreateValidator::MergeFrom(from._internal_create_validator_message());
      break;
    }
    case kEditValidatorMessage: {
      _internal_mutable_edit_validator_message()->::TW::Harmony::Proto::DirectiveEditValidator::MergeFrom(from._internal_edit_validator_message());
      break;
    }
    case kDelegateMessage: {
      _internal_mutable_delegate_message()->::TW::Harmony::Proto::DirectiveDelegate::MergeFrom(from._internal_delegate_message());
      break;
    }
    case kUndelegateMessage: {
      _internal_mutable_undelegate_message()->::TW::Harmony::Proto::DirectiveUndelegate::MergeFrom(from._internal_undelegate_message());
      break;
    }
    case kCollectRewards: {
      _internal_mutable_collect_rewards()->::TW::Harmony::Proto::DirectiveCollectRewards::MergeFrom(from._internal_collect_rewards());
      break;
    }
    case STAKE_MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.StakingMessage)
}

void StakingMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StakingMessage_Harmony_2eproto.base);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_stake_msg();
}

StakingMessage::~StakingMessage() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.StakingMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StakingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_stake_msg()) {
    clear_stake_msg();
  }
}

void StakingMessage::ArenaDtor(void* object) {
  StakingMessage* _this = reinterpret_cast< StakingMessage* >(object);
  (void)_this;
}
void StakingMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StakingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StakingMessage& StakingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StakingMessage_Harmony_2eproto.base);
  return *internal_default_instance();
}


void StakingMessage::clear_stake_msg() {
// @@protoc_insertion_point(one_of_clear_start:TW.Harmony.Proto.StakingMessage)
  switch (stake_msg_case()) {
    case kCreateValidatorMessage: {
      if (GetArena() == nullptr) {
        delete stake_msg_.create_validator_message_;
      }
      break;
    }
    case kEditValidatorMessage: {
      if (GetArena() == nullptr) {
        delete stake_msg_.edit_validator_message_;
      }
      break;
    }
    case kDelegateMessage: {
      if (GetArena() == nullptr) {
        delete stake_msg_.delegate_message_;
      }
      break;
    }
    case kUndelegateMessage: {
      if (GetArena() == nullptr) {
        delete stake_msg_.undelegate_message_;
      }
      break;
    }
    case kCollectRewards: {
      if (GetArena() == nullptr) {
        delete stake_msg_.collect_rewards_;
      }
      break;
    }
    case STAKE_MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STAKE_MSG_NOT_SET;
}


void StakingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.StakingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty();
  gas_price_.ClearToEmpty();
  gas_limit_.ClearToEmpty();
  clear_stake_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Harmony.Proto.DirectiveCreateValidator create_validator_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_validator_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.DirectiveEditValidator edit_validator_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edit_validator_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.DirectiveDelegate delegate_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegate_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.DirectiveUndelegate undelegate_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undelegate_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.DirectiveCollectRewards collect_rewards = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_collect_rewards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nonce = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gas_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gas_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_gas_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StakingMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.StakingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Harmony.Proto.DirectiveCreateValidator create_validator_message = 1;
  if (_internal_has_create_validator_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::create_validator_message(this), target, stream);
  }

  // .TW.Harmony.Proto.DirectiveEditValidator edit_validator_message = 2;
  if (_internal_has_edit_validator_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::edit_validator_message(this), target, stream);
  }

  // .TW.Harmony.Proto.DirectiveDelegate delegate_message = 3;
  if (_internal_has_delegate_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::delegate_message(this), target, stream);
  }

  // .TW.Harmony.Proto.DirectiveUndelegate undelegate_message = 4;
  if (_internal_has_undelegate_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undelegate_message(this), target, stream);
  }

  // .TW.Harmony.Proto.DirectiveCollectRewards collect_rewards = 5;
  if (_internal_has_collect_rewards()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::collect_rewards(this), target, stream);
  }

  // bytes nonce = 6;
  if (this->nonce().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_nonce(), target);
  }

  // bytes gas_price = 7;
  if (this->gas_price().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_gas_price(), target);
  }

  // bytes gas_limit = 8;
  if (this->gas_limit().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_gas_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.StakingMessage)
  return target;
}

size_t StakingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.StakingMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nonce = 6;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // bytes gas_price = 7;
  if (this->gas_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gas_price());
  }

  // bytes gas_limit = 8;
  if (this->gas_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gas_limit());
  }

  switch (stake_msg_case()) {
    // .TW.Harmony.Proto.DirectiveCreateValidator create_validator_message = 1;
    case kCreateValidatorMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stake_msg_.create_validator_message_);
      break;
    }
    // .TW.Harmony.Proto.DirectiveEditValidator edit_validator_message = 2;
    case kEditValidatorMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stake_msg_.edit_validator_message_);
      break;
    }
    // .TW.Harmony.Proto.DirectiveDelegate delegate_message = 3;
    case kDelegateMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stake_msg_.delegate_message_);
      break;
    }
    // .TW.Harmony.Proto.DirectiveUndelegate undelegate_message = 4;
    case kUndelegateMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stake_msg_.undelegate_message_);
      break;
    }
    // .TW.Harmony.Proto.DirectiveCollectRewards collect_rewards = 5;
    case kCollectRewards: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stake_msg_.collect_rewards_);
      break;
    }
    case STAKE_MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StakingMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.StakingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StakingMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StakingMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.StakingMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.StakingMessage)
    MergeFrom(*source);
  }
}

void StakingMessage::MergeFrom(const StakingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.StakingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce().size() > 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.gas_price().size() > 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from.gas_limit().size() > 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  switch (from.stake_msg_case()) {
    case kCreateValidatorMessage: {
      _internal_mutable_create_validator_message()->::TW::Harmony::Proto::DirectiveCreateValidator::MergeFrom(from._internal_create_validator_message());
      break;
    }
    case kEditValidatorMessage: {
      _internal_mutable_edit_validator_message()->::TW::Harmony::Proto::DirectiveEditValidator::MergeFrom(from._internal_edit_validator_message());
      break;
    }
    case kDelegateMessage: {
      _internal_mutable_delegate_message()->::TW::Harmony::Proto::DirectiveDelegate::MergeFrom(from._internal_delegate_message());
      break;
    }
    case kUndelegateMessage: {
      _internal_mutable_undelegate_message()->::TW::Harmony::Proto::DirectiveUndelegate::MergeFrom(from._internal_undelegate_message());
      break;
    }
    case kCollectRewards: {
      _internal_mutable_collect_rewards()->::TW::Harmony::Proto::DirectiveCollectRewards::MergeFrom(from._internal_collect_rewards());
      break;
    }
    case STAKE_MSG_NOT_SET: {
      break;
    }
  }
}

void StakingMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.StakingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StakingMessage::CopyFrom(const StakingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.StakingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakingMessage::IsInitialized() const {
  return true;
}

void StakingMessage::InternalSwap(StakingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_price_.Swap(&other->gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_limit_.Swap(&other->gas_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stake_msg_, other->stake_msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StakingMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Description::_Internal {
 public:
};

Description::Description(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.Description)
}
Description::Description(const Description& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identity().empty()) {
    identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identity(), 
      GetArena());
  }
  website_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_website().empty()) {
    website_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_website(), 
      GetArena());
  }
  security_contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_security_contact().empty()) {
    security_contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_security_contact(), 
      GetArena());
  }
  details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_details().empty()) {
    details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_details(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.Description)
}

void Description::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Description_Harmony_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  website_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Description::~Description() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.Description)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Description::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  website_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_contact_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  details_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Description::ArenaDtor(void* object) {
  Description* _this = reinterpret_cast< Description* >(object);
  (void)_this;
}
void Description::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Description::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Description& Description::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Description_Harmony_2eproto.base);
  return *internal_default_instance();
}


void Description::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.Description)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  identity_.ClearToEmpty();
  website_.ClearToEmpty();
  security_contact_.ClearToEmpty();
  details_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Description::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.Description.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.Description.identity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string website = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_website();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.Description.website"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string security_contact = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_security_contact();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.Description.security_contact"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string details = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_details();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.Description.details"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Description::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.Description)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.Description.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string identity = 2;
  if (this->identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.Description.identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity(), target);
  }

  // string website = 3;
  if (this->website().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_website().data(), static_cast<int>(this->_internal_website().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.Description.website");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_website(), target);
  }

  // string security_contact = 4;
  if (this->security_contact().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_security_contact().data(), static_cast<int>(this->_internal_security_contact().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.Description.security_contact");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_security_contact(), target);
  }

  // string details = 5;
  if (this->details().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.Description.details");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.Description)
  return target;
}

size_t Description::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.Description)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string identity = 2;
  if (this->identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string website = 3;
  if (this->website().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_website());
  }

  // string security_contact = 4;
  if (this->security_contact().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_security_contact());
  }

  // string details = 5;
  if (this->details().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Description::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.Description)
  GOOGLE_DCHECK_NE(&from, this);
  const Description* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Description>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.Description)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.Description)
    MergeFrom(*source);
  }
}

void Description::MergeFrom(const Description& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.Description)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.identity().size() > 0) {
    _internal_set_identity(from._internal_identity());
  }
  if (from.website().size() > 0) {
    _internal_set_website(from._internal_website());
  }
  if (from.security_contact().size() > 0) {
    _internal_set_security_contact(from._internal_security_contact());
  }
  if (from.details().size() > 0) {
    _internal_set_details(from._internal_details());
  }
}

void Description::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.Description)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Description::CopyFrom(const Description& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.Description)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Description::IsInitialized() const {
  return true;
}

void Description::InternalSwap(Description* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  identity_.Swap(&other->identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  website_.Swap(&other->website_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  security_contact_.Swap(&other->security_contact_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  details_.Swap(&other->details_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Description::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Decimal::_Internal {
 public:
};

Decimal::Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  precision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_precision().empty()) {
    precision_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_precision(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.Decimal)
}

void Decimal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decimal_Harmony_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  precision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  precision_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Decimal::ArenaDtor(void* object) {
  Decimal* _this = reinterpret_cast< Decimal* >(object);
  (void)_this;
}
void Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal& Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decimal_Harmony_2eproto.base);
  return *internal_default_instance();
}


void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  precision_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_precision();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // bytes precision = 2;
  if (this->precision().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes precision = 2;
  if (this->precision().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_precision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.Decimal)
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.precision().size() > 0) {
    _internal_set_precision(from._internal_precision());
  }
}

void Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  precision_.Swap(&other->precision_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommissionRate::_Internal {
 public:
  static const ::TW::Harmony::Proto::Decimal& rate(const CommissionRate* msg);
  static const ::TW::Harmony::Proto::Decimal& max_rate(const CommissionRate* msg);
  static const ::TW::Harmony::Proto::Decimal& max_change_rate(const CommissionRate* msg);
};

const ::TW::Harmony::Proto::Decimal&
CommissionRate::_Internal::rate(const CommissionRate* msg) {
  return *msg->rate_;
}
const ::TW::Harmony::Proto::Decimal&
CommissionRate::_Internal::max_rate(const CommissionRate* msg) {
  return *msg->max_rate_;
}
const ::TW::Harmony::Proto::Decimal&
CommissionRate::_Internal::max_change_rate(const CommissionRate* msg) {
  return *msg->max_change_rate_;
}
CommissionRate::CommissionRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.CommissionRate)
}
CommissionRate::CommissionRate(const CommissionRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rate()) {
    rate_ = new ::TW::Harmony::Proto::Decimal(*from.rate_);
  } else {
    rate_ = nullptr;
  }
  if (from._internal_has_max_rate()) {
    max_rate_ = new ::TW::Harmony::Proto::Decimal(*from.max_rate_);
  } else {
    max_rate_ = nullptr;
  }
  if (from._internal_has_max_change_rate()) {
    max_change_rate_ = new ::TW::Harmony::Proto::Decimal(*from.max_change_rate_);
  } else {
    max_change_rate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.CommissionRate)
}

void CommissionRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommissionRate_Harmony_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_change_rate_) -
      reinterpret_cast<char*>(&rate_)) + sizeof(max_change_rate_));
}

CommissionRate::~CommissionRate() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.CommissionRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommissionRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rate_;
  if (this != internal_default_instance()) delete max_rate_;
  if (this != internal_default_instance()) delete max_change_rate_;
}

void CommissionRate::ArenaDtor(void* object) {
  CommissionRate* _this = reinterpret_cast< CommissionRate* >(object);
  (void)_this;
}
void CommissionRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommissionRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommissionRate& CommissionRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommissionRate_Harmony_2eproto.base);
  return *internal_default_instance();
}


void CommissionRate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.CommissionRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rate_ != nullptr) {
    delete rate_;
  }
  rate_ = nullptr;
  if (GetArena() == nullptr && max_rate_ != nullptr) {
    delete max_rate_;
  }
  max_rate_ = nullptr;
  if (GetArena() == nullptr && max_change_rate_ != nullptr) {
    delete max_change_rate_;
  }
  max_change_rate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommissionRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Harmony.Proto.Decimal rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.Decimal max_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.Decimal max_change_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_change_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommissionRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.CommissionRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Harmony.Proto.Decimal rate = 1;
  if (this->has_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rate(this), target, stream);
  }

  // .TW.Harmony.Proto.Decimal max_rate = 2;
  if (this->has_max_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max_rate(this), target, stream);
  }

  // .TW.Harmony.Proto.Decimal max_change_rate = 3;
  if (this->has_max_change_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::max_change_rate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.CommissionRate)
  return target;
}

size_t CommissionRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.CommissionRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Harmony.Proto.Decimal rate = 1;
  if (this->has_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rate_);
  }

  // .TW.Harmony.Proto.Decimal max_rate = 2;
  if (this->has_max_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_rate_);
  }

  // .TW.Harmony.Proto.Decimal max_change_rate = 3;
  if (this->has_max_change_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_change_rate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommissionRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.CommissionRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CommissionRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommissionRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.CommissionRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.CommissionRate)
    MergeFrom(*source);
  }
}

void CommissionRate::MergeFrom(const CommissionRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.CommissionRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rate()) {
    _internal_mutable_rate()->::TW::Harmony::Proto::Decimal::MergeFrom(from._internal_rate());
  }
  if (from.has_max_rate()) {
    _internal_mutable_max_rate()->::TW::Harmony::Proto::Decimal::MergeFrom(from._internal_max_rate());
  }
  if (from.has_max_change_rate()) {
    _internal_mutable_max_change_rate()->::TW::Harmony::Proto::Decimal::MergeFrom(from._internal_max_change_rate());
  }
}

void CommissionRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.CommissionRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommissionRate::CopyFrom(const CommissionRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.CommissionRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommissionRate::IsInitialized() const {
  return true;
}

void CommissionRate::InternalSwap(CommissionRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommissionRate, max_change_rate_)
      + sizeof(CommissionRate::max_change_rate_)
      - PROTOBUF_FIELD_OFFSET(CommissionRate, rate_)>(
          reinterpret_cast<char*>(&rate_),
          reinterpret_cast<char*>(&other->rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommissionRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectiveCreateValidator::_Internal {
 public:
  static const ::TW::Harmony::Proto::Description& description(const DirectiveCreateValidator* msg);
  static const ::TW::Harmony::Proto::CommissionRate& commission_rates(const DirectiveCreateValidator* msg);
};

const ::TW::Harmony::Proto::Description&
DirectiveCreateValidator::_Internal::description(const DirectiveCreateValidator* msg) {
  return *msg->description_;
}
const ::TW::Harmony::Proto::CommissionRate&
DirectiveCreateValidator::_Internal::commission_rates(const DirectiveCreateValidator* msg) {
  return *msg->commission_rates_;
}
DirectiveCreateValidator::DirectiveCreateValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slot_pub_keys_(arena),
  slot_key_sigs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.DirectiveCreateValidator)
}
DirectiveCreateValidator::DirectiveCreateValidator(const DirectiveCreateValidator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slot_pub_keys_(from.slot_pub_keys_),
      slot_key_sigs_(from.slot_key_sigs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_address().empty()) {
    validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_address(), 
      GetArena());
  }
  min_self_delegation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_min_self_delegation().empty()) {
    min_self_delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_min_self_delegation(), 
      GetArena());
  }
  max_total_delegation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_total_delegation().empty()) {
    max_total_delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_total_delegation(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  if (from._internal_has_description()) {
    description_ = new ::TW::Harmony::Proto::Description(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from._internal_has_commission_rates()) {
    commission_rates_ = new ::TW::Harmony::Proto::CommissionRate(*from.commission_rates_);
  } else {
    commission_rates_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.DirectiveCreateValidator)
}

void DirectiveCreateValidator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectiveCreateValidator_Harmony_2eproto.base);
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  min_self_delegation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_total_delegation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&description_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&commission_rates_) -
      reinterpret_cast<char*>(&description_)) + sizeof(commission_rates_));
}

DirectiveCreateValidator::~DirectiveCreateValidator() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.DirectiveCreateValidator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectiveCreateValidator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  validator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  min_self_delegation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_total_delegation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete commission_rates_;
}

void DirectiveCreateValidator::ArenaDtor(void* object) {
  DirectiveCreateValidator* _this = reinterpret_cast< DirectiveCreateValidator* >(object);
  (void)_this;
}
void DirectiveCreateValidator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectiveCreateValidator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectiveCreateValidator& DirectiveCreateValidator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectiveCreateValidator_Harmony_2eproto.base);
  return *internal_default_instance();
}


void DirectiveCreateValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.DirectiveCreateValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_pub_keys_.Clear();
  slot_key_sigs_.Clear();
  validator_address_.ClearToEmpty();
  min_self_delegation_.ClearToEmpty();
  max_total_delegation_.ClearToEmpty();
  amount_.ClearToEmpty();
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  if (GetArena() == nullptr && commission_rates_ != nullptr) {
    delete commission_rates_;
  }
  commission_rates_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectiveCreateValidator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string validator_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.DirectiveCreateValidator.validator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.Description description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.CommissionRate commission_rates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_commission_rates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes min_self_delegation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_min_self_delegation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes max_total_delegation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_max_total_delegation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes slot_pub_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_slot_pub_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes slot_key_sigs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_slot_key_sigs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectiveCreateValidator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.DirectiveCreateValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_address = 1;
  if (this->validator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_address().data(), static_cast<int>(this->_internal_validator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.DirectiveCreateValidator.validator_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_validator_address(), target);
  }

  // .TW.Harmony.Proto.Description description = 2;
  if (this->has_description()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::description(this), target, stream);
  }

  // .TW.Harmony.Proto.CommissionRate commission_rates = 3;
  if (this->has_commission_rates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::commission_rates(this), target, stream);
  }

  // bytes min_self_delegation = 4;
  if (this->min_self_delegation().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_min_self_delegation(), target);
  }

  // bytes max_total_delegation = 5;
  if (this->max_total_delegation().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_max_total_delegation(), target);
  }

  // repeated bytes slot_pub_keys = 6;
  for (int i = 0, n = this->_internal_slot_pub_keys_size(); i < n; i++) {
    const auto& s = this->_internal_slot_pub_keys(i);
    target = stream->WriteBytes(6, s, target);
  }

  // repeated bytes slot_key_sigs = 7;
  for (int i = 0, n = this->_internal_slot_key_sigs_size(); i < n; i++) {
    const auto& s = this->_internal_slot_key_sigs(i);
    target = stream->WriteBytes(7, s, target);
  }

  // bytes amount = 8;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.DirectiveCreateValidator)
  return target;
}

size_t DirectiveCreateValidator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.DirectiveCreateValidator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes slot_pub_keys = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(slot_pub_keys_.size());
  for (int i = 0, n = slot_pub_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      slot_pub_keys_.Get(i));
  }

  // repeated bytes slot_key_sigs = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(slot_key_sigs_.size());
  for (int i = 0, n = slot_key_sigs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      slot_key_sigs_.Get(i));
  }

  // string validator_address = 1;
  if (this->validator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_address());
  }

  // bytes min_self_delegation = 4;
  if (this->min_self_delegation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_min_self_delegation());
  }

  // bytes max_total_delegation = 5;
  if (this->max_total_delegation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_max_total_delegation());
  }

  // bytes amount = 8;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // .TW.Harmony.Proto.Description description = 2;
  if (this->has_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .TW.Harmony.Proto.CommissionRate commission_rates = 3;
  if (this->has_commission_rates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commission_rates_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectiveCreateValidator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.DirectiveCreateValidator)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectiveCreateValidator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectiveCreateValidator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.DirectiveCreateValidator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.DirectiveCreateValidator)
    MergeFrom(*source);
  }
}

void DirectiveCreateValidator::MergeFrom(const DirectiveCreateValidator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.DirectiveCreateValidator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slot_pub_keys_.MergeFrom(from.slot_pub_keys_);
  slot_key_sigs_.MergeFrom(from.slot_key_sigs_);
  if (from.validator_address().size() > 0) {
    _internal_set_validator_address(from._internal_validator_address());
  }
  if (from.min_self_delegation().size() > 0) {
    _internal_set_min_self_delegation(from._internal_min_self_delegation());
  }
  if (from.max_total_delegation().size() > 0) {
    _internal_set_max_total_delegation(from._internal_max_total_delegation());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.has_description()) {
    _internal_mutable_description()->::TW::Harmony::Proto::Description::MergeFrom(from._internal_description());
  }
  if (from.has_commission_rates()) {
    _internal_mutable_commission_rates()->::TW::Harmony::Proto::CommissionRate::MergeFrom(from._internal_commission_rates());
  }
}

void DirectiveCreateValidator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.DirectiveCreateValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectiveCreateValidator::CopyFrom(const DirectiveCreateValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.DirectiveCreateValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectiveCreateValidator::IsInitialized() const {
  return true;
}

void DirectiveCreateValidator::InternalSwap(DirectiveCreateValidator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slot_pub_keys_.InternalSwap(&other->slot_pub_keys_);
  slot_key_sigs_.InternalSwap(&other->slot_key_sigs_);
  validator_address_.Swap(&other->validator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  min_self_delegation_.Swap(&other->min_self_delegation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_total_delegation_.Swap(&other->max_total_delegation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectiveCreateValidator, commission_rates_)
      + sizeof(DirectiveCreateValidator::commission_rates_)
      - PROTOBUF_FIELD_OFFSET(DirectiveCreateValidator, description_)>(
          reinterpret_cast<char*>(&description_),
          reinterpret_cast<char*>(&other->description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectiveCreateValidator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectiveEditValidator::_Internal {
 public:
  static const ::TW::Harmony::Proto::Description& description(const DirectiveEditValidator* msg);
  static const ::TW::Harmony::Proto::Decimal& commission_rate(const DirectiveEditValidator* msg);
};

const ::TW::Harmony::Proto::Description&
DirectiveEditValidator::_Internal::description(const DirectiveEditValidator* msg) {
  return *msg->description_;
}
const ::TW::Harmony::Proto::Decimal&
DirectiveEditValidator::_Internal::commission_rate(const DirectiveEditValidator* msg) {
  return *msg->commission_rate_;
}
DirectiveEditValidator::DirectiveEditValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.DirectiveEditValidator)
}
DirectiveEditValidator::DirectiveEditValidator(const DirectiveEditValidator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_address().empty()) {
    validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_address(), 
      GetArena());
  }
  min_self_delegation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_min_self_delegation().empty()) {
    min_self_delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_min_self_delegation(), 
      GetArena());
  }
  max_total_delegation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_total_delegation().empty()) {
    max_total_delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_total_delegation(), 
      GetArena());
  }
  slot_key_to_remove_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slot_key_to_remove().empty()) {
    slot_key_to_remove_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slot_key_to_remove(), 
      GetArena());
  }
  slot_key_to_add_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slot_key_to_add().empty()) {
    slot_key_to_add_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slot_key_to_add(), 
      GetArena());
  }
  slot_key_to_add_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slot_key_to_add_sig().empty()) {
    slot_key_to_add_sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slot_key_to_add_sig(), 
      GetArena());
  }
  active_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_active().empty()) {
    active_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_active(), 
      GetArena());
  }
  if (from._internal_has_description()) {
    description_ = new ::TW::Harmony::Proto::Description(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from._internal_has_commission_rate()) {
    commission_rate_ = new ::TW::Harmony::Proto::Decimal(*from.commission_rate_);
  } else {
    commission_rate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.DirectiveEditValidator)
}

void DirectiveEditValidator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectiveEditValidator_Harmony_2eproto.base);
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  min_self_delegation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_total_delegation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_key_to_remove_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_key_to_add_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_key_to_add_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&description_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&commission_rate_) -
      reinterpret_cast<char*>(&description_)) + sizeof(commission_rate_));
}

DirectiveEditValidator::~DirectiveEditValidator() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.DirectiveEditValidator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectiveEditValidator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  validator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  min_self_delegation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_total_delegation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_key_to_remove_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_key_to_add_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_key_to_add_sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete commission_rate_;
}

void DirectiveEditValidator::ArenaDtor(void* object) {
  DirectiveEditValidator* _this = reinterpret_cast< DirectiveEditValidator* >(object);
  (void)_this;
}
void DirectiveEditValidator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectiveEditValidator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectiveEditValidator& DirectiveEditValidator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectiveEditValidator_Harmony_2eproto.base);
  return *internal_default_instance();
}


void DirectiveEditValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.DirectiveEditValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validator_address_.ClearToEmpty();
  min_self_delegation_.ClearToEmpty();
  max_total_delegation_.ClearToEmpty();
  slot_key_to_remove_.ClearToEmpty();
  slot_key_to_add_.ClearToEmpty();
  slot_key_to_add_sig_.ClearToEmpty();
  active_.ClearToEmpty();
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  if (GetArena() == nullptr && commission_rate_ != nullptr) {
    delete commission_rate_;
  }
  commission_rate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectiveEditValidator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string validator_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.DirectiveEditValidator.validator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.Description description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Harmony.Proto.Decimal commission_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_commission_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes min_self_delegation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_min_self_delegation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes max_total_delegation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_max_total_delegation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes slot_key_to_remove = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_slot_key_to_remove();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes slot_key_to_add = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_slot_key_to_add();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes slot_key_to_add_sig = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_slot_key_to_add_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes active = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_active();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectiveEditValidator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.DirectiveEditValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_address = 1;
  if (this->validator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_address().data(), static_cast<int>(this->_internal_validator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.DirectiveEditValidator.validator_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_validator_address(), target);
  }

  // .TW.Harmony.Proto.Description description = 2;
  if (this->has_description()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::description(this), target, stream);
  }

  // .TW.Harmony.Proto.Decimal commission_rate = 3;
  if (this->has_commission_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::commission_rate(this), target, stream);
  }

  // bytes min_self_delegation = 4;
  if (this->min_self_delegation().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_min_self_delegation(), target);
  }

  // bytes max_total_delegation = 5;
  if (this->max_total_delegation().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_max_total_delegation(), target);
  }

  // bytes slot_key_to_remove = 6;
  if (this->slot_key_to_remove().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_slot_key_to_remove(), target);
  }

  // bytes slot_key_to_add = 7;
  if (this->slot_key_to_add().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_slot_key_to_add(), target);
  }

  // bytes slot_key_to_add_sig = 8;
  if (this->slot_key_to_add_sig().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_slot_key_to_add_sig(), target);
  }

  // bytes active = 9;
  if (this->active().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.DirectiveEditValidator)
  return target;
}

size_t DirectiveEditValidator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.DirectiveEditValidator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validator_address = 1;
  if (this->validator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_address());
  }

  // bytes min_self_delegation = 4;
  if (this->min_self_delegation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_min_self_delegation());
  }

  // bytes max_total_delegation = 5;
  if (this->max_total_delegation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_max_total_delegation());
  }

  // bytes slot_key_to_remove = 6;
  if (this->slot_key_to_remove().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_slot_key_to_remove());
  }

  // bytes slot_key_to_add = 7;
  if (this->slot_key_to_add().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_slot_key_to_add());
  }

  // bytes slot_key_to_add_sig = 8;
  if (this->slot_key_to_add_sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_slot_key_to_add_sig());
  }

  // bytes active = 9;
  if (this->active().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_active());
  }

  // .TW.Harmony.Proto.Description description = 2;
  if (this->has_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .TW.Harmony.Proto.Decimal commission_rate = 3;
  if (this->has_commission_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commission_rate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectiveEditValidator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.DirectiveEditValidator)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectiveEditValidator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectiveEditValidator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.DirectiveEditValidator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.DirectiveEditValidator)
    MergeFrom(*source);
  }
}

void DirectiveEditValidator::MergeFrom(const DirectiveEditValidator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.DirectiveEditValidator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.validator_address().size() > 0) {
    _internal_set_validator_address(from._internal_validator_address());
  }
  if (from.min_self_delegation().size() > 0) {
    _internal_set_min_self_delegation(from._internal_min_self_delegation());
  }
  if (from.max_total_delegation().size() > 0) {
    _internal_set_max_total_delegation(from._internal_max_total_delegation());
  }
  if (from.slot_key_to_remove().size() > 0) {
    _internal_set_slot_key_to_remove(from._internal_slot_key_to_remove());
  }
  if (from.slot_key_to_add().size() > 0) {
    _internal_set_slot_key_to_add(from._internal_slot_key_to_add());
  }
  if (from.slot_key_to_add_sig().size() > 0) {
    _internal_set_slot_key_to_add_sig(from._internal_slot_key_to_add_sig());
  }
  if (from.active().size() > 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.has_description()) {
    _internal_mutable_description()->::TW::Harmony::Proto::Description::MergeFrom(from._internal_description());
  }
  if (from.has_commission_rate()) {
    _internal_mutable_commission_rate()->::TW::Harmony::Proto::Decimal::MergeFrom(from._internal_commission_rate());
  }
}

void DirectiveEditValidator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.DirectiveEditValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectiveEditValidator::CopyFrom(const DirectiveEditValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.DirectiveEditValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectiveEditValidator::IsInitialized() const {
  return true;
}

void DirectiveEditValidator::InternalSwap(DirectiveEditValidator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validator_address_.Swap(&other->validator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  min_self_delegation_.Swap(&other->min_self_delegation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_total_delegation_.Swap(&other->max_total_delegation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  slot_key_to_remove_.Swap(&other->slot_key_to_remove_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  slot_key_to_add_.Swap(&other->slot_key_to_add_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  slot_key_to_add_sig_.Swap(&other->slot_key_to_add_sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  active_.Swap(&other->active_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectiveEditValidator, commission_rate_)
      + sizeof(DirectiveEditValidator::commission_rate_)
      - PROTOBUF_FIELD_OFFSET(DirectiveEditValidator, description_)>(
          reinterpret_cast<char*>(&description_),
          reinterpret_cast<char*>(&other->description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectiveEditValidator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectiveDelegate::_Internal {
 public:
};

DirectiveDelegate::DirectiveDelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.DirectiveDelegate)
}
DirectiveDelegate::DirectiveDelegate(const DirectiveDelegate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegator_address().empty()) {
    delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegator_address(), 
      GetArena());
  }
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_address().empty()) {
    validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_address(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.DirectiveDelegate)
}

void DirectiveDelegate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectiveDelegate_Harmony_2eproto.base);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DirectiveDelegate::~DirectiveDelegate() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.DirectiveDelegate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectiveDelegate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectiveDelegate::ArenaDtor(void* object) {
  DirectiveDelegate* _this = reinterpret_cast< DirectiveDelegate* >(object);
  (void)_this;
}
void DirectiveDelegate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectiveDelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectiveDelegate& DirectiveDelegate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectiveDelegate_Harmony_2eproto.base);
  return *internal_default_instance();
}


void DirectiveDelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.DirectiveDelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegator_address_.ClearToEmpty();
  validator_address_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectiveDelegate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string delegator_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.DirectiveDelegate.delegator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.DirectiveDelegate.validator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectiveDelegate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.DirectiveDelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegator_address().data(), static_cast<int>(this->_internal_delegator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.DirectiveDelegate.delegator_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegator_address(), target);
  }

  // string validator_address = 2;
  if (this->validator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_address().data(), static_cast<int>(this->_internal_validator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.DirectiveDelegate.validator_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_validator_address(), target);
  }

  // bytes amount = 3;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.DirectiveDelegate)
  return target;
}

size_t DirectiveDelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.DirectiveDelegate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegator_address());
  }

  // string validator_address = 2;
  if (this->validator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_address());
  }

  // bytes amount = 3;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectiveDelegate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.DirectiveDelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectiveDelegate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectiveDelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.DirectiveDelegate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.DirectiveDelegate)
    MergeFrom(*source);
  }
}

void DirectiveDelegate::MergeFrom(const DirectiveDelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.DirectiveDelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegator_address().size() > 0) {
    _internal_set_delegator_address(from._internal_delegator_address());
  }
  if (from.validator_address().size() > 0) {
    _internal_set_validator_address(from._internal_validator_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void DirectiveDelegate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.DirectiveDelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectiveDelegate::CopyFrom(const DirectiveDelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.DirectiveDelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectiveDelegate::IsInitialized() const {
  return true;
}

void DirectiveDelegate::InternalSwap(DirectiveDelegate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegator_address_.Swap(&other->delegator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_address_.Swap(&other->validator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectiveDelegate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectiveUndelegate::_Internal {
 public:
};

DirectiveUndelegate::DirectiveUndelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.DirectiveUndelegate)
}
DirectiveUndelegate::DirectiveUndelegate(const DirectiveUndelegate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegator_address().empty()) {
    delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegator_address(), 
      GetArena());
  }
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_address().empty()) {
    validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_address(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.DirectiveUndelegate)
}

void DirectiveUndelegate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectiveUndelegate_Harmony_2eproto.base);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DirectiveUndelegate::~DirectiveUndelegate() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.DirectiveUndelegate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectiveUndelegate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectiveUndelegate::ArenaDtor(void* object) {
  DirectiveUndelegate* _this = reinterpret_cast< DirectiveUndelegate* >(object);
  (void)_this;
}
void DirectiveUndelegate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectiveUndelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectiveUndelegate& DirectiveUndelegate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectiveUndelegate_Harmony_2eproto.base);
  return *internal_default_instance();
}


void DirectiveUndelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.DirectiveUndelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegator_address_.ClearToEmpty();
  validator_address_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectiveUndelegate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string delegator_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.DirectiveUndelegate.delegator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.DirectiveUndelegate.validator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectiveUndelegate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.DirectiveUndelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegator_address().data(), static_cast<int>(this->_internal_delegator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.DirectiveUndelegate.delegator_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegator_address(), target);
  }

  // string validator_address = 2;
  if (this->validator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_address().data(), static_cast<int>(this->_internal_validator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.DirectiveUndelegate.validator_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_validator_address(), target);
  }

  // bytes amount = 3;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.DirectiveUndelegate)
  return target;
}

size_t DirectiveUndelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.DirectiveUndelegate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegator_address());
  }

  // string validator_address = 2;
  if (this->validator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_address());
  }

  // bytes amount = 3;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectiveUndelegate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.DirectiveUndelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectiveUndelegate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectiveUndelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.DirectiveUndelegate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.DirectiveUndelegate)
    MergeFrom(*source);
  }
}

void DirectiveUndelegate::MergeFrom(const DirectiveUndelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.DirectiveUndelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegator_address().size() > 0) {
    _internal_set_delegator_address(from._internal_delegator_address());
  }
  if (from.validator_address().size() > 0) {
    _internal_set_validator_address(from._internal_validator_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void DirectiveUndelegate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.DirectiveUndelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectiveUndelegate::CopyFrom(const DirectiveUndelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.DirectiveUndelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectiveUndelegate::IsInitialized() const {
  return true;
}

void DirectiveUndelegate::InternalSwap(DirectiveUndelegate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegator_address_.Swap(&other->delegator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_address_.Swap(&other->validator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectiveUndelegate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectiveCollectRewards::_Internal {
 public:
};

DirectiveCollectRewards::DirectiveCollectRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Harmony.Proto.DirectiveCollectRewards)
}
DirectiveCollectRewards::DirectiveCollectRewards(const DirectiveCollectRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegator_address().empty()) {
    delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegator_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Harmony.Proto.DirectiveCollectRewards)
}

void DirectiveCollectRewards::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectiveCollectRewards_Harmony_2eproto.base);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DirectiveCollectRewards::~DirectiveCollectRewards() {
  // @@protoc_insertion_point(destructor:TW.Harmony.Proto.DirectiveCollectRewards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectiveCollectRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectiveCollectRewards::ArenaDtor(void* object) {
  DirectiveCollectRewards* _this = reinterpret_cast< DirectiveCollectRewards* >(object);
  (void)_this;
}
void DirectiveCollectRewards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectiveCollectRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectiveCollectRewards& DirectiveCollectRewards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectiveCollectRewards_Harmony_2eproto.base);
  return *internal_default_instance();
}


void DirectiveCollectRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Harmony.Proto.DirectiveCollectRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegator_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectiveCollectRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string delegator_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Harmony.Proto.DirectiveCollectRewards.delegator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectiveCollectRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Harmony.Proto.DirectiveCollectRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegator_address().data(), static_cast<int>(this->_internal_delegator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Harmony.Proto.DirectiveCollectRewards.delegator_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegator_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Harmony.Proto.DirectiveCollectRewards)
  return target;
}

size_t DirectiveCollectRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Harmony.Proto.DirectiveCollectRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegator_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectiveCollectRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Harmony.Proto.DirectiveCollectRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectiveCollectRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectiveCollectRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Harmony.Proto.DirectiveCollectRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Harmony.Proto.DirectiveCollectRewards)
    MergeFrom(*source);
  }
}

void DirectiveCollectRewards::MergeFrom(const DirectiveCollectRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Harmony.Proto.DirectiveCollectRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegator_address().size() > 0) {
    _internal_set_delegator_address(from._internal_delegator_address());
  }
}

void DirectiveCollectRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Harmony.Proto.DirectiveCollectRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectiveCollectRewards::CopyFrom(const DirectiveCollectRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Harmony.Proto.DirectiveCollectRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectiveCollectRewards::IsInitialized() const {
  return true;
}

void DirectiveCollectRewards::InternalSwap(DirectiveCollectRewards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegator_address_.Swap(&other->delegator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectiveCollectRewards::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Harmony
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::SigningOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::TransactionMessage* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::TransactionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::TransactionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::StakingMessage* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::StakingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::StakingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::Description* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::Description >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::Description >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::Decimal* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::CommissionRate* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::CommissionRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::CommissionRate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::DirectiveCreateValidator* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveCreateValidator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::DirectiveCreateValidator >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::DirectiveEditValidator* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveEditValidator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::DirectiveEditValidator >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::DirectiveDelegate* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveDelegate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::DirectiveDelegate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::DirectiveUndelegate* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveUndelegate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::DirectiveUndelegate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Harmony::Proto::DirectiveCollectRewards* Arena::CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveCollectRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Harmony::Proto::DirectiveCollectRewards >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
