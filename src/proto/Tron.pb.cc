// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tron.proto

#include "Tron.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApproveTRC20Contract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateResourceContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreezeBalanceContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreezeBalanceV2Contract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_Transaction_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferAssetContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferTRC20Contract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TriggerSmartContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnDelegateResourceContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnfreezeAssetContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnfreezeBalanceContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnfreezeBalanceV2Contract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteAssetContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoteWitnessContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteWitnessContract_Vote_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawBalanceContract_Tron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawExpireUnfreezeContract_Tron_2eproto;
namespace TW {
namespace Tron {
namespace Proto {
class TransferContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferContract> _instance;
} _TransferContract_default_instance_;
class TransferAssetContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferAssetContract> _instance;
} _TransferAssetContract_default_instance_;
class TransferTRC20ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferTRC20Contract> _instance;
} _TransferTRC20Contract_default_instance_;
class ApproveTRC20ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApproveTRC20Contract> _instance;
} _ApproveTRC20Contract_default_instance_;
class FreezeBalanceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreezeBalanceContract> _instance;
} _FreezeBalanceContract_default_instance_;
class FreezeBalanceV2ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreezeBalanceV2Contract> _instance;
} _FreezeBalanceV2Contract_default_instance_;
class UnfreezeBalanceV2ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnfreezeBalanceV2Contract> _instance;
} _UnfreezeBalanceV2Contract_default_instance_;
class WithdrawExpireUnfreezeContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawExpireUnfreezeContract> _instance;
} _WithdrawExpireUnfreezeContract_default_instance_;
class DelegateResourceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegateResourceContract> _instance;
} _DelegateResourceContract_default_instance_;
class UnDelegateResourceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnDelegateResourceContract> _instance;
} _UnDelegateResourceContract_default_instance_;
class UnfreezeBalanceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnfreezeBalanceContract> _instance;
} _UnfreezeBalanceContract_default_instance_;
class UnfreezeAssetContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnfreezeAssetContract> _instance;
} _UnfreezeAssetContract_default_instance_;
class VoteAssetContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteAssetContract> _instance;
} _VoteAssetContract_default_instance_;
class VoteWitnessContract_VoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteWitnessContract_Vote> _instance;
} _VoteWitnessContract_Vote_default_instance_;
class VoteWitnessContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteWitnessContract> _instance;
} _VoteWitnessContract_default_instance_;
class WithdrawBalanceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawBalanceContract> _instance;
} _WithdrawBalanceContract_default_instance_;
class TriggerSmartContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TriggerSmartContract> _instance;
} _TriggerSmartContract_default_instance_;
class BlockHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockHeader> _instance;
} _BlockHeader_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Tron
}  // namespace TW
static void InitDefaultsscc_info_ApproveTRC20Contract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_ApproveTRC20Contract_default_instance_;
    new (ptr) ::TW::Tron::Proto::ApproveTRC20Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApproveTRC20Contract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApproveTRC20Contract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_BlockHeader_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_BlockHeader_default_instance_;
    new (ptr) ::TW::Tron::Proto::BlockHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockHeader_Tron_2eproto}, {}};

static void InitDefaultsscc_info_DelegateResourceContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_DelegateResourceContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::DelegateResourceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateResourceContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelegateResourceContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_FreezeBalanceContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_FreezeBalanceContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::FreezeBalanceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreezeBalanceContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FreezeBalanceContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_FreezeBalanceV2Contract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_FreezeBalanceV2Contract_default_instance_;
    new (ptr) ::TW::Tron::Proto::FreezeBalanceV2Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreezeBalanceV2Contract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FreezeBalanceV2Contract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_SigningInput_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Tron::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SigningInput_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SigningInput_Tron_2eproto}, {
      &scc_info_Transaction_Tron_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Tron::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Tron_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_Transaction_default_instance_;
    new (ptr) ::TW::Tron::Proto::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_Transaction_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 17, 0, InitDefaultsscc_info_Transaction_Tron_2eproto}, {
      &scc_info_BlockHeader_Tron_2eproto.base,
      &scc_info_TransferContract_Tron_2eproto.base,
      &scc_info_TransferAssetContract_Tron_2eproto.base,
      &scc_info_FreezeBalanceContract_Tron_2eproto.base,
      &scc_info_UnfreezeBalanceContract_Tron_2eproto.base,
      &scc_info_UnfreezeAssetContract_Tron_2eproto.base,
      &scc_info_WithdrawBalanceContract_Tron_2eproto.base,
      &scc_info_VoteAssetContract_Tron_2eproto.base,
      &scc_info_VoteWitnessContract_Tron_2eproto.base,
      &scc_info_TriggerSmartContract_Tron_2eproto.base,
      &scc_info_TransferTRC20Contract_Tron_2eproto.base,
      &scc_info_ApproveTRC20Contract_Tron_2eproto.base,
      &scc_info_FreezeBalanceV2Contract_Tron_2eproto.base,
      &scc_info_UnfreezeBalanceV2Contract_Tron_2eproto.base,
      &scc_info_WithdrawExpireUnfreezeContract_Tron_2eproto.base,
      &scc_info_DelegateResourceContract_Tron_2eproto.base,
      &scc_info_UnDelegateResourceContract_Tron_2eproto.base,}};

static void InitDefaultsscc_info_TransferAssetContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_TransferAssetContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::TransferAssetContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferAssetContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferAssetContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_TransferContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_TransferContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::TransferContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_TransferTRC20Contract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_TransferTRC20Contract_default_instance_;
    new (ptr) ::TW::Tron::Proto::TransferTRC20Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferTRC20Contract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferTRC20Contract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_TriggerSmartContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_TriggerSmartContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::TriggerSmartContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TriggerSmartContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TriggerSmartContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_UnDelegateResourceContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_UnDelegateResourceContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::UnDelegateResourceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnDelegateResourceContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnDelegateResourceContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_UnfreezeAssetContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_UnfreezeAssetContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::UnfreezeAssetContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnfreezeAssetContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnfreezeAssetContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_UnfreezeBalanceContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_UnfreezeBalanceContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::UnfreezeBalanceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnfreezeBalanceContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnfreezeBalanceContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_UnfreezeBalanceV2Contract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_UnfreezeBalanceV2Contract_default_instance_;
    new (ptr) ::TW::Tron::Proto::UnfreezeBalanceV2Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnfreezeBalanceV2Contract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnfreezeBalanceV2Contract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_VoteAssetContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_VoteAssetContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::VoteAssetContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteAssetContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoteAssetContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_VoteWitnessContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_VoteWitnessContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::VoteWitnessContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoteWitnessContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VoteWitnessContract_Tron_2eproto}, {
      &scc_info_VoteWitnessContract_Vote_Tron_2eproto.base,}};

static void InitDefaultsscc_info_VoteWitnessContract_Vote_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_VoteWitnessContract_Vote_default_instance_;
    new (ptr) ::TW::Tron::Proto::VoteWitnessContract_Vote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteWitnessContract_Vote_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoteWitnessContract_Vote_Tron_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawBalanceContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_WithdrawBalanceContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::WithdrawBalanceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawBalanceContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WithdrawBalanceContract_Tron_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawExpireUnfreezeContract_Tron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tron::Proto::_WithdrawExpireUnfreezeContract_default_instance_;
    new (ptr) ::TW::Tron::Proto::WithdrawExpireUnfreezeContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawExpireUnfreezeContract_Tron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WithdrawExpireUnfreezeContract_Tron_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Tron_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Tron_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Tron_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Tron_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferContract, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferContract, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferAssetContract, asset_name_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferAssetContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferAssetContract, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferAssetContract, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferTRC20Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferTRC20Contract, contract_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferTRC20Contract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferTRC20Contract, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TransferTRC20Contract, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::ApproveTRC20Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::ApproveTRC20Contract, contract_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::ApproveTRC20Contract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::ApproveTRC20Contract, spender_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::ApproveTRC20Contract, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceContract, frozen_balance_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceContract, frozen_duration_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceContract, receiver_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceV2Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceV2Contract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceV2Contract, frozen_balance_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::FreezeBalanceV2Contract, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeBalanceV2Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeBalanceV2Contract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeBalanceV2Contract, unfreeze_balance_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeBalanceV2Contract, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::WithdrawExpireUnfreezeContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::WithdrawExpireUnfreezeContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::DelegateResourceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::DelegateResourceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::DelegateResourceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::DelegateResourceContract, balance_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::DelegateResourceContract, receiver_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::DelegateResourceContract, lock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnDelegateResourceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnDelegateResourceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnDelegateResourceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnDelegateResourceContract, balance_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnDelegateResourceContract, receiver_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeBalanceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeBalanceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeBalanceContract, receiver_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::UnfreezeAssetContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteAssetContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteAssetContract, vote_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteAssetContract, support_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteAssetContract, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteWitnessContract_Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteWitnessContract_Vote, vote_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteWitnessContract_Vote, vote_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteWitnessContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteWitnessContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteWitnessContract, votes_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::VoteWitnessContract, support_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::WithdrawBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::WithdrawBalanceContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TriggerSmartContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TriggerSmartContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TriggerSmartContract, contract_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TriggerSmartContract, call_value_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TriggerSmartContract, data_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TriggerSmartContract, call_token_value_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::TriggerSmartContract, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::BlockHeader, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::BlockHeader, tx_trie_root_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::BlockHeader, parent_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::BlockHeader, number_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::BlockHeader, witness_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::BlockHeader, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::Transaction, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::Transaction, expiration_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::Transaction, block_header_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::Transaction, fee_limit_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::Transaction, contract_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningInput, transaction_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningInput, txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningOutput, id_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningOutput, signature_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningOutput, ref_block_bytes_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningOutput, ref_block_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Tron::Proto::SigningOutput, json_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Tron::Proto::TransferContract)},
  { 8, -1, sizeof(::TW::Tron::Proto::TransferAssetContract)},
  { 17, -1, sizeof(::TW::Tron::Proto::TransferTRC20Contract)},
  { 26, -1, sizeof(::TW::Tron::Proto::ApproveTRC20Contract)},
  { 35, -1, sizeof(::TW::Tron::Proto::FreezeBalanceContract)},
  { 45, -1, sizeof(::TW::Tron::Proto::FreezeBalanceV2Contract)},
  { 53, -1, sizeof(::TW::Tron::Proto::UnfreezeBalanceV2Contract)},
  { 61, -1, sizeof(::TW::Tron::Proto::WithdrawExpireUnfreezeContract)},
  { 67, -1, sizeof(::TW::Tron::Proto::DelegateResourceContract)},
  { 77, -1, sizeof(::TW::Tron::Proto::UnDelegateResourceContract)},
  { 86, -1, sizeof(::TW::Tron::Proto::UnfreezeBalanceContract)},
  { 94, -1, sizeof(::TW::Tron::Proto::UnfreezeAssetContract)},
  { 100, -1, sizeof(::TW::Tron::Proto::VoteAssetContract)},
  { 109, -1, sizeof(::TW::Tron::Proto::VoteWitnessContract_Vote)},
  { 116, -1, sizeof(::TW::Tron::Proto::VoteWitnessContract)},
  { 124, -1, sizeof(::TW::Tron::Proto::WithdrawBalanceContract)},
  { 130, -1, sizeof(::TW::Tron::Proto::TriggerSmartContract)},
  { 141, -1, sizeof(::TW::Tron::Proto::BlockHeader)},
  { 152, -1, sizeof(::TW::Tron::Proto::Transaction)},
  { 178, -1, sizeof(::TW::Tron::Proto::SigningInput)},
  { 186, -1, sizeof(::TW::Tron::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_TransferContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_TransferAssetContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_TransferTRC20Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_ApproveTRC20Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_FreezeBalanceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_FreezeBalanceV2Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_UnfreezeBalanceV2Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_WithdrawExpireUnfreezeContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_DelegateResourceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_UnDelegateResourceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_UnfreezeBalanceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_UnfreezeAssetContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_VoteAssetContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_VoteWitnessContract_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_VoteWitnessContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_WithdrawBalanceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_TriggerSmartContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_BlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tron::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Tron_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nTron.proto\022\rTW.Tron.Proto\"M\n\020TransferC"
  "ontract\022\025\n\rowner_address\030\001 \001(\t\022\022\n\nto_add"
  "ress\030\002 \001(\t\022\016\n\006amount\030\003 \001(\003\"f\n\025TransferAs"
  "setContract\022\022\n\nasset_name\030\001 \001(\t\022\025\n\rowner"
  "_address\030\002 \001(\t\022\022\n\nto_address\030\003 \001(\t\022\016\n\006am"
  "ount\030\004 \001(\003\"l\n\025TransferTRC20Contract\022\030\n\020c"
  "ontract_address\030\001 \001(\t\022\025\n\rowner_address\030\002"
  " \001(\t\022\022\n\nto_address\030\003 \001(\t\022\016\n\006amount\030\004 \001(\014"
  "\"p\n\024ApproveTRC20Contract\022\030\n\020contract_add"
  "ress\030\001 \001(\t\022\025\n\rowner_address\030\002 \001(\t\022\027\n\017spe"
  "nder_address\030\003 \001(\t\022\016\n\006amount\030\004 \001(\014\"\213\001\n\025F"
  "reezeBalanceContract\022\025\n\rowner_address\030\001 "
  "\001(\t\022\026\n\016frozen_balance\030\002 \001(\003\022\027\n\017frozen_du"
  "ration\030\003 \001(\003\022\020\n\010resource\030\n \001(\t\022\030\n\020receiv"
  "er_address\030\017 \001(\t\"Z\n\027FreezeBalanceV2Contr"
  "act\022\025\n\rowner_address\030\001 \001(\t\022\026\n\016frozen_bal"
  "ance\030\002 \001(\003\022\020\n\010resource\030\003 \001(\t\"^\n\031Unfreeze"
  "BalanceV2Contract\022\025\n\rowner_address\030\001 \001(\t"
  "\022\030\n\020unfreeze_balance\030\002 \001(\003\022\020\n\010resource\030\003"
  " \001(\t\"7\n\036WithdrawExpireUnfreezeContract\022\025"
  "\n\rowner_address\030\001 \001(\t\"|\n\030DelegateResourc"
  "eContract\022\025\n\rowner_address\030\001 \001(\t\022\020\n\010reso"
  "urce\030\002 \001(\t\022\017\n\007balance\030\003 \001(\003\022\030\n\020receiver_"
  "address\030\004 \001(\t\022\014\n\004lock\030\005 \001(\010\"p\n\032UnDelegat"
  "eResourceContract\022\025\n\rowner_address\030\001 \001(\t"
  "\022\020\n\010resource\030\002 \001(\t\022\017\n\007balance\030\003 \001(\003\022\030\n\020r"
  "eceiver_address\030\004 \001(\t\"\\\n\027UnfreezeBalance"
  "Contract\022\025\n\rowner_address\030\001 \001(\t\022\020\n\010resou"
  "rce\030\n \001(\t\022\030\n\020receiver_address\030\017 \001(\t\".\n\025U"
  "nfreezeAssetContract\022\025\n\rowner_address\030\001 "
  "\001(\t\"`\n\021VoteAssetContract\022\025\n\rowner_addres"
  "s\030\001 \001(\t\022\024\n\014vote_address\030\002 \003(\t\022\017\n\007support"
  "\030\003 \001(\010\022\r\n\005count\030\005 \001(\005\"\247\001\n\023VoteWitnessCon"
  "tract\022\025\n\rowner_address\030\001 \001(\t\0226\n\005votes\030\002 "
  "\003(\0132\'.TW.Tron.Proto.VoteWitnessContract."
  "Vote\022\017\n\007support\030\003 \001(\010\0320\n\004Vote\022\024\n\014vote_ad"
  "dress\030\001 \001(\t\022\022\n\nvote_count\030\002 \001(\003\"0\n\027Withd"
  "rawBalanceContract\022\025\n\rowner_address\030\001 \001("
  "\t\"\225\001\n\024TriggerSmartContract\022\025\n\rowner_addr"
  "ess\030\001 \001(\t\022\030\n\020contract_address\030\002 \001(\t\022\022\n\nc"
  "all_value\030\003 \001(\003\022\014\n\004data\030\004 \001(\014\022\030\n\020call_to"
  "ken_value\030\005 \001(\003\022\020\n\010token_id\030\006 \001(\003\"\205\001\n\013Bl"
  "ockHeader\022\021\n\ttimestamp\030\001 \001(\003\022\024\n\014tx_trie_"
  "root\030\002 \001(\014\022\023\n\013parent_hash\030\003 \001(\014\022\016\n\006numbe"
  "r\030\007 \001(\003\022\027\n\017witness_address\030\t \001(\014\022\017\n\007vers"
  "ion\030\n \001(\005\"\304\t\n\013Transaction\022\021\n\ttimestamp\030\001"
  " \001(\003\022\022\n\nexpiration\030\002 \001(\003\0220\n\014block_header"
  "\030\003 \001(\0132\032.TW.Tron.Proto.BlockHeader\022\021\n\tfe"
  "e_limit\030\004 \001(\003\0223\n\010transfer\030\n \001(\0132\037.TW.Tro"
  "n.Proto.TransferContractH\000\022>\n\016transfer_a"
  "sset\030\013 \001(\0132$.TW.Tron.Proto.TransferAsset"
  "ContractH\000\022>\n\016freeze_balance\030\014 \001(\0132$.TW."
  "Tron.Proto.FreezeBalanceContractH\000\022B\n\020un"
  "freeze_balance\030\r \001(\0132&.TW.Tron.Proto.Unf"
  "reezeBalanceContractH\000\022>\n\016unfreeze_asset"
  "\030\016 \001(\0132$.TW.Tron.Proto.UnfreezeAssetCont"
  "ractH\000\022B\n\020withdraw_balance\030\017 \001(\0132&.TW.Tr"
  "on.Proto.WithdrawBalanceContractH\000\0226\n\nvo"
  "te_asset\030\020 \001(\0132 .TW.Tron.Proto.VoteAsset"
  "ContractH\000\022:\n\014vote_witness\030\021 \001(\0132\".TW.Tr"
  "on.Proto.VoteWitnessContractH\000\022E\n\026trigge"
  "r_smart_contract\030\022 \001(\0132#.TW.Tron.Proto.T"
  "riggerSmartContractH\000\022G\n\027transfer_trc20_"
  "contract\030\023 \001(\0132$.TW.Tron.Proto.TransferT"
  "RC20ContractH\000\022E\n\026approve_trc20_contract"
  "\030\024 \001(\0132#.TW.Tron.Proto.ApproveTRC20Contr"
  "actH\000\022C\n\021freeze_balance_v2\030\025 \001(\0132&.TW.Tr"
  "on.Proto.FreezeBalanceV2ContractH\000\022G\n\023un"
  "freeze_balance_v2\030\026 \001(\0132(.TW.Tron.Proto."
  "UnfreezeBalanceV2ContractH\000\022Q\n\030withdraw_"
  "expire_unfreeze\030\027 \001(\0132-.TW.Tron.Proto.Wi"
  "thdrawExpireUnfreezeContractH\000\022D\n\021delega"
  "te_resource\030\030 \001(\0132\'.TW.Tron.Proto.Delega"
  "teResourceContractH\000\022H\n\023undelegate_resou"
  "rce\030\031 \001(\0132).TW.Tron.Proto.UnDelegateReso"
  "urceContractH\000B\020\n\016contract_oneof\"b\n\014Sign"
  "ingInput\022/\n\013transaction\030\001 \001(\0132\032.TW.Tron."
  "Proto.Transaction\022\023\n\013private_key\030\002 \001(\014\022\014"
  "\n\004txId\030\003 \001(\t\"m\n\rSigningOutput\022\n\n\002id\030\001 \001("
  "\014\022\021\n\tsignature\030\002 \001(\014\022\027\n\017ref_block_bytes\030"
  "\003 \001(\014\022\026\n\016ref_block_hash\030\004 \001(\014\022\014\n\004json\030\005 "
  "\001(\tB\027\n\025wallet.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Tron_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Tron_2eproto_sccs[21] = {
  &scc_info_ApproveTRC20Contract_Tron_2eproto.base,
  &scc_info_BlockHeader_Tron_2eproto.base,
  &scc_info_DelegateResourceContract_Tron_2eproto.base,
  &scc_info_FreezeBalanceContract_Tron_2eproto.base,
  &scc_info_FreezeBalanceV2Contract_Tron_2eproto.base,
  &scc_info_SigningInput_Tron_2eproto.base,
  &scc_info_SigningOutput_Tron_2eproto.base,
  &scc_info_Transaction_Tron_2eproto.base,
  &scc_info_TransferAssetContract_Tron_2eproto.base,
  &scc_info_TransferContract_Tron_2eproto.base,
  &scc_info_TransferTRC20Contract_Tron_2eproto.base,
  &scc_info_TriggerSmartContract_Tron_2eproto.base,
  &scc_info_UnDelegateResourceContract_Tron_2eproto.base,
  &scc_info_UnfreezeAssetContract_Tron_2eproto.base,
  &scc_info_UnfreezeBalanceContract_Tron_2eproto.base,
  &scc_info_UnfreezeBalanceV2Contract_Tron_2eproto.base,
  &scc_info_VoteAssetContract_Tron_2eproto.base,
  &scc_info_VoteWitnessContract_Tron_2eproto.base,
  &scc_info_VoteWitnessContract_Vote_Tron_2eproto.base,
  &scc_info_WithdrawBalanceContract_Tron_2eproto.base,
  &scc_info_WithdrawExpireUnfreezeContract_Tron_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Tron_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Tron_2eproto = {
  false, false, descriptor_table_protodef_Tron_2eproto, "Tron.proto", 3276,
  &descriptor_table_Tron_2eproto_once, descriptor_table_Tron_2eproto_sccs, descriptor_table_Tron_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_Tron_2eproto::offsets,
  file_level_metadata_Tron_2eproto, 21, file_level_enum_descriptors_Tron_2eproto, file_level_service_descriptors_Tron_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Tron_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Tron_2eproto)), true);
namespace TW {
namespace Tron {
namespace Proto {

// ===================================================================

class TransferContract::_Internal {
 public:
};

TransferContract::TransferContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.TransferContract)
}
TransferContract::TransferContract(const TransferContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.TransferContract)
}

void TransferContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TransferContract::~TransferContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.TransferContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferContract::ArenaDtor(void* object) {
  TransferContract* _this = reinterpret_cast< TransferContract* >(object);
  (void)_this;
}
void TransferContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferContract& TransferContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void TransferContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.TransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  to_address_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TransferContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TransferContract.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.TransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TransferContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // string to_address = 2;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TransferContract.to_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_address(), target);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.TransferContract)
  return target;
}

size_t TransferContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.TransferContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string to_address = 2;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.TransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.TransferContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.TransferContract)
    MergeFrom(*source);
  }
}

void TransferContract::MergeFrom(const TransferContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.TransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransferContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.TransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferContract::CopyFrom(const TransferContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.TransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferContract::IsInitialized() const {
  return true;
}

void TransferContract::InternalSwap(TransferContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferAssetContract::_Internal {
 public:
};

TransferAssetContract::TransferAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.TransferAssetContract)
}
TransferAssetContract::TransferAssetContract(const TransferAssetContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_name().empty()) {
    asset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_name(), 
      GetArena());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.TransferAssetContract)
}

void TransferAssetContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferAssetContract_Tron_2eproto.base);
  asset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TransferAssetContract::~TransferAssetContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.TransferAssetContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferAssetContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferAssetContract::ArenaDtor(void* object) {
  TransferAssetContract* _this = reinterpret_cast< TransferAssetContract* >(object);
  (void)_this;
}
void TransferAssetContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferAssetContract& TransferAssetContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferAssetContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void TransferAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.TransferAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_name_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  to_address_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferAssetContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TransferAssetContract.asset_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TransferAssetContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TransferAssetContract.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferAssetContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.TransferAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_name = 1;
  if (this->asset_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_name().data(), static_cast<int>(this->_internal_asset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TransferAssetContract.asset_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_name(), target);
  }

  // string owner_address = 2;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TransferAssetContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_address(), target);
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TransferAssetContract.to_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to_address(), target);
  }

  // int64 amount = 4;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.TransferAssetContract)
  return target;
}

size_t TransferAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.TransferAssetContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_name = 1;
  if (this->asset_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_name());
  }

  // string owner_address = 2;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // int64 amount = 4;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferAssetContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.TransferAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferAssetContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferAssetContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.TransferAssetContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.TransferAssetContract)
    MergeFrom(*source);
  }
}

void TransferAssetContract::MergeFrom(const TransferAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.TransferAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_name().size() > 0) {
    _internal_set_asset_name(from._internal_asset_name());
  }
  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransferAssetContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.TransferAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferAssetContract::CopyFrom(const TransferAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.TransferAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferAssetContract::IsInitialized() const {
  return true;
}

void TransferAssetContract::InternalSwap(TransferAssetContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_name_.Swap(&other->asset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferAssetContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferTRC20Contract::_Internal {
 public:
};

TransferTRC20Contract::TransferTRC20Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.TransferTRC20Contract)
}
TransferTRC20Contract::TransferTRC20Contract(const TransferTRC20Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_address().empty()) {
    contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_address(), 
      GetArena());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.TransferTRC20Contract)
}

void TransferTRC20Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferTRC20Contract_Tron_2eproto.base);
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransferTRC20Contract::~TransferTRC20Contract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.TransferTRC20Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferTRC20Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferTRC20Contract::ArenaDtor(void* object) {
  TransferTRC20Contract* _this = reinterpret_cast< TransferTRC20Contract* >(object);
  (void)_this;
}
void TransferTRC20Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferTRC20Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferTRC20Contract& TransferTRC20Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferTRC20Contract_Tron_2eproto.base);
  return *internal_default_instance();
}


void TransferTRC20Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.TransferTRC20Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_address_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  to_address_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferTRC20Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TransferTRC20Contract.contract_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TransferTRC20Contract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TransferTRC20Contract.to_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferTRC20Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.TransferTRC20Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_address = 1;
  if (this->contract_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_address().data(), static_cast<int>(this->_internal_contract_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TransferTRC20Contract.contract_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_address(), target);
  }

  // string owner_address = 2;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TransferTRC20Contract.owner_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_address(), target);
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TransferTRC20Contract.to_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to_address(), target);
  }

  // bytes amount = 4;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.TransferTRC20Contract)
  return target;
}

size_t TransferTRC20Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.TransferTRC20Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_address = 1;
  if (this->contract_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_address());
  }

  // string owner_address = 2;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // bytes amount = 4;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferTRC20Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.TransferTRC20Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferTRC20Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferTRC20Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.TransferTRC20Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.TransferTRC20Contract)
    MergeFrom(*source);
  }
}

void TransferTRC20Contract::MergeFrom(const TransferTRC20Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.TransferTRC20Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_address().size() > 0) {
    _internal_set_contract_address(from._internal_contract_address());
  }
  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransferTRC20Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.TransferTRC20Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferTRC20Contract::CopyFrom(const TransferTRC20Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.TransferTRC20Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferTRC20Contract::IsInitialized() const {
  return true;
}

void TransferTRC20Contract::InternalSwap(TransferTRC20Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_address_.Swap(&other->contract_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferTRC20Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ApproveTRC20Contract::_Internal {
 public:
};

ApproveTRC20Contract::ApproveTRC20Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.ApproveTRC20Contract)
}
ApproveTRC20Contract::ApproveTRC20Contract(const ApproveTRC20Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_address().empty()) {
    contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_address(), 
      GetArena());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  spender_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spender_address().empty()) {
    spender_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spender_address(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.ApproveTRC20Contract)
}

void ApproveTRC20Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApproveTRC20Contract_Tron_2eproto.base);
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spender_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ApproveTRC20Contract::~ApproveTRC20Contract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.ApproveTRC20Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApproveTRC20Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spender_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApproveTRC20Contract::ArenaDtor(void* object) {
  ApproveTRC20Contract* _this = reinterpret_cast< ApproveTRC20Contract* >(object);
  (void)_this;
}
void ApproveTRC20Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApproveTRC20Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApproveTRC20Contract& ApproveTRC20Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApproveTRC20Contract_Tron_2eproto.base);
  return *internal_default_instance();
}


void ApproveTRC20Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.ApproveTRC20Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_address_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  spender_address_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApproveTRC20Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.ApproveTRC20Contract.contract_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.ApproveTRC20Contract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spender_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_spender_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.ApproveTRC20Contract.spender_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApproveTRC20Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.ApproveTRC20Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_address = 1;
  if (this->contract_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_address().data(), static_cast<int>(this->_internal_contract_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.ApproveTRC20Contract.contract_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_address(), target);
  }

  // string owner_address = 2;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.ApproveTRC20Contract.owner_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_address(), target);
  }

  // string spender_address = 3;
  if (this->spender_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spender_address().data(), static_cast<int>(this->_internal_spender_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.ApproveTRC20Contract.spender_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_spender_address(), target);
  }

  // bytes amount = 4;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.ApproveTRC20Contract)
  return target;
}

size_t ApproveTRC20Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.ApproveTRC20Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_address = 1;
  if (this->contract_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_address());
  }

  // string owner_address = 2;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string spender_address = 3;
  if (this->spender_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spender_address());
  }

  // bytes amount = 4;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApproveTRC20Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.ApproveTRC20Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const ApproveTRC20Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApproveTRC20Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.ApproveTRC20Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.ApproveTRC20Contract)
    MergeFrom(*source);
  }
}

void ApproveTRC20Contract::MergeFrom(const ApproveTRC20Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.ApproveTRC20Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_address().size() > 0) {
    _internal_set_contract_address(from._internal_contract_address());
  }
  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.spender_address().size() > 0) {
    _internal_set_spender_address(from._internal_spender_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void ApproveTRC20Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.ApproveTRC20Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApproveTRC20Contract::CopyFrom(const ApproveTRC20Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.ApproveTRC20Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApproveTRC20Contract::IsInitialized() const {
  return true;
}

void ApproveTRC20Contract::InternalSwap(ApproveTRC20Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_address_.Swap(&other->contract_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spender_address_.Swap(&other->spender_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ApproveTRC20Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FreezeBalanceContract::_Internal {
 public:
};

FreezeBalanceContract::FreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.FreezeBalanceContract)
}
FreezeBalanceContract::FreezeBalanceContract(const FreezeBalanceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource(), 
      GetArena());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArena());
  }
  ::memcpy(&frozen_balance_, &from.frozen_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&frozen_duration_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(frozen_duration_));
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.FreezeBalanceContract)
}

void FreezeBalanceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FreezeBalanceContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_balance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&frozen_duration_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(frozen_duration_));
}

FreezeBalanceContract::~FreezeBalanceContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.FreezeBalanceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreezeBalanceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FreezeBalanceContract::ArenaDtor(void* object) {
  FreezeBalanceContract* _this = reinterpret_cast< FreezeBalanceContract* >(object);
  (void)_this;
}
void FreezeBalanceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreezeBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreezeBalanceContract& FreezeBalanceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreezeBalanceContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void FreezeBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.FreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  resource_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  ::memset(&frozen_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_duration_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(frozen_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreezeBalanceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.FreezeBalanceContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frozen_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frozen_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.FreezeBalanceContract.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.FreezeBalanceContract.receiver_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreezeBalanceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.FreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.FreezeBalanceContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 frozen_balance = 2;
  if (this->frozen_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_frozen_balance(), target);
  }

  // int64 frozen_duration = 3;
  if (this->frozen_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_frozen_duration(), target);
  }

  // string resource = 10;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.FreezeBalanceContract.resource");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_resource(), target);
  }

  // string receiver_address = 15;
  if (this->receiver_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_address().data(), static_cast<int>(this->_internal_receiver_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.FreezeBalanceContract.receiver_address");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_receiver_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.FreezeBalanceContract)
  return target;
}

size_t FreezeBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.FreezeBalanceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string resource = 10;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string receiver_address = 15;
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_address());
  }

  // int64 frozen_balance = 2;
  if (this->frozen_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_balance());
  }

  // int64 frozen_duration = 3;
  if (this->frozen_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreezeBalanceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.FreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const FreezeBalanceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreezeBalanceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.FreezeBalanceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.FreezeBalanceContract)
    MergeFrom(*source);
  }
}

void FreezeBalanceContract::MergeFrom(const FreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.FreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.resource().size() > 0) {
    _internal_set_resource(from._internal_resource());
  }
  if (from.receiver_address().size() > 0) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (from.frozen_balance() != 0) {
    _internal_set_frozen_balance(from._internal_frozen_balance());
  }
  if (from.frozen_duration() != 0) {
    _internal_set_frozen_duration(from._internal_frozen_duration());
  }
}

void FreezeBalanceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.FreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreezeBalanceContract::CopyFrom(const FreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.FreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreezeBalanceContract::IsInitialized() const {
  return true;
}

void FreezeBalanceContract::InternalSwap(FreezeBalanceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreezeBalanceContract, frozen_duration_)
      + sizeof(FreezeBalanceContract::frozen_duration_)
      - PROTOBUF_FIELD_OFFSET(FreezeBalanceContract, frozen_balance_)>(
          reinterpret_cast<char*>(&frozen_balance_),
          reinterpret_cast<char*>(&other->frozen_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreezeBalanceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FreezeBalanceV2Contract::_Internal {
 public:
};

FreezeBalanceV2Contract::FreezeBalanceV2Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.FreezeBalanceV2Contract)
}
FreezeBalanceV2Contract::FreezeBalanceV2Contract(const FreezeBalanceV2Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource(), 
      GetArena());
  }
  frozen_balance_ = from.frozen_balance_;
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.FreezeBalanceV2Contract)
}

void FreezeBalanceV2Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FreezeBalanceV2Contract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frozen_balance_ = PROTOBUF_LONGLONG(0);
}

FreezeBalanceV2Contract::~FreezeBalanceV2Contract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.FreezeBalanceV2Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreezeBalanceV2Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FreezeBalanceV2Contract::ArenaDtor(void* object) {
  FreezeBalanceV2Contract* _this = reinterpret_cast< FreezeBalanceV2Contract* >(object);
  (void)_this;
}
void FreezeBalanceV2Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreezeBalanceV2Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreezeBalanceV2Contract& FreezeBalanceV2Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreezeBalanceV2Contract_Tron_2eproto.base);
  return *internal_default_instance();
}


void FreezeBalanceV2Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.FreezeBalanceV2Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  resource_.ClearToEmpty();
  frozen_balance_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreezeBalanceV2Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.FreezeBalanceV2Contract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frozen_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.FreezeBalanceV2Contract.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreezeBalanceV2Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.FreezeBalanceV2Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.FreezeBalanceV2Contract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 frozen_balance = 2;
  if (this->frozen_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_frozen_balance(), target);
  }

  // string resource = 3;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.FreezeBalanceV2Contract.resource");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.FreezeBalanceV2Contract)
  return target;
}

size_t FreezeBalanceV2Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.FreezeBalanceV2Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string resource = 3;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // int64 frozen_balance = 2;
  if (this->frozen_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreezeBalanceV2Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.FreezeBalanceV2Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const FreezeBalanceV2Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreezeBalanceV2Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.FreezeBalanceV2Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.FreezeBalanceV2Contract)
    MergeFrom(*source);
  }
}

void FreezeBalanceV2Contract::MergeFrom(const FreezeBalanceV2Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.FreezeBalanceV2Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.resource().size() > 0) {
    _internal_set_resource(from._internal_resource());
  }
  if (from.frozen_balance() != 0) {
    _internal_set_frozen_balance(from._internal_frozen_balance());
  }
}

void FreezeBalanceV2Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.FreezeBalanceV2Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreezeBalanceV2Contract::CopyFrom(const FreezeBalanceV2Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.FreezeBalanceV2Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreezeBalanceV2Contract::IsInitialized() const {
  return true;
}

void FreezeBalanceV2Contract::InternalSwap(FreezeBalanceV2Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(frozen_balance_, other->frozen_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FreezeBalanceV2Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnfreezeBalanceV2Contract::_Internal {
 public:
};

UnfreezeBalanceV2Contract::UnfreezeBalanceV2Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.UnfreezeBalanceV2Contract)
}
UnfreezeBalanceV2Contract::UnfreezeBalanceV2Contract(const UnfreezeBalanceV2Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource(), 
      GetArena());
  }
  unfreeze_balance_ = from.unfreeze_balance_;
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.UnfreezeBalanceV2Contract)
}

void UnfreezeBalanceV2Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnfreezeBalanceV2Contract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unfreeze_balance_ = PROTOBUF_LONGLONG(0);
}

UnfreezeBalanceV2Contract::~UnfreezeBalanceV2Contract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.UnfreezeBalanceV2Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnfreezeBalanceV2Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnfreezeBalanceV2Contract::ArenaDtor(void* object) {
  UnfreezeBalanceV2Contract* _this = reinterpret_cast< UnfreezeBalanceV2Contract* >(object);
  (void)_this;
}
void UnfreezeBalanceV2Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnfreezeBalanceV2Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnfreezeBalanceV2Contract& UnfreezeBalanceV2Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnfreezeBalanceV2Contract_Tron_2eproto.base);
  return *internal_default_instance();
}


void UnfreezeBalanceV2Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.UnfreezeBalanceV2Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  resource_.ClearToEmpty();
  unfreeze_balance_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnfreezeBalanceV2Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.UnfreezeBalanceV2Contract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unfreeze_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unfreeze_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.UnfreezeBalanceV2Contract.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnfreezeBalanceV2Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.UnfreezeBalanceV2Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.UnfreezeBalanceV2Contract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 unfreeze_balance = 2;
  if (this->unfreeze_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_unfreeze_balance(), target);
  }

  // string resource = 3;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.UnfreezeBalanceV2Contract.resource");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.UnfreezeBalanceV2Contract)
  return target;
}

size_t UnfreezeBalanceV2Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.UnfreezeBalanceV2Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string resource = 3;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // int64 unfreeze_balance = 2;
  if (this->unfreeze_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unfreeze_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnfreezeBalanceV2Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.UnfreezeBalanceV2Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const UnfreezeBalanceV2Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnfreezeBalanceV2Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.UnfreezeBalanceV2Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.UnfreezeBalanceV2Contract)
    MergeFrom(*source);
  }
}

void UnfreezeBalanceV2Contract::MergeFrom(const UnfreezeBalanceV2Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.UnfreezeBalanceV2Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.resource().size() > 0) {
    _internal_set_resource(from._internal_resource());
  }
  if (from.unfreeze_balance() != 0) {
    _internal_set_unfreeze_balance(from._internal_unfreeze_balance());
  }
}

void UnfreezeBalanceV2Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.UnfreezeBalanceV2Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnfreezeBalanceV2Contract::CopyFrom(const UnfreezeBalanceV2Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.UnfreezeBalanceV2Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfreezeBalanceV2Contract::IsInitialized() const {
  return true;
}

void UnfreezeBalanceV2Contract::InternalSwap(UnfreezeBalanceV2Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(unfreeze_balance_, other->unfreeze_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnfreezeBalanceV2Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawExpireUnfreezeContract::_Internal {
 public:
};

WithdrawExpireUnfreezeContract::WithdrawExpireUnfreezeContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
}
WithdrawExpireUnfreezeContract::WithdrawExpireUnfreezeContract(const WithdrawExpireUnfreezeContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
}

void WithdrawExpireUnfreezeContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawExpireUnfreezeContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WithdrawExpireUnfreezeContract::~WithdrawExpireUnfreezeContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawExpireUnfreezeContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawExpireUnfreezeContract::ArenaDtor(void* object) {
  WithdrawExpireUnfreezeContract* _this = reinterpret_cast< WithdrawExpireUnfreezeContract* >(object);
  (void)_this;
}
void WithdrawExpireUnfreezeContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawExpireUnfreezeContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawExpireUnfreezeContract& WithdrawExpireUnfreezeContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawExpireUnfreezeContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void WithdrawExpireUnfreezeContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawExpireUnfreezeContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.WithdrawExpireUnfreezeContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawExpireUnfreezeContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.WithdrawExpireUnfreezeContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
  return target;
}

size_t WithdrawExpireUnfreezeContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawExpireUnfreezeContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawExpireUnfreezeContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawExpireUnfreezeContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
    MergeFrom(*source);
  }
}

void WithdrawExpireUnfreezeContract::MergeFrom(const WithdrawExpireUnfreezeContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
}

void WithdrawExpireUnfreezeContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawExpireUnfreezeContract::CopyFrom(const WithdrawExpireUnfreezeContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.WithdrawExpireUnfreezeContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawExpireUnfreezeContract::IsInitialized() const {
  return true;
}

void WithdrawExpireUnfreezeContract::InternalSwap(WithdrawExpireUnfreezeContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawExpireUnfreezeContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DelegateResourceContract::_Internal {
 public:
};

DelegateResourceContract::DelegateResourceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.DelegateResourceContract)
}
DelegateResourceContract::DelegateResourceContract(const DelegateResourceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource(), 
      GetArena());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArena());
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(lock_));
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.DelegateResourceContract)
}

void DelegateResourceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegateResourceContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lock_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(lock_));
}

DelegateResourceContract::~DelegateResourceContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.DelegateResourceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegateResourceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegateResourceContract::ArenaDtor(void* object) {
  DelegateResourceContract* _this = reinterpret_cast< DelegateResourceContract* >(object);
  (void)_this;
}
void DelegateResourceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegateResourceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegateResourceContract& DelegateResourceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegateResourceContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void DelegateResourceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.DelegateResourceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  resource_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(lock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateResourceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.DelegateResourceContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.DelegateResourceContract.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.DelegateResourceContract.receiver_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegateResourceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.DelegateResourceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.DelegateResourceContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // string resource = 2;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.DelegateResourceContract.resource");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource(), target);
  }

  // int64 balance = 3;
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_balance(), target);
  }

  // string receiver_address = 4;
  if (this->receiver_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_address().data(), static_cast<int>(this->_internal_receiver_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.DelegateResourceContract.receiver_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_receiver_address(), target);
  }

  // bool lock = 5;
  if (this->lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_lock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.DelegateResourceContract)
  return target;
}

size_t DelegateResourceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.DelegateResourceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string resource = 2;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string receiver_address = 4;
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_address());
  }

  // int64 balance = 3;
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  // bool lock = 5;
  if (this->lock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegateResourceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.DelegateResourceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegateResourceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegateResourceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.DelegateResourceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.DelegateResourceContract)
    MergeFrom(*source);
  }
}

void DelegateResourceContract::MergeFrom(const DelegateResourceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.DelegateResourceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.resource().size() > 0) {
    _internal_set_resource(from._internal_resource());
  }
  if (from.receiver_address().size() > 0) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from.lock() != 0) {
    _internal_set_lock(from._internal_lock());
  }
}

void DelegateResourceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.DelegateResourceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegateResourceContract::CopyFrom(const DelegateResourceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.DelegateResourceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateResourceContract::IsInitialized() const {
  return true;
}

void DelegateResourceContract::InternalSwap(DelegateResourceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelegateResourceContract, lock_)
      + sizeof(DelegateResourceContract::lock_)
      - PROTOBUF_FIELD_OFFSET(DelegateResourceContract, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateResourceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnDelegateResourceContract::_Internal {
 public:
};

UnDelegateResourceContract::UnDelegateResourceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.UnDelegateResourceContract)
}
UnDelegateResourceContract::UnDelegateResourceContract(const UnDelegateResourceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource(), 
      GetArena());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArena());
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.UnDelegateResourceContract)
}

void UnDelegateResourceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnDelegateResourceContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_ = PROTOBUF_LONGLONG(0);
}

UnDelegateResourceContract::~UnDelegateResourceContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.UnDelegateResourceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnDelegateResourceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnDelegateResourceContract::ArenaDtor(void* object) {
  UnDelegateResourceContract* _this = reinterpret_cast< UnDelegateResourceContract* >(object);
  (void)_this;
}
void UnDelegateResourceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnDelegateResourceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnDelegateResourceContract& UnDelegateResourceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnDelegateResourceContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void UnDelegateResourceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.UnDelegateResourceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  resource_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  balance_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnDelegateResourceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.UnDelegateResourceContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.UnDelegateResourceContract.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.UnDelegateResourceContract.receiver_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnDelegateResourceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.UnDelegateResourceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.UnDelegateResourceContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // string resource = 2;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.UnDelegateResourceContract.resource");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource(), target);
  }

  // int64 balance = 3;
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_balance(), target);
  }

  // string receiver_address = 4;
  if (this->receiver_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_address().data(), static_cast<int>(this->_internal_receiver_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.UnDelegateResourceContract.receiver_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_receiver_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.UnDelegateResourceContract)
  return target;
}

size_t UnDelegateResourceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.UnDelegateResourceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string resource = 2;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string receiver_address = 4;
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_address());
  }

  // int64 balance = 3;
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnDelegateResourceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.UnDelegateResourceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const UnDelegateResourceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnDelegateResourceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.UnDelegateResourceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.UnDelegateResourceContract)
    MergeFrom(*source);
  }
}

void UnDelegateResourceContract::MergeFrom(const UnDelegateResourceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.UnDelegateResourceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.resource().size() > 0) {
    _internal_set_resource(from._internal_resource());
  }
  if (from.receiver_address().size() > 0) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void UnDelegateResourceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.UnDelegateResourceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnDelegateResourceContract::CopyFrom(const UnDelegateResourceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.UnDelegateResourceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnDelegateResourceContract::IsInitialized() const {
  return true;
}

void UnDelegateResourceContract::InternalSwap(UnDelegateResourceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(balance_, other->balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnDelegateResourceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnfreezeBalanceContract::_Internal {
 public:
};

UnfreezeBalanceContract::UnfreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.UnfreezeBalanceContract)
}
UnfreezeBalanceContract::UnfreezeBalanceContract(const UnfreezeBalanceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource(), 
      GetArena());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.UnfreezeBalanceContract)
}

void UnfreezeBalanceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnfreezeBalanceContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnfreezeBalanceContract::~UnfreezeBalanceContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.UnfreezeBalanceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnfreezeBalanceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnfreezeBalanceContract::ArenaDtor(void* object) {
  UnfreezeBalanceContract* _this = reinterpret_cast< UnfreezeBalanceContract* >(object);
  (void)_this;
}
void UnfreezeBalanceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnfreezeBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnfreezeBalanceContract& UnfreezeBalanceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnfreezeBalanceContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void UnfreezeBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.UnfreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  resource_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnfreezeBalanceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.UnfreezeBalanceContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.UnfreezeBalanceContract.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.UnfreezeBalanceContract.receiver_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnfreezeBalanceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.UnfreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.UnfreezeBalanceContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // string resource = 10;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.UnfreezeBalanceContract.resource");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_resource(), target);
  }

  // string receiver_address = 15;
  if (this->receiver_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_address().data(), static_cast<int>(this->_internal_receiver_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.UnfreezeBalanceContract.receiver_address");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_receiver_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.UnfreezeBalanceContract)
  return target;
}

size_t UnfreezeBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.UnfreezeBalanceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string resource = 10;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string receiver_address = 15;
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnfreezeBalanceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.UnfreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const UnfreezeBalanceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnfreezeBalanceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.UnfreezeBalanceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.UnfreezeBalanceContract)
    MergeFrom(*source);
  }
}

void UnfreezeBalanceContract::MergeFrom(const UnfreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.UnfreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.resource().size() > 0) {
    _internal_set_resource(from._internal_resource());
  }
  if (from.receiver_address().size() > 0) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
}

void UnfreezeBalanceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.UnfreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnfreezeBalanceContract::CopyFrom(const UnfreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.UnfreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfreezeBalanceContract::IsInitialized() const {
  return true;
}

void UnfreezeBalanceContract::InternalSwap(UnfreezeBalanceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnfreezeBalanceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnfreezeAssetContract::_Internal {
 public:
};

UnfreezeAssetContract::UnfreezeAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.UnfreezeAssetContract)
}
UnfreezeAssetContract::UnfreezeAssetContract(const UnfreezeAssetContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.UnfreezeAssetContract)
}

void UnfreezeAssetContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnfreezeAssetContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnfreezeAssetContract::~UnfreezeAssetContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.UnfreezeAssetContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnfreezeAssetContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnfreezeAssetContract::ArenaDtor(void* object) {
  UnfreezeAssetContract* _this = reinterpret_cast< UnfreezeAssetContract* >(object);
  (void)_this;
}
void UnfreezeAssetContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnfreezeAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnfreezeAssetContract& UnfreezeAssetContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnfreezeAssetContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void UnfreezeAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.UnfreezeAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnfreezeAssetContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.UnfreezeAssetContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnfreezeAssetContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.UnfreezeAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.UnfreezeAssetContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.UnfreezeAssetContract)
  return target;
}

size_t UnfreezeAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.UnfreezeAssetContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnfreezeAssetContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.UnfreezeAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  const UnfreezeAssetContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnfreezeAssetContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.UnfreezeAssetContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.UnfreezeAssetContract)
    MergeFrom(*source);
  }
}

void UnfreezeAssetContract::MergeFrom(const UnfreezeAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.UnfreezeAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
}

void UnfreezeAssetContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.UnfreezeAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnfreezeAssetContract::CopyFrom(const UnfreezeAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.UnfreezeAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfreezeAssetContract::IsInitialized() const {
  return true;
}

void UnfreezeAssetContract::InternalSwap(UnfreezeAssetContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnfreezeAssetContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteAssetContract::_Internal {
 public:
};

VoteAssetContract::VoteAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vote_address_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.VoteAssetContract)
}
VoteAssetContract::VoteAssetContract(const VoteAssetContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vote_address_(from.vote_address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  ::memcpy(&support_, &from.support_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&support_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.VoteAssetContract)
}

void VoteAssetContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteAssetContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&support_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&support_)) + sizeof(count_));
}

VoteAssetContract::~VoteAssetContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.VoteAssetContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteAssetContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteAssetContract::ArenaDtor(void* object) {
  VoteAssetContract* _this = reinterpret_cast< VoteAssetContract* >(object);
  (void)_this;
}
void VoteAssetContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteAssetContract& VoteAssetContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteAssetContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void VoteAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.VoteAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vote_address_.Clear();
  owner_address_.ClearToEmpty();
  ::memset(&support_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&support_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteAssetContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.VoteAssetContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string vote_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vote_address();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.VoteAssetContract.vote_address"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool support = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteAssetContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.VoteAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.VoteAssetContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // repeated string vote_address = 2;
  for (int i = 0, n = this->_internal_vote_address_size(); i < n; i++) {
    const auto& s = this->_internal_vote_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.VoteAssetContract.vote_address");
    target = stream->WriteString(2, s, target);
  }

  // bool support = 3;
  if (this->support() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_support(), target);
  }

  // int32 count = 5;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.VoteAssetContract)
  return target;
}

size_t VoteAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.VoteAssetContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string vote_address = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(vote_address_.size());
  for (int i = 0, n = vote_address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      vote_address_.Get(i));
  }

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // bool support = 3;
  if (this->support() != 0) {
    total_size += 1 + 1;
  }

  // int32 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteAssetContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.VoteAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteAssetContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteAssetContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.VoteAssetContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.VoteAssetContract)
    MergeFrom(*source);
  }
}

void VoteAssetContract::MergeFrom(const VoteAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.VoteAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vote_address_.MergeFrom(from.vote_address_);
  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.support() != 0) {
    _internal_set_support(from._internal_support());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void VoteAssetContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.VoteAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteAssetContract::CopyFrom(const VoteAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.VoteAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteAssetContract::IsInitialized() const {
  return true;
}

void VoteAssetContract::InternalSwap(VoteAssetContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vote_address_.InternalSwap(&other->vote_address_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteAssetContract, count_)
      + sizeof(VoteAssetContract::count_)
      - PROTOBUF_FIELD_OFFSET(VoteAssetContract, support_)>(
          reinterpret_cast<char*>(&support_),
          reinterpret_cast<char*>(&other->support_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteAssetContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteWitnessContract_Vote::_Internal {
 public:
};

VoteWitnessContract_Vote::VoteWitnessContract_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.VoteWitnessContract.Vote)
}
VoteWitnessContract_Vote::VoteWitnessContract_Vote(const VoteWitnessContract_Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_address().empty()) {
    vote_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_address(), 
      GetArena());
  }
  vote_count_ = from.vote_count_;
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.VoteWitnessContract.Vote)
}

void VoteWitnessContract_Vote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteWitnessContract_Vote_Tron_2eproto.base);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_count_ = PROTOBUF_LONGLONG(0);
}

VoteWitnessContract_Vote::~VoteWitnessContract_Vote() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.VoteWitnessContract.Vote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteWitnessContract_Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vote_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteWitnessContract_Vote::ArenaDtor(void* object) {
  VoteWitnessContract_Vote* _this = reinterpret_cast< VoteWitnessContract_Vote* >(object);
  (void)_this;
}
void VoteWitnessContract_Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteWitnessContract_Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteWitnessContract_Vote& VoteWitnessContract_Vote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteWitnessContract_Vote_Tron_2eproto.base);
  return *internal_default_instance();
}


void VoteWitnessContract_Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.VoteWitnessContract.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vote_address_.ClearToEmpty();
  vote_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteWitnessContract_Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vote_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vote_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.VoteWitnessContract.Vote.vote_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vote_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteWitnessContract_Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.VoteWitnessContract.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vote_address = 1;
  if (this->vote_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote_address().data(), static_cast<int>(this->_internal_vote_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.VoteWitnessContract.Vote.vote_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vote_address(), target);
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_vote_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.VoteWitnessContract.Vote)
  return target;
}

size_t VoteWitnessContract_Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.VoteWitnessContract.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vote_address = 1;
  if (this->vote_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote_address());
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vote_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteWitnessContract_Vote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.VoteWitnessContract.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteWitnessContract_Vote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteWitnessContract_Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.VoteWitnessContract.Vote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.VoteWitnessContract.Vote)
    MergeFrom(*source);
  }
}

void VoteWitnessContract_Vote::MergeFrom(const VoteWitnessContract_Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.VoteWitnessContract.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vote_address().size() > 0) {
    _internal_set_vote_address(from._internal_vote_address());
  }
  if (from.vote_count() != 0) {
    _internal_set_vote_count(from._internal_vote_count());
  }
}

void VoteWitnessContract_Vote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.VoteWitnessContract.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteWitnessContract_Vote::CopyFrom(const VoteWitnessContract_Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.VoteWitnessContract.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteWitnessContract_Vote::IsInitialized() const {
  return true;
}

void VoteWitnessContract_Vote::InternalSwap(VoteWitnessContract_Vote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vote_address_.Swap(&other->vote_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(vote_count_, other->vote_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteWitnessContract_Vote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteWitnessContract::_Internal {
 public:
};

VoteWitnessContract::VoteWitnessContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.VoteWitnessContract)
}
VoteWitnessContract::VoteWitnessContract(const VoteWitnessContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  support_ = from.support_;
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.VoteWitnessContract)
}

void VoteWitnessContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteWitnessContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_ = false;
}

VoteWitnessContract::~VoteWitnessContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.VoteWitnessContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteWitnessContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteWitnessContract::ArenaDtor(void* object) {
  VoteWitnessContract* _this = reinterpret_cast< VoteWitnessContract* >(object);
  (void)_this;
}
void VoteWitnessContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteWitnessContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteWitnessContract& VoteWitnessContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteWitnessContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void VoteWitnessContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.VoteWitnessContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  owner_address_.ClearToEmpty();
  support_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteWitnessContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.VoteWitnessContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.Tron.Proto.VoteWitnessContract.Vote votes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool support = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteWitnessContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.VoteWitnessContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.VoteWitnessContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // repeated .TW.Tron.Proto.VoteWitnessContract.Vote votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_votes(i), target, stream);
  }

  // bool support = 3;
  if (this->support() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_support(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.VoteWitnessContract)
  return target;
}

size_t VoteWitnessContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.VoteWitnessContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Tron.Proto.VoteWitnessContract.Vote votes = 2;
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // bool support = 3;
  if (this->support() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteWitnessContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.VoteWitnessContract)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteWitnessContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteWitnessContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.VoteWitnessContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.VoteWitnessContract)
    MergeFrom(*source);
  }
}

void VoteWitnessContract::MergeFrom(const VoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.VoteWitnessContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.support() != 0) {
    _internal_set_support(from._internal_support());
  }
}

void VoteWitnessContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.VoteWitnessContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteWitnessContract::CopyFrom(const VoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.VoteWitnessContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteWitnessContract::IsInitialized() const {
  return true;
}

void VoteWitnessContract::InternalSwap(VoteWitnessContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(support_, other->support_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteWitnessContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawBalanceContract::_Internal {
 public:
};

WithdrawBalanceContract::WithdrawBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.WithdrawBalanceContract)
}
WithdrawBalanceContract::WithdrawBalanceContract(const WithdrawBalanceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.WithdrawBalanceContract)
}

void WithdrawBalanceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawBalanceContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WithdrawBalanceContract::~WithdrawBalanceContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.WithdrawBalanceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawBalanceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawBalanceContract::ArenaDtor(void* object) {
  WithdrawBalanceContract* _this = reinterpret_cast< WithdrawBalanceContract* >(object);
  (void)_this;
}
void WithdrawBalanceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawBalanceContract& WithdrawBalanceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawBalanceContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void WithdrawBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.WithdrawBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawBalanceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.WithdrawBalanceContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawBalanceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.WithdrawBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.WithdrawBalanceContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.WithdrawBalanceContract)
  return target;
}

size_t WithdrawBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.WithdrawBalanceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawBalanceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.WithdrawBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawBalanceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawBalanceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.WithdrawBalanceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.WithdrawBalanceContract)
    MergeFrom(*source);
  }
}

void WithdrawBalanceContract::MergeFrom(const WithdrawBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.WithdrawBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
}

void WithdrawBalanceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.WithdrawBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawBalanceContract::CopyFrom(const WithdrawBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.WithdrawBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawBalanceContract::IsInitialized() const {
  return true;
}

void WithdrawBalanceContract::InternalSwap(WithdrawBalanceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawBalanceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TriggerSmartContract::_Internal {
 public:
};

TriggerSmartContract::TriggerSmartContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.TriggerSmartContract)
}
TriggerSmartContract::TriggerSmartContract(const TriggerSmartContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_address().empty()) {
    contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_address(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&call_value_, &from.call_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_id_) -
    reinterpret_cast<char*>(&call_value_)) + sizeof(token_id_));
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.TriggerSmartContract)
}

void TriggerSmartContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TriggerSmartContract_Tron_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&call_value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&token_id_) -
      reinterpret_cast<char*>(&call_value_)) + sizeof(token_id_));
}

TriggerSmartContract::~TriggerSmartContract() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.TriggerSmartContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TriggerSmartContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TriggerSmartContract::ArenaDtor(void* object) {
  TriggerSmartContract* _this = reinterpret_cast< TriggerSmartContract* >(object);
  (void)_this;
}
void TriggerSmartContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TriggerSmartContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerSmartContract& TriggerSmartContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TriggerSmartContract_Tron_2eproto.base);
  return *internal_default_instance();
}


void TriggerSmartContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.TriggerSmartContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  contract_address_.ClearToEmpty();
  data_.ClearToEmpty();
  ::memset(&call_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_id_) -
      reinterpret_cast<char*>(&call_value_)) + sizeof(token_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TriggerSmartContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TriggerSmartContract.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.TriggerSmartContract.contract_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 call_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          call_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 call_token_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          call_token_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 token_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          token_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TriggerSmartContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.TriggerSmartContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TriggerSmartContract.owner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // string contract_address = 2;
  if (this->contract_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_address().data(), static_cast<int>(this->_internal_contract_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.TriggerSmartContract.contract_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_address(), target);
  }

  // int64 call_value = 3;
  if (this->call_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_call_value(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // int64 call_token_value = 5;
  if (this->call_token_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_call_token_value(), target);
  }

  // int64 token_id = 6;
  if (this->token_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.TriggerSmartContract)
  return target;
}

size_t TriggerSmartContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.TriggerSmartContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string contract_address = 2;
  if (this->contract_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_address());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 call_value = 3;
  if (this->call_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_call_value());
  }

  // int64 call_token_value = 5;
  if (this->call_token_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_call_token_value());
  }

  // int64 token_id = 6;
  if (this->token_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerSmartContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.TriggerSmartContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerSmartContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TriggerSmartContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.TriggerSmartContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.TriggerSmartContract)
    MergeFrom(*source);
  }
}

void TriggerSmartContract::MergeFrom(const TriggerSmartContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.TriggerSmartContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.contract_address().size() > 0) {
    _internal_set_contract_address(from._internal_contract_address());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.call_value() != 0) {
    _internal_set_call_value(from._internal_call_value());
  }
  if (from.call_token_value() != 0) {
    _internal_set_call_token_value(from._internal_call_token_value());
  }
  if (from.token_id() != 0) {
    _internal_set_token_id(from._internal_token_id());
  }
}

void TriggerSmartContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.TriggerSmartContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerSmartContract::CopyFrom(const TriggerSmartContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.TriggerSmartContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerSmartContract::IsInitialized() const {
  return true;
}

void TriggerSmartContract::InternalSwap(TriggerSmartContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_address_.Swap(&other->contract_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TriggerSmartContract, token_id_)
      + sizeof(TriggerSmartContract::token_id_)
      - PROTOBUF_FIELD_OFFSET(TriggerSmartContract, call_value_)>(
          reinterpret_cast<char*>(&call_value_),
          reinterpret_cast<char*>(&other->call_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TriggerSmartContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockHeader::_Internal {
 public:
};

BlockHeader::BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_trie_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_trie_root().empty()) {
    tx_trie_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_trie_root(), 
      GetArena());
  }
  parent_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_hash().empty()) {
    parent_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_hash(), 
      GetArena());
  }
  witness_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witness_address().empty()) {
    witness_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witness_address(), 
      GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.BlockHeader)
}

void BlockHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockHeader_Tron_2eproto.base);
  tx_trie_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witness_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.BlockHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_trie_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witness_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockHeader::ArenaDtor(void* object) {
  BlockHeader* _this = reinterpret_cast< BlockHeader* >(object);
  (void)_this;
}
void BlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeader& BlockHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockHeader_Tron_2eproto.base);
  return *internal_default_instance();
}


void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_trie_root_.ClearToEmpty();
  parent_hash_.ClearToEmpty();
  witness_address_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_trie_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tx_trie_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parent_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_parent_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witness_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_witness_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // bytes tx_trie_root = 2;
  if (this->tx_trie_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_trie_root(), target);
  }

  // bytes parent_hash = 3;
  if (this->parent_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_parent_hash(), target);
  }

  // int64 number = 7;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_number(), target);
  }

  // bytes witness_address = 9;
  if (this->witness_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_witness_address(), target);
  }

  // int32 version = 10;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.BlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_trie_root = 2;
  if (this->tx_trie_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_trie_root());
  }

  // bytes parent_hash = 3;
  if (this->parent_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_hash());
  }

  // bytes witness_address = 9;
  if (this->witness_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witness_address());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 number = 7;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  // int32 version = 10;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.BlockHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_trie_root().size() > 0) {
    _internal_set_tx_trie_root(from._internal_tx_trie_root());
  }
  if (from.parent_hash().size() > 0) {
    _internal_set_parent_hash(from._internal_parent_hash());
  }
  if (from.witness_address().size() > 0) {
    _internal_set_witness_address(from._internal_witness_address());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void BlockHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_trie_root_.Swap(&other->tx_trie_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parent_hash_.Swap(&other->parent_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  witness_address_.Swap(&other->witness_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockHeader, version_)
      + sizeof(BlockHeader::version_)
      - PROTOBUF_FIELD_OFFSET(BlockHeader, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction::_Internal {
 public:
  static const ::TW::Tron::Proto::BlockHeader& block_header(const Transaction* msg);
  static const ::TW::Tron::Proto::TransferContract& transfer(const Transaction* msg);
  static const ::TW::Tron::Proto::TransferAssetContract& transfer_asset(const Transaction* msg);
  static const ::TW::Tron::Proto::FreezeBalanceContract& freeze_balance(const Transaction* msg);
  static const ::TW::Tron::Proto::UnfreezeBalanceContract& unfreeze_balance(const Transaction* msg);
  static const ::TW::Tron::Proto::UnfreezeAssetContract& unfreeze_asset(const Transaction* msg);
  static const ::TW::Tron::Proto::WithdrawBalanceContract& withdraw_balance(const Transaction* msg);
  static const ::TW::Tron::Proto::VoteAssetContract& vote_asset(const Transaction* msg);
  static const ::TW::Tron::Proto::VoteWitnessContract& vote_witness(const Transaction* msg);
  static const ::TW::Tron::Proto::TriggerSmartContract& trigger_smart_contract(const Transaction* msg);
  static const ::TW::Tron::Proto::TransferTRC20Contract& transfer_trc20_contract(const Transaction* msg);
  static const ::TW::Tron::Proto::ApproveTRC20Contract& approve_trc20_contract(const Transaction* msg);
  static const ::TW::Tron::Proto::FreezeBalanceV2Contract& freeze_balance_v2(const Transaction* msg);
  static const ::TW::Tron::Proto::UnfreezeBalanceV2Contract& unfreeze_balance_v2(const Transaction* msg);
  static const ::TW::Tron::Proto::WithdrawExpireUnfreezeContract& withdraw_expire_unfreeze(const Transaction* msg);
  static const ::TW::Tron::Proto::DelegateResourceContract& delegate_resource(const Transaction* msg);
  static const ::TW::Tron::Proto::UnDelegateResourceContract& undelegate_resource(const Transaction* msg);
};

const ::TW::Tron::Proto::BlockHeader&
Transaction::_Internal::block_header(const Transaction* msg) {
  return *msg->block_header_;
}
const ::TW::Tron::Proto::TransferContract&
Transaction::_Internal::transfer(const Transaction* msg) {
  return *msg->contract_oneof_.transfer_;
}
const ::TW::Tron::Proto::TransferAssetContract&
Transaction::_Internal::transfer_asset(const Transaction* msg) {
  return *msg->contract_oneof_.transfer_asset_;
}
const ::TW::Tron::Proto::FreezeBalanceContract&
Transaction::_Internal::freeze_balance(const Transaction* msg) {
  return *msg->contract_oneof_.freeze_balance_;
}
const ::TW::Tron::Proto::UnfreezeBalanceContract&
Transaction::_Internal::unfreeze_balance(const Transaction* msg) {
  return *msg->contract_oneof_.unfreeze_balance_;
}
const ::TW::Tron::Proto::UnfreezeAssetContract&
Transaction::_Internal::unfreeze_asset(const Transaction* msg) {
  return *msg->contract_oneof_.unfreeze_asset_;
}
const ::TW::Tron::Proto::WithdrawBalanceContract&
Transaction::_Internal::withdraw_balance(const Transaction* msg) {
  return *msg->contract_oneof_.withdraw_balance_;
}
const ::TW::Tron::Proto::VoteAssetContract&
Transaction::_Internal::vote_asset(const Transaction* msg) {
  return *msg->contract_oneof_.vote_asset_;
}
const ::TW::Tron::Proto::VoteWitnessContract&
Transaction::_Internal::vote_witness(const Transaction* msg) {
  return *msg->contract_oneof_.vote_witness_;
}
const ::TW::Tron::Proto::TriggerSmartContract&
Transaction::_Internal::trigger_smart_contract(const Transaction* msg) {
  return *msg->contract_oneof_.trigger_smart_contract_;
}
const ::TW::Tron::Proto::TransferTRC20Contract&
Transaction::_Internal::transfer_trc20_contract(const Transaction* msg) {
  return *msg->contract_oneof_.transfer_trc20_contract_;
}
const ::TW::Tron::Proto::ApproveTRC20Contract&
Transaction::_Internal::approve_trc20_contract(const Transaction* msg) {
  return *msg->contract_oneof_.approve_trc20_contract_;
}
const ::TW::Tron::Proto::FreezeBalanceV2Contract&
Transaction::_Internal::freeze_balance_v2(const Transaction* msg) {
  return *msg->contract_oneof_.freeze_balance_v2_;
}
const ::TW::Tron::Proto::UnfreezeBalanceV2Contract&
Transaction::_Internal::unfreeze_balance_v2(const Transaction* msg) {
  return *msg->contract_oneof_.unfreeze_balance_v2_;
}
const ::TW::Tron::Proto::WithdrawExpireUnfreezeContract&
Transaction::_Internal::withdraw_expire_unfreeze(const Transaction* msg) {
  return *msg->contract_oneof_.withdraw_expire_unfreeze_;
}
const ::TW::Tron::Proto::DelegateResourceContract&
Transaction::_Internal::delegate_resource(const Transaction* msg) {
  return *msg->contract_oneof_.delegate_resource_;
}
const ::TW::Tron::Proto::UnDelegateResourceContract&
Transaction::_Internal::undelegate_resource(const Transaction* msg) {
  return *msg->contract_oneof_.undelegate_resource_;
}
void Transaction::set_allocated_transfer(::TW::Tron::Proto::TransferContract* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    contract_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.transfer)
}
void Transaction::set_allocated_transfer_asset(::TW::Tron::Proto::TransferAssetContract* transfer_asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (transfer_asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer_asset);
    if (message_arena != submessage_arena) {
      transfer_asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_asset, submessage_arena);
    }
    set_has_transfer_asset();
    contract_oneof_.transfer_asset_ = transfer_asset;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.transfer_asset)
}
void Transaction::set_allocated_freeze_balance(::TW::Tron::Proto::FreezeBalanceContract* freeze_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (freeze_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(freeze_balance);
    if (message_arena != submessage_arena) {
      freeze_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freeze_balance, submessage_arena);
    }
    set_has_freeze_balance();
    contract_oneof_.freeze_balance_ = freeze_balance;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.freeze_balance)
}
void Transaction::set_allocated_unfreeze_balance(::TW::Tron::Proto::UnfreezeBalanceContract* unfreeze_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (unfreeze_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unfreeze_balance);
    if (message_arena != submessage_arena) {
      unfreeze_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unfreeze_balance, submessage_arena);
    }
    set_has_unfreeze_balance();
    contract_oneof_.unfreeze_balance_ = unfreeze_balance;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.unfreeze_balance)
}
void Transaction::set_allocated_unfreeze_asset(::TW::Tron::Proto::UnfreezeAssetContract* unfreeze_asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (unfreeze_asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unfreeze_asset);
    if (message_arena != submessage_arena) {
      unfreeze_asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unfreeze_asset, submessage_arena);
    }
    set_has_unfreeze_asset();
    contract_oneof_.unfreeze_asset_ = unfreeze_asset;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.unfreeze_asset)
}
void Transaction::set_allocated_withdraw_balance(::TW::Tron::Proto::WithdrawBalanceContract* withdraw_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (withdraw_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(withdraw_balance);
    if (message_arena != submessage_arena) {
      withdraw_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_balance, submessage_arena);
    }
    set_has_withdraw_balance();
    contract_oneof_.withdraw_balance_ = withdraw_balance;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.withdraw_balance)
}
void Transaction::set_allocated_vote_asset(::TW::Tron::Proto::VoteAssetContract* vote_asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (vote_asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vote_asset);
    if (message_arena != submessage_arena) {
      vote_asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_asset, submessage_arena);
    }
    set_has_vote_asset();
    contract_oneof_.vote_asset_ = vote_asset;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.vote_asset)
}
void Transaction::set_allocated_vote_witness(::TW::Tron::Proto::VoteWitnessContract* vote_witness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (vote_witness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vote_witness);
    if (message_arena != submessage_arena) {
      vote_witness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_witness, submessage_arena);
    }
    set_has_vote_witness();
    contract_oneof_.vote_witness_ = vote_witness;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.vote_witness)
}
void Transaction::set_allocated_trigger_smart_contract(::TW::Tron::Proto::TriggerSmartContract* trigger_smart_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (trigger_smart_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trigger_smart_contract);
    if (message_arena != submessage_arena) {
      trigger_smart_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_smart_contract, submessage_arena);
    }
    set_has_trigger_smart_contract();
    contract_oneof_.trigger_smart_contract_ = trigger_smart_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.trigger_smart_contract)
}
void Transaction::set_allocated_transfer_trc20_contract(::TW::Tron::Proto::TransferTRC20Contract* transfer_trc20_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (transfer_trc20_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer_trc20_contract);
    if (message_arena != submessage_arena) {
      transfer_trc20_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_trc20_contract, submessage_arena);
    }
    set_has_transfer_trc20_contract();
    contract_oneof_.transfer_trc20_contract_ = transfer_trc20_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.transfer_trc20_contract)
}
void Transaction::set_allocated_approve_trc20_contract(::TW::Tron::Proto::ApproveTRC20Contract* approve_trc20_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (approve_trc20_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(approve_trc20_contract);
    if (message_arena != submessage_arena) {
      approve_trc20_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, approve_trc20_contract, submessage_arena);
    }
    set_has_approve_trc20_contract();
    contract_oneof_.approve_trc20_contract_ = approve_trc20_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.approve_trc20_contract)
}
void Transaction::set_allocated_freeze_balance_v2(::TW::Tron::Proto::FreezeBalanceV2Contract* freeze_balance_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (freeze_balance_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(freeze_balance_v2);
    if (message_arena != submessage_arena) {
      freeze_balance_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freeze_balance_v2, submessage_arena);
    }
    set_has_freeze_balance_v2();
    contract_oneof_.freeze_balance_v2_ = freeze_balance_v2;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.freeze_balance_v2)
}
void Transaction::set_allocated_unfreeze_balance_v2(::TW::Tron::Proto::UnfreezeBalanceV2Contract* unfreeze_balance_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (unfreeze_balance_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unfreeze_balance_v2);
    if (message_arena != submessage_arena) {
      unfreeze_balance_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unfreeze_balance_v2, submessage_arena);
    }
    set_has_unfreeze_balance_v2();
    contract_oneof_.unfreeze_balance_v2_ = unfreeze_balance_v2;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.unfreeze_balance_v2)
}
void Transaction::set_allocated_withdraw_expire_unfreeze(::TW::Tron::Proto::WithdrawExpireUnfreezeContract* withdraw_expire_unfreeze) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (withdraw_expire_unfreeze) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(withdraw_expire_unfreeze);
    if (message_arena != submessage_arena) {
      withdraw_expire_unfreeze = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_expire_unfreeze, submessage_arena);
    }
    set_has_withdraw_expire_unfreeze();
    contract_oneof_.withdraw_expire_unfreeze_ = withdraw_expire_unfreeze;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.withdraw_expire_unfreeze)
}
void Transaction::set_allocated_delegate_resource(::TW::Tron::Proto::DelegateResourceContract* delegate_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (delegate_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delegate_resource);
    if (message_arena != submessage_arena) {
      delegate_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegate_resource, submessage_arena);
    }
    set_has_delegate_resource();
    contract_oneof_.delegate_resource_ = delegate_resource;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.delegate_resource)
}
void Transaction::set_allocated_undelegate_resource(::TW::Tron::Proto::UnDelegateResourceContract* undelegate_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_contract_oneof();
  if (undelegate_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(undelegate_resource);
    if (message_arena != submessage_arena) {
      undelegate_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undelegate_resource, submessage_arena);
    }
    set_has_undelegate_resource();
    contract_oneof_.undelegate_resource_ = undelegate_resource;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tron.Proto.Transaction.undelegate_resource)
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_header()) {
    block_header_ = new ::TW::Tron::Proto::BlockHeader(*from.block_header_);
  } else {
    block_header_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&fee_limit_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(fee_limit_));
  clear_has_contract_oneof();
  switch (from.contract_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Tron::Proto::TransferContract::MergeFrom(from._internal_transfer());
      break;
    }
    case kTransferAsset: {
      _internal_mutable_transfer_asset()->::TW::Tron::Proto::TransferAssetContract::MergeFrom(from._internal_transfer_asset());
      break;
    }
    case kFreezeBalance: {
      _internal_mutable_freeze_balance()->::TW::Tron::Proto::FreezeBalanceContract::MergeFrom(from._internal_freeze_balance());
      break;
    }
    case kUnfreezeBalance: {
      _internal_mutable_unfreeze_balance()->::TW::Tron::Proto::UnfreezeBalanceContract::MergeFrom(from._internal_unfreeze_balance());
      break;
    }
    case kUnfreezeAsset: {
      _internal_mutable_unfreeze_asset()->::TW::Tron::Proto::UnfreezeAssetContract::MergeFrom(from._internal_unfreeze_asset());
      break;
    }
    case kWithdrawBalance: {
      _internal_mutable_withdraw_balance()->::TW::Tron::Proto::WithdrawBalanceContract::MergeFrom(from._internal_withdraw_balance());
      break;
    }
    case kVoteAsset: {
      _internal_mutable_vote_asset()->::TW::Tron::Proto::VoteAssetContract::MergeFrom(from._internal_vote_asset());
      break;
    }
    case kVoteWitness: {
      _internal_mutable_vote_witness()->::TW::Tron::Proto::VoteWitnessContract::MergeFrom(from._internal_vote_witness());
      break;
    }
    case kTriggerSmartContract: {
      _internal_mutable_trigger_smart_contract()->::TW::Tron::Proto::TriggerSmartContract::MergeFrom(from._internal_trigger_smart_contract());
      break;
    }
    case kTransferTrc20Contract: {
      _internal_mutable_transfer_trc20_contract()->::TW::Tron::Proto::TransferTRC20Contract::MergeFrom(from._internal_transfer_trc20_contract());
      break;
    }
    case kApproveTrc20Contract: {
      _internal_mutable_approve_trc20_contract()->::TW::Tron::Proto::ApproveTRC20Contract::MergeFrom(from._internal_approve_trc20_contract());
      break;
    }
    case kFreezeBalanceV2: {
      _internal_mutable_freeze_balance_v2()->::TW::Tron::Proto::FreezeBalanceV2Contract::MergeFrom(from._internal_freeze_balance_v2());
      break;
    }
    case kUnfreezeBalanceV2: {
      _internal_mutable_unfreeze_balance_v2()->::TW::Tron::Proto::UnfreezeBalanceV2Contract::MergeFrom(from._internal_unfreeze_balance_v2());
      break;
    }
    case kWithdrawExpireUnfreeze: {
      _internal_mutable_withdraw_expire_unfreeze()->::TW::Tron::Proto::WithdrawExpireUnfreezeContract::MergeFrom(from._internal_withdraw_expire_unfreeze());
      break;
    }
    case kDelegateResource: {
      _internal_mutable_delegate_resource()->::TW::Tron::Proto::DelegateResourceContract::MergeFrom(from._internal_delegate_resource());
      break;
    }
    case kUndelegateResource: {
      _internal_mutable_undelegate_resource()->::TW::Tron::Proto::UnDelegateResourceContract::MergeFrom(from._internal_undelegate_resource());
      break;
    }
    case CONTRACT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Tron_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&block_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fee_limit_) -
      reinterpret_cast<char*>(&block_header_)) + sizeof(fee_limit_));
  clear_has_contract_oneof();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_header_;
  if (has_contract_oneof()) {
    clear_contract_oneof();
  }
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Tron_2eproto.base);
  return *internal_default_instance();
}


void Transaction::clear_contract_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Tron.Proto.Transaction)
  switch (contract_oneof_case()) {
    case kTransfer: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.transfer_;
      }
      break;
    }
    case kTransferAsset: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.transfer_asset_;
      }
      break;
    }
    case kFreezeBalance: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.freeze_balance_;
      }
      break;
    }
    case kUnfreezeBalance: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.unfreeze_balance_;
      }
      break;
    }
    case kUnfreezeAsset: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.unfreeze_asset_;
      }
      break;
    }
    case kWithdrawBalance: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.withdraw_balance_;
      }
      break;
    }
    case kVoteAsset: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.vote_asset_;
      }
      break;
    }
    case kVoteWitness: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.vote_witness_;
      }
      break;
    }
    case kTriggerSmartContract: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.trigger_smart_contract_;
      }
      break;
    }
    case kTransferTrc20Contract: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.transfer_trc20_contract_;
      }
      break;
    }
    case kApproveTrc20Contract: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.approve_trc20_contract_;
      }
      break;
    }
    case kFreezeBalanceV2: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.freeze_balance_v2_;
      }
      break;
    }
    case kUnfreezeBalanceV2: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.unfreeze_balance_v2_;
      }
      break;
    }
    case kWithdrawExpireUnfreeze: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.withdraw_expire_unfreeze_;
      }
      break;
    }
    case kDelegateResource: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.delegate_resource_;
      }
      break;
    }
    case kUndelegateResource: {
      if (GetArena() == nullptr) {
        delete contract_oneof_.undelegate_resource_;
      }
      break;
    }
    case CONTRACT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTRACT_ONEOF_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_limit_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(fee_limit_));
  clear_contract_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.BlockHeader block_header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fee_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.TransferContract transfer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.TransferAssetContract transfer_asset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.FreezeBalanceContract freeze_balance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_freeze_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.UnfreezeBalanceContract unfreeze_balance = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_unfreeze_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.UnfreezeAssetContract unfreeze_asset = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_unfreeze_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.WithdrawBalanceContract withdraw_balance = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.VoteAssetContract vote_asset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.VoteWitnessContract vote_witness = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_witness(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.TriggerSmartContract trigger_smart_contract = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_smart_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.TransferTRC20Contract transfer_trc20_contract = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer_trc20_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.ApproveTRC20Contract approve_trc20_contract = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_approve_trc20_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.FreezeBalanceV2Contract freeze_balance_v2 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_freeze_balance_v2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.UnfreezeBalanceV2Contract unfreeze_balance_v2 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_unfreeze_balance_v2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.WithdrawExpireUnfreezeContract withdraw_expire_unfreeze = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_expire_unfreeze(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.DelegateResourceContract delegate_resource = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegate_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tron.Proto.UnDelegateResourceContract undelegate_resource = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_undelegate_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int64 expiration = 2;
  if (this->expiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expiration(), target);
  }

  // .TW.Tron.Proto.BlockHeader block_header = 3;
  if (this->has_block_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block_header(this), target, stream);
  }

  // int64 fee_limit = 4;
  if (this->fee_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_fee_limit(), target);
  }

  // .TW.Tron.Proto.TransferContract transfer = 10;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::transfer(this), target, stream);
  }

  // .TW.Tron.Proto.TransferAssetContract transfer_asset = 11;
  if (_internal_has_transfer_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::transfer_asset(this), target, stream);
  }

  // .TW.Tron.Proto.FreezeBalanceContract freeze_balance = 12;
  if (_internal_has_freeze_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::freeze_balance(this), target, stream);
  }

  // .TW.Tron.Proto.UnfreezeBalanceContract unfreeze_balance = 13;
  if (_internal_has_unfreeze_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::unfreeze_balance(this), target, stream);
  }

  // .TW.Tron.Proto.UnfreezeAssetContract unfreeze_asset = 14;
  if (_internal_has_unfreeze_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::unfreeze_asset(this), target, stream);
  }

  // .TW.Tron.Proto.WithdrawBalanceContract withdraw_balance = 15;
  if (_internal_has_withdraw_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::withdraw_balance(this), target, stream);
  }

  // .TW.Tron.Proto.VoteAssetContract vote_asset = 16;
  if (_internal_has_vote_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::vote_asset(this), target, stream);
  }

  // .TW.Tron.Proto.VoteWitnessContract vote_witness = 17;
  if (_internal_has_vote_witness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::vote_witness(this), target, stream);
  }

  // .TW.Tron.Proto.TriggerSmartContract trigger_smart_contract = 18;
  if (_internal_has_trigger_smart_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::trigger_smart_contract(this), target, stream);
  }

  // .TW.Tron.Proto.TransferTRC20Contract transfer_trc20_contract = 19;
  if (_internal_has_transfer_trc20_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::transfer_trc20_contract(this), target, stream);
  }

  // .TW.Tron.Proto.ApproveTRC20Contract approve_trc20_contract = 20;
  if (_internal_has_approve_trc20_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::approve_trc20_contract(this), target, stream);
  }

  // .TW.Tron.Proto.FreezeBalanceV2Contract freeze_balance_v2 = 21;
  if (_internal_has_freeze_balance_v2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::freeze_balance_v2(this), target, stream);
  }

  // .TW.Tron.Proto.UnfreezeBalanceV2Contract unfreeze_balance_v2 = 22;
  if (_internal_has_unfreeze_balance_v2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::unfreeze_balance_v2(this), target, stream);
  }

  // .TW.Tron.Proto.WithdrawExpireUnfreezeContract withdraw_expire_unfreeze = 23;
  if (_internal_has_withdraw_expire_unfreeze()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::withdraw_expire_unfreeze(this), target, stream);
  }

  // .TW.Tron.Proto.DelegateResourceContract delegate_resource = 24;
  if (_internal_has_delegate_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::delegate_resource(this), target, stream);
  }

  // .TW.Tron.Proto.UnDelegateResourceContract undelegate_resource = 25;
  if (_internal_has_undelegate_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::undelegate_resource(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Tron.Proto.BlockHeader block_header = 3;
  if (this->has_block_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_header_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 expiration = 2;
  if (this->expiration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiration());
  }

  // int64 fee_limit = 4;
  if (this->fee_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_limit());
  }

  switch (contract_oneof_case()) {
    // .TW.Tron.Proto.TransferContract transfer = 10;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.transfer_);
      break;
    }
    // .TW.Tron.Proto.TransferAssetContract transfer_asset = 11;
    case kTransferAsset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.transfer_asset_);
      break;
    }
    // .TW.Tron.Proto.FreezeBalanceContract freeze_balance = 12;
    case kFreezeBalance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.freeze_balance_);
      break;
    }
    // .TW.Tron.Proto.UnfreezeBalanceContract unfreeze_balance = 13;
    case kUnfreezeBalance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.unfreeze_balance_);
      break;
    }
    // .TW.Tron.Proto.UnfreezeAssetContract unfreeze_asset = 14;
    case kUnfreezeAsset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.unfreeze_asset_);
      break;
    }
    // .TW.Tron.Proto.WithdrawBalanceContract withdraw_balance = 15;
    case kWithdrawBalance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.withdraw_balance_);
      break;
    }
    // .TW.Tron.Proto.VoteAssetContract vote_asset = 16;
    case kVoteAsset: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.vote_asset_);
      break;
    }
    // .TW.Tron.Proto.VoteWitnessContract vote_witness = 17;
    case kVoteWitness: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.vote_witness_);
      break;
    }
    // .TW.Tron.Proto.TriggerSmartContract trigger_smart_contract = 18;
    case kTriggerSmartContract: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.trigger_smart_contract_);
      break;
    }
    // .TW.Tron.Proto.TransferTRC20Contract transfer_trc20_contract = 19;
    case kTransferTrc20Contract: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.transfer_trc20_contract_);
      break;
    }
    // .TW.Tron.Proto.ApproveTRC20Contract approve_trc20_contract = 20;
    case kApproveTrc20Contract: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.approve_trc20_contract_);
      break;
    }
    // .TW.Tron.Proto.FreezeBalanceV2Contract freeze_balance_v2 = 21;
    case kFreezeBalanceV2: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.freeze_balance_v2_);
      break;
    }
    // .TW.Tron.Proto.UnfreezeBalanceV2Contract unfreeze_balance_v2 = 22;
    case kUnfreezeBalanceV2: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.unfreeze_balance_v2_);
      break;
    }
    // .TW.Tron.Proto.WithdrawExpireUnfreezeContract withdraw_expire_unfreeze = 23;
    case kWithdrawExpireUnfreeze: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.withdraw_expire_unfreeze_);
      break;
    }
    // .TW.Tron.Proto.DelegateResourceContract delegate_resource = 24;
    case kDelegateResource: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.delegate_resource_);
      break;
    }
    // .TW.Tron.Proto.UnDelegateResourceContract undelegate_resource = 25;
    case kUndelegateResource: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_oneof_.undelegate_resource_);
      break;
    }
    case CONTRACT_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block_header()) {
    _internal_mutable_block_header()->::TW::Tron::Proto::BlockHeader::MergeFrom(from._internal_block_header());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.expiration() != 0) {
    _internal_set_expiration(from._internal_expiration());
  }
  if (from.fee_limit() != 0) {
    _internal_set_fee_limit(from._internal_fee_limit());
  }
  switch (from.contract_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Tron::Proto::TransferContract::MergeFrom(from._internal_transfer());
      break;
    }
    case kTransferAsset: {
      _internal_mutable_transfer_asset()->::TW::Tron::Proto::TransferAssetContract::MergeFrom(from._internal_transfer_asset());
      break;
    }
    case kFreezeBalance: {
      _internal_mutable_freeze_balance()->::TW::Tron::Proto::FreezeBalanceContract::MergeFrom(from._internal_freeze_balance());
      break;
    }
    case kUnfreezeBalance: {
      _internal_mutable_unfreeze_balance()->::TW::Tron::Proto::UnfreezeBalanceContract::MergeFrom(from._internal_unfreeze_balance());
      break;
    }
    case kUnfreezeAsset: {
      _internal_mutable_unfreeze_asset()->::TW::Tron::Proto::UnfreezeAssetContract::MergeFrom(from._internal_unfreeze_asset());
      break;
    }
    case kWithdrawBalance: {
      _internal_mutable_withdraw_balance()->::TW::Tron::Proto::WithdrawBalanceContract::MergeFrom(from._internal_withdraw_balance());
      break;
    }
    case kVoteAsset: {
      _internal_mutable_vote_asset()->::TW::Tron::Proto::VoteAssetContract::MergeFrom(from._internal_vote_asset());
      break;
    }
    case kVoteWitness: {
      _internal_mutable_vote_witness()->::TW::Tron::Proto::VoteWitnessContract::MergeFrom(from._internal_vote_witness());
      break;
    }
    case kTriggerSmartContract: {
      _internal_mutable_trigger_smart_contract()->::TW::Tron::Proto::TriggerSmartContract::MergeFrom(from._internal_trigger_smart_contract());
      break;
    }
    case kTransferTrc20Contract: {
      _internal_mutable_transfer_trc20_contract()->::TW::Tron::Proto::TransferTRC20Contract::MergeFrom(from._internal_transfer_trc20_contract());
      break;
    }
    case kApproveTrc20Contract: {
      _internal_mutable_approve_trc20_contract()->::TW::Tron::Proto::ApproveTRC20Contract::MergeFrom(from._internal_approve_trc20_contract());
      break;
    }
    case kFreezeBalanceV2: {
      _internal_mutable_freeze_balance_v2()->::TW::Tron::Proto::FreezeBalanceV2Contract::MergeFrom(from._internal_freeze_balance_v2());
      break;
    }
    case kUnfreezeBalanceV2: {
      _internal_mutable_unfreeze_balance_v2()->::TW::Tron::Proto::UnfreezeBalanceV2Contract::MergeFrom(from._internal_unfreeze_balance_v2());
      break;
    }
    case kWithdrawExpireUnfreeze: {
      _internal_mutable_withdraw_expire_unfreeze()->::TW::Tron::Proto::WithdrawExpireUnfreezeContract::MergeFrom(from._internal_withdraw_expire_unfreeze());
      break;
    }
    case kDelegateResource: {
      _internal_mutable_delegate_resource()->::TW::Tron::Proto::DelegateResourceContract::MergeFrom(from._internal_delegate_resource());
      break;
    }
    case kUndelegateResource: {
      _internal_mutable_undelegate_resource()->::TW::Tron::Proto::UnDelegateResourceContract::MergeFrom(from._internal_undelegate_resource());
      break;
    }
    case CONTRACT_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, fee_limit_)
      + sizeof(Transaction::fee_limit_)
      - PROTOBUF_FIELD_OFFSET(Transaction, block_header_)>(
          reinterpret_cast<char*>(&block_header_),
          reinterpret_cast<char*>(&other->block_header_));
  swap(contract_oneof_, other->contract_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Tron::Proto::Transaction& transaction(const SigningInput* msg);
};

const ::TW::Tron::Proto::Transaction&
SigningInput::_Internal::transaction(const SigningInput* msg) {
  return *msg->transaction_;
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txid(), 
      GetArena());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::TW::Tron::Proto::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Tron_2eproto.base);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_ = nullptr;
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Tron_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.ClearToEmpty();
  txid_.ClearToEmpty();
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Tron.Proto.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes private_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string txId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.SigningInput.txId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Tron.Proto.Transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // bytes private_key = 2;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_private_key(), target);
  }

  // string txId = 3;
  if (this->txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txid().data(), static_cast<int>(this->_internal_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.SigningInput.txId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_key = 2;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string txId = 3;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txid());
  }

  // .TW.Tron.Proto.Transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.txid().size() > 0) {
    _internal_set_txid(from._internal_txid());
  }
  if (from.has_transaction()) {
    _internal_mutable_transaction()->::TW::Tron::Proto::Transaction::MergeFrom(from._internal_transaction());
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txid_.Swap(&other->txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tron.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  ref_block_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref_block_bytes().empty()) {
    ref_block_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ref_block_bytes(), 
      GetArena());
  }
  ref_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref_block_hash().empty()) {
    ref_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ref_block_hash(), 
      GetArena());
  }
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_json().empty()) {
    json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tron.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Tron_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Tron.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Tron_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tron.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  signature_.ClearToEmpty();
  ref_block_bytes_.ClearToEmpty();
  ref_block_hash_.ClearToEmpty();
  json_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ref_block_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ref_block_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ref_block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ref_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string json = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tron.Proto.SigningOutput.json"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tron.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // bytes ref_block_bytes = 3;
  if (this->ref_block_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ref_block_bytes(), target);
  }

  // bytes ref_block_hash = 4;
  if (this->ref_block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ref_block_hash(), target);
  }

  // string json = 5;
  if (this->json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tron.Proto.SigningOutput.json");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tron.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tron.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes ref_block_bytes = 3;
  if (this->ref_block_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ref_block_bytes());
  }

  // bytes ref_block_hash = 4;
  if (this->ref_block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ref_block_hash());
  }

  // string json = 5;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tron.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tron.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tron.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tron.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.ref_block_bytes().size() > 0) {
    _internal_set_ref_block_bytes(from._internal_ref_block_bytes());
  }
  if (from.ref_block_hash().size() > 0) {
    _internal_set_ref_block_hash(from._internal_ref_block_hash());
  }
  if (from.json().size() > 0) {
    _internal_set_json(from._internal_json());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tron.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tron.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ref_block_bytes_.Swap(&other->ref_block_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ref_block_hash_.Swap(&other->ref_block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_.Swap(&other->json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Tron
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::TransferContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::TransferContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::TransferContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::TransferAssetContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::TransferAssetContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::TransferAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::TransferTRC20Contract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::TransferTRC20Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::TransferTRC20Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::ApproveTRC20Contract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::ApproveTRC20Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::ApproveTRC20Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::FreezeBalanceContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::FreezeBalanceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::FreezeBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::FreezeBalanceV2Contract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::FreezeBalanceV2Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::FreezeBalanceV2Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::UnfreezeBalanceV2Contract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::UnfreezeBalanceV2Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::UnfreezeBalanceV2Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::WithdrawExpireUnfreezeContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::WithdrawExpireUnfreezeContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::WithdrawExpireUnfreezeContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::DelegateResourceContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::DelegateResourceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::DelegateResourceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::UnDelegateResourceContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::UnDelegateResourceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::UnDelegateResourceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::UnfreezeBalanceContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::UnfreezeBalanceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::UnfreezeBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::UnfreezeAssetContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::UnfreezeAssetContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::UnfreezeAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::VoteAssetContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::VoteAssetContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::VoteAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::VoteWitnessContract_Vote* Arena::CreateMaybeMessage< ::TW::Tron::Proto::VoteWitnessContract_Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::VoteWitnessContract_Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::VoteWitnessContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::VoteWitnessContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::VoteWitnessContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::WithdrawBalanceContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::WithdrawBalanceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::WithdrawBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::TriggerSmartContract* Arena::CreateMaybeMessage< ::TW::Tron::Proto::TriggerSmartContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::TriggerSmartContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::BlockHeader* Arena::CreateMaybeMessage< ::TW::Tron::Proto::BlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::BlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::Transaction* Arena::CreateMaybeMessage< ::TW::Tron::Proto::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Tron::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tron::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Tron::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tron::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
