// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IoTeX.proto

#include "IoTeX.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_ActionCore_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractCall_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_AddDeposit_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_CandidateBasicInfo_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Staking_CandidateRegister_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_ChangeCandidate_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Create_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Reclaim_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Restake_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_TransferOwnership_IoTeX_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_IoTeX_2eproto;
namespace TW {
namespace IoTeX {
namespace Proto {
class TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class Staking_CreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_Create> _instance;
} _Staking_Create_default_instance_;
class Staking_ReclaimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_Reclaim> _instance;
} _Staking_Reclaim_default_instance_;
class Staking_AddDepositDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_AddDeposit> _instance;
} _Staking_AddDeposit_default_instance_;
class Staking_RestakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_Restake> _instance;
} _Staking_Restake_default_instance_;
class Staking_ChangeCandidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_ChangeCandidate> _instance;
} _Staking_ChangeCandidate_default_instance_;
class Staking_TransferOwnershipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_TransferOwnership> _instance;
} _Staking_TransferOwnership_default_instance_;
class Staking_CandidateBasicInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_CandidateBasicInfo> _instance;
} _Staking_CandidateBasicInfo_default_instance_;
class Staking_CandidateRegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking_CandidateRegister> _instance;
} _Staking_CandidateRegister_default_instance_;
class StakingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Staking> _instance;
} _Staking_default_instance_;
class ContractCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractCall> _instance;
} _ContractCall_default_instance_;
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
class ActionCoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionCore> _instance;
} _ActionCore_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Action> _instance;
} _Action_default_instance_;
}  // namespace Proto
}  // namespace IoTeX
}  // namespace TW
static void InitDefaultsscc_info_Action_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Action_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Action();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Action_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Action_IoTeX_2eproto}, {
      &scc_info_ActionCore_IoTeX_2eproto.base,}};

static void InitDefaultsscc_info_ActionCore_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_ActionCore_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::ActionCore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_ActionCore_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_ActionCore_IoTeX_2eproto}, {
      &scc_info_Transfer_IoTeX_2eproto.base,
      &scc_info_ContractCall_IoTeX_2eproto.base,
      &scc_info_Staking_Create_IoTeX_2eproto.base,
      &scc_info_Staking_Reclaim_IoTeX_2eproto.base,
      &scc_info_Staking_AddDeposit_IoTeX_2eproto.base,
      &scc_info_Staking_Restake_IoTeX_2eproto.base,
      &scc_info_Staking_ChangeCandidate_IoTeX_2eproto.base,
      &scc_info_Staking_TransferOwnership_IoTeX_2eproto.base,
      &scc_info_Staking_CandidateRegister_IoTeX_2eproto.base,
      &scc_info_Staking_CandidateBasicInfo_IoTeX_2eproto.base,}};

static void InitDefaultsscc_info_ContractCall_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_ContractCall_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::ContractCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractCall_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractCall_IoTeX_2eproto}, {}};

static void InitDefaultsscc_info_SigningInput_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_SigningInput_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_SigningInput_IoTeX_2eproto}, {
      &scc_info_Transfer_IoTeX_2eproto.base,
      &scc_info_ContractCall_IoTeX_2eproto.base,
      &scc_info_Staking_Create_IoTeX_2eproto.base,
      &scc_info_Staking_Reclaim_IoTeX_2eproto.base,
      &scc_info_Staking_AddDeposit_IoTeX_2eproto.base,
      &scc_info_Staking_Restake_IoTeX_2eproto.base,
      &scc_info_Staking_ChangeCandidate_IoTeX_2eproto.base,
      &scc_info_Staking_TransferOwnership_IoTeX_2eproto.base,
      &scc_info_Staking_CandidateRegister_IoTeX_2eproto.base,
      &scc_info_Staking_CandidateBasicInfo_IoTeX_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_IoTeX_2eproto}, {}};

static void InitDefaultsscc_info_Staking_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Staking_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Staking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Staking_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Staking_IoTeX_2eproto}, {
      &scc_info_Staking_Create_IoTeX_2eproto.base,
      &scc_info_Staking_Reclaim_IoTeX_2eproto.base,
      &scc_info_Staking_AddDeposit_IoTeX_2eproto.base,
      &scc_info_Staking_Restake_IoTeX_2eproto.base,
      &scc_info_Staking_ChangeCandidate_IoTeX_2eproto.base,
      &scc_info_Staking_TransferOwnership_IoTeX_2eproto.base,
      &scc_info_Staking_CandidateRegister_IoTeX_2eproto.base,
      &scc_info_Staking_CandidateBasicInfo_IoTeX_2eproto.base,}};

static void InitDefaultsscc_info_Staking_AddDeposit_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Staking_AddDeposit_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Staking_AddDeposit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_AddDeposit_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_AddDeposit_IoTeX_2eproto}, {}};

static void InitDefaultsscc_info_Staking_CandidateBasicInfo_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Staking_CandidateBasicInfo_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Staking_CandidateBasicInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_CandidateBasicInfo_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_CandidateBasicInfo_IoTeX_2eproto}, {}};

static void InitDefaultsscc_info_Staking_CandidateRegister_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Staking_CandidateRegister_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Staking_CandidateRegister();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Staking_CandidateRegister_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Staking_CandidateRegister_IoTeX_2eproto}, {
      &scc_info_Staking_CandidateBasicInfo_IoTeX_2eproto.base,}};

static void InitDefaultsscc_info_Staking_ChangeCandidate_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Staking_ChangeCandidate_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Staking_ChangeCandidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_ChangeCandidate_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_ChangeCandidate_IoTeX_2eproto}, {}};

static void InitDefaultsscc_info_Staking_Create_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Staking_Create_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Staking_Create();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Create_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_Create_IoTeX_2eproto}, {}};

static void InitDefaultsscc_info_Staking_Reclaim_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Staking_Reclaim_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Staking_Reclaim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Reclaim_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_Reclaim_IoTeX_2eproto}, {}};

static void InitDefaultsscc_info_Staking_Restake_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Staking_Restake_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Staking_Restake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_Restake_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_Restake_IoTeX_2eproto}, {}};

static void InitDefaultsscc_info_Staking_TransferOwnership_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Staking_TransferOwnership_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Staking_TransferOwnership();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Staking_TransferOwnership_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Staking_TransferOwnership_IoTeX_2eproto}, {}};

static void InitDefaultsscc_info_Transfer_IoTeX_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::IoTeX::Proto::_Transfer_default_instance_;
    new (ptr) ::TW::IoTeX::Proto::Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_IoTeX_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transfer_IoTeX_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_IoTeX_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_IoTeX_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_IoTeX_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_IoTeX_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Transfer, recipient_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Transfer, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Create, candidatename_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Create, stakedamount_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Create, stakedduration_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Create, autostake_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Create, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Reclaim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Reclaim, bucketindex_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Reclaim, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_AddDeposit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_AddDeposit, bucketindex_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_AddDeposit, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_AddDeposit, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Restake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Restake, bucketindex_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Restake, stakedduration_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Restake, autostake_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_Restake, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_ChangeCandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_ChangeCandidate, bucketindex_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_ChangeCandidate, candidatename_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_ChangeCandidate, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_TransferOwnership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_TransferOwnership, bucketindex_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_TransferOwnership, voteraddress_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_TransferOwnership, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateBasicInfo, name_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateBasicInfo, operatoraddress_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateBasicInfo, rewardaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateRegister, candidate_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateRegister, stakedamount_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateRegister, stakedduration_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateRegister, autostake_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateRegister, owneraddress_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking_CandidateRegister, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Staking, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ContractCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ContractCall, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ContractCall, contract_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ContractCall, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningInput, version_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningInput, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningInput, gaslimit_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningInput, gasprice_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningInput, privatekey_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningInput, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::SigningOutput, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ActionCore, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ActionCore, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ActionCore, version_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ActionCore, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ActionCore, gaslimit_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ActionCore, gasprice_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::ActionCore, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Action, core_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Action, senderpubkey_),
  PROTOBUF_FIELD_OFFSET(::TW::IoTeX::Proto::Action, signature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::IoTeX::Proto::Transfer)},
  { 8, -1, sizeof(::TW::IoTeX::Proto::Staking_Create)},
  { 18, -1, sizeof(::TW::IoTeX::Proto::Staking_Reclaim)},
  { 25, -1, sizeof(::TW::IoTeX::Proto::Staking_AddDeposit)},
  { 33, -1, sizeof(::TW::IoTeX::Proto::Staking_Restake)},
  { 42, -1, sizeof(::TW::IoTeX::Proto::Staking_ChangeCandidate)},
  { 50, -1, sizeof(::TW::IoTeX::Proto::Staking_TransferOwnership)},
  { 58, -1, sizeof(::TW::IoTeX::Proto::Staking_CandidateBasicInfo)},
  { 66, -1, sizeof(::TW::IoTeX::Proto::Staking_CandidateRegister)},
  { 77, -1, sizeof(::TW::IoTeX::Proto::Staking)},
  { 92, -1, sizeof(::TW::IoTeX::Proto::ContractCall)},
  { 100, -1, sizeof(::TW::IoTeX::Proto::SigningInput)},
  { 122, -1, sizeof(::TW::IoTeX::Proto::SigningOutput)},
  { 129, -1, sizeof(::TW::IoTeX::Proto::ActionCore)},
  { 150, -1, sizeof(::TW::IoTeX::Proto::Action)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Staking_Create_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Staking_Reclaim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Staking_AddDeposit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Staking_Restake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Staking_ChangeCandidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Staking_TransferOwnership_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Staking_CandidateBasicInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Staking_CandidateRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Staking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_ContractCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_SigningOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_ActionCore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::IoTeX::Proto::_Action_default_instance_),
};

const char descriptor_table_protodef_IoTeX_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013IoTeX.proto\022\016TW.IoTeX.Proto\">\n\010Transfe"
  "r\022\016\n\006amount\030\001 \001(\t\022\021\n\trecipient\030\002 \001(\t\022\017\n\007"
  "payload\030\003 \001(\014\"\321\n\n\007Staking\0225\n\013stakeCreate"
  "\030\001 \001(\0132\036.TW.IoTeX.Proto.Staking.CreateH\000"
  "\0227\n\014stakeUnstake\030\002 \001(\0132\037.TW.IoTeX.Proto."
  "Staking.ReclaimH\000\0228\n\rstakeWithdraw\030\003 \001(\013"
  "2\037.TW.IoTeX.Proto.Staking.ReclaimH\000\022=\n\017s"
  "takeAddDeposit\030\004 \001(\0132\".TW.IoTeX.Proto.St"
  "aking.AddDepositH\000\0227\n\014stakeRestake\030\005 \001(\013"
  "2\037.TW.IoTeX.Proto.Staking.RestakeH\000\022G\n\024s"
  "takeChangeCandidate\030\006 \001(\0132\'.TW.IoTeX.Pro"
  "to.Staking.ChangeCandidateH\000\022K\n\026stakeTra"
  "nsferOwnership\030\007 \001(\0132).TW.IoTeX.Proto.St"
  "aking.TransferOwnershipH\000\022F\n\021candidateRe"
  "gister\030\010 \001(\0132).TW.IoTeX.Proto.Staking.Ca"
  "ndidateRegisterH\000\022E\n\017candidateUpdate\030\t \001"
  "(\0132*.TW.IoTeX.Proto.Staking.CandidateBas"
  "icInfoH\000\032q\n\006Create\022\025\n\rcandidateName\030\001 \001("
  "\t\022\024\n\014stakedAmount\030\002 \001(\t\022\026\n\016stakedDuratio"
  "n\030\003 \001(\r\022\021\n\tautoStake\030\004 \001(\010\022\017\n\007payload\030\005 "
  "\001(\014\032/\n\007Reclaim\022\023\n\013bucketIndex\030\001 \001(\004\022\017\n\007p"
  "ayload\030\002 \001(\014\032B\n\nAddDeposit\022\023\n\013bucketInde"
  "x\030\001 \001(\004\022\016\n\006amount\030\002 \001(\t\022\017\n\007payload\030\003 \001(\014"
  "\032Z\n\007Restake\022\023\n\013bucketIndex\030\001 \001(\004\022\026\n\016stak"
  "edDuration\030\002 \001(\r\022\021\n\tautoStake\030\003 \001(\010\022\017\n\007p"
  "ayload\030\004 \001(\014\032N\n\017ChangeCandidate\022\023\n\013bucke"
  "tIndex\030\001 \001(\004\022\025\n\rcandidateName\030\002 \001(\t\022\017\n\007p"
  "ayload\030\003 \001(\014\032O\n\021TransferOwnership\022\023\n\013buc"
  "ketIndex\030\001 \001(\004\022\024\n\014voterAddress\030\002 \001(\t\022\017\n\007"
  "payload\030\003 \001(\014\032R\n\022CandidateBasicInfo\022\014\n\004n"
  "ame\030\001 \001(\t\022\027\n\017operatorAddress\030\002 \001(\t\022\025\n\rre"
  "wardAddress\030\003 \001(\t\032\272\001\n\021CandidateRegister\022"
  "=\n\tcandidate\030\001 \001(\0132*.TW.IoTeX.Proto.Stak"
  "ing.CandidateBasicInfo\022\024\n\014stakedAmount\030\002"
  " \001(\t\022\026\n\016stakedDuration\030\003 \001(\r\022\021\n\tautoStak"
  "e\030\004 \001(\010\022\024\n\014ownerAddress\030\005 \001(\t\022\017\n\007payload"
  "\030\006 \001(\014B\t\n\007message\">\n\014ContractCall\022\016\n\006amo"
  "unt\030\001 \001(\t\022\020\n\010contract\030\002 \001(\t\022\014\n\004data\030\003 \001("
  "\014\"\223\006\n\014SigningInput\022\017\n\007version\030\001 \001(\r\022\r\n\005n"
  "once\030\002 \001(\004\022\020\n\010gasLimit\030\003 \001(\004\022\020\n\010gasPrice"
  "\030\004 \001(\t\022\022\n\nprivateKey\030\005 \001(\014\022,\n\010transfer\030\n"
  " \001(\0132\030.TW.IoTeX.Proto.TransferH\000\022,\n\004call"
  "\030\014 \001(\0132\034.TW.IoTeX.Proto.ContractCallH\000\0225"
  "\n\013stakeCreate\030( \001(\0132\036.TW.IoTeX.Proto.Sta"
  "king.CreateH\000\0227\n\014stakeUnstake\030) \001(\0132\037.TW"
  ".IoTeX.Proto.Staking.ReclaimH\000\0228\n\rstakeW"
  "ithdraw\030* \001(\0132\037.TW.IoTeX.Proto.Staking.R"
  "eclaimH\000\022=\n\017stakeAddDeposit\030+ \001(\0132\".TW.I"
  "oTeX.Proto.Staking.AddDepositH\000\0227\n\014stake"
  "Restake\030, \001(\0132\037.TW.IoTeX.Proto.Staking.R"
  "estakeH\000\022G\n\024stakeChangeCandidate\030- \001(\0132\'"
  ".TW.IoTeX.Proto.Staking.ChangeCandidateH"
  "\000\022K\n\026stakeTransferOwnership\030. \001(\0132).TW.I"
  "oTeX.Proto.Staking.TransferOwnershipH\000\022F"
  "\n\021candidateRegister\030/ \001(\0132).TW.IoTeX.Pro"
  "to.Staking.CandidateRegisterH\000\022E\n\017candid"
  "ateUpdate\0300 \001(\0132*.TW.IoTeX.Proto.Staking"
  ".CandidateBasicInfoH\000B\010\n\006action\".\n\rSigni"
  "ngOutput\022\017\n\007encoded\030\001 \001(\014\022\014\n\004hash\030\002 \001(\014\""
  "\202\006\n\nActionCore\022\017\n\007version\030\001 \001(\r\022\r\n\005nonce"
  "\030\002 \001(\004\022\020\n\010gasLimit\030\003 \001(\004\022\020\n\010gasPrice\030\004 \001"
  "(\t\022,\n\010transfer\030\n \001(\0132\030.TW.IoTeX.Proto.Tr"
  "ansferH\000\0221\n\texecution\030\014 \001(\0132\034.TW.IoTeX.P"
  "roto.ContractCallH\000\0225\n\013stakeCreate\030( \001(\013"
  "2\036.TW.IoTeX.Proto.Staking.CreateH\000\0227\n\014st"
  "akeUnstake\030) \001(\0132\037.TW.IoTeX.Proto.Stakin"
  "g.ReclaimH\000\0228\n\rstakeWithdraw\030* \001(\0132\037.TW."
  "IoTeX.Proto.Staking.ReclaimH\000\022=\n\017stakeAd"
  "dDeposit\030+ \001(\0132\".TW.IoTeX.Proto.Staking."
  "AddDepositH\000\0227\n\014stakeRestake\030, \001(\0132\037.TW."
  "IoTeX.Proto.Staking.RestakeH\000\022G\n\024stakeCh"
  "angeCandidate\030- \001(\0132\'.TW.IoTeX.Proto.Sta"
  "king.ChangeCandidateH\000\022K\n\026stakeTransferO"
  "wnership\030. \001(\0132).TW.IoTeX.Proto.Staking."
  "TransferOwnershipH\000\022F\n\021candidateRegister"
  "\030/ \001(\0132).TW.IoTeX.Proto.Staking.Candidat"
  "eRegisterH\000\022E\n\017candidateUpdate\0300 \001(\0132*.T"
  "W.IoTeX.Proto.Staking.CandidateBasicInfo"
  "H\000B\010\n\006action\"[\n\006Action\022(\n\004core\030\001 \001(\0132\032.T"
  "W.IoTeX.Proto.ActionCore\022\024\n\014senderPubKey"
  "\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014B\027\n\025wallet.core"
  ".jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_IoTeX_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_IoTeX_2eproto_sccs[15] = {
  &scc_info_Action_IoTeX_2eproto.base,
  &scc_info_ActionCore_IoTeX_2eproto.base,
  &scc_info_ContractCall_IoTeX_2eproto.base,
  &scc_info_SigningInput_IoTeX_2eproto.base,
  &scc_info_SigningOutput_IoTeX_2eproto.base,
  &scc_info_Staking_IoTeX_2eproto.base,
  &scc_info_Staking_AddDeposit_IoTeX_2eproto.base,
  &scc_info_Staking_CandidateBasicInfo_IoTeX_2eproto.base,
  &scc_info_Staking_CandidateRegister_IoTeX_2eproto.base,
  &scc_info_Staking_ChangeCandidate_IoTeX_2eproto.base,
  &scc_info_Staking_Create_IoTeX_2eproto.base,
  &scc_info_Staking_Reclaim_IoTeX_2eproto.base,
  &scc_info_Staking_Restake_IoTeX_2eproto.base,
  &scc_info_Staking_TransferOwnership_IoTeX_2eproto.base,
  &scc_info_Transfer_IoTeX_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_IoTeX_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IoTeX_2eproto = {
  false, false, descriptor_table_protodef_IoTeX_2eproto, "IoTeX.proto", 3258,
  &descriptor_table_IoTeX_2eproto_once, descriptor_table_IoTeX_2eproto_sccs, descriptor_table_IoTeX_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_IoTeX_2eproto::offsets,
  file_level_metadata_IoTeX_2eproto, 15, file_level_enum_descriptors_IoTeX_2eproto, file_level_service_descriptors_IoTeX_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_IoTeX_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_IoTeX_2eproto)), true);
namespace TW {
namespace IoTeX {
namespace Proto {

// ===================================================================

class Transfer::_Internal {
 public:
};

Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient().empty()) {
    recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Transfer)
}

void Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transfer_IoTeX_2eproto.base);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transfer_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  recipient_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Transfer.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recipient();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Transfer.recipient"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string amount = 1;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Transfer.amount");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_amount(), target);
  }

  // string recipient = 2;
  if (this->recipient().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient().data(), static_cast<int>(this->_internal_recipient().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Transfer.recipient");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recipient(), target);
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 1;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string recipient = 2;
  if (this->recipient().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient());
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.recipient().size() > 0) {
    _internal_set_recipient(from._internal_recipient());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
}

void Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_.Swap(&other->recipient_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_Create::_Internal {
 public:
};

Staking_Create::Staking_Create(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Staking.Create)
}
Staking_Create::Staking_Create(const Staking_Create& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_candidatename().empty()) {
    candidatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candidatename(), 
      GetArena());
  }
  stakedamount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stakedamount().empty()) {
    stakedamount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stakedamount(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  ::memcpy(&stakedduration_, &from.stakedduration_,
    static_cast<size_t>(reinterpret_cast<char*>(&autostake_) -
    reinterpret_cast<char*>(&stakedduration_)) + sizeof(autostake_));
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Staking.Create)
}

void Staking_Create::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_Create_IoTeX_2eproto.base);
  candidatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stakedamount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stakedduration_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&autostake_) -
      reinterpret_cast<char*>(&stakedduration_)) + sizeof(autostake_));
}

Staking_Create::~Staking_Create() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Staking.Create)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_Create::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  candidatename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stakedamount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_Create::ArenaDtor(void* object) {
  Staking_Create* _this = reinterpret_cast< Staking_Create* >(object);
  (void)_this;
}
void Staking_Create::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_Create& Staking_Create::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_Create_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Staking_Create::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Staking.Create)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidatename_.ClearToEmpty();
  stakedamount_.ClearToEmpty();
  payload_.ClearToEmpty();
  ::memset(&stakedduration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autostake_) -
      reinterpret_cast<char*>(&stakedduration_)) + sizeof(autostake_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Create::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string candidateName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_candidatename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.Create.candidateName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stakedAmount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stakedamount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.Create.stakedAmount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stakedDuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stakedduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool autoStake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          autostake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_Create::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Staking.Create)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidateName = 1;
  if (this->candidatename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidatename().data(), static_cast<int>(this->_internal_candidatename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.Create.candidateName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candidatename(), target);
  }

  // string stakedAmount = 2;
  if (this->stakedamount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stakedamount().data(), static_cast<int>(this->_internal_stakedamount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.Create.stakedAmount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stakedamount(), target);
  }

  // uint32 stakedDuration = 3;
  if (this->stakedduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stakedduration(), target);
  }

  // bool autoStake = 4;
  if (this->autostake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_autostake(), target);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Staking.Create)
  return target;
}

size_t Staking_Create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Staking.Create)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidateName = 1;
  if (this->candidatename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidatename());
  }

  // string stakedAmount = 2;
  if (this->stakedamount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stakedamount());
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint32 stakedDuration = 3;
  if (this->stakedduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stakedduration());
  }

  // bool autoStake = 4;
  if (this->autostake() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_Create::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Staking.Create)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_Create* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_Create>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Staking.Create)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Staking.Create)
    MergeFrom(*source);
  }
}

void Staking_Create::MergeFrom(const Staking_Create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Staking.Create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.candidatename().size() > 0) {
    _internal_set_candidatename(from._internal_candidatename());
  }
  if (from.stakedamount().size() > 0) {
    _internal_set_stakedamount(from._internal_stakedamount());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.stakedduration() != 0) {
    _internal_set_stakedduration(from._internal_stakedduration());
  }
  if (from.autostake() != 0) {
    _internal_set_autostake(from._internal_autostake());
  }
}

void Staking_Create::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Staking.Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_Create::CopyFrom(const Staking_Create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Staking.Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Create::IsInitialized() const {
  return true;
}

void Staking_Create::InternalSwap(Staking_Create* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  candidatename_.Swap(&other->candidatename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stakedamount_.Swap(&other->stakedamount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Staking_Create, autostake_)
      + sizeof(Staking_Create::autostake_)
      - PROTOBUF_FIELD_OFFSET(Staking_Create, stakedduration_)>(
          reinterpret_cast<char*>(&stakedduration_),
          reinterpret_cast<char*>(&other->stakedduration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Create::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_Reclaim::_Internal {
 public:
};

Staking_Reclaim::Staking_Reclaim(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Staking.Reclaim)
}
Staking_Reclaim::Staking_Reclaim(const Staking_Reclaim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  bucketindex_ = from.bucketindex_;
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Staking.Reclaim)
}

void Staking_Reclaim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_Reclaim_IoTeX_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucketindex_ = PROTOBUF_ULONGLONG(0);
}

Staking_Reclaim::~Staking_Reclaim() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Staking.Reclaim)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_Reclaim::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_Reclaim::ArenaDtor(void* object) {
  Staking_Reclaim* _this = reinterpret_cast< Staking_Reclaim* >(object);
  (void)_this;
}
void Staking_Reclaim::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Reclaim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_Reclaim& Staking_Reclaim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_Reclaim_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Staking_Reclaim::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Staking.Reclaim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  bucketindex_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Reclaim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 bucketIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bucketindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_Reclaim::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Staking.Reclaim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bucketindex(), target);
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Staking.Reclaim)
  return target;
}

size_t Staking_Reclaim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Staking.Reclaim)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bucketindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_Reclaim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Staking.Reclaim)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_Reclaim* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_Reclaim>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Staking.Reclaim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Staking.Reclaim)
    MergeFrom(*source);
  }
}

void Staking_Reclaim::MergeFrom(const Staking_Reclaim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Staking.Reclaim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.bucketindex() != 0) {
    _internal_set_bucketindex(from._internal_bucketindex());
  }
}

void Staking_Reclaim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Staking.Reclaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_Reclaim::CopyFrom(const Staking_Reclaim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Staking.Reclaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Reclaim::IsInitialized() const {
  return true;
}

void Staking_Reclaim::InternalSwap(Staking_Reclaim* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bucketindex_, other->bucketindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Reclaim::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_AddDeposit::_Internal {
 public:
};

Staking_AddDeposit::Staking_AddDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Staking.AddDeposit)
}
Staking_AddDeposit::Staking_AddDeposit(const Staking_AddDeposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  bucketindex_ = from.bucketindex_;
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Staking.AddDeposit)
}

void Staking_AddDeposit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_AddDeposit_IoTeX_2eproto.base);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucketindex_ = PROTOBUF_ULONGLONG(0);
}

Staking_AddDeposit::~Staking_AddDeposit() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Staking.AddDeposit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_AddDeposit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_AddDeposit::ArenaDtor(void* object) {
  Staking_AddDeposit* _this = reinterpret_cast< Staking_AddDeposit* >(object);
  (void)_this;
}
void Staking_AddDeposit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_AddDeposit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_AddDeposit& Staking_AddDeposit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_AddDeposit_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Staking_AddDeposit::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Staking.AddDeposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  payload_.ClearToEmpty();
  bucketindex_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_AddDeposit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 bucketIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bucketindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.AddDeposit.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_AddDeposit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Staking.AddDeposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bucketindex(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.AddDeposit.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Staking.AddDeposit)
  return target;
}

size_t Staking_AddDeposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Staking.AddDeposit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bucketindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_AddDeposit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Staking.AddDeposit)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_AddDeposit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_AddDeposit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Staking.AddDeposit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Staking.AddDeposit)
    MergeFrom(*source);
  }
}

void Staking_AddDeposit::MergeFrom(const Staking_AddDeposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Staking.AddDeposit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.bucketindex() != 0) {
    _internal_set_bucketindex(from._internal_bucketindex());
  }
}

void Staking_AddDeposit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Staking.AddDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_AddDeposit::CopyFrom(const Staking_AddDeposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Staking.AddDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_AddDeposit::IsInitialized() const {
  return true;
}

void Staking_AddDeposit::InternalSwap(Staking_AddDeposit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bucketindex_, other->bucketindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_AddDeposit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_Restake::_Internal {
 public:
};

Staking_Restake::Staking_Restake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Staking.Restake)
}
Staking_Restake::Staking_Restake(const Staking_Restake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  ::memcpy(&bucketindex_, &from.bucketindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&autostake_) -
    reinterpret_cast<char*>(&bucketindex_)) + sizeof(autostake_));
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Staking.Restake)
}

void Staking_Restake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_Restake_IoTeX_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bucketindex_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&autostake_) -
      reinterpret_cast<char*>(&bucketindex_)) + sizeof(autostake_));
}

Staking_Restake::~Staking_Restake() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Staking.Restake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_Restake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_Restake::ArenaDtor(void* object) {
  Staking_Restake* _this = reinterpret_cast< Staking_Restake* >(object);
  (void)_this;
}
void Staking_Restake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Restake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_Restake& Staking_Restake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_Restake_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Staking_Restake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Staking.Restake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  ::memset(&bucketindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autostake_) -
      reinterpret_cast<char*>(&bucketindex_)) + sizeof(autostake_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Restake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 bucketIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bucketindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stakedDuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stakedduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool autoStake = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          autostake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_Restake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Staking.Restake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bucketindex(), target);
  }

  // uint32 stakedDuration = 2;
  if (this->stakedduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stakedduration(), target);
  }

  // bool autoStake = 3;
  if (this->autostake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_autostake(), target);
  }

  // bytes payload = 4;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Staking.Restake)
  return target;
}

size_t Staking_Restake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Staking.Restake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 4;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bucketindex());
  }

  // uint32 stakedDuration = 2;
  if (this->stakedduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stakedduration());
  }

  // bool autoStake = 3;
  if (this->autostake() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_Restake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Staking.Restake)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_Restake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_Restake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Staking.Restake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Staking.Restake)
    MergeFrom(*source);
  }
}

void Staking_Restake::MergeFrom(const Staking_Restake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Staking.Restake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.bucketindex() != 0) {
    _internal_set_bucketindex(from._internal_bucketindex());
  }
  if (from.stakedduration() != 0) {
    _internal_set_stakedduration(from._internal_stakedduration());
  }
  if (from.autostake() != 0) {
    _internal_set_autostake(from._internal_autostake());
  }
}

void Staking_Restake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Staking.Restake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_Restake::CopyFrom(const Staking_Restake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Staking.Restake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Restake::IsInitialized() const {
  return true;
}

void Staking_Restake::InternalSwap(Staking_Restake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Staking_Restake, autostake_)
      + sizeof(Staking_Restake::autostake_)
      - PROTOBUF_FIELD_OFFSET(Staking_Restake, bucketindex_)>(
          reinterpret_cast<char*>(&bucketindex_),
          reinterpret_cast<char*>(&other->bucketindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Restake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_ChangeCandidate::_Internal {
 public:
};

Staking_ChangeCandidate::Staking_ChangeCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Staking.ChangeCandidate)
}
Staking_ChangeCandidate::Staking_ChangeCandidate(const Staking_ChangeCandidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_candidatename().empty()) {
    candidatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candidatename(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  bucketindex_ = from.bucketindex_;
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Staking.ChangeCandidate)
}

void Staking_ChangeCandidate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_ChangeCandidate_IoTeX_2eproto.base);
  candidatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucketindex_ = PROTOBUF_ULONGLONG(0);
}

Staking_ChangeCandidate::~Staking_ChangeCandidate() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Staking.ChangeCandidate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_ChangeCandidate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  candidatename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_ChangeCandidate::ArenaDtor(void* object) {
  Staking_ChangeCandidate* _this = reinterpret_cast< Staking_ChangeCandidate* >(object);
  (void)_this;
}
void Staking_ChangeCandidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_ChangeCandidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_ChangeCandidate& Staking_ChangeCandidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_ChangeCandidate_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Staking_ChangeCandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Staking.ChangeCandidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidatename_.ClearToEmpty();
  payload_.ClearToEmpty();
  bucketindex_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_ChangeCandidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 bucketIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bucketindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string candidateName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_candidatename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_ChangeCandidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Staking.ChangeCandidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bucketindex(), target);
  }

  // string candidateName = 2;
  if (this->candidatename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidatename().data(), static_cast<int>(this->_internal_candidatename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_candidatename(), target);
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Staking.ChangeCandidate)
  return target;
}

size_t Staking_ChangeCandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Staking.ChangeCandidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidateName = 2;
  if (this->candidatename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidatename());
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bucketindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_ChangeCandidate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Staking.ChangeCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_ChangeCandidate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_ChangeCandidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Staking.ChangeCandidate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Staking.ChangeCandidate)
    MergeFrom(*source);
  }
}

void Staking_ChangeCandidate::MergeFrom(const Staking_ChangeCandidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Staking.ChangeCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.candidatename().size() > 0) {
    _internal_set_candidatename(from._internal_candidatename());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.bucketindex() != 0) {
    _internal_set_bucketindex(from._internal_bucketindex());
  }
}

void Staking_ChangeCandidate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Staking.ChangeCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_ChangeCandidate::CopyFrom(const Staking_ChangeCandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Staking.ChangeCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_ChangeCandidate::IsInitialized() const {
  return true;
}

void Staking_ChangeCandidate::InternalSwap(Staking_ChangeCandidate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  candidatename_.Swap(&other->candidatename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bucketindex_, other->bucketindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_ChangeCandidate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_TransferOwnership::_Internal {
 public:
};

Staking_TransferOwnership::Staking_TransferOwnership(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Staking.TransferOwnership)
}
Staking_TransferOwnership::Staking_TransferOwnership(const Staking_TransferOwnership& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  voteraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_voteraddress().empty()) {
    voteraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_voteraddress(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  bucketindex_ = from.bucketindex_;
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Staking.TransferOwnership)
}

void Staking_TransferOwnership::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_TransferOwnership_IoTeX_2eproto.base);
  voteraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucketindex_ = PROTOBUF_ULONGLONG(0);
}

Staking_TransferOwnership::~Staking_TransferOwnership() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Staking.TransferOwnership)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_TransferOwnership::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  voteraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_TransferOwnership::ArenaDtor(void* object) {
  Staking_TransferOwnership* _this = reinterpret_cast< Staking_TransferOwnership* >(object);
  (void)_this;
}
void Staking_TransferOwnership::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_TransferOwnership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_TransferOwnership& Staking_TransferOwnership::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_TransferOwnership_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Staking_TransferOwnership::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Staking.TransferOwnership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voteraddress_.ClearToEmpty();
  payload_.ClearToEmpty();
  bucketindex_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_TransferOwnership::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 bucketIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bucketindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string voterAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_voteraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_TransferOwnership::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Staking.TransferOwnership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bucketindex(), target);
  }

  // string voterAddress = 2;
  if (this->voteraddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voteraddress().data(), static_cast<int>(this->_internal_voteraddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_voteraddress(), target);
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Staking.TransferOwnership)
  return target;
}

size_t Staking_TransferOwnership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Staking.TransferOwnership)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string voterAddress = 2;
  if (this->voteraddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voteraddress());
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint64 bucketIndex = 1;
  if (this->bucketindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bucketindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_TransferOwnership::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Staking.TransferOwnership)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_TransferOwnership* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_TransferOwnership>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Staking.TransferOwnership)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Staking.TransferOwnership)
    MergeFrom(*source);
  }
}

void Staking_TransferOwnership::MergeFrom(const Staking_TransferOwnership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Staking.TransferOwnership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.voteraddress().size() > 0) {
    _internal_set_voteraddress(from._internal_voteraddress());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.bucketindex() != 0) {
    _internal_set_bucketindex(from._internal_bucketindex());
  }
}

void Staking_TransferOwnership::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Staking.TransferOwnership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_TransferOwnership::CopyFrom(const Staking_TransferOwnership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Staking.TransferOwnership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_TransferOwnership::IsInitialized() const {
  return true;
}

void Staking_TransferOwnership::InternalSwap(Staking_TransferOwnership* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  voteraddress_.Swap(&other->voteraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bucketindex_, other->bucketindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_TransferOwnership::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_CandidateBasicInfo::_Internal {
 public:
};

Staking_CandidateBasicInfo::Staking_CandidateBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
}
Staking_CandidateBasicInfo::Staking_CandidateBasicInfo(const Staking_CandidateBasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  operatoraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operatoraddress().empty()) {
    operatoraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operatoraddress(), 
      GetArena());
  }
  rewardaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rewardaddress().empty()) {
    rewardaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rewardaddress(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
}

void Staking_CandidateBasicInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_CandidateBasicInfo_IoTeX_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operatoraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rewardaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Staking_CandidateBasicInfo::~Staking_CandidateBasicInfo() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_CandidateBasicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operatoraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rewardaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Staking_CandidateBasicInfo::ArenaDtor(void* object) {
  Staking_CandidateBasicInfo* _this = reinterpret_cast< Staking_CandidateBasicInfo* >(object);
  (void)_this;
}
void Staking_CandidateBasicInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_CandidateBasicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_CandidateBasicInfo& Staking_CandidateBasicInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_CandidateBasicInfo_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Staking_CandidateBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  operatoraddress_.ClearToEmpty();
  rewardaddress_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_CandidateBasicInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.CandidateBasicInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operatorAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operatoraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rewardAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rewardaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_CandidateBasicInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.CandidateBasicInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string operatorAddress = 2;
  if (this->operatoraddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operatoraddress().data(), static_cast<int>(this->_internal_operatoraddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operatoraddress(), target);
  }

  // string rewardAddress = 3;
  if (this->rewardaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rewardaddress().data(), static_cast<int>(this->_internal_rewardaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rewardaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
  return target;
}

size_t Staking_CandidateBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string operatorAddress = 2;
  if (this->operatoraddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operatoraddress());
  }

  // string rewardAddress = 3;
  if (this->rewardaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rewardaddress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_CandidateBasicInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_CandidateBasicInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_CandidateBasicInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
    MergeFrom(*source);
  }
}

void Staking_CandidateBasicInfo::MergeFrom(const Staking_CandidateBasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.operatoraddress().size() > 0) {
    _internal_set_operatoraddress(from._internal_operatoraddress());
  }
  if (from.rewardaddress().size() > 0) {
    _internal_set_rewardaddress(from._internal_rewardaddress());
  }
}

void Staking_CandidateBasicInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_CandidateBasicInfo::CopyFrom(const Staking_CandidateBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_CandidateBasicInfo::IsInitialized() const {
  return true;
}

void Staking_CandidateBasicInfo::InternalSwap(Staking_CandidateBasicInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operatoraddress_.Swap(&other->operatoraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rewardaddress_.Swap(&other->rewardaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_CandidateBasicInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking_CandidateRegister::_Internal {
 public:
  static const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& candidate(const Staking_CandidateRegister* msg);
};

const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo&
Staking_CandidateRegister::_Internal::candidate(const Staking_CandidateRegister* msg) {
  return *msg->candidate_;
}
Staking_CandidateRegister::Staking_CandidateRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Staking.CandidateRegister)
}
Staking_CandidateRegister::Staking_CandidateRegister(const Staking_CandidateRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stakedamount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stakedamount().empty()) {
    stakedamount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stakedamount(), 
      GetArena());
  }
  owneraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owneraddress().empty()) {
    owneraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owneraddress(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  if (from._internal_has_candidate()) {
    candidate_ = new ::TW::IoTeX::Proto::Staking_CandidateBasicInfo(*from.candidate_);
  } else {
    candidate_ = nullptr;
  }
  ::memcpy(&stakedduration_, &from.stakedduration_,
    static_cast<size_t>(reinterpret_cast<char*>(&autostake_) -
    reinterpret_cast<char*>(&stakedduration_)) + sizeof(autostake_));
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Staking.CandidateRegister)
}

void Staking_CandidateRegister::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_CandidateRegister_IoTeX_2eproto.base);
  stakedamount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owneraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&candidate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&autostake_) -
      reinterpret_cast<char*>(&candidate_)) + sizeof(autostake_));
}

Staking_CandidateRegister::~Staking_CandidateRegister() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Staking.CandidateRegister)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking_CandidateRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stakedamount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owneraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete candidate_;
}

void Staking_CandidateRegister::ArenaDtor(void* object) {
  Staking_CandidateRegister* _this = reinterpret_cast< Staking_CandidateRegister* >(object);
  (void)_this;
}
void Staking_CandidateRegister::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_CandidateRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking_CandidateRegister& Staking_CandidateRegister::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_CandidateRegister_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Staking_CandidateRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Staking.CandidateRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stakedamount_.ClearToEmpty();
  owneraddress_.ClearToEmpty();
  payload_.ClearToEmpty();
  if (GetArena() == nullptr && candidate_ != nullptr) {
    delete candidate_;
  }
  candidate_ = nullptr;
  ::memset(&stakedduration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autostake_) -
      reinterpret_cast<char*>(&stakedduration_)) + sizeof(autostake_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_CandidateRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stakedAmount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stakedamount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stakedDuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stakedduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool autoStake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          autostake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ownerAddress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_owneraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking_CandidateRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Staking.CandidateRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidate = 1;
  if (this->has_candidate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::candidate(this), target, stream);
  }

  // string stakedAmount = 2;
  if (this->stakedamount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stakedamount().data(), static_cast<int>(this->_internal_stakedamount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stakedamount(), target);
  }

  // uint32 stakedDuration = 3;
  if (this->stakedduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stakedduration(), target);
  }

  // bool autoStake = 4;
  if (this->autostake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_autostake(), target);
  }

  // string ownerAddress = 5;
  if (this->owneraddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owneraddress().data(), static_cast<int>(this->_internal_owneraddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_owneraddress(), target);
  }

  // bytes payload = 6;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Staking.CandidateRegister)
  return target;
}

size_t Staking_CandidateRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Staking.CandidateRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stakedAmount = 2;
  if (this->stakedamount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stakedamount());
  }

  // string ownerAddress = 5;
  if (this->owneraddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owneraddress());
  }

  // bytes payload = 6;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidate = 1;
  if (this->has_candidate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candidate_);
  }

  // uint32 stakedDuration = 3;
  if (this->stakedduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stakedduration());
  }

  // bool autoStake = 4;
  if (this->autostake() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking_CandidateRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Staking.CandidateRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking_CandidateRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking_CandidateRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Staking.CandidateRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Staking.CandidateRegister)
    MergeFrom(*source);
  }
}

void Staking_CandidateRegister::MergeFrom(const Staking_CandidateRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Staking.CandidateRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stakedamount().size() > 0) {
    _internal_set_stakedamount(from._internal_stakedamount());
  }
  if (from.owneraddress().size() > 0) {
    _internal_set_owneraddress(from._internal_owneraddress());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.has_candidate()) {
    _internal_mutable_candidate()->::TW::IoTeX::Proto::Staking_CandidateBasicInfo::MergeFrom(from._internal_candidate());
  }
  if (from.stakedduration() != 0) {
    _internal_set_stakedduration(from._internal_stakedduration());
  }
  if (from.autostake() != 0) {
    _internal_set_autostake(from._internal_autostake());
  }
}

void Staking_CandidateRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Staking.CandidateRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking_CandidateRegister::CopyFrom(const Staking_CandidateRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Staking.CandidateRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_CandidateRegister::IsInitialized() const {
  return true;
}

void Staking_CandidateRegister::InternalSwap(Staking_CandidateRegister* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stakedamount_.Swap(&other->stakedamount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owneraddress_.Swap(&other->owneraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Staking_CandidateRegister, autostake_)
      + sizeof(Staking_CandidateRegister::autostake_)
      - PROTOBUF_FIELD_OFFSET(Staking_CandidateRegister, candidate_)>(
          reinterpret_cast<char*>(&candidate_),
          reinterpret_cast<char*>(&other->candidate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_CandidateRegister::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Staking::_Internal {
 public:
  static const ::TW::IoTeX::Proto::Staking_Create& stakecreate(const Staking* msg);
  static const ::TW::IoTeX::Proto::Staking_Reclaim& stakeunstake(const Staking* msg);
  static const ::TW::IoTeX::Proto::Staking_Reclaim& stakewithdraw(const Staking* msg);
  static const ::TW::IoTeX::Proto::Staking_AddDeposit& stakeadddeposit(const Staking* msg);
  static const ::TW::IoTeX::Proto::Staking_Restake& stakerestake(const Staking* msg);
  static const ::TW::IoTeX::Proto::Staking_ChangeCandidate& stakechangecandidate(const Staking* msg);
  static const ::TW::IoTeX::Proto::Staking_TransferOwnership& staketransferownership(const Staking* msg);
  static const ::TW::IoTeX::Proto::Staking_CandidateRegister& candidateregister(const Staking* msg);
  static const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& candidateupdate(const Staking* msg);
};

const ::TW::IoTeX::Proto::Staking_Create&
Staking::_Internal::stakecreate(const Staking* msg) {
  return *msg->message_.stakecreate_;
}
const ::TW::IoTeX::Proto::Staking_Reclaim&
Staking::_Internal::stakeunstake(const Staking* msg) {
  return *msg->message_.stakeunstake_;
}
const ::TW::IoTeX::Proto::Staking_Reclaim&
Staking::_Internal::stakewithdraw(const Staking* msg) {
  return *msg->message_.stakewithdraw_;
}
const ::TW::IoTeX::Proto::Staking_AddDeposit&
Staking::_Internal::stakeadddeposit(const Staking* msg) {
  return *msg->message_.stakeadddeposit_;
}
const ::TW::IoTeX::Proto::Staking_Restake&
Staking::_Internal::stakerestake(const Staking* msg) {
  return *msg->message_.stakerestake_;
}
const ::TW::IoTeX::Proto::Staking_ChangeCandidate&
Staking::_Internal::stakechangecandidate(const Staking* msg) {
  return *msg->message_.stakechangecandidate_;
}
const ::TW::IoTeX::Proto::Staking_TransferOwnership&
Staking::_Internal::staketransferownership(const Staking* msg) {
  return *msg->message_.staketransferownership_;
}
const ::TW::IoTeX::Proto::Staking_CandidateRegister&
Staking::_Internal::candidateregister(const Staking* msg) {
  return *msg->message_.candidateregister_;
}
const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo&
Staking::_Internal::candidateupdate(const Staking* msg) {
  return *msg->message_.candidateupdate_;
}
void Staking::set_allocated_stakecreate(::TW::IoTeX::Proto::Staking_Create* stakecreate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (stakecreate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakecreate);
    if (message_arena != submessage_arena) {
      stakecreate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakecreate, submessage_arena);
    }
    set_has_stakecreate();
    message_.stakecreate_ = stakecreate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.stakeCreate)
}
void Staking::set_allocated_stakeunstake(::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (stakeunstake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakeunstake);
    if (message_arena != submessage_arena) {
      stakeunstake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakeunstake, submessage_arena);
    }
    set_has_stakeunstake();
    message_.stakeunstake_ = stakeunstake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.stakeUnstake)
}
void Staking::set_allocated_stakewithdraw(::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (stakewithdraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakewithdraw);
    if (message_arena != submessage_arena) {
      stakewithdraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakewithdraw, submessage_arena);
    }
    set_has_stakewithdraw();
    message_.stakewithdraw_ = stakewithdraw;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.stakeWithdraw)
}
void Staking::set_allocated_stakeadddeposit(::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (stakeadddeposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakeadddeposit);
    if (message_arena != submessage_arena) {
      stakeadddeposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakeadddeposit, submessage_arena);
    }
    set_has_stakeadddeposit();
    message_.stakeadddeposit_ = stakeadddeposit;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.stakeAddDeposit)
}
void Staking::set_allocated_stakerestake(::TW::IoTeX::Proto::Staking_Restake* stakerestake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (stakerestake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakerestake);
    if (message_arena != submessage_arena) {
      stakerestake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakerestake, submessage_arena);
    }
    set_has_stakerestake();
    message_.stakerestake_ = stakerestake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.stakeRestake)
}
void Staking::set_allocated_stakechangecandidate(::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (stakechangecandidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakechangecandidate);
    if (message_arena != submessage_arena) {
      stakechangecandidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakechangecandidate, submessage_arena);
    }
    set_has_stakechangecandidate();
    message_.stakechangecandidate_ = stakechangecandidate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.stakeChangeCandidate)
}
void Staking::set_allocated_staketransferownership(::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (staketransferownership) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(staketransferownership);
    if (message_arena != submessage_arena) {
      staketransferownership = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staketransferownership, submessage_arena);
    }
    set_has_staketransferownership();
    message_.staketransferownership_ = staketransferownership;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.stakeTransferOwnership)
}
void Staking::set_allocated_candidateregister(::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (candidateregister) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidateregister);
    if (message_arena != submessage_arena) {
      candidateregister = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidateregister, submessage_arena);
    }
    set_has_candidateregister();
    message_.candidateregister_ = candidateregister;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.candidateRegister)
}
void Staking::set_allocated_candidateupdate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (candidateupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidateupdate);
    if (message_arena != submessage_arena) {
      candidateupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidateupdate, submessage_arena);
    }
    set_has_candidateupdate();
    message_.candidateupdate_ = candidateupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.candidateUpdate)
}
Staking::Staking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Staking)
}
Staking::Staking(const Staking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kStakeCreate: {
      _internal_mutable_stakecreate()->::TW::IoTeX::Proto::Staking_Create::MergeFrom(from._internal_stakecreate());
      break;
    }
    case kStakeUnstake: {
      _internal_mutable_stakeunstake()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakeunstake());
      break;
    }
    case kStakeWithdraw: {
      _internal_mutable_stakewithdraw()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakewithdraw());
      break;
    }
    case kStakeAddDeposit: {
      _internal_mutable_stakeadddeposit()->::TW::IoTeX::Proto::Staking_AddDeposit::MergeFrom(from._internal_stakeadddeposit());
      break;
    }
    case kStakeRestake: {
      _internal_mutable_stakerestake()->::TW::IoTeX::Proto::Staking_Restake::MergeFrom(from._internal_stakerestake());
      break;
    }
    case kStakeChangeCandidate: {
      _internal_mutable_stakechangecandidate()->::TW::IoTeX::Proto::Staking_ChangeCandidate::MergeFrom(from._internal_stakechangecandidate());
      break;
    }
    case kStakeTransferOwnership: {
      _internal_mutable_staketransferownership()->::TW::IoTeX::Proto::Staking_TransferOwnership::MergeFrom(from._internal_staketransferownership());
      break;
    }
    case kCandidateRegister: {
      _internal_mutable_candidateregister()->::TW::IoTeX::Proto::Staking_CandidateRegister::MergeFrom(from._internal_candidateregister());
      break;
    }
    case kCandidateUpdate: {
      _internal_mutable_candidateupdate()->::TW::IoTeX::Proto::Staking_CandidateBasicInfo::MergeFrom(from._internal_candidateupdate());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Staking)
}

void Staking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Staking_IoTeX_2eproto.base);
  clear_has_message();
}

Staking::~Staking() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Staking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Staking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Staking::ArenaDtor(void* object) {
  Staking* _this = reinterpret_cast< Staking* >(object);
  (void)_this;
}
void Staking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Staking& Staking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Staking_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Staking::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:TW.IoTeX.Proto.Staking)
  switch (message_case()) {
    case kStakeCreate: {
      if (GetArena() == nullptr) {
        delete message_.stakecreate_;
      }
      break;
    }
    case kStakeUnstake: {
      if (GetArena() == nullptr) {
        delete message_.stakeunstake_;
      }
      break;
    }
    case kStakeWithdraw: {
      if (GetArena() == nullptr) {
        delete message_.stakewithdraw_;
      }
      break;
    }
    case kStakeAddDeposit: {
      if (GetArena() == nullptr) {
        delete message_.stakeadddeposit_;
      }
      break;
    }
    case kStakeRestake: {
      if (GetArena() == nullptr) {
        delete message_.stakerestake_;
      }
      break;
    }
    case kStakeChangeCandidate: {
      if (GetArena() == nullptr) {
        delete message_.stakechangecandidate_;
      }
      break;
    }
    case kStakeTransferOwnership: {
      if (GetArena() == nullptr) {
        delete message_.staketransferownership_;
      }
      break;
    }
    case kCandidateRegister: {
      if (GetArena() == nullptr) {
        delete message_.candidateregister_;
      }
      break;
    }
    case kCandidateUpdate: {
      if (GetArena() == nullptr) {
        delete message_.candidateupdate_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Staking::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Staking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.IoTeX.Proto.Staking.Create stakeCreate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakecreate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakeunstake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakewithdraw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakeadddeposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakerestake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakechangecandidate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_staketransferownership(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidateregister(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidateupdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Staking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Staking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.IoTeX.Proto.Staking.Create stakeCreate = 1;
  if (_internal_has_stakecreate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stakecreate(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 2;
  if (_internal_has_stakeunstake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stakeunstake(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 3;
  if (_internal_has_stakewithdraw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stakewithdraw(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 4;
  if (_internal_has_stakeadddeposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stakeadddeposit(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 5;
  if (_internal_has_stakerestake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stakerestake(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 6;
  if (_internal_has_stakechangecandidate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stakechangecandidate(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 7;
  if (_internal_has_staketransferownership()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::staketransferownership(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 8;
  if (_internal_has_candidateregister()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::candidateregister(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 9;
  if (_internal_has_candidateupdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::candidateupdate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Staking)
  return target;
}

size_t Staking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Staking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .TW.IoTeX.Proto.Staking.Create stakeCreate = 1;
    case kStakeCreate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stakecreate_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 2;
    case kStakeUnstake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stakeunstake_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 3;
    case kStakeWithdraw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stakewithdraw_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 4;
    case kStakeAddDeposit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stakeadddeposit_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 5;
    case kStakeRestake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stakerestake_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 6;
    case kStakeChangeCandidate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stakechangecandidate_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 7;
    case kStakeTransferOwnership: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.staketransferownership_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 8;
    case kCandidateRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.candidateregister_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 9;
    case kCandidateUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.candidateupdate_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Staking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Staking)
  GOOGLE_DCHECK_NE(&from, this);
  const Staking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Staking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Staking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Staking)
    MergeFrom(*source);
  }
}

void Staking::MergeFrom(const Staking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Staking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kStakeCreate: {
      _internal_mutable_stakecreate()->::TW::IoTeX::Proto::Staking_Create::MergeFrom(from._internal_stakecreate());
      break;
    }
    case kStakeUnstake: {
      _internal_mutable_stakeunstake()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakeunstake());
      break;
    }
    case kStakeWithdraw: {
      _internal_mutable_stakewithdraw()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakewithdraw());
      break;
    }
    case kStakeAddDeposit: {
      _internal_mutable_stakeadddeposit()->::TW::IoTeX::Proto::Staking_AddDeposit::MergeFrom(from._internal_stakeadddeposit());
      break;
    }
    case kStakeRestake: {
      _internal_mutable_stakerestake()->::TW::IoTeX::Proto::Staking_Restake::MergeFrom(from._internal_stakerestake());
      break;
    }
    case kStakeChangeCandidate: {
      _internal_mutable_stakechangecandidate()->::TW::IoTeX::Proto::Staking_ChangeCandidate::MergeFrom(from._internal_stakechangecandidate());
      break;
    }
    case kStakeTransferOwnership: {
      _internal_mutable_staketransferownership()->::TW::IoTeX::Proto::Staking_TransferOwnership::MergeFrom(from._internal_staketransferownership());
      break;
    }
    case kCandidateRegister: {
      _internal_mutable_candidateregister()->::TW::IoTeX::Proto::Staking_CandidateRegister::MergeFrom(from._internal_candidateregister());
      break;
    }
    case kCandidateUpdate: {
      _internal_mutable_candidateupdate()->::TW::IoTeX::Proto::Staking_CandidateBasicInfo::MergeFrom(from._internal_candidateupdate());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void Staking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Staking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staking::CopyFrom(const Staking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Staking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking::IsInitialized() const {
  return true;
}

void Staking::InternalSwap(Staking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ContractCall::_Internal {
 public:
};

ContractCall::ContractCall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.ContractCall)
}
ContractCall::ContractCall(const ContractCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  contract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract().empty()) {
    contract_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.ContractCall)
}

void ContractCall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractCall_IoTeX_2eproto.base);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContractCall::~ContractCall() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.ContractCall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractCall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractCall::ArenaDtor(void* object) {
  ContractCall* _this = reinterpret_cast< ContractCall* >(object);
  (void)_this;
}
void ContractCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractCall& ContractCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractCall_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void ContractCall::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.ContractCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  contract_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.ContractCall.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.ContractCall.contract"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractCall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.ContractCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string amount = 1;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.ContractCall.amount");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_amount(), target);
  }

  // string contract = 2;
  if (this->contract().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract().data(), static_cast<int>(this->_internal_contract().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.ContractCall.contract");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.ContractCall)
  return target;
}

size_t ContractCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.ContractCall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 1;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string contract = 2;
  if (this->contract().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.ContractCall)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.ContractCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.ContractCall)
    MergeFrom(*source);
  }
}

void ContractCall::MergeFrom(const ContractCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.ContractCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.contract().size() > 0) {
    _internal_set_contract(from._internal_contract());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void ContractCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.ContractCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractCall::CopyFrom(const ContractCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.ContractCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCall::IsInitialized() const {
  return true;
}

void ContractCall::InternalSwap(ContractCall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_.Swap(&other->contract_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::IoTeX::Proto::Transfer& transfer(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::ContractCall& call(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::Staking_Create& stakecreate(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::Staking_Reclaim& stakeunstake(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::Staking_Reclaim& stakewithdraw(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::Staking_AddDeposit& stakeadddeposit(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::Staking_Restake& stakerestake(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::Staking_ChangeCandidate& stakechangecandidate(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::Staking_TransferOwnership& staketransferownership(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::Staking_CandidateRegister& candidateregister(const SigningInput* msg);
  static const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& candidateupdate(const SigningInput* msg);
};

const ::TW::IoTeX::Proto::Transfer&
SigningInput::_Internal::transfer(const SigningInput* msg) {
  return *msg->action_.transfer_;
}
const ::TW::IoTeX::Proto::ContractCall&
SigningInput::_Internal::call(const SigningInput* msg) {
  return *msg->action_.call_;
}
const ::TW::IoTeX::Proto::Staking_Create&
SigningInput::_Internal::stakecreate(const SigningInput* msg) {
  return *msg->action_.stakecreate_;
}
const ::TW::IoTeX::Proto::Staking_Reclaim&
SigningInput::_Internal::stakeunstake(const SigningInput* msg) {
  return *msg->action_.stakeunstake_;
}
const ::TW::IoTeX::Proto::Staking_Reclaim&
SigningInput::_Internal::stakewithdraw(const SigningInput* msg) {
  return *msg->action_.stakewithdraw_;
}
const ::TW::IoTeX::Proto::Staking_AddDeposit&
SigningInput::_Internal::stakeadddeposit(const SigningInput* msg) {
  return *msg->action_.stakeadddeposit_;
}
const ::TW::IoTeX::Proto::Staking_Restake&
SigningInput::_Internal::stakerestake(const SigningInput* msg) {
  return *msg->action_.stakerestake_;
}
const ::TW::IoTeX::Proto::Staking_ChangeCandidate&
SigningInput::_Internal::stakechangecandidate(const SigningInput* msg) {
  return *msg->action_.stakechangecandidate_;
}
const ::TW::IoTeX::Proto::Staking_TransferOwnership&
SigningInput::_Internal::staketransferownership(const SigningInput* msg) {
  return *msg->action_.staketransferownership_;
}
const ::TW::IoTeX::Proto::Staking_CandidateRegister&
SigningInput::_Internal::candidateregister(const SigningInput* msg) {
  return *msg->action_.candidateregister_;
}
const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo&
SigningInput::_Internal::candidateupdate(const SigningInput* msg) {
  return *msg->action_.candidateupdate_;
}
void SigningInput::set_allocated_transfer(::TW::IoTeX::Proto::Transfer* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    action_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.transfer)
}
void SigningInput::set_allocated_call(::TW::IoTeX::Proto::ContractCall* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(call);
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    set_has_call();
    action_.call_ = call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.call)
}
void SigningInput::set_allocated_stakecreate(::TW::IoTeX::Proto::Staking_Create* stakecreate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakecreate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakecreate);
    if (message_arena != submessage_arena) {
      stakecreate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakecreate, submessage_arena);
    }
    set_has_stakecreate();
    action_.stakecreate_ = stakecreate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.stakeCreate)
}
void SigningInput::set_allocated_stakeunstake(::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakeunstake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakeunstake);
    if (message_arena != submessage_arena) {
      stakeunstake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakeunstake, submessage_arena);
    }
    set_has_stakeunstake();
    action_.stakeunstake_ = stakeunstake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.stakeUnstake)
}
void SigningInput::set_allocated_stakewithdraw(::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakewithdraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakewithdraw);
    if (message_arena != submessage_arena) {
      stakewithdraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakewithdraw, submessage_arena);
    }
    set_has_stakewithdraw();
    action_.stakewithdraw_ = stakewithdraw;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.stakeWithdraw)
}
void SigningInput::set_allocated_stakeadddeposit(::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakeadddeposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakeadddeposit);
    if (message_arena != submessage_arena) {
      stakeadddeposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakeadddeposit, submessage_arena);
    }
    set_has_stakeadddeposit();
    action_.stakeadddeposit_ = stakeadddeposit;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.stakeAddDeposit)
}
void SigningInput::set_allocated_stakerestake(::TW::IoTeX::Proto::Staking_Restake* stakerestake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakerestake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakerestake);
    if (message_arena != submessage_arena) {
      stakerestake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakerestake, submessage_arena);
    }
    set_has_stakerestake();
    action_.stakerestake_ = stakerestake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.stakeRestake)
}
void SigningInput::set_allocated_stakechangecandidate(::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakechangecandidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakechangecandidate);
    if (message_arena != submessage_arena) {
      stakechangecandidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakechangecandidate, submessage_arena);
    }
    set_has_stakechangecandidate();
    action_.stakechangecandidate_ = stakechangecandidate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.stakeChangeCandidate)
}
void SigningInput::set_allocated_staketransferownership(::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (staketransferownership) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(staketransferownership);
    if (message_arena != submessage_arena) {
      staketransferownership = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staketransferownership, submessage_arena);
    }
    set_has_staketransferownership();
    action_.staketransferownership_ = staketransferownership;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.stakeTransferOwnership)
}
void SigningInput::set_allocated_candidateregister(::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (candidateregister) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidateregister);
    if (message_arena != submessage_arena) {
      candidateregister = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidateregister, submessage_arena);
    }
    set_has_candidateregister();
    action_.candidateregister_ = candidateregister;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.candidateRegister)
}
void SigningInput::set_allocated_candidateupdate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (candidateupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidateupdate);
    if (message_arena != submessage_arena) {
      candidateupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidateupdate, submessage_arena);
    }
    set_has_candidateupdate();
    action_.candidateupdate_ = candidateupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.candidateUpdate)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gasprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gasprice().empty()) {
    gasprice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gasprice(), 
      GetArena());
  }
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_privatekey().empty()) {
    privatekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_privatekey(), 
      GetArena());
  }
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(version_));
  clear_has_action();
  switch (from.action_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::IoTeX::Proto::Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kCall: {
      _internal_mutable_call()->::TW::IoTeX::Proto::ContractCall::MergeFrom(from._internal_call());
      break;
    }
    case kStakeCreate: {
      _internal_mutable_stakecreate()->::TW::IoTeX::Proto::Staking_Create::MergeFrom(from._internal_stakecreate());
      break;
    }
    case kStakeUnstake: {
      _internal_mutable_stakeunstake()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakeunstake());
      break;
    }
    case kStakeWithdraw: {
      _internal_mutable_stakewithdraw()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakewithdraw());
      break;
    }
    case kStakeAddDeposit: {
      _internal_mutable_stakeadddeposit()->::TW::IoTeX::Proto::Staking_AddDeposit::MergeFrom(from._internal_stakeadddeposit());
      break;
    }
    case kStakeRestake: {
      _internal_mutable_stakerestake()->::TW::IoTeX::Proto::Staking_Restake::MergeFrom(from._internal_stakerestake());
      break;
    }
    case kStakeChangeCandidate: {
      _internal_mutable_stakechangecandidate()->::TW::IoTeX::Proto::Staking_ChangeCandidate::MergeFrom(from._internal_stakechangecandidate());
      break;
    }
    case kStakeTransferOwnership: {
      _internal_mutable_staketransferownership()->::TW::IoTeX::Proto::Staking_TransferOwnership::MergeFrom(from._internal_staketransferownership());
      break;
    }
    case kCandidateRegister: {
      _internal_mutable_candidateregister()->::TW::IoTeX::Proto::Staking_CandidateRegister::MergeFrom(from._internal_candidateregister());
      break;
    }
    case kCandidateUpdate: {
      _internal_mutable_candidateupdate()->::TW::IoTeX::Proto::Staking_CandidateBasicInfo::MergeFrom(from._internal_candidateupdate());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_IoTeX_2eproto.base);
  gasprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(version_));
  clear_has_action();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gasprice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privatekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_action()) {
    clear_action();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:TW.IoTeX.Proto.SigningInput)
  switch (action_case()) {
    case kTransfer: {
      if (GetArena() == nullptr) {
        delete action_.transfer_;
      }
      break;
    }
    case kCall: {
      if (GetArena() == nullptr) {
        delete action_.call_;
      }
      break;
    }
    case kStakeCreate: {
      if (GetArena() == nullptr) {
        delete action_.stakecreate_;
      }
      break;
    }
    case kStakeUnstake: {
      if (GetArena() == nullptr) {
        delete action_.stakeunstake_;
      }
      break;
    }
    case kStakeWithdraw: {
      if (GetArena() == nullptr) {
        delete action_.stakewithdraw_;
      }
      break;
    }
    case kStakeAddDeposit: {
      if (GetArena() == nullptr) {
        delete action_.stakeadddeposit_;
      }
      break;
    }
    case kStakeRestake: {
      if (GetArena() == nullptr) {
        delete action_.stakerestake_;
      }
      break;
    }
    case kStakeChangeCandidate: {
      if (GetArena() == nullptr) {
        delete action_.stakechangecandidate_;
      }
      break;
    }
    case kStakeTransferOwnership: {
      if (GetArena() == nullptr) {
        delete action_.staketransferownership_;
      }
      break;
    }
    case kCandidateRegister: {
      if (GetArena() == nullptr) {
        delete action_.candidateregister_;
      }
      break;
    }
    case kCandidateUpdate: {
      if (GetArena() == nullptr) {
        delete action_.candidateupdate_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gasprice_.ClearToEmpty();
  privatekey_.ClearToEmpty();
  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(version_));
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gasLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gaslimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gasPrice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_gasprice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.SigningInput.gasPrice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes privateKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Transfer transfer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.ContractCall call = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakecreate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakeunstake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakewithdraw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakeadddeposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakerestake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakechangecandidate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_staketransferownership(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidateregister(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidateupdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // uint64 gasLimit = 3;
  if (this->gaslimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gaslimit(), target);
  }

  // string gasPrice = 4;
  if (this->gasprice().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gasprice().data(), static_cast<int>(this->_internal_gasprice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.SigningInput.gasPrice");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_gasprice(), target);
  }

  // bytes privateKey = 5;
  if (this->privatekey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_privatekey(), target);
  }

  // .TW.IoTeX.Proto.Transfer transfer = 10;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::transfer(this), target, stream);
  }

  // .TW.IoTeX.Proto.ContractCall call = 12;
  if (_internal_has_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::call(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
  if (_internal_has_stakecreate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::stakecreate(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
  if (_internal_has_stakeunstake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::stakeunstake(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
  if (_internal_has_stakewithdraw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::stakewithdraw(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
  if (_internal_has_stakeadddeposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::stakeadddeposit(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
  if (_internal_has_stakerestake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::stakerestake(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
  if (_internal_has_stakechangecandidate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::stakechangecandidate(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
  if (_internal_has_staketransferownership()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::staketransferownership(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
  if (_internal_has_candidateregister()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::candidateregister(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
  if (_internal_has_candidateupdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::candidateupdate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gasPrice = 4;
  if (this->gasprice().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gasprice());
  }

  // bytes privateKey = 5;
  if (this->privatekey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_privatekey());
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // uint64 gasLimit = 3;
  if (this->gaslimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gaslimit());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  switch (action_case()) {
    // .TW.IoTeX.Proto.Transfer transfer = 10;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.transfer_);
      break;
    }
    // .TW.IoTeX.Proto.ContractCall call = 12;
    case kCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.call_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
    case kStakeCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakecreate_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
    case kStakeUnstake: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakeunstake_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
    case kStakeWithdraw: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakewithdraw_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
    case kStakeAddDeposit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakeadddeposit_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
    case kStakeRestake: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakerestake_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
    case kStakeChangeCandidate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakechangecandidate_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
    case kStakeTransferOwnership: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.staketransferownership_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
    case kCandidateRegister: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.candidateregister_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
    case kCandidateUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.candidateupdate_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gasprice().size() > 0) {
    _internal_set_gasprice(from._internal_gasprice());
  }
  if (from.privatekey().size() > 0) {
    _internal_set_privatekey(from._internal_privatekey());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.gaslimit() != 0) {
    _internal_set_gaslimit(from._internal_gaslimit());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  switch (from.action_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::IoTeX::Proto::Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kCall: {
      _internal_mutable_call()->::TW::IoTeX::Proto::ContractCall::MergeFrom(from._internal_call());
      break;
    }
    case kStakeCreate: {
      _internal_mutable_stakecreate()->::TW::IoTeX::Proto::Staking_Create::MergeFrom(from._internal_stakecreate());
      break;
    }
    case kStakeUnstake: {
      _internal_mutable_stakeunstake()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakeunstake());
      break;
    }
    case kStakeWithdraw: {
      _internal_mutable_stakewithdraw()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakewithdraw());
      break;
    }
    case kStakeAddDeposit: {
      _internal_mutable_stakeadddeposit()->::TW::IoTeX::Proto::Staking_AddDeposit::MergeFrom(from._internal_stakeadddeposit());
      break;
    }
    case kStakeRestake: {
      _internal_mutable_stakerestake()->::TW::IoTeX::Proto::Staking_Restake::MergeFrom(from._internal_stakerestake());
      break;
    }
    case kStakeChangeCandidate: {
      _internal_mutable_stakechangecandidate()->::TW::IoTeX::Proto::Staking_ChangeCandidate::MergeFrom(from._internal_stakechangecandidate());
      break;
    }
    case kStakeTransferOwnership: {
      _internal_mutable_staketransferownership()->::TW::IoTeX::Proto::Staking_TransferOwnership::MergeFrom(from._internal_staketransferownership());
      break;
    }
    case kCandidateRegister: {
      _internal_mutable_candidateregister()->::TW::IoTeX::Proto::Staking_CandidateRegister::MergeFrom(from._internal_candidateregister());
      break;
    }
    case kCandidateUpdate: {
      _internal_mutable_candidateupdate()->::TW::IoTeX::Proto::Staking_CandidateBasicInfo::MergeFrom(from._internal_candidateupdate());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gasprice_.Swap(&other->gasprice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  privatekey_.Swap(&other->privatekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, version_)
      + sizeof(SigningInput::version_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, nonce_)>(
          reinterpret_cast<char*>(&nonce_),
          reinterpret_cast<char*>(&other->nonce_));
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_IoTeX_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActionCore::_Internal {
 public:
  static const ::TW::IoTeX::Proto::Transfer& transfer(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::ContractCall& execution(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::Staking_Create& stakecreate(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::Staking_Reclaim& stakeunstake(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::Staking_Reclaim& stakewithdraw(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::Staking_AddDeposit& stakeadddeposit(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::Staking_Restake& stakerestake(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::Staking_ChangeCandidate& stakechangecandidate(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::Staking_TransferOwnership& staketransferownership(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::Staking_CandidateRegister& candidateregister(const ActionCore* msg);
  static const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& candidateupdate(const ActionCore* msg);
};

const ::TW::IoTeX::Proto::Transfer&
ActionCore::_Internal::transfer(const ActionCore* msg) {
  return *msg->action_.transfer_;
}
const ::TW::IoTeX::Proto::ContractCall&
ActionCore::_Internal::execution(const ActionCore* msg) {
  return *msg->action_.execution_;
}
const ::TW::IoTeX::Proto::Staking_Create&
ActionCore::_Internal::stakecreate(const ActionCore* msg) {
  return *msg->action_.stakecreate_;
}
const ::TW::IoTeX::Proto::Staking_Reclaim&
ActionCore::_Internal::stakeunstake(const ActionCore* msg) {
  return *msg->action_.stakeunstake_;
}
const ::TW::IoTeX::Proto::Staking_Reclaim&
ActionCore::_Internal::stakewithdraw(const ActionCore* msg) {
  return *msg->action_.stakewithdraw_;
}
const ::TW::IoTeX::Proto::Staking_AddDeposit&
ActionCore::_Internal::stakeadddeposit(const ActionCore* msg) {
  return *msg->action_.stakeadddeposit_;
}
const ::TW::IoTeX::Proto::Staking_Restake&
ActionCore::_Internal::stakerestake(const ActionCore* msg) {
  return *msg->action_.stakerestake_;
}
const ::TW::IoTeX::Proto::Staking_ChangeCandidate&
ActionCore::_Internal::stakechangecandidate(const ActionCore* msg) {
  return *msg->action_.stakechangecandidate_;
}
const ::TW::IoTeX::Proto::Staking_TransferOwnership&
ActionCore::_Internal::staketransferownership(const ActionCore* msg) {
  return *msg->action_.staketransferownership_;
}
const ::TW::IoTeX::Proto::Staking_CandidateRegister&
ActionCore::_Internal::candidateregister(const ActionCore* msg) {
  return *msg->action_.candidateregister_;
}
const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo&
ActionCore::_Internal::candidateupdate(const ActionCore* msg) {
  return *msg->action_.candidateupdate_;
}
void ActionCore::set_allocated_transfer(::TW::IoTeX::Proto::Transfer* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    action_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.transfer)
}
void ActionCore::set_allocated_execution(::TW::IoTeX::Proto::ContractCall* execution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (execution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution);
    if (message_arena != submessage_arena) {
      execution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution, submessage_arena);
    }
    set_has_execution();
    action_.execution_ = execution;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.execution)
}
void ActionCore::set_allocated_stakecreate(::TW::IoTeX::Proto::Staking_Create* stakecreate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakecreate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakecreate);
    if (message_arena != submessage_arena) {
      stakecreate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakecreate, submessage_arena);
    }
    set_has_stakecreate();
    action_.stakecreate_ = stakecreate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.stakeCreate)
}
void ActionCore::set_allocated_stakeunstake(::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakeunstake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakeunstake);
    if (message_arena != submessage_arena) {
      stakeunstake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakeunstake, submessage_arena);
    }
    set_has_stakeunstake();
    action_.stakeunstake_ = stakeunstake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.stakeUnstake)
}
void ActionCore::set_allocated_stakewithdraw(::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakewithdraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakewithdraw);
    if (message_arena != submessage_arena) {
      stakewithdraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakewithdraw, submessage_arena);
    }
    set_has_stakewithdraw();
    action_.stakewithdraw_ = stakewithdraw;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.stakeWithdraw)
}
void ActionCore::set_allocated_stakeadddeposit(::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakeadddeposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakeadddeposit);
    if (message_arena != submessage_arena) {
      stakeadddeposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakeadddeposit, submessage_arena);
    }
    set_has_stakeadddeposit();
    action_.stakeadddeposit_ = stakeadddeposit;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.stakeAddDeposit)
}
void ActionCore::set_allocated_stakerestake(::TW::IoTeX::Proto::Staking_Restake* stakerestake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakerestake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakerestake);
    if (message_arena != submessage_arena) {
      stakerestake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakerestake, submessage_arena);
    }
    set_has_stakerestake();
    action_.stakerestake_ = stakerestake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.stakeRestake)
}
void ActionCore::set_allocated_stakechangecandidate(::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (stakechangecandidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stakechangecandidate);
    if (message_arena != submessage_arena) {
      stakechangecandidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakechangecandidate, submessage_arena);
    }
    set_has_stakechangecandidate();
    action_.stakechangecandidate_ = stakechangecandidate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.stakeChangeCandidate)
}
void ActionCore::set_allocated_staketransferownership(::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (staketransferownership) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(staketransferownership);
    if (message_arena != submessage_arena) {
      staketransferownership = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staketransferownership, submessage_arena);
    }
    set_has_staketransferownership();
    action_.staketransferownership_ = staketransferownership;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.stakeTransferOwnership)
}
void ActionCore::set_allocated_candidateregister(::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (candidateregister) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidateregister);
    if (message_arena != submessage_arena) {
      candidateregister = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidateregister, submessage_arena);
    }
    set_has_candidateregister();
    action_.candidateregister_ = candidateregister;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.candidateRegister)
}
void ActionCore::set_allocated_candidateupdate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (candidateupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidateupdate);
    if (message_arena != submessage_arena) {
      candidateupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidateupdate, submessage_arena);
    }
    set_has_candidateupdate();
    action_.candidateupdate_ = candidateupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.candidateUpdate)
}
ActionCore::ActionCore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.ActionCore)
}
ActionCore::ActionCore(const ActionCore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gasprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gasprice().empty()) {
    gasprice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gasprice(), 
      GetArena());
  }
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(version_));
  clear_has_action();
  switch (from.action_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::IoTeX::Proto::Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kExecution: {
      _internal_mutable_execution()->::TW::IoTeX::Proto::ContractCall::MergeFrom(from._internal_execution());
      break;
    }
    case kStakeCreate: {
      _internal_mutable_stakecreate()->::TW::IoTeX::Proto::Staking_Create::MergeFrom(from._internal_stakecreate());
      break;
    }
    case kStakeUnstake: {
      _internal_mutable_stakeunstake()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakeunstake());
      break;
    }
    case kStakeWithdraw: {
      _internal_mutable_stakewithdraw()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakewithdraw());
      break;
    }
    case kStakeAddDeposit: {
      _internal_mutable_stakeadddeposit()->::TW::IoTeX::Proto::Staking_AddDeposit::MergeFrom(from._internal_stakeadddeposit());
      break;
    }
    case kStakeRestake: {
      _internal_mutable_stakerestake()->::TW::IoTeX::Proto::Staking_Restake::MergeFrom(from._internal_stakerestake());
      break;
    }
    case kStakeChangeCandidate: {
      _internal_mutable_stakechangecandidate()->::TW::IoTeX::Proto::Staking_ChangeCandidate::MergeFrom(from._internal_stakechangecandidate());
      break;
    }
    case kStakeTransferOwnership: {
      _internal_mutable_staketransferownership()->::TW::IoTeX::Proto::Staking_TransferOwnership::MergeFrom(from._internal_staketransferownership());
      break;
    }
    case kCandidateRegister: {
      _internal_mutable_candidateregister()->::TW::IoTeX::Proto::Staking_CandidateRegister::MergeFrom(from._internal_candidateregister());
      break;
    }
    case kCandidateUpdate: {
      _internal_mutable_candidateupdate()->::TW::IoTeX::Proto::Staking_CandidateBasicInfo::MergeFrom(from._internal_candidateupdate());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.ActionCore)
}

void ActionCore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionCore_IoTeX_2eproto.base);
  gasprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(version_));
  clear_has_action();
}

ActionCore::~ActionCore() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.ActionCore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActionCore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gasprice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_action()) {
    clear_action();
  }
}

void ActionCore::ArenaDtor(void* object) {
  ActionCore* _this = reinterpret_cast< ActionCore* >(object);
  (void)_this;
}
void ActionCore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionCore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionCore& ActionCore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionCore_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void ActionCore::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:TW.IoTeX.Proto.ActionCore)
  switch (action_case()) {
    case kTransfer: {
      if (GetArena() == nullptr) {
        delete action_.transfer_;
      }
      break;
    }
    case kExecution: {
      if (GetArena() == nullptr) {
        delete action_.execution_;
      }
      break;
    }
    case kStakeCreate: {
      if (GetArena() == nullptr) {
        delete action_.stakecreate_;
      }
      break;
    }
    case kStakeUnstake: {
      if (GetArena() == nullptr) {
        delete action_.stakeunstake_;
      }
      break;
    }
    case kStakeWithdraw: {
      if (GetArena() == nullptr) {
        delete action_.stakewithdraw_;
      }
      break;
    }
    case kStakeAddDeposit: {
      if (GetArena() == nullptr) {
        delete action_.stakeadddeposit_;
      }
      break;
    }
    case kStakeRestake: {
      if (GetArena() == nullptr) {
        delete action_.stakerestake_;
      }
      break;
    }
    case kStakeChangeCandidate: {
      if (GetArena() == nullptr) {
        delete action_.stakechangecandidate_;
      }
      break;
    }
    case kStakeTransferOwnership: {
      if (GetArena() == nullptr) {
        delete action_.staketransferownership_;
      }
      break;
    }
    case kCandidateRegister: {
      if (GetArena() == nullptr) {
        delete action_.candidateregister_;
      }
      break;
    }
    case kCandidateUpdate: {
      if (GetArena() == nullptr) {
        delete action_.candidateupdate_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionCore::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.ActionCore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gasprice_.ClearToEmpty();
  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(version_));
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionCore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gasLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gaslimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gasPrice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_gasprice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.IoTeX.Proto.ActionCore.gasPrice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Transfer transfer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.ContractCall execution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakecreate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakeunstake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakewithdraw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakeadddeposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakerestake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakechangecandidate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_staketransferownership(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidateregister(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidateupdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionCore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.ActionCore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // uint64 gasLimit = 3;
  if (this->gaslimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gaslimit(), target);
  }

  // string gasPrice = 4;
  if (this->gasprice().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gasprice().data(), static_cast<int>(this->_internal_gasprice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.IoTeX.Proto.ActionCore.gasPrice");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_gasprice(), target);
  }

  // .TW.IoTeX.Proto.Transfer transfer = 10;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::transfer(this), target, stream);
  }

  // .TW.IoTeX.Proto.ContractCall execution = 12;
  if (_internal_has_execution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::execution(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
  if (_internal_has_stakecreate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::stakecreate(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
  if (_internal_has_stakeunstake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::stakeunstake(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
  if (_internal_has_stakewithdraw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::stakewithdraw(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
  if (_internal_has_stakeadddeposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::stakeadddeposit(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
  if (_internal_has_stakerestake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::stakerestake(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
  if (_internal_has_stakechangecandidate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::stakechangecandidate(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
  if (_internal_has_staketransferownership()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::staketransferownership(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
  if (_internal_has_candidateregister()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::candidateregister(this), target, stream);
  }

  // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
  if (_internal_has_candidateupdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::candidateupdate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.ActionCore)
  return target;
}

size_t ActionCore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.ActionCore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gasPrice = 4;
  if (this->gasprice().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gasprice());
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // uint64 gasLimit = 3;
  if (this->gaslimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gaslimit());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  switch (action_case()) {
    // .TW.IoTeX.Proto.Transfer transfer = 10;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.transfer_);
      break;
    }
    // .TW.IoTeX.Proto.ContractCall execution = 12;
    case kExecution: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.execution_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
    case kStakeCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakecreate_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
    case kStakeUnstake: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakeunstake_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
    case kStakeWithdraw: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakewithdraw_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
    case kStakeAddDeposit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakeadddeposit_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
    case kStakeRestake: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakerestake_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
    case kStakeChangeCandidate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stakechangecandidate_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
    case kStakeTransferOwnership: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.staketransferownership_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
    case kCandidateRegister: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.candidateregister_);
      break;
    }
    // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
    case kCandidateUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.candidateupdate_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionCore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.ActionCore)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionCore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionCore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.ActionCore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.ActionCore)
    MergeFrom(*source);
  }
}

void ActionCore::MergeFrom(const ActionCore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.ActionCore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gasprice().size() > 0) {
    _internal_set_gasprice(from._internal_gasprice());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.gaslimit() != 0) {
    _internal_set_gaslimit(from._internal_gaslimit());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  switch (from.action_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::IoTeX::Proto::Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kExecution: {
      _internal_mutable_execution()->::TW::IoTeX::Proto::ContractCall::MergeFrom(from._internal_execution());
      break;
    }
    case kStakeCreate: {
      _internal_mutable_stakecreate()->::TW::IoTeX::Proto::Staking_Create::MergeFrom(from._internal_stakecreate());
      break;
    }
    case kStakeUnstake: {
      _internal_mutable_stakeunstake()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakeunstake());
      break;
    }
    case kStakeWithdraw: {
      _internal_mutable_stakewithdraw()->::TW::IoTeX::Proto::Staking_Reclaim::MergeFrom(from._internal_stakewithdraw());
      break;
    }
    case kStakeAddDeposit: {
      _internal_mutable_stakeadddeposit()->::TW::IoTeX::Proto::Staking_AddDeposit::MergeFrom(from._internal_stakeadddeposit());
      break;
    }
    case kStakeRestake: {
      _internal_mutable_stakerestake()->::TW::IoTeX::Proto::Staking_Restake::MergeFrom(from._internal_stakerestake());
      break;
    }
    case kStakeChangeCandidate: {
      _internal_mutable_stakechangecandidate()->::TW::IoTeX::Proto::Staking_ChangeCandidate::MergeFrom(from._internal_stakechangecandidate());
      break;
    }
    case kStakeTransferOwnership: {
      _internal_mutable_staketransferownership()->::TW::IoTeX::Proto::Staking_TransferOwnership::MergeFrom(from._internal_staketransferownership());
      break;
    }
    case kCandidateRegister: {
      _internal_mutable_candidateregister()->::TW::IoTeX::Proto::Staking_CandidateRegister::MergeFrom(from._internal_candidateregister());
      break;
    }
    case kCandidateUpdate: {
      _internal_mutable_candidateupdate()->::TW::IoTeX::Proto::Staking_CandidateBasicInfo::MergeFrom(from._internal_candidateupdate());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ActionCore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.ActionCore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionCore::CopyFrom(const ActionCore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.ActionCore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCore::IsInitialized() const {
  return true;
}

void ActionCore::InternalSwap(ActionCore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gasprice_.Swap(&other->gasprice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionCore, version_)
      + sizeof(ActionCore::version_)
      - PROTOBUF_FIELD_OFFSET(ActionCore, nonce_)>(
          reinterpret_cast<char*>(&nonce_),
          reinterpret_cast<char*>(&other->nonce_));
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionCore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Action::_Internal {
 public:
  static const ::TW::IoTeX::Proto::ActionCore& core(const Action* msg);
};

const ::TW::IoTeX::Proto::ActionCore&
Action::_Internal::core(const Action* msg) {
  return *msg->core_;
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.IoTeX.Proto.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  senderpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_senderpubkey().empty()) {
    senderpubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_senderpubkey(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  if (from._internal_has_core()) {
    core_ = new ::TW::IoTeX::Proto::ActionCore(*from.core_);
  } else {
    core_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.IoTeX.Proto.Action)
}

void Action::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Action_IoTeX_2eproto.base);
  senderpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  core_ = nullptr;
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:TW.IoTeX.Proto.Action)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  senderpubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete core_;
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Action_IoTeX_2eproto.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.IoTeX.Proto.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  senderpubkey_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArena() == nullptr && core_ != nullptr) {
    delete core_;
  }
  core_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.IoTeX.Proto.ActionCore core = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_core(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes senderPubKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_senderpubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.IoTeX.Proto.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.IoTeX.Proto.ActionCore core = 1;
  if (this->has_core()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::core(this), target, stream);
  }

  // bytes senderPubKey = 2;
  if (this->senderpubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_senderpubkey(), target);
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.IoTeX.Proto.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.IoTeX.Proto.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes senderPubKey = 2;
  if (this->senderpubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_senderpubkey());
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .TW.IoTeX.Proto.ActionCore core = 1;
  if (this->has_core()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *core_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.IoTeX.Proto.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.IoTeX.Proto.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.IoTeX.Proto.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.IoTeX.Proto.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.senderpubkey().size() > 0) {
    _internal_set_senderpubkey(from._internal_senderpubkey());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.has_core()) {
    _internal_mutable_core()->::TW::IoTeX::Proto::ActionCore::MergeFrom(from._internal_core());
  }
}

void Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.IoTeX.Proto.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.IoTeX.Proto.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  senderpubkey_.Swap(&other->senderpubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(core_, other->core_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace IoTeX
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Transfer* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Staking_Create* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Create >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Staking_Create >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Staking_Reclaim* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Reclaim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Staking_Reclaim >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Staking_AddDeposit* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_AddDeposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Staking_AddDeposit >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Staking_Restake* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Restake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Staking_Restake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Staking_ChangeCandidate* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_ChangeCandidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Staking_ChangeCandidate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Staking_TransferOwnership* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_TransferOwnership >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Staking_TransferOwnership >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_CandidateBasicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Staking_CandidateBasicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Staking_CandidateRegister* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_CandidateRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Staking_CandidateRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Staking* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Staking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Staking >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::ContractCall* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::ContractCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::ContractCall >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::SigningOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::ActionCore* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::ActionCore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::ActionCore >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::IoTeX::Proto::Action* Arena::CreateMaybeMessage< ::TW::IoTeX::Proto::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::IoTeX::Proto::Action >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
