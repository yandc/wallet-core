// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tezos.proto

#include "Tezos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Tezos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegationOperationData_Tezos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tezos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Operation_Tezos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tezos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationList_Tezos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tezos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RevealOperationData_Tezos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tezos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionOperationData_Tezos_2eproto;
namespace TW {
namespace Tezos {
namespace Proto {
class SigningInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningInput> _instance;
} _SigningInput_default_instance_;
class SigningOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningOutput> _instance;
} _SigningOutput_default_instance_;
class OperationListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationList> _instance;
} _OperationList_default_instance_;
class OperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Operation> _instance;
} _Operation_default_instance_;
class TransactionOperationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionOperationData> _instance;
} _TransactionOperationData_default_instance_;
class RevealOperationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevealOperationData> _instance;
} _RevealOperationData_default_instance_;
class DelegationOperationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegationOperationData> _instance;
} _DelegationOperationData_default_instance_;
}  // namespace Proto
}  // namespace Tezos
}  // namespace TW
static void InitDefaultsscc_info_DelegationOperationData_Tezos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tezos::Proto::_DelegationOperationData_default_instance_;
    new (ptr) ::TW::Tezos::Proto::DelegationOperationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegationOperationData_Tezos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelegationOperationData_Tezos_2eproto}, {}};

static void InitDefaultsscc_info_Operation_Tezos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tezos::Proto::_Operation_default_instance_;
    new (ptr) ::TW::Tezos::Proto::Operation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Operation_Tezos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Operation_Tezos_2eproto}, {
      &scc_info_RevealOperationData_Tezos_2eproto.base,
      &scc_info_TransactionOperationData_Tezos_2eproto.base,
      &scc_info_DelegationOperationData_Tezos_2eproto.base,}};

static void InitDefaultsscc_info_OperationList_Tezos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tezos::Proto::_OperationList_default_instance_;
    new (ptr) ::TW::Tezos::Proto::OperationList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationList_Tezos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperationList_Tezos_2eproto}, {
      &scc_info_Operation_Tezos_2eproto.base,}};

static void InitDefaultsscc_info_RevealOperationData_Tezos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tezos::Proto::_RevealOperationData_default_instance_;
    new (ptr) ::TW::Tezos::Proto::RevealOperationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RevealOperationData_Tezos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RevealOperationData_Tezos_2eproto}, {}};

static void InitDefaultsscc_info_SigningInput_Tezos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tezos::Proto::_SigningInput_default_instance_;
    new (ptr) ::TW::Tezos::Proto::SigningInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SigningInput_Tezos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SigningInput_Tezos_2eproto}, {
      &scc_info_OperationList_Tezos_2eproto.base,}};

static void InitDefaultsscc_info_SigningOutput_Tezos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tezos::Proto::_SigningOutput_default_instance_;
    new (ptr) ::TW::Tezos::Proto::SigningOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningOutput_Tezos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningOutput_Tezos_2eproto}, {}};

static void InitDefaultsscc_info_TransactionOperationData_Tezos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::Tezos::Proto::_TransactionOperationData_default_instance_;
    new (ptr) ::TW::Tezos::Proto::TransactionOperationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionOperationData_Tezos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionOperationData_Tezos_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Tezos_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Tezos_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Tezos_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Tezos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningInput, operation_list_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningInput, private_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningOutput, encoded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::OperationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::OperationList, branch_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::OperationList, operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, counter_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, source_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, storage_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, kind_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, operation_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TransactionOperationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TransactionOperationData, destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TransactionOperationData, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::RevealOperationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::RevealOperationData, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::DelegationOperationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::DelegationOperationData, delegate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TW::Tezos::Proto::SigningInput)},
  { 7, -1, sizeof(::TW::Tezos::Proto::SigningOutput)},
  { 13, -1, sizeof(::TW::Tezos::Proto::OperationList)},
  { 20, -1, sizeof(::TW::Tezos::Proto::Operation)},
  { 35, -1, sizeof(::TW::Tezos::Proto::TransactionOperationData)},
  { 42, -1, sizeof(::TW::Tezos::Proto::RevealOperationData)},
  { 48, -1, sizeof(::TW::Tezos::Proto::DelegationOperationData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_SigningOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_OperationList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_TransactionOperationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_RevealOperationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_DelegationOperationData_default_instance_),
};

const char descriptor_table_protodef_Tezos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Tezos.proto\022\016TW.Tezos.Proto\"Z\n\014Signing"
  "Input\0225\n\016operation_list\030\001 \001(\0132\035.TW.Tezos"
  ".Proto.OperationList\022\023\n\013private_key\030\002 \001("
  "\014\" \n\rSigningOutput\022\017\n\007encoded\030\001 \001(\014\"N\n\rO"
  "perationList\022\016\n\006branch\030\001 \001(\t\022-\n\noperatio"
  "ns\030\002 \003(\0132\031.TW.Tezos.Proto.Operation\"\337\003\n\t"
  "Operation\022\017\n\007counter\030\001 \001(\003\022\016\n\006source\030\002 \001"
  "(\t\022\013\n\003fee\030\003 \001(\003\022\021\n\tgas_limit\030\004 \001(\003\022\025\n\rst"
  "orage_limit\030\005 \001(\003\0225\n\004kind\030\007 \001(\0162\'.TW.Tez"
  "os.Proto.Operation.OperationKind\022D\n\025reve"
  "al_operation_data\030\010 \001(\0132#.TW.Tezos.Proto"
  ".RevealOperationDataH\000\022N\n\032transaction_op"
  "eration_data\030\t \001(\0132(.TW.Tezos.Proto.Tran"
  "sactionOperationDataH\000\022L\n\031delegation_ope"
  "ration_data\030\013 \001(\0132\'.TW.Tezos.Proto.Deleg"
  "ationOperationDataH\000\"M\n\rOperationKind\022\017\n"
  "\013ENDORSEMENT\020\000\022\n\n\006REVEAL\020k\022\017\n\013TRANSACTIO"
  "N\020l\022\016\n\nDELEGATION\020nB\020\n\016operation_data\"\?\n"
  "\030TransactionOperationData\022\023\n\013destination"
  "\030\001 \001(\t\022\016\n\006amount\030\002 \001(\003\")\n\023RevealOperatio"
  "nData\022\022\n\npublic_key\030\001 \001(\014\"+\n\027DelegationO"
  "perationData\022\020\n\010delegate\030\001 \001(\tB\027\n\025wallet"
  ".core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Tezos_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Tezos_2eproto_sccs[7] = {
  &scc_info_DelegationOperationData_Tezos_2eproto.base,
  &scc_info_Operation_Tezos_2eproto.base,
  &scc_info_OperationList_Tezos_2eproto.base,
  &scc_info_RevealOperationData_Tezos_2eproto.base,
  &scc_info_SigningInput_Tezos_2eproto.base,
  &scc_info_SigningOutput_Tezos_2eproto.base,
  &scc_info_TransactionOperationData_Tezos_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Tezos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Tezos_2eproto = {
  false, false, descriptor_table_protodef_Tezos_2eproto, "Tezos.proto", 903,
  &descriptor_table_Tezos_2eproto_once, descriptor_table_Tezos_2eproto_sccs, descriptor_table_Tezos_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_Tezos_2eproto::offsets,
  file_level_metadata_Tezos_2eproto, 7, file_level_enum_descriptors_Tezos_2eproto, file_level_service_descriptors_Tezos_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Tezos_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Tezos_2eproto)), true);
namespace TW {
namespace Tezos {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_OperationKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Tezos_2eproto);
  return file_level_enum_descriptors_Tezos_2eproto[0];
}
bool Operation_OperationKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 107:
    case 108:
    case 110:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Operation_OperationKind Operation::ENDORSEMENT;
constexpr Operation_OperationKind Operation::REVEAL;
constexpr Operation_OperationKind Operation::TRANSACTION;
constexpr Operation_OperationKind Operation::DELEGATION;
constexpr Operation_OperationKind Operation::OperationKind_MIN;
constexpr Operation_OperationKind Operation::OperationKind_MAX;
constexpr int Operation::OperationKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Tezos::Proto::OperationList& operation_list(const SigningInput* msg);
};

const ::TW::Tezos::Proto::OperationList&
SigningInput::_Internal::operation_list(const SigningInput* msg) {
  return *msg->operation_list_;
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArena());
  }
  if (from._internal_has_operation_list()) {
    operation_list_ = new ::TW::Tezos::Proto::OperationList(*from.operation_list_);
  } else {
    operation_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.SigningInput)
}

void SigningInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningInput_Tezos_2eproto.base);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_list_ = nullptr;
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.SigningInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete operation_list_;
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningInput& SigningInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningInput_Tezos_2eproto.base);
  return *internal_default_instance();
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.ClearToEmpty();
  if (GetArena() == nullptr && operation_list_ != nullptr) {
    delete operation_list_;
  }
  operation_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TW.Tezos.Proto.OperationList operation_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes private_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.SigningInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Tezos.Proto.OperationList operation_list = 1;
  if (this->has_operation_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::operation_list(this), target, stream);
  }

  // bytes private_key = 2;
  if (this->private_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_private_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.SigningInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_key = 2;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // .TW.Tezos.Proto.OperationList operation_list = 1;
  if (this->has_operation_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operation_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tezos.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tezos.Proto.SigningInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tezos.Proto.SigningInput)
    MergeFrom(*source);
  }
}

void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.private_key().size() > 0) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from.has_operation_list()) {
    _internal_mutable_operation_list()->::TW::Tezos::Proto::OperationList::MergeFrom(from._internal_operation_list());
  }
}

void SigningInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tezos.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(operation_list_, other->operation_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.SigningOutput)
}

void SigningOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigningOutput_Tezos_2eproto.base);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.SigningOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningOutput& SigningOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningOutput_Tezos_2eproto.base);
  return *internal_default_instance();
}


void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.SigningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.SigningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (this->encoded().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tezos.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tezos.Proto.SigningOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tezos.Proto.SigningOutput)
    MergeFrom(*source);
  }
}

void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded().size() > 0) {
    _internal_set_encoded(from._internal_encoded());
  }
}

void SigningOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tezos.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_.Swap(&other->encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationList::_Internal {
 public:
};

OperationList::OperationList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  operations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.OperationList)
}
OperationList::OperationList(const OperationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_branch().empty()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.OperationList)
}

void OperationList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationList_Tezos_2eproto.base);
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OperationList::~OperationList() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.OperationList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationList::ArenaDtor(void* object) {
  OperationList* _this = reinterpret_cast< OperationList* >(object);
  (void)_this;
}
void OperationList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationList& OperationList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationList_Tezos_2eproto.base);
  return *internal_default_instance();
}


void OperationList::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.OperationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  branch_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string branch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.OperationList.branch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TW.Tezos.Proto.Operation operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.OperationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string branch = 1;
  if (this->branch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.OperationList.branch");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_branch(), target);
  }

  // repeated .TW.Tezos.Proto.Operation operations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.OperationList)
  return target;
}

size_t OperationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.OperationList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Tezos.Proto.Operation operations = 2;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string branch = 1;
  if (this->branch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tezos.Proto.OperationList)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tezos.Proto.OperationList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tezos.Proto.OperationList)
    MergeFrom(*source);
  }
}

void OperationList::MergeFrom(const OperationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.OperationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  if (from.branch().size() > 0) {
    _internal_set_branch(from._internal_branch());
  }
}

void OperationList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tezos.Proto.OperationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationList::CopyFrom(const OperationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.OperationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationList::IsInitialized() const {
  return true;
}

void OperationList::InternalSwap(OperationList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  operations_.InternalSwap(&other->operations_);
  branch_.Swap(&other->branch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Operation::_Internal {
 public:
  static const ::TW::Tezos::Proto::RevealOperationData& reveal_operation_data(const Operation* msg);
  static const ::TW::Tezos::Proto::TransactionOperationData& transaction_operation_data(const Operation* msg);
  static const ::TW::Tezos::Proto::DelegationOperationData& delegation_operation_data(const Operation* msg);
};

const ::TW::Tezos::Proto::RevealOperationData&
Operation::_Internal::reveal_operation_data(const Operation* msg) {
  return *msg->operation_data_.reveal_operation_data_;
}
const ::TW::Tezos::Proto::TransactionOperationData&
Operation::_Internal::transaction_operation_data(const Operation* msg) {
  return *msg->operation_data_.transaction_operation_data_;
}
const ::TW::Tezos::Proto::DelegationOperationData&
Operation::_Internal::delegation_operation_data(const Operation* msg) {
  return *msg->operation_data_.delegation_operation_data_;
}
void Operation::set_allocated_reveal_operation_data(::TW::Tezos::Proto::RevealOperationData* reveal_operation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_data();
  if (reveal_operation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reveal_operation_data);
    if (message_arena != submessage_arena) {
      reveal_operation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reveal_operation_data, submessage_arena);
    }
    set_has_reveal_operation_data();
    operation_data_.reveal_operation_data_ = reveal_operation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Operation.reveal_operation_data)
}
void Operation::set_allocated_transaction_operation_data(::TW::Tezos::Proto::TransactionOperationData* transaction_operation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_data();
  if (transaction_operation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction_operation_data);
    if (message_arena != submessage_arena) {
      transaction_operation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_operation_data, submessage_arena);
    }
    set_has_transaction_operation_data();
    operation_data_.transaction_operation_data_ = transaction_operation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Operation.transaction_operation_data)
}
void Operation::set_allocated_delegation_operation_data(::TW::Tezos::Proto::DelegationOperationData* delegation_operation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_operation_data();
  if (delegation_operation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delegation_operation_data);
    if (message_arena != submessage_arena) {
      delegation_operation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegation_operation_data, submessage_arena);
    }
    set_has_delegation_operation_data();
    operation_data_.delegation_operation_data_ = delegation_operation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Operation.delegation_operation_data)
}
Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source(), 
      GetArena());
  }
  ::memcpy(&counter_, &from.counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&counter_)) + sizeof(kind_));
  clear_has_operation_data();
  switch (from.operation_data_case()) {
    case kRevealOperationData: {
      _internal_mutable_reveal_operation_data()->::TW::Tezos::Proto::RevealOperationData::MergeFrom(from._internal_reveal_operation_data());
      break;
    }
    case kTransactionOperationData: {
      _internal_mutable_transaction_operation_data()->::TW::Tezos::Proto::TransactionOperationData::MergeFrom(from._internal_transaction_operation_data());
      break;
    }
    case kDelegationOperationData: {
      _internal_mutable_delegation_operation_data()->::TW::Tezos::Proto::DelegationOperationData::MergeFrom(from._internal_delegation_operation_data());
      break;
    }
    case OPERATION_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.Operation)
}

void Operation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Operation_Tezos_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&counter_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&counter_)) + sizeof(kind_));
  clear_has_operation_data();
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.Operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_operation_data()) {
    clear_operation_data();
  }
}

void Operation::ArenaDtor(void* object) {
  Operation* _this = reinterpret_cast< Operation* >(object);
  (void)_this;
}
void Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Operation& Operation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Operation_Tezos_2eproto.base);
  return *internal_default_instance();
}


void Operation::clear_operation_data() {
// @@protoc_insertion_point(one_of_clear_start:TW.Tezos.Proto.Operation)
  switch (operation_data_case()) {
    case kRevealOperationData: {
      if (GetArena() == nullptr) {
        delete operation_data_.reveal_operation_data_;
      }
      break;
    }
    case kTransactionOperationData: {
      if (GetArena() == nullptr) {
        delete operation_data_.transaction_operation_data_;
      }
      break;
    }
    case kDelegationOperationData: {
      if (GetArena() == nullptr) {
        delete operation_data_.delegation_operation_data_;
      }
      break;
    }
    case OPERATION_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_DATA_NOT_SET;
}


void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmpty();
  ::memset(&counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&counter_)) + sizeof(kind_));
  clear_operation_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.Operation.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gas_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 storage_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          storage_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.Operation.OperationKind kind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::TW::Tezos::Proto::Operation_OperationKind>(val));
        } else goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.RevealOperationData reveal_operation_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reveal_operation_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.TransactionOperationData transaction_operation_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_operation_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.DelegationOperationData delegation_operation_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegation_operation_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 counter = 1;
  if (this->counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_counter(), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.Operation.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // int64 fee = 3;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fee(), target);
  }

  // int64 gas_limit = 4;
  if (this->gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gas_limit(), target);
  }

  // int64 storage_limit = 5;
  if (this->storage_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_storage_limit(), target);
  }

  // .TW.Tezos.Proto.Operation.OperationKind kind = 7;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_kind(), target);
  }

  // .TW.Tezos.Proto.RevealOperationData reveal_operation_data = 8;
  if (_internal_has_reveal_operation_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::reveal_operation_data(this), target, stream);
  }

  // .TW.Tezos.Proto.TransactionOperationData transaction_operation_data = 9;
  if (_internal_has_transaction_operation_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::transaction_operation_data(this), target, stream);
  }

  // .TW.Tezos.Proto.DelegationOperationData delegation_operation_data = 11;
  if (_internal_has_delegation_operation_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::delegation_operation_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // int64 counter = 1;
  if (this->counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_counter());
  }

  // int64 fee = 3;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  // int64 gas_limit = 4;
  if (this->gas_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gas_limit());
  }

  // int64 storage_limit = 5;
  if (this->storage_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_storage_limit());
  }

  // .TW.Tezos.Proto.Operation.OperationKind kind = 7;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  switch (operation_data_case()) {
    // .TW.Tezos.Proto.RevealOperationData reveal_operation_data = 8;
    case kRevealOperationData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_data_.reveal_operation_data_);
      break;
    }
    // .TW.Tezos.Proto.TransactionOperationData transaction_operation_data = 9;
    case kTransactionOperationData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_data_.transaction_operation_data_);
      break;
    }
    // .TW.Tezos.Proto.DelegationOperationData delegation_operation_data = 11;
    case kDelegationOperationData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_data_.delegation_operation_data_);
      break;
    }
    case OPERATION_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tezos.Proto.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const Operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tezos.Proto.Operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tezos.Proto.Operation)
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.counter() != 0) {
    _internal_set_counter(from._internal_counter());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from.storage_limit() != 0) {
    _internal_set_storage_limit(from._internal_storage_limit());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  switch (from.operation_data_case()) {
    case kRevealOperationData: {
      _internal_mutable_reveal_operation_data()->::TW::Tezos::Proto::RevealOperationData::MergeFrom(from._internal_reveal_operation_data());
      break;
    }
    case kTransactionOperationData: {
      _internal_mutable_transaction_operation_data()->::TW::Tezos::Proto::TransactionOperationData::MergeFrom(from._internal_transaction_operation_data());
      break;
    }
    case kDelegationOperationData: {
      _internal_mutable_delegation_operation_data()->::TW::Tezos::Proto::DelegationOperationData::MergeFrom(from._internal_delegation_operation_data());
      break;
    }
    case OPERATION_DATA_NOT_SET: {
      break;
    }
  }
}

void Operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tezos.Proto.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, kind_)
      + sizeof(Operation::kind_)
      - PROTOBUF_FIELD_OFFSET(Operation, counter_)>(
          reinterpret_cast<char*>(&counter_),
          reinterpret_cast<char*>(&other->counter_));
  swap(operation_data_, other->operation_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionOperationData::_Internal {
 public:
};

TransactionOperationData::TransactionOperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.TransactionOperationData)
}
TransactionOperationData::TransactionOperationData(const TransactionOperationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination().empty()) {
    destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.TransactionOperationData)
}

void TransactionOperationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionOperationData_Tezos_2eproto.base);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TransactionOperationData::~TransactionOperationData() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.TransactionOperationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionOperationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionOperationData::ArenaDtor(void* object) {
  TransactionOperationData* _this = reinterpret_cast< TransactionOperationData* >(object);
  (void)_this;
}
void TransactionOperationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOperationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionOperationData& TransactionOperationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionOperationData_Tezos_2eproto.base);
  return *internal_default_instance();
}


void TransactionOperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.TransactionOperationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOperationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.TransactionOperationData.destination"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionOperationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.TransactionOperationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.TransactionOperationData.destination");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destination(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.TransactionOperationData)
  return target;
}

size_t TransactionOperationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.TransactionOperationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionOperationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tezos.Proto.TransactionOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionOperationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionOperationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tezos.Proto.TransactionOperationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tezos.Proto.TransactionOperationData)
    MergeFrom(*source);
  }
}

void TransactionOperationData::MergeFrom(const TransactionOperationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.TransactionOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination().size() > 0) {
    _internal_set_destination(from._internal_destination());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransactionOperationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tezos.Proto.TransactionOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionOperationData::CopyFrom(const TransactionOperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.TransactionOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOperationData::IsInitialized() const {
  return true;
}

void TransactionOperationData::InternalSwap(TransactionOperationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOperationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RevealOperationData::_Internal {
 public:
};

RevealOperationData::RevealOperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.RevealOperationData)
}
RevealOperationData::RevealOperationData(const RevealOperationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.RevealOperationData)
}

void RevealOperationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RevealOperationData_Tezos_2eproto.base);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RevealOperationData::~RevealOperationData() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.RevealOperationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevealOperationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RevealOperationData::ArenaDtor(void* object) {
  RevealOperationData* _this = reinterpret_cast< RevealOperationData* >(object);
  (void)_this;
}
void RevealOperationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevealOperationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevealOperationData& RevealOperationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevealOperationData_Tezos_2eproto.base);
  return *internal_default_instance();
}


void RevealOperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.RevealOperationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevealOperationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevealOperationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.RevealOperationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.RevealOperationData)
  return target;
}

size_t RevealOperationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.RevealOperationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevealOperationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tezos.Proto.RevealOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  const RevealOperationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevealOperationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tezos.Proto.RevealOperationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tezos.Proto.RevealOperationData)
    MergeFrom(*source);
  }
}

void RevealOperationData::MergeFrom(const RevealOperationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.RevealOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_key().size() > 0) {
    _internal_set_public_key(from._internal_public_key());
  }
}

void RevealOperationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tezos.Proto.RevealOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevealOperationData::CopyFrom(const RevealOperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.RevealOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevealOperationData::IsInitialized() const {
  return true;
}

void RevealOperationData::InternalSwap(RevealOperationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RevealOperationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DelegationOperationData::_Internal {
 public:
};

DelegationOperationData::DelegationOperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.DelegationOperationData)
}
DelegationOperationData::DelegationOperationData(const DelegationOperationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegate().empty()) {
    delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegate(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.DelegationOperationData)
}

void DelegationOperationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegationOperationData_Tezos_2eproto.base);
  delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DelegationOperationData::~DelegationOperationData() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.DelegationOperationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegationOperationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegationOperationData::ArenaDtor(void* object) {
  DelegationOperationData* _this = reinterpret_cast< DelegationOperationData* >(object);
  (void)_this;
}
void DelegationOperationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegationOperationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegationOperationData& DelegationOperationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegationOperationData_Tezos_2eproto.base);
  return *internal_default_instance();
}


void DelegationOperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.DelegationOperationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegate_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegationOperationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string delegate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.DelegationOperationData.delegate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegationOperationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.DelegationOperationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegate = 1;
  if (this->delegate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegate().data(), static_cast<int>(this->_internal_delegate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.DelegationOperationData.delegate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.DelegationOperationData)
  return target;
}

size_t DelegationOperationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.DelegationOperationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegate = 1;
  if (this->delegate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegationOperationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TW.Tezos.Proto.DelegationOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegationOperationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegationOperationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TW.Tezos.Proto.DelegationOperationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TW.Tezos.Proto.DelegationOperationData)
    MergeFrom(*source);
  }
}

void DelegationOperationData::MergeFrom(const DelegationOperationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.DelegationOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegate().size() > 0) {
    _internal_set_delegate(from._internal_delegate());
  }
}

void DelegationOperationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TW.Tezos.Proto.DelegationOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegationOperationData::CopyFrom(const DelegationOperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.DelegationOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegationOperationData::IsInitialized() const {
  return true;
}

void DelegationOperationData::InternalSwap(DelegationOperationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegate_.Swap(&other->delegate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegationOperationData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Tezos
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::SigningOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::OperationList* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::OperationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::OperationList >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::Operation* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::TransactionOperationData* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::TransactionOperationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::TransactionOperationData >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::RevealOperationData* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::RevealOperationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::RevealOperationData >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::DelegationOperationData* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::DelegationOperationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::DelegationOperationData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
