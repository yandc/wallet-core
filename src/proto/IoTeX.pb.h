// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IoTeX.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IoTeX_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IoTeX_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IoTeX_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IoTeX_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IoTeX_2eproto;
namespace TW {
namespace IoTeX {
namespace Proto {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class ActionCore;
class ActionCoreDefaultTypeInternal;
extern ActionCoreDefaultTypeInternal _ActionCore_default_instance_;
class ContractCall;
class ContractCallDefaultTypeInternal;
extern ContractCallDefaultTypeInternal _ContractCall_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Staking;
class StakingDefaultTypeInternal;
extern StakingDefaultTypeInternal _Staking_default_instance_;
class Staking_AddDeposit;
class Staking_AddDepositDefaultTypeInternal;
extern Staking_AddDepositDefaultTypeInternal _Staking_AddDeposit_default_instance_;
class Staking_CandidateBasicInfo;
class Staking_CandidateBasicInfoDefaultTypeInternal;
extern Staking_CandidateBasicInfoDefaultTypeInternal _Staking_CandidateBasicInfo_default_instance_;
class Staking_CandidateRegister;
class Staking_CandidateRegisterDefaultTypeInternal;
extern Staking_CandidateRegisterDefaultTypeInternal _Staking_CandidateRegister_default_instance_;
class Staking_ChangeCandidate;
class Staking_ChangeCandidateDefaultTypeInternal;
extern Staking_ChangeCandidateDefaultTypeInternal _Staking_ChangeCandidate_default_instance_;
class Staking_Create;
class Staking_CreateDefaultTypeInternal;
extern Staking_CreateDefaultTypeInternal _Staking_Create_default_instance_;
class Staking_Reclaim;
class Staking_ReclaimDefaultTypeInternal;
extern Staking_ReclaimDefaultTypeInternal _Staking_Reclaim_default_instance_;
class Staking_Restake;
class Staking_RestakeDefaultTypeInternal;
extern Staking_RestakeDefaultTypeInternal _Staking_Restake_default_instance_;
class Staking_TransferOwnership;
class Staking_TransferOwnershipDefaultTypeInternal;
extern Staking_TransferOwnershipDefaultTypeInternal _Staking_TransferOwnership_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
}  // namespace Proto
}  // namespace IoTeX
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::IoTeX::Proto::Action* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Action>(Arena*);
template<> ::TW::IoTeX::Proto::ActionCore* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::ActionCore>(Arena*);
template<> ::TW::IoTeX::Proto::ContractCall* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::ContractCall>(Arena*);
template<> ::TW::IoTeX::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::SigningInput>(Arena*);
template<> ::TW::IoTeX::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::SigningOutput>(Arena*);
template<> ::TW::IoTeX::Proto::Staking* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Staking>(Arena*);
template<> ::TW::IoTeX::Proto::Staking_AddDeposit* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Staking_AddDeposit>(Arena*);
template<> ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Staking_CandidateBasicInfo>(Arena*);
template<> ::TW::IoTeX::Proto::Staking_CandidateRegister* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Staking_CandidateRegister>(Arena*);
template<> ::TW::IoTeX::Proto::Staking_ChangeCandidate* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Staking_ChangeCandidate>(Arena*);
template<> ::TW::IoTeX::Proto::Staking_Create* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Staking_Create>(Arena*);
template<> ::TW::IoTeX::Proto::Staking_Reclaim* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Staking_Reclaim>(Arena*);
template<> ::TW::IoTeX::Proto::Staking_Restake* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Staking_Restake>(Arena*);
template<> ::TW::IoTeX::Proto::Staking_TransferOwnership* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Staking_TransferOwnership>(Arena*);
template<> ::TW::IoTeX::Proto::Transfer* Arena::CreateMaybeMessage<::TW::IoTeX::Proto::Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace IoTeX {
namespace Proto {

// ===================================================================

class Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  virtual ~Transfer();

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transfer& default_instance();

  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kRecipientFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // string amount = 1;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string recipient = 2;
  void clear_recipient();
  const std::string& recipient() const;
  void set_recipient(const std::string& value);
  void set_recipient(std::string&& value);
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  std::string* mutable_recipient();
  std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);
  private:
  const std::string& _internal_recipient() const;
  void _internal_set_recipient(const std::string& value);
  std::string* _internal_mutable_recipient();
  public:

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Staking_Create PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Staking.Create) */ {
 public:
  inline Staking_Create() : Staking_Create(nullptr) {}
  virtual ~Staking_Create();

  Staking_Create(const Staking_Create& from);
  Staking_Create(Staking_Create&& from) noexcept
    : Staking_Create() {
    *this = ::std::move(from);
  }

  inline Staking_Create& operator=(const Staking_Create& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Create& operator=(Staking_Create&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_Create& default_instance();

  static inline const Staking_Create* internal_default_instance() {
    return reinterpret_cast<const Staking_Create*>(
               &_Staking_Create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Staking_Create& a, Staking_Create& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Create* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Create* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_Create* New() const final {
    return CreateMaybeMessage<Staking_Create>(nullptr);
  }

  Staking_Create* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_Create>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_Create& from);
  void MergeFrom(const Staking_Create& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Create* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Staking.Create";
  }
  protected:
  explicit Staking_Create(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateNameFieldNumber = 1,
    kStakedAmountFieldNumber = 2,
    kPayloadFieldNumber = 5,
    kStakedDurationFieldNumber = 3,
    kAutoStakeFieldNumber = 4,
  };
  // string candidateName = 1;
  void clear_candidatename();
  const std::string& candidatename() const;
  void set_candidatename(const std::string& value);
  void set_candidatename(std::string&& value);
  void set_candidatename(const char* value);
  void set_candidatename(const char* value, size_t size);
  std::string* mutable_candidatename();
  std::string* release_candidatename();
  void set_allocated_candidatename(std::string* candidatename);
  private:
  const std::string& _internal_candidatename() const;
  void _internal_set_candidatename(const std::string& value);
  std::string* _internal_mutable_candidatename();
  public:

  // string stakedAmount = 2;
  void clear_stakedamount();
  const std::string& stakedamount() const;
  void set_stakedamount(const std::string& value);
  void set_stakedamount(std::string&& value);
  void set_stakedamount(const char* value);
  void set_stakedamount(const char* value, size_t size);
  std::string* mutable_stakedamount();
  std::string* release_stakedamount();
  void set_allocated_stakedamount(std::string* stakedamount);
  private:
  const std::string& _internal_stakedamount() const;
  void _internal_set_stakedamount(const std::string& value);
  std::string* _internal_mutable_stakedamount();
  public:

  // bytes payload = 5;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 stakedDuration = 3;
  void clear_stakedduration();
  ::PROTOBUF_NAMESPACE_ID::uint32 stakedduration() const;
  void set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stakedduration() const;
  void _internal_set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool autoStake = 4;
  void clear_autostake();
  bool autostake() const;
  void set_autostake(bool value);
  private:
  bool _internal_autostake() const;
  void _internal_set_autostake(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Staking.Create)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidatename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stakedamount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stakedduration_;
  bool autostake_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Staking_Reclaim PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Staking.Reclaim) */ {
 public:
  inline Staking_Reclaim() : Staking_Reclaim(nullptr) {}
  virtual ~Staking_Reclaim();

  Staking_Reclaim(const Staking_Reclaim& from);
  Staking_Reclaim(Staking_Reclaim&& from) noexcept
    : Staking_Reclaim() {
    *this = ::std::move(from);
  }

  inline Staking_Reclaim& operator=(const Staking_Reclaim& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Reclaim& operator=(Staking_Reclaim&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_Reclaim& default_instance();

  static inline const Staking_Reclaim* internal_default_instance() {
    return reinterpret_cast<const Staking_Reclaim*>(
               &_Staking_Reclaim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Staking_Reclaim& a, Staking_Reclaim& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Reclaim* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Reclaim* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_Reclaim* New() const final {
    return CreateMaybeMessage<Staking_Reclaim>(nullptr);
  }

  Staking_Reclaim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_Reclaim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_Reclaim& from);
  void MergeFrom(const Staking_Reclaim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Reclaim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Staking.Reclaim";
  }
  protected:
  explicit Staking_Reclaim(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kBucketIndexFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 bucketIndex = 1;
  void clear_bucketindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex() const;
  void set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucketindex() const;
  void _internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Staking.Reclaim)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Staking_AddDeposit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Staking.AddDeposit) */ {
 public:
  inline Staking_AddDeposit() : Staking_AddDeposit(nullptr) {}
  virtual ~Staking_AddDeposit();

  Staking_AddDeposit(const Staking_AddDeposit& from);
  Staking_AddDeposit(Staking_AddDeposit&& from) noexcept
    : Staking_AddDeposit() {
    *this = ::std::move(from);
  }

  inline Staking_AddDeposit& operator=(const Staking_AddDeposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_AddDeposit& operator=(Staking_AddDeposit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_AddDeposit& default_instance();

  static inline const Staking_AddDeposit* internal_default_instance() {
    return reinterpret_cast<const Staking_AddDeposit*>(
               &_Staking_AddDeposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Staking_AddDeposit& a, Staking_AddDeposit& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_AddDeposit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_AddDeposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_AddDeposit* New() const final {
    return CreateMaybeMessage<Staking_AddDeposit>(nullptr);
  }

  Staking_AddDeposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_AddDeposit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_AddDeposit& from);
  void MergeFrom(const Staking_AddDeposit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_AddDeposit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Staking.AddDeposit";
  }
  protected:
  explicit Staking_AddDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kBucketIndexFieldNumber = 1,
  };
  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 bucketIndex = 1;
  void clear_bucketindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex() const;
  void set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucketindex() const;
  void _internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Staking.AddDeposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Staking_Restake PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Staking.Restake) */ {
 public:
  inline Staking_Restake() : Staking_Restake(nullptr) {}
  virtual ~Staking_Restake();

  Staking_Restake(const Staking_Restake& from);
  Staking_Restake(Staking_Restake&& from) noexcept
    : Staking_Restake() {
    *this = ::std::move(from);
  }

  inline Staking_Restake& operator=(const Staking_Restake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Restake& operator=(Staking_Restake&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_Restake& default_instance();

  static inline const Staking_Restake* internal_default_instance() {
    return reinterpret_cast<const Staking_Restake*>(
               &_Staking_Restake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Staking_Restake& a, Staking_Restake& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Restake* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Restake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_Restake* New() const final {
    return CreateMaybeMessage<Staking_Restake>(nullptr);
  }

  Staking_Restake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_Restake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_Restake& from);
  void MergeFrom(const Staking_Restake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Restake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Staking.Restake";
  }
  protected:
  explicit Staking_Restake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 4,
    kBucketIndexFieldNumber = 1,
    kStakedDurationFieldNumber = 2,
    kAutoStakeFieldNumber = 3,
  };
  // bytes payload = 4;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 bucketIndex = 1;
  void clear_bucketindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex() const;
  void set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucketindex() const;
  void _internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 stakedDuration = 2;
  void clear_stakedduration();
  ::PROTOBUF_NAMESPACE_ID::uint32 stakedduration() const;
  void set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stakedduration() const;
  void _internal_set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool autoStake = 3;
  void clear_autostake();
  bool autostake() const;
  void set_autostake(bool value);
  private:
  bool _internal_autostake() const;
  void _internal_set_autostake(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Staking.Restake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stakedduration_;
  bool autostake_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Staking_ChangeCandidate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Staking.ChangeCandidate) */ {
 public:
  inline Staking_ChangeCandidate() : Staking_ChangeCandidate(nullptr) {}
  virtual ~Staking_ChangeCandidate();

  Staking_ChangeCandidate(const Staking_ChangeCandidate& from);
  Staking_ChangeCandidate(Staking_ChangeCandidate&& from) noexcept
    : Staking_ChangeCandidate() {
    *this = ::std::move(from);
  }

  inline Staking_ChangeCandidate& operator=(const Staking_ChangeCandidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_ChangeCandidate& operator=(Staking_ChangeCandidate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_ChangeCandidate& default_instance();

  static inline const Staking_ChangeCandidate* internal_default_instance() {
    return reinterpret_cast<const Staking_ChangeCandidate*>(
               &_Staking_ChangeCandidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Staking_ChangeCandidate& a, Staking_ChangeCandidate& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_ChangeCandidate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_ChangeCandidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_ChangeCandidate* New() const final {
    return CreateMaybeMessage<Staking_ChangeCandidate>(nullptr);
  }

  Staking_ChangeCandidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_ChangeCandidate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_ChangeCandidate& from);
  void MergeFrom(const Staking_ChangeCandidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_ChangeCandidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Staking.ChangeCandidate";
  }
  protected:
  explicit Staking_ChangeCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateNameFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kBucketIndexFieldNumber = 1,
  };
  // string candidateName = 2;
  void clear_candidatename();
  const std::string& candidatename() const;
  void set_candidatename(const std::string& value);
  void set_candidatename(std::string&& value);
  void set_candidatename(const char* value);
  void set_candidatename(const char* value, size_t size);
  std::string* mutable_candidatename();
  std::string* release_candidatename();
  void set_allocated_candidatename(std::string* candidatename);
  private:
  const std::string& _internal_candidatename() const;
  void _internal_set_candidatename(const std::string& value);
  std::string* _internal_mutable_candidatename();
  public:

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 bucketIndex = 1;
  void clear_bucketindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex() const;
  void set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucketindex() const;
  void _internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Staking.ChangeCandidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidatename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Staking_TransferOwnership PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Staking.TransferOwnership) */ {
 public:
  inline Staking_TransferOwnership() : Staking_TransferOwnership(nullptr) {}
  virtual ~Staking_TransferOwnership();

  Staking_TransferOwnership(const Staking_TransferOwnership& from);
  Staking_TransferOwnership(Staking_TransferOwnership&& from) noexcept
    : Staking_TransferOwnership() {
    *this = ::std::move(from);
  }

  inline Staking_TransferOwnership& operator=(const Staking_TransferOwnership& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_TransferOwnership& operator=(Staking_TransferOwnership&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_TransferOwnership& default_instance();

  static inline const Staking_TransferOwnership* internal_default_instance() {
    return reinterpret_cast<const Staking_TransferOwnership*>(
               &_Staking_TransferOwnership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Staking_TransferOwnership& a, Staking_TransferOwnership& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_TransferOwnership* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_TransferOwnership* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_TransferOwnership* New() const final {
    return CreateMaybeMessage<Staking_TransferOwnership>(nullptr);
  }

  Staking_TransferOwnership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_TransferOwnership>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_TransferOwnership& from);
  void MergeFrom(const Staking_TransferOwnership& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_TransferOwnership* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Staking.TransferOwnership";
  }
  protected:
  explicit Staking_TransferOwnership(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoterAddressFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kBucketIndexFieldNumber = 1,
  };
  // string voterAddress = 2;
  void clear_voteraddress();
  const std::string& voteraddress() const;
  void set_voteraddress(const std::string& value);
  void set_voteraddress(std::string&& value);
  void set_voteraddress(const char* value);
  void set_voteraddress(const char* value, size_t size);
  std::string* mutable_voteraddress();
  std::string* release_voteraddress();
  void set_allocated_voteraddress(std::string* voteraddress);
  private:
  const std::string& _internal_voteraddress() const;
  void _internal_set_voteraddress(const std::string& value);
  std::string* _internal_mutable_voteraddress();
  public:

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 bucketIndex = 1;
  void clear_bucketindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex() const;
  void set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucketindex() const;
  void _internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Staking.TransferOwnership)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voteraddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bucketindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Staking_CandidateBasicInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Staking.CandidateBasicInfo) */ {
 public:
  inline Staking_CandidateBasicInfo() : Staking_CandidateBasicInfo(nullptr) {}
  virtual ~Staking_CandidateBasicInfo();

  Staking_CandidateBasicInfo(const Staking_CandidateBasicInfo& from);
  Staking_CandidateBasicInfo(Staking_CandidateBasicInfo&& from) noexcept
    : Staking_CandidateBasicInfo() {
    *this = ::std::move(from);
  }

  inline Staking_CandidateBasicInfo& operator=(const Staking_CandidateBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_CandidateBasicInfo& operator=(Staking_CandidateBasicInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_CandidateBasicInfo& default_instance();

  static inline const Staking_CandidateBasicInfo* internal_default_instance() {
    return reinterpret_cast<const Staking_CandidateBasicInfo*>(
               &_Staking_CandidateBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Staking_CandidateBasicInfo& a, Staking_CandidateBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_CandidateBasicInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_CandidateBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_CandidateBasicInfo* New() const final {
    return CreateMaybeMessage<Staking_CandidateBasicInfo>(nullptr);
  }

  Staking_CandidateBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_CandidateBasicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_CandidateBasicInfo& from);
  void MergeFrom(const Staking_CandidateBasicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_CandidateBasicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Staking.CandidateBasicInfo";
  }
  protected:
  explicit Staking_CandidateBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOperatorAddressFieldNumber = 2,
    kRewardAddressFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string operatorAddress = 2;
  void clear_operatoraddress();
  const std::string& operatoraddress() const;
  void set_operatoraddress(const std::string& value);
  void set_operatoraddress(std::string&& value);
  void set_operatoraddress(const char* value);
  void set_operatoraddress(const char* value, size_t size);
  std::string* mutable_operatoraddress();
  std::string* release_operatoraddress();
  void set_allocated_operatoraddress(std::string* operatoraddress);
  private:
  const std::string& _internal_operatoraddress() const;
  void _internal_set_operatoraddress(const std::string& value);
  std::string* _internal_mutable_operatoraddress();
  public:

  // string rewardAddress = 3;
  void clear_rewardaddress();
  const std::string& rewardaddress() const;
  void set_rewardaddress(const std::string& value);
  void set_rewardaddress(std::string&& value);
  void set_rewardaddress(const char* value);
  void set_rewardaddress(const char* value, size_t size);
  std::string* mutable_rewardaddress();
  std::string* release_rewardaddress();
  void set_allocated_rewardaddress(std::string* rewardaddress);
  private:
  const std::string& _internal_rewardaddress() const;
  void _internal_set_rewardaddress(const std::string& value);
  std::string* _internal_mutable_rewardaddress();
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Staking.CandidateBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operatoraddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rewardaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Staking_CandidateRegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Staking.CandidateRegister) */ {
 public:
  inline Staking_CandidateRegister() : Staking_CandidateRegister(nullptr) {}
  virtual ~Staking_CandidateRegister();

  Staking_CandidateRegister(const Staking_CandidateRegister& from);
  Staking_CandidateRegister(Staking_CandidateRegister&& from) noexcept
    : Staking_CandidateRegister() {
    *this = ::std::move(from);
  }

  inline Staking_CandidateRegister& operator=(const Staking_CandidateRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_CandidateRegister& operator=(Staking_CandidateRegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_CandidateRegister& default_instance();

  static inline const Staking_CandidateRegister* internal_default_instance() {
    return reinterpret_cast<const Staking_CandidateRegister*>(
               &_Staking_CandidateRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Staking_CandidateRegister& a, Staking_CandidateRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_CandidateRegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_CandidateRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_CandidateRegister* New() const final {
    return CreateMaybeMessage<Staking_CandidateRegister>(nullptr);
  }

  Staking_CandidateRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_CandidateRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_CandidateRegister& from);
  void MergeFrom(const Staking_CandidateRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_CandidateRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Staking.CandidateRegister";
  }
  protected:
  explicit Staking_CandidateRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakedAmountFieldNumber = 2,
    kOwnerAddressFieldNumber = 5,
    kPayloadFieldNumber = 6,
    kCandidateFieldNumber = 1,
    kStakedDurationFieldNumber = 3,
    kAutoStakeFieldNumber = 4,
  };
  // string stakedAmount = 2;
  void clear_stakedamount();
  const std::string& stakedamount() const;
  void set_stakedamount(const std::string& value);
  void set_stakedamount(std::string&& value);
  void set_stakedamount(const char* value);
  void set_stakedamount(const char* value, size_t size);
  std::string* mutable_stakedamount();
  std::string* release_stakedamount();
  void set_allocated_stakedamount(std::string* stakedamount);
  private:
  const std::string& _internal_stakedamount() const;
  void _internal_set_stakedamount(const std::string& value);
  std::string* _internal_mutable_stakedamount();
  public:

  // string ownerAddress = 5;
  void clear_owneraddress();
  const std::string& owneraddress() const;
  void set_owneraddress(const std::string& value);
  void set_owneraddress(std::string&& value);
  void set_owneraddress(const char* value);
  void set_owneraddress(const char* value, size_t size);
  std::string* mutable_owneraddress();
  std::string* release_owneraddress();
  void set_allocated_owneraddress(std::string* owneraddress);
  private:
  const std::string& _internal_owneraddress() const;
  void _internal_set_owneraddress(const std::string& value);
  std::string* _internal_mutable_owneraddress();
  public:

  // bytes payload = 6;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidate = 1;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& candidate() const;
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* release_candidate();
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* mutable_candidate();
  void set_allocated_candidate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidate);
  private:
  const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& _internal_candidate() const;
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* _internal_mutable_candidate();
  public:
  void unsafe_arena_set_allocated_candidate(
      ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidate);
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* unsafe_arena_release_candidate();

  // uint32 stakedDuration = 3;
  void clear_stakedduration();
  ::PROTOBUF_NAMESPACE_ID::uint32 stakedduration() const;
  void set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stakedduration() const;
  void _internal_set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool autoStake = 4;
  void clear_autostake();
  bool autostake() const;
  void set_autostake(bool value);
  private:
  bool _internal_autostake() const;
  void _internal_set_autostake(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Staking.CandidateRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stakedamount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owneraddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stakedduration_;
  bool autostake_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Staking PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Staking) */ {
 public:
  inline Staking() : Staking(nullptr) {}
  virtual ~Staking();

  Staking(const Staking& from);
  Staking(Staking&& from) noexcept
    : Staking() {
    *this = ::std::move(from);
  }

  inline Staking& operator=(const Staking& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking& operator=(Staking&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking& default_instance();

  enum MessageCase {
    kStakeCreate = 1,
    kStakeUnstake = 2,
    kStakeWithdraw = 3,
    kStakeAddDeposit = 4,
    kStakeRestake = 5,
    kStakeChangeCandidate = 6,
    kStakeTransferOwnership = 7,
    kCandidateRegister = 8,
    kCandidateUpdate = 9,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Staking* internal_default_instance() {
    return reinterpret_cast<const Staking*>(
               &_Staking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Staking& a, Staking& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking* New() const final {
    return CreateMaybeMessage<Staking>(nullptr);
  }

  Staking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking& from);
  void MergeFrom(const Staking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Staking";
  }
  protected:
  explicit Staking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Staking_Create Create;
  typedef Staking_Reclaim Reclaim;
  typedef Staking_AddDeposit AddDeposit;
  typedef Staking_Restake Restake;
  typedef Staking_ChangeCandidate ChangeCandidate;
  typedef Staking_TransferOwnership TransferOwnership;
  typedef Staking_CandidateBasicInfo CandidateBasicInfo;
  typedef Staking_CandidateRegister CandidateRegister;

  // accessors -------------------------------------------------------

  enum : int {
    kStakeCreateFieldNumber = 1,
    kStakeUnstakeFieldNumber = 2,
    kStakeWithdrawFieldNumber = 3,
    kStakeAddDepositFieldNumber = 4,
    kStakeRestakeFieldNumber = 5,
    kStakeChangeCandidateFieldNumber = 6,
    kStakeTransferOwnershipFieldNumber = 7,
    kCandidateRegisterFieldNumber = 8,
    kCandidateUpdateFieldNumber = 9,
  };
  // .TW.IoTeX.Proto.Staking.Create stakeCreate = 1;
  bool has_stakecreate() const;
  private:
  bool _internal_has_stakecreate() const;
  public:
  void clear_stakecreate();
  const ::TW::IoTeX::Proto::Staking_Create& stakecreate() const;
  ::TW::IoTeX::Proto::Staking_Create* release_stakecreate();
  ::TW::IoTeX::Proto::Staking_Create* mutable_stakecreate();
  void set_allocated_stakecreate(::TW::IoTeX::Proto::Staking_Create* stakecreate);
  private:
  const ::TW::IoTeX::Proto::Staking_Create& _internal_stakecreate() const;
  ::TW::IoTeX::Proto::Staking_Create* _internal_mutable_stakecreate();
  public:
  void unsafe_arena_set_allocated_stakecreate(
      ::TW::IoTeX::Proto::Staking_Create* stakecreate);
  ::TW::IoTeX::Proto::Staking_Create* unsafe_arena_release_stakecreate();

  // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 2;
  bool has_stakeunstake() const;
  private:
  bool _internal_has_stakeunstake() const;
  public:
  void clear_stakeunstake();
  const ::TW::IoTeX::Proto::Staking_Reclaim& stakeunstake() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* release_stakeunstake();
  ::TW::IoTeX::Proto::Staking_Reclaim* mutable_stakeunstake();
  void set_allocated_stakeunstake(::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake);
  private:
  const ::TW::IoTeX::Proto::Staking_Reclaim& _internal_stakeunstake() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* _internal_mutable_stakeunstake();
  public:
  void unsafe_arena_set_allocated_stakeunstake(
      ::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake);
  ::TW::IoTeX::Proto::Staking_Reclaim* unsafe_arena_release_stakeunstake();

  // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 3;
  bool has_stakewithdraw() const;
  private:
  bool _internal_has_stakewithdraw() const;
  public:
  void clear_stakewithdraw();
  const ::TW::IoTeX::Proto::Staking_Reclaim& stakewithdraw() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* release_stakewithdraw();
  ::TW::IoTeX::Proto::Staking_Reclaim* mutable_stakewithdraw();
  void set_allocated_stakewithdraw(::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw);
  private:
  const ::TW::IoTeX::Proto::Staking_Reclaim& _internal_stakewithdraw() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* _internal_mutable_stakewithdraw();
  public:
  void unsafe_arena_set_allocated_stakewithdraw(
      ::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw);
  ::TW::IoTeX::Proto::Staking_Reclaim* unsafe_arena_release_stakewithdraw();

  // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 4;
  bool has_stakeadddeposit() const;
  private:
  bool _internal_has_stakeadddeposit() const;
  public:
  void clear_stakeadddeposit();
  const ::TW::IoTeX::Proto::Staking_AddDeposit& stakeadddeposit() const;
  ::TW::IoTeX::Proto::Staking_AddDeposit* release_stakeadddeposit();
  ::TW::IoTeX::Proto::Staking_AddDeposit* mutable_stakeadddeposit();
  void set_allocated_stakeadddeposit(::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit);
  private:
  const ::TW::IoTeX::Proto::Staking_AddDeposit& _internal_stakeadddeposit() const;
  ::TW::IoTeX::Proto::Staking_AddDeposit* _internal_mutable_stakeadddeposit();
  public:
  void unsafe_arena_set_allocated_stakeadddeposit(
      ::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit);
  ::TW::IoTeX::Proto::Staking_AddDeposit* unsafe_arena_release_stakeadddeposit();

  // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 5;
  bool has_stakerestake() const;
  private:
  bool _internal_has_stakerestake() const;
  public:
  void clear_stakerestake();
  const ::TW::IoTeX::Proto::Staking_Restake& stakerestake() const;
  ::TW::IoTeX::Proto::Staking_Restake* release_stakerestake();
  ::TW::IoTeX::Proto::Staking_Restake* mutable_stakerestake();
  void set_allocated_stakerestake(::TW::IoTeX::Proto::Staking_Restake* stakerestake);
  private:
  const ::TW::IoTeX::Proto::Staking_Restake& _internal_stakerestake() const;
  ::TW::IoTeX::Proto::Staking_Restake* _internal_mutable_stakerestake();
  public:
  void unsafe_arena_set_allocated_stakerestake(
      ::TW::IoTeX::Proto::Staking_Restake* stakerestake);
  ::TW::IoTeX::Proto::Staking_Restake* unsafe_arena_release_stakerestake();

  // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 6;
  bool has_stakechangecandidate() const;
  private:
  bool _internal_has_stakechangecandidate() const;
  public:
  void clear_stakechangecandidate();
  const ::TW::IoTeX::Proto::Staking_ChangeCandidate& stakechangecandidate() const;
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* release_stakechangecandidate();
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* mutable_stakechangecandidate();
  void set_allocated_stakechangecandidate(::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate);
  private:
  const ::TW::IoTeX::Proto::Staking_ChangeCandidate& _internal_stakechangecandidate() const;
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* _internal_mutable_stakechangecandidate();
  public:
  void unsafe_arena_set_allocated_stakechangecandidate(
      ::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate);
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* unsafe_arena_release_stakechangecandidate();

  // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 7;
  bool has_staketransferownership() const;
  private:
  bool _internal_has_staketransferownership() const;
  public:
  void clear_staketransferownership();
  const ::TW::IoTeX::Proto::Staking_TransferOwnership& staketransferownership() const;
  ::TW::IoTeX::Proto::Staking_TransferOwnership* release_staketransferownership();
  ::TW::IoTeX::Proto::Staking_TransferOwnership* mutable_staketransferownership();
  void set_allocated_staketransferownership(::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership);
  private:
  const ::TW::IoTeX::Proto::Staking_TransferOwnership& _internal_staketransferownership() const;
  ::TW::IoTeX::Proto::Staking_TransferOwnership* _internal_mutable_staketransferownership();
  public:
  void unsafe_arena_set_allocated_staketransferownership(
      ::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership);
  ::TW::IoTeX::Proto::Staking_TransferOwnership* unsafe_arena_release_staketransferownership();

  // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 8;
  bool has_candidateregister() const;
  private:
  bool _internal_has_candidateregister() const;
  public:
  void clear_candidateregister();
  const ::TW::IoTeX::Proto::Staking_CandidateRegister& candidateregister() const;
  ::TW::IoTeX::Proto::Staking_CandidateRegister* release_candidateregister();
  ::TW::IoTeX::Proto::Staking_CandidateRegister* mutable_candidateregister();
  void set_allocated_candidateregister(::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister);
  private:
  const ::TW::IoTeX::Proto::Staking_CandidateRegister& _internal_candidateregister() const;
  ::TW::IoTeX::Proto::Staking_CandidateRegister* _internal_mutable_candidateregister();
  public:
  void unsafe_arena_set_allocated_candidateregister(
      ::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister);
  ::TW::IoTeX::Proto::Staking_CandidateRegister* unsafe_arena_release_candidateregister();

  // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 9;
  bool has_candidateupdate() const;
  private:
  bool _internal_has_candidateupdate() const;
  public:
  void clear_candidateupdate();
  const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& candidateupdate() const;
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* release_candidateupdate();
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* mutable_candidateupdate();
  void set_allocated_candidateupdate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate);
  private:
  const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& _internal_candidateupdate() const;
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* _internal_mutable_candidateupdate();
  public:
  void unsafe_arena_set_allocated_candidateupdate(
      ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate);
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* unsafe_arena_release_candidateupdate();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Staking)
 private:
  class _Internal;
  void set_has_stakecreate();
  void set_has_stakeunstake();
  void set_has_stakewithdraw();
  void set_has_stakeadddeposit();
  void set_has_stakerestake();
  void set_has_stakechangecandidate();
  void set_has_staketransferownership();
  void set_has_candidateregister();
  void set_has_candidateupdate();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    MessageUnion() {}
    ::TW::IoTeX::Proto::Staking_Create* stakecreate_;
    ::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake_;
    ::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw_;
    ::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit_;
    ::TW::IoTeX::Proto::Staking_Restake* stakerestake_;
    ::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate_;
    ::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership_;
    ::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister_;
    ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class ContractCall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.ContractCall) */ {
 public:
  inline ContractCall() : ContractCall(nullptr) {}
  virtual ~ContractCall();

  ContractCall(const ContractCall& from);
  ContractCall(ContractCall&& from) noexcept
    : ContractCall() {
    *this = ::std::move(from);
  }

  inline ContractCall& operator=(const ContractCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractCall& operator=(ContractCall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractCall& default_instance();

  static inline const ContractCall* internal_default_instance() {
    return reinterpret_cast<const ContractCall*>(
               &_ContractCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ContractCall& a, ContractCall& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractCall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractCall* New() const final {
    return CreateMaybeMessage<ContractCall>(nullptr);
  }

  ContractCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractCall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractCall& from);
  void MergeFrom(const ContractCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractCall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.ContractCall";
  }
  protected:
  explicit ContractCall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kContractFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string amount = 1;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string contract = 2;
  void clear_contract();
  const std::string& contract() const;
  void set_contract(const std::string& value);
  void set_contract(std::string&& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  std::string* mutable_contract();
  std::string* release_contract();
  void set_allocated_contract(std::string* contract);
  private:
  const std::string& _internal_contract() const;
  void _internal_set_contract(const std::string& value);
  std::string* _internal_mutable_contract();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.ContractCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  enum ActionCase {
    kTransfer = 10,
    kCall = 12,
    kStakeCreate = 40,
    kStakeUnstake = 41,
    kStakeWithdraw = 42,
    kStakeAddDeposit = 43,
    kStakeRestake = 44,
    kStakeChangeCandidate = 45,
    kStakeTransferOwnership = 46,
    kCandidateRegister = 47,
    kCandidateUpdate = 48,
    ACTION_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasPriceFieldNumber = 4,
    kPrivateKeyFieldNumber = 5,
    kNonceFieldNumber = 2,
    kGasLimitFieldNumber = 3,
    kVersionFieldNumber = 1,
    kTransferFieldNumber = 10,
    kCallFieldNumber = 12,
    kStakeCreateFieldNumber = 40,
    kStakeUnstakeFieldNumber = 41,
    kStakeWithdrawFieldNumber = 42,
    kStakeAddDepositFieldNumber = 43,
    kStakeRestakeFieldNumber = 44,
    kStakeChangeCandidateFieldNumber = 45,
    kStakeTransferOwnershipFieldNumber = 46,
    kCandidateRegisterFieldNumber = 47,
    kCandidateUpdateFieldNumber = 48,
  };
  // string gasPrice = 4;
  void clear_gasprice();
  const std::string& gasprice() const;
  void set_gasprice(const std::string& value);
  void set_gasprice(std::string&& value);
  void set_gasprice(const char* value);
  void set_gasprice(const char* value, size_t size);
  std::string* mutable_gasprice();
  std::string* release_gasprice();
  void set_allocated_gasprice(std::string* gasprice);
  private:
  const std::string& _internal_gasprice() const;
  void _internal_set_gasprice(const std::string& value);
  std::string* _internal_mutable_gasprice();
  public:

  // bytes privateKey = 5;
  void clear_privatekey();
  const std::string& privatekey() const;
  void set_privatekey(const std::string& value);
  void set_privatekey(std::string&& value);
  void set_privatekey(const char* value);
  void set_privatekey(const void* value, size_t size);
  std::string* mutable_privatekey();
  std::string* release_privatekey();
  void set_allocated_privatekey(std::string* privatekey);
  private:
  const std::string& _internal_privatekey() const;
  void _internal_set_privatekey(const std::string& value);
  std::string* _internal_mutable_privatekey();
  public:

  // uint64 nonce = 2;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 gasLimit = 3;
  void clear_gaslimit();
  ::PROTOBUF_NAMESPACE_ID::uint64 gaslimit() const;
  void set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gaslimit() const;
  void _internal_set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .TW.IoTeX.Proto.Transfer transfer = 10;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::IoTeX::Proto::Transfer& transfer() const;
  ::TW::IoTeX::Proto::Transfer* release_transfer();
  ::TW::IoTeX::Proto::Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::IoTeX::Proto::Transfer* transfer);
  private:
  const ::TW::IoTeX::Proto::Transfer& _internal_transfer() const;
  ::TW::IoTeX::Proto::Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::IoTeX::Proto::Transfer* transfer);
  ::TW::IoTeX::Proto::Transfer* unsafe_arena_release_transfer();

  // .TW.IoTeX.Proto.ContractCall call = 12;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::TW::IoTeX::Proto::ContractCall& call() const;
  ::TW::IoTeX::Proto::ContractCall* release_call();
  ::TW::IoTeX::Proto::ContractCall* mutable_call();
  void set_allocated_call(::TW::IoTeX::Proto::ContractCall* call);
  private:
  const ::TW::IoTeX::Proto::ContractCall& _internal_call() const;
  ::TW::IoTeX::Proto::ContractCall* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::TW::IoTeX::Proto::ContractCall* call);
  ::TW::IoTeX::Proto::ContractCall* unsafe_arena_release_call();

  // .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
  bool has_stakecreate() const;
  private:
  bool _internal_has_stakecreate() const;
  public:
  void clear_stakecreate();
  const ::TW::IoTeX::Proto::Staking_Create& stakecreate() const;
  ::TW::IoTeX::Proto::Staking_Create* release_stakecreate();
  ::TW::IoTeX::Proto::Staking_Create* mutable_stakecreate();
  void set_allocated_stakecreate(::TW::IoTeX::Proto::Staking_Create* stakecreate);
  private:
  const ::TW::IoTeX::Proto::Staking_Create& _internal_stakecreate() const;
  ::TW::IoTeX::Proto::Staking_Create* _internal_mutable_stakecreate();
  public:
  void unsafe_arena_set_allocated_stakecreate(
      ::TW::IoTeX::Proto::Staking_Create* stakecreate);
  ::TW::IoTeX::Proto::Staking_Create* unsafe_arena_release_stakecreate();

  // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
  bool has_stakeunstake() const;
  private:
  bool _internal_has_stakeunstake() const;
  public:
  void clear_stakeunstake();
  const ::TW::IoTeX::Proto::Staking_Reclaim& stakeunstake() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* release_stakeunstake();
  ::TW::IoTeX::Proto::Staking_Reclaim* mutable_stakeunstake();
  void set_allocated_stakeunstake(::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake);
  private:
  const ::TW::IoTeX::Proto::Staking_Reclaim& _internal_stakeunstake() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* _internal_mutable_stakeunstake();
  public:
  void unsafe_arena_set_allocated_stakeunstake(
      ::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake);
  ::TW::IoTeX::Proto::Staking_Reclaim* unsafe_arena_release_stakeunstake();

  // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
  bool has_stakewithdraw() const;
  private:
  bool _internal_has_stakewithdraw() const;
  public:
  void clear_stakewithdraw();
  const ::TW::IoTeX::Proto::Staking_Reclaim& stakewithdraw() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* release_stakewithdraw();
  ::TW::IoTeX::Proto::Staking_Reclaim* mutable_stakewithdraw();
  void set_allocated_stakewithdraw(::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw);
  private:
  const ::TW::IoTeX::Proto::Staking_Reclaim& _internal_stakewithdraw() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* _internal_mutable_stakewithdraw();
  public:
  void unsafe_arena_set_allocated_stakewithdraw(
      ::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw);
  ::TW::IoTeX::Proto::Staking_Reclaim* unsafe_arena_release_stakewithdraw();

  // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
  bool has_stakeadddeposit() const;
  private:
  bool _internal_has_stakeadddeposit() const;
  public:
  void clear_stakeadddeposit();
  const ::TW::IoTeX::Proto::Staking_AddDeposit& stakeadddeposit() const;
  ::TW::IoTeX::Proto::Staking_AddDeposit* release_stakeadddeposit();
  ::TW::IoTeX::Proto::Staking_AddDeposit* mutable_stakeadddeposit();
  void set_allocated_stakeadddeposit(::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit);
  private:
  const ::TW::IoTeX::Proto::Staking_AddDeposit& _internal_stakeadddeposit() const;
  ::TW::IoTeX::Proto::Staking_AddDeposit* _internal_mutable_stakeadddeposit();
  public:
  void unsafe_arena_set_allocated_stakeadddeposit(
      ::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit);
  ::TW::IoTeX::Proto::Staking_AddDeposit* unsafe_arena_release_stakeadddeposit();

  // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
  bool has_stakerestake() const;
  private:
  bool _internal_has_stakerestake() const;
  public:
  void clear_stakerestake();
  const ::TW::IoTeX::Proto::Staking_Restake& stakerestake() const;
  ::TW::IoTeX::Proto::Staking_Restake* release_stakerestake();
  ::TW::IoTeX::Proto::Staking_Restake* mutable_stakerestake();
  void set_allocated_stakerestake(::TW::IoTeX::Proto::Staking_Restake* stakerestake);
  private:
  const ::TW::IoTeX::Proto::Staking_Restake& _internal_stakerestake() const;
  ::TW::IoTeX::Proto::Staking_Restake* _internal_mutable_stakerestake();
  public:
  void unsafe_arena_set_allocated_stakerestake(
      ::TW::IoTeX::Proto::Staking_Restake* stakerestake);
  ::TW::IoTeX::Proto::Staking_Restake* unsafe_arena_release_stakerestake();

  // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
  bool has_stakechangecandidate() const;
  private:
  bool _internal_has_stakechangecandidate() const;
  public:
  void clear_stakechangecandidate();
  const ::TW::IoTeX::Proto::Staking_ChangeCandidate& stakechangecandidate() const;
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* release_stakechangecandidate();
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* mutable_stakechangecandidate();
  void set_allocated_stakechangecandidate(::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate);
  private:
  const ::TW::IoTeX::Proto::Staking_ChangeCandidate& _internal_stakechangecandidate() const;
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* _internal_mutable_stakechangecandidate();
  public:
  void unsafe_arena_set_allocated_stakechangecandidate(
      ::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate);
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* unsafe_arena_release_stakechangecandidate();

  // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
  bool has_staketransferownership() const;
  private:
  bool _internal_has_staketransferownership() const;
  public:
  void clear_staketransferownership();
  const ::TW::IoTeX::Proto::Staking_TransferOwnership& staketransferownership() const;
  ::TW::IoTeX::Proto::Staking_TransferOwnership* release_staketransferownership();
  ::TW::IoTeX::Proto::Staking_TransferOwnership* mutable_staketransferownership();
  void set_allocated_staketransferownership(::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership);
  private:
  const ::TW::IoTeX::Proto::Staking_TransferOwnership& _internal_staketransferownership() const;
  ::TW::IoTeX::Proto::Staking_TransferOwnership* _internal_mutable_staketransferownership();
  public:
  void unsafe_arena_set_allocated_staketransferownership(
      ::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership);
  ::TW::IoTeX::Proto::Staking_TransferOwnership* unsafe_arena_release_staketransferownership();

  // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
  bool has_candidateregister() const;
  private:
  bool _internal_has_candidateregister() const;
  public:
  void clear_candidateregister();
  const ::TW::IoTeX::Proto::Staking_CandidateRegister& candidateregister() const;
  ::TW::IoTeX::Proto::Staking_CandidateRegister* release_candidateregister();
  ::TW::IoTeX::Proto::Staking_CandidateRegister* mutable_candidateregister();
  void set_allocated_candidateregister(::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister);
  private:
  const ::TW::IoTeX::Proto::Staking_CandidateRegister& _internal_candidateregister() const;
  ::TW::IoTeX::Proto::Staking_CandidateRegister* _internal_mutable_candidateregister();
  public:
  void unsafe_arena_set_allocated_candidateregister(
      ::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister);
  ::TW::IoTeX::Proto::Staking_CandidateRegister* unsafe_arena_release_candidateregister();

  // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
  bool has_candidateupdate() const;
  private:
  bool _internal_has_candidateupdate() const;
  public:
  void clear_candidateupdate();
  const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& candidateupdate() const;
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* release_candidateupdate();
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* mutable_candidateupdate();
  void set_allocated_candidateupdate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate);
  private:
  const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& _internal_candidateupdate() const;
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* _internal_mutable_candidateupdate();
  public:
  void unsafe_arena_set_allocated_candidateupdate(
      ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate);
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* unsafe_arena_release_candidateupdate();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_call();
  void set_has_stakecreate();
  void set_has_stakeunstake();
  void set_has_stakewithdraw();
  void set_has_stakeadddeposit();
  void set_has_stakerestake();
  void set_has_stakechangecandidate();
  void set_has_staketransferownership();
  void set_has_candidateregister();
  void set_has_candidateupdate();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasprice_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privatekey_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gaslimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  union ActionUnion {
    ActionUnion() {}
    ::TW::IoTeX::Proto::Transfer* transfer_;
    ::TW::IoTeX::Proto::ContractCall* call_;
    ::TW::IoTeX::Proto::Staking_Create* stakecreate_;
    ::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake_;
    ::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw_;
    ::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit_;
    ::TW::IoTeX::Proto::Staking_Restake* stakerestake_;
    ::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate_;
    ::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership_;
    ::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister_;
    ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kHashFieldNumber = 2,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // bytes hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class ActionCore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.ActionCore) */ {
 public:
  inline ActionCore() : ActionCore(nullptr) {}
  virtual ~ActionCore();

  ActionCore(const ActionCore& from);
  ActionCore(ActionCore&& from) noexcept
    : ActionCore() {
    *this = ::std::move(from);
  }

  inline ActionCore& operator=(const ActionCore& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionCore& operator=(ActionCore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionCore& default_instance();

  enum ActionCase {
    kTransfer = 10,
    kExecution = 12,
    kStakeCreate = 40,
    kStakeUnstake = 41,
    kStakeWithdraw = 42,
    kStakeAddDeposit = 43,
    kStakeRestake = 44,
    kStakeChangeCandidate = 45,
    kStakeTransferOwnership = 46,
    kCandidateRegister = 47,
    kCandidateUpdate = 48,
    ACTION_NOT_SET = 0,
  };

  static inline const ActionCore* internal_default_instance() {
    return reinterpret_cast<const ActionCore*>(
               &_ActionCore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ActionCore& a, ActionCore& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionCore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionCore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionCore* New() const final {
    return CreateMaybeMessage<ActionCore>(nullptr);
  }

  ActionCore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionCore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionCore& from);
  void MergeFrom(const ActionCore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionCore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.ActionCore";
  }
  protected:
  explicit ActionCore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasPriceFieldNumber = 4,
    kNonceFieldNumber = 2,
    kGasLimitFieldNumber = 3,
    kVersionFieldNumber = 1,
    kTransferFieldNumber = 10,
    kExecutionFieldNumber = 12,
    kStakeCreateFieldNumber = 40,
    kStakeUnstakeFieldNumber = 41,
    kStakeWithdrawFieldNumber = 42,
    kStakeAddDepositFieldNumber = 43,
    kStakeRestakeFieldNumber = 44,
    kStakeChangeCandidateFieldNumber = 45,
    kStakeTransferOwnershipFieldNumber = 46,
    kCandidateRegisterFieldNumber = 47,
    kCandidateUpdateFieldNumber = 48,
  };
  // string gasPrice = 4;
  void clear_gasprice();
  const std::string& gasprice() const;
  void set_gasprice(const std::string& value);
  void set_gasprice(std::string&& value);
  void set_gasprice(const char* value);
  void set_gasprice(const char* value, size_t size);
  std::string* mutable_gasprice();
  std::string* release_gasprice();
  void set_allocated_gasprice(std::string* gasprice);
  private:
  const std::string& _internal_gasprice() const;
  void _internal_set_gasprice(const std::string& value);
  std::string* _internal_mutable_gasprice();
  public:

  // uint64 nonce = 2;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 gasLimit = 3;
  void clear_gaslimit();
  ::PROTOBUF_NAMESPACE_ID::uint64 gaslimit() const;
  void set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gaslimit() const;
  void _internal_set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .TW.IoTeX.Proto.Transfer transfer = 10;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::IoTeX::Proto::Transfer& transfer() const;
  ::TW::IoTeX::Proto::Transfer* release_transfer();
  ::TW::IoTeX::Proto::Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::IoTeX::Proto::Transfer* transfer);
  private:
  const ::TW::IoTeX::Proto::Transfer& _internal_transfer() const;
  ::TW::IoTeX::Proto::Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::IoTeX::Proto::Transfer* transfer);
  ::TW::IoTeX::Proto::Transfer* unsafe_arena_release_transfer();

  // .TW.IoTeX.Proto.ContractCall execution = 12;
  bool has_execution() const;
  private:
  bool _internal_has_execution() const;
  public:
  void clear_execution();
  const ::TW::IoTeX::Proto::ContractCall& execution() const;
  ::TW::IoTeX::Proto::ContractCall* release_execution();
  ::TW::IoTeX::Proto::ContractCall* mutable_execution();
  void set_allocated_execution(::TW::IoTeX::Proto::ContractCall* execution);
  private:
  const ::TW::IoTeX::Proto::ContractCall& _internal_execution() const;
  ::TW::IoTeX::Proto::ContractCall* _internal_mutable_execution();
  public:
  void unsafe_arena_set_allocated_execution(
      ::TW::IoTeX::Proto::ContractCall* execution);
  ::TW::IoTeX::Proto::ContractCall* unsafe_arena_release_execution();

  // .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
  bool has_stakecreate() const;
  private:
  bool _internal_has_stakecreate() const;
  public:
  void clear_stakecreate();
  const ::TW::IoTeX::Proto::Staking_Create& stakecreate() const;
  ::TW::IoTeX::Proto::Staking_Create* release_stakecreate();
  ::TW::IoTeX::Proto::Staking_Create* mutable_stakecreate();
  void set_allocated_stakecreate(::TW::IoTeX::Proto::Staking_Create* stakecreate);
  private:
  const ::TW::IoTeX::Proto::Staking_Create& _internal_stakecreate() const;
  ::TW::IoTeX::Proto::Staking_Create* _internal_mutable_stakecreate();
  public:
  void unsafe_arena_set_allocated_stakecreate(
      ::TW::IoTeX::Proto::Staking_Create* stakecreate);
  ::TW::IoTeX::Proto::Staking_Create* unsafe_arena_release_stakecreate();

  // .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
  bool has_stakeunstake() const;
  private:
  bool _internal_has_stakeunstake() const;
  public:
  void clear_stakeunstake();
  const ::TW::IoTeX::Proto::Staking_Reclaim& stakeunstake() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* release_stakeunstake();
  ::TW::IoTeX::Proto::Staking_Reclaim* mutable_stakeunstake();
  void set_allocated_stakeunstake(::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake);
  private:
  const ::TW::IoTeX::Proto::Staking_Reclaim& _internal_stakeunstake() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* _internal_mutable_stakeunstake();
  public:
  void unsafe_arena_set_allocated_stakeunstake(
      ::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake);
  ::TW::IoTeX::Proto::Staking_Reclaim* unsafe_arena_release_stakeunstake();

  // .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
  bool has_stakewithdraw() const;
  private:
  bool _internal_has_stakewithdraw() const;
  public:
  void clear_stakewithdraw();
  const ::TW::IoTeX::Proto::Staking_Reclaim& stakewithdraw() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* release_stakewithdraw();
  ::TW::IoTeX::Proto::Staking_Reclaim* mutable_stakewithdraw();
  void set_allocated_stakewithdraw(::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw);
  private:
  const ::TW::IoTeX::Proto::Staking_Reclaim& _internal_stakewithdraw() const;
  ::TW::IoTeX::Proto::Staking_Reclaim* _internal_mutable_stakewithdraw();
  public:
  void unsafe_arena_set_allocated_stakewithdraw(
      ::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw);
  ::TW::IoTeX::Proto::Staking_Reclaim* unsafe_arena_release_stakewithdraw();

  // .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
  bool has_stakeadddeposit() const;
  private:
  bool _internal_has_stakeadddeposit() const;
  public:
  void clear_stakeadddeposit();
  const ::TW::IoTeX::Proto::Staking_AddDeposit& stakeadddeposit() const;
  ::TW::IoTeX::Proto::Staking_AddDeposit* release_stakeadddeposit();
  ::TW::IoTeX::Proto::Staking_AddDeposit* mutable_stakeadddeposit();
  void set_allocated_stakeadddeposit(::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit);
  private:
  const ::TW::IoTeX::Proto::Staking_AddDeposit& _internal_stakeadddeposit() const;
  ::TW::IoTeX::Proto::Staking_AddDeposit* _internal_mutable_stakeadddeposit();
  public:
  void unsafe_arena_set_allocated_stakeadddeposit(
      ::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit);
  ::TW::IoTeX::Proto::Staking_AddDeposit* unsafe_arena_release_stakeadddeposit();

  // .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
  bool has_stakerestake() const;
  private:
  bool _internal_has_stakerestake() const;
  public:
  void clear_stakerestake();
  const ::TW::IoTeX::Proto::Staking_Restake& stakerestake() const;
  ::TW::IoTeX::Proto::Staking_Restake* release_stakerestake();
  ::TW::IoTeX::Proto::Staking_Restake* mutable_stakerestake();
  void set_allocated_stakerestake(::TW::IoTeX::Proto::Staking_Restake* stakerestake);
  private:
  const ::TW::IoTeX::Proto::Staking_Restake& _internal_stakerestake() const;
  ::TW::IoTeX::Proto::Staking_Restake* _internal_mutable_stakerestake();
  public:
  void unsafe_arena_set_allocated_stakerestake(
      ::TW::IoTeX::Proto::Staking_Restake* stakerestake);
  ::TW::IoTeX::Proto::Staking_Restake* unsafe_arena_release_stakerestake();

  // .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
  bool has_stakechangecandidate() const;
  private:
  bool _internal_has_stakechangecandidate() const;
  public:
  void clear_stakechangecandidate();
  const ::TW::IoTeX::Proto::Staking_ChangeCandidate& stakechangecandidate() const;
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* release_stakechangecandidate();
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* mutable_stakechangecandidate();
  void set_allocated_stakechangecandidate(::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate);
  private:
  const ::TW::IoTeX::Proto::Staking_ChangeCandidate& _internal_stakechangecandidate() const;
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* _internal_mutable_stakechangecandidate();
  public:
  void unsafe_arena_set_allocated_stakechangecandidate(
      ::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate);
  ::TW::IoTeX::Proto::Staking_ChangeCandidate* unsafe_arena_release_stakechangecandidate();

  // .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
  bool has_staketransferownership() const;
  private:
  bool _internal_has_staketransferownership() const;
  public:
  void clear_staketransferownership();
  const ::TW::IoTeX::Proto::Staking_TransferOwnership& staketransferownership() const;
  ::TW::IoTeX::Proto::Staking_TransferOwnership* release_staketransferownership();
  ::TW::IoTeX::Proto::Staking_TransferOwnership* mutable_staketransferownership();
  void set_allocated_staketransferownership(::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership);
  private:
  const ::TW::IoTeX::Proto::Staking_TransferOwnership& _internal_staketransferownership() const;
  ::TW::IoTeX::Proto::Staking_TransferOwnership* _internal_mutable_staketransferownership();
  public:
  void unsafe_arena_set_allocated_staketransferownership(
      ::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership);
  ::TW::IoTeX::Proto::Staking_TransferOwnership* unsafe_arena_release_staketransferownership();

  // .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
  bool has_candidateregister() const;
  private:
  bool _internal_has_candidateregister() const;
  public:
  void clear_candidateregister();
  const ::TW::IoTeX::Proto::Staking_CandidateRegister& candidateregister() const;
  ::TW::IoTeX::Proto::Staking_CandidateRegister* release_candidateregister();
  ::TW::IoTeX::Proto::Staking_CandidateRegister* mutable_candidateregister();
  void set_allocated_candidateregister(::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister);
  private:
  const ::TW::IoTeX::Proto::Staking_CandidateRegister& _internal_candidateregister() const;
  ::TW::IoTeX::Proto::Staking_CandidateRegister* _internal_mutable_candidateregister();
  public:
  void unsafe_arena_set_allocated_candidateregister(
      ::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister);
  ::TW::IoTeX::Proto::Staking_CandidateRegister* unsafe_arena_release_candidateregister();

  // .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
  bool has_candidateupdate() const;
  private:
  bool _internal_has_candidateupdate() const;
  public:
  void clear_candidateupdate();
  const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& candidateupdate() const;
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* release_candidateupdate();
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* mutable_candidateupdate();
  void set_allocated_candidateupdate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate);
  private:
  const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& _internal_candidateupdate() const;
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* _internal_mutable_candidateupdate();
  public:
  void unsafe_arena_set_allocated_candidateupdate(
      ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate);
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* unsafe_arena_release_candidateupdate();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.ActionCore)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_execution();
  void set_has_stakecreate();
  void set_has_stakeunstake();
  void set_has_stakewithdraw();
  void set_has_stakeadddeposit();
  void set_has_stakerestake();
  void set_has_stakechangecandidate();
  void set_has_staketransferownership();
  void set_has_candidateregister();
  void set_has_candidateupdate();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gaslimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  union ActionUnion {
    ActionUnion() {}
    ::TW::IoTeX::Proto::Transfer* transfer_;
    ::TW::IoTeX::Proto::ContractCall* execution_;
    ::TW::IoTeX::Proto::Staking_Create* stakecreate_;
    ::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake_;
    ::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw_;
    ::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit_;
    ::TW::IoTeX::Proto::Staking_Restake* stakerestake_;
    ::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate_;
    ::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership_;
    ::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister_;
    ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IoTeX_2eproto;
};
// -------------------------------------------------------------------

class Action PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IoTeX.Proto.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IoTeX.Proto.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IoTeX_2eproto);
    return ::descriptor_table_IoTeX_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderPubKeyFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kCoreFieldNumber = 1,
  };
  // bytes senderPubKey = 2;
  void clear_senderpubkey();
  const std::string& senderpubkey() const;
  void set_senderpubkey(const std::string& value);
  void set_senderpubkey(std::string&& value);
  void set_senderpubkey(const char* value);
  void set_senderpubkey(const void* value, size_t size);
  std::string* mutable_senderpubkey();
  std::string* release_senderpubkey();
  void set_allocated_senderpubkey(std::string* senderpubkey);
  private:
  const std::string& _internal_senderpubkey() const;
  void _internal_set_senderpubkey(const std::string& value);
  std::string* _internal_mutable_senderpubkey();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .TW.IoTeX.Proto.ActionCore core = 1;
  bool has_core() const;
  private:
  bool _internal_has_core() const;
  public:
  void clear_core();
  const ::TW::IoTeX::Proto::ActionCore& core() const;
  ::TW::IoTeX::Proto::ActionCore* release_core();
  ::TW::IoTeX::Proto::ActionCore* mutable_core();
  void set_allocated_core(::TW::IoTeX::Proto::ActionCore* core);
  private:
  const ::TW::IoTeX::Proto::ActionCore& _internal_core() const;
  ::TW::IoTeX::Proto::ActionCore* _internal_mutable_core();
  public:
  void unsafe_arena_set_allocated_core(
      ::TW::IoTeX::Proto::ActionCore* core);
  ::TW::IoTeX::Proto::ActionCore* unsafe_arena_release_core();

  // @@protoc_insertion_point(class_scope:TW.IoTeX.Proto.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senderpubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::TW::IoTeX::Proto::ActionCore* core_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IoTeX_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transfer

// string amount = 1;
inline void Transfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Transfer.amount)
  return _internal_amount();
}
inline void Transfer::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Transfer.amount)
}
inline std::string* Transfer::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Transfer.amount)
  return _internal_mutable_amount();
}
inline const std::string& Transfer::_internal_amount() const {
  return amount_.Get();
}
inline void Transfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transfer::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Transfer.amount)
}
inline void Transfer::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Transfer.amount)
}
inline void Transfer::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Transfer.amount)
}
inline std::string* Transfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Transfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Transfer.amount)
}

// string recipient = 2;
inline void Transfer::clear_recipient() {
  recipient_.ClearToEmpty();
}
inline const std::string& Transfer::recipient() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Transfer.recipient)
  return _internal_recipient();
}
inline void Transfer::set_recipient(const std::string& value) {
  _internal_set_recipient(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Transfer.recipient)
}
inline std::string* Transfer::mutable_recipient() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Transfer.recipient)
  return _internal_mutable_recipient();
}
inline const std::string& Transfer::_internal_recipient() const {
  return recipient_.Get();
}
inline void Transfer::_internal_set_recipient(const std::string& value) {
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transfer::set_recipient(std::string&& value) {
  
  recipient_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Transfer.recipient)
}
inline void Transfer::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Transfer.recipient)
}
inline void Transfer::set_recipient(const char* value,
    size_t size) {
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Transfer.recipient)
}
inline std::string* Transfer::_internal_mutable_recipient() {
  
  return recipient_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transfer::release_recipient() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Transfer.recipient)
  return recipient_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Transfer.recipient)
}

// bytes payload = 3;
inline void Transfer::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Transfer::payload() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Transfer.payload)
  return _internal_payload();
}
inline void Transfer::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Transfer.payload)
}
inline std::string* Transfer::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Transfer.payload)
  return _internal_mutable_payload();
}
inline const std::string& Transfer::_internal_payload() const {
  return payload_.Get();
}
inline void Transfer::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transfer::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Transfer.payload)
}
inline void Transfer::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Transfer.payload)
}
inline void Transfer::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Transfer.payload)
}
inline std::string* Transfer::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transfer::release_payload() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Transfer.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Transfer.payload)
}

// -------------------------------------------------------------------

// Staking_Create

// string candidateName = 1;
inline void Staking_Create::clear_candidatename() {
  candidatename_.ClearToEmpty();
}
inline const std::string& Staking_Create::candidatename() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Create.candidateName)
  return _internal_candidatename();
}
inline void Staking_Create::set_candidatename(const std::string& value) {
  _internal_set_candidatename(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Create.candidateName)
}
inline std::string* Staking_Create::mutable_candidatename() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.Create.candidateName)
  return _internal_mutable_candidatename();
}
inline const std::string& Staking_Create::_internal_candidatename() const {
  return candidatename_.Get();
}
inline void Staking_Create::_internal_set_candidatename(const std::string& value) {
  
  candidatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_Create::set_candidatename(std::string&& value) {
  
  candidatename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.Create.candidateName)
}
inline void Staking_Create::set_candidatename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.Create.candidateName)
}
inline void Staking_Create::set_candidatename(const char* value,
    size_t size) {
  
  candidatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.Create.candidateName)
}
inline std::string* Staking_Create::_internal_mutable_candidatename() {
  
  return candidatename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_Create::release_candidatename() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.Create.candidateName)
  return candidatename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_Create::set_allocated_candidatename(std::string* candidatename) {
  if (candidatename != nullptr) {
    
  } else {
    
  }
  candidatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidatename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.Create.candidateName)
}

// string stakedAmount = 2;
inline void Staking_Create::clear_stakedamount() {
  stakedamount_.ClearToEmpty();
}
inline const std::string& Staking_Create::stakedamount() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Create.stakedAmount)
  return _internal_stakedamount();
}
inline void Staking_Create::set_stakedamount(const std::string& value) {
  _internal_set_stakedamount(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Create.stakedAmount)
}
inline std::string* Staking_Create::mutable_stakedamount() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.Create.stakedAmount)
  return _internal_mutable_stakedamount();
}
inline const std::string& Staking_Create::_internal_stakedamount() const {
  return stakedamount_.Get();
}
inline void Staking_Create::_internal_set_stakedamount(const std::string& value) {
  
  stakedamount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_Create::set_stakedamount(std::string&& value) {
  
  stakedamount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.Create.stakedAmount)
}
inline void Staking_Create::set_stakedamount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stakedamount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.Create.stakedAmount)
}
inline void Staking_Create::set_stakedamount(const char* value,
    size_t size) {
  
  stakedamount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.Create.stakedAmount)
}
inline std::string* Staking_Create::_internal_mutable_stakedamount() {
  
  return stakedamount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_Create::release_stakedamount() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.Create.stakedAmount)
  return stakedamount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_Create::set_allocated_stakedamount(std::string* stakedamount) {
  if (stakedamount != nullptr) {
    
  } else {
    
  }
  stakedamount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stakedamount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.Create.stakedAmount)
}

// uint32 stakedDuration = 3;
inline void Staking_Create::clear_stakedduration() {
  stakedduration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Staking_Create::_internal_stakedduration() const {
  return stakedduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Staking_Create::stakedduration() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Create.stakedDuration)
  return _internal_stakedduration();
}
inline void Staking_Create::_internal_set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stakedduration_ = value;
}
inline void Staking_Create::set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stakedduration(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Create.stakedDuration)
}

// bool autoStake = 4;
inline void Staking_Create::clear_autostake() {
  autostake_ = false;
}
inline bool Staking_Create::_internal_autostake() const {
  return autostake_;
}
inline bool Staking_Create::autostake() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Create.autoStake)
  return _internal_autostake();
}
inline void Staking_Create::_internal_set_autostake(bool value) {
  
  autostake_ = value;
}
inline void Staking_Create::set_autostake(bool value) {
  _internal_set_autostake(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Create.autoStake)
}

// bytes payload = 5;
inline void Staking_Create::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Staking_Create::payload() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Create.payload)
  return _internal_payload();
}
inline void Staking_Create::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Create.payload)
}
inline std::string* Staking_Create::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.Create.payload)
  return _internal_mutable_payload();
}
inline const std::string& Staking_Create::_internal_payload() const {
  return payload_.Get();
}
inline void Staking_Create::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_Create::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.Create.payload)
}
inline void Staking_Create::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.Create.payload)
}
inline void Staking_Create::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.Create.payload)
}
inline std::string* Staking_Create::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_Create::release_payload() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.Create.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_Create::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.Create.payload)
}

// -------------------------------------------------------------------

// Staking_Reclaim

// uint64 bucketIndex = 1;
inline void Staking_Reclaim::clear_bucketindex() {
  bucketindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_Reclaim::_internal_bucketindex() const {
  return bucketindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_Reclaim::bucketindex() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Reclaim.bucketIndex)
  return _internal_bucketindex();
}
inline void Staking_Reclaim::_internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bucketindex_ = value;
}
inline void Staking_Reclaim::set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bucketindex(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Reclaim.bucketIndex)
}

// bytes payload = 2;
inline void Staking_Reclaim::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Staking_Reclaim::payload() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Reclaim.payload)
  return _internal_payload();
}
inline void Staking_Reclaim::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Reclaim.payload)
}
inline std::string* Staking_Reclaim::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.Reclaim.payload)
  return _internal_mutable_payload();
}
inline const std::string& Staking_Reclaim::_internal_payload() const {
  return payload_.Get();
}
inline void Staking_Reclaim::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_Reclaim::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.Reclaim.payload)
}
inline void Staking_Reclaim::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.Reclaim.payload)
}
inline void Staking_Reclaim::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.Reclaim.payload)
}
inline std::string* Staking_Reclaim::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_Reclaim::release_payload() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.Reclaim.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_Reclaim::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.Reclaim.payload)
}

// -------------------------------------------------------------------

// Staking_AddDeposit

// uint64 bucketIndex = 1;
inline void Staking_AddDeposit::clear_bucketindex() {
  bucketindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_AddDeposit::_internal_bucketindex() const {
  return bucketindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_AddDeposit::bucketindex() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.AddDeposit.bucketIndex)
  return _internal_bucketindex();
}
inline void Staking_AddDeposit::_internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bucketindex_ = value;
}
inline void Staking_AddDeposit::set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bucketindex(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.AddDeposit.bucketIndex)
}

// string amount = 2;
inline void Staking_AddDeposit::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Staking_AddDeposit::amount() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.AddDeposit.amount)
  return _internal_amount();
}
inline void Staking_AddDeposit::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.AddDeposit.amount)
}
inline std::string* Staking_AddDeposit::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.AddDeposit.amount)
  return _internal_mutable_amount();
}
inline const std::string& Staking_AddDeposit::_internal_amount() const {
  return amount_.Get();
}
inline void Staking_AddDeposit::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_AddDeposit::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.AddDeposit.amount)
}
inline void Staking_AddDeposit::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.AddDeposit.amount)
}
inline void Staking_AddDeposit::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.AddDeposit.amount)
}
inline std::string* Staking_AddDeposit::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_AddDeposit::release_amount() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.AddDeposit.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_AddDeposit::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.AddDeposit.amount)
}

// bytes payload = 3;
inline void Staking_AddDeposit::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Staking_AddDeposit::payload() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.AddDeposit.payload)
  return _internal_payload();
}
inline void Staking_AddDeposit::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.AddDeposit.payload)
}
inline std::string* Staking_AddDeposit::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.AddDeposit.payload)
  return _internal_mutable_payload();
}
inline const std::string& Staking_AddDeposit::_internal_payload() const {
  return payload_.Get();
}
inline void Staking_AddDeposit::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_AddDeposit::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.AddDeposit.payload)
}
inline void Staking_AddDeposit::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.AddDeposit.payload)
}
inline void Staking_AddDeposit::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.AddDeposit.payload)
}
inline std::string* Staking_AddDeposit::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_AddDeposit::release_payload() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.AddDeposit.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_AddDeposit::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.AddDeposit.payload)
}

// -------------------------------------------------------------------

// Staking_Restake

// uint64 bucketIndex = 1;
inline void Staking_Restake::clear_bucketindex() {
  bucketindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_Restake::_internal_bucketindex() const {
  return bucketindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_Restake::bucketindex() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Restake.bucketIndex)
  return _internal_bucketindex();
}
inline void Staking_Restake::_internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bucketindex_ = value;
}
inline void Staking_Restake::set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bucketindex(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Restake.bucketIndex)
}

// uint32 stakedDuration = 2;
inline void Staking_Restake::clear_stakedduration() {
  stakedduration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Staking_Restake::_internal_stakedduration() const {
  return stakedduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Staking_Restake::stakedduration() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Restake.stakedDuration)
  return _internal_stakedduration();
}
inline void Staking_Restake::_internal_set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stakedduration_ = value;
}
inline void Staking_Restake::set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stakedduration(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Restake.stakedDuration)
}

// bool autoStake = 3;
inline void Staking_Restake::clear_autostake() {
  autostake_ = false;
}
inline bool Staking_Restake::_internal_autostake() const {
  return autostake_;
}
inline bool Staking_Restake::autostake() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Restake.autoStake)
  return _internal_autostake();
}
inline void Staking_Restake::_internal_set_autostake(bool value) {
  
  autostake_ = value;
}
inline void Staking_Restake::set_autostake(bool value) {
  _internal_set_autostake(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Restake.autoStake)
}

// bytes payload = 4;
inline void Staking_Restake::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Staking_Restake::payload() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.Restake.payload)
  return _internal_payload();
}
inline void Staking_Restake::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.Restake.payload)
}
inline std::string* Staking_Restake::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.Restake.payload)
  return _internal_mutable_payload();
}
inline const std::string& Staking_Restake::_internal_payload() const {
  return payload_.Get();
}
inline void Staking_Restake::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_Restake::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.Restake.payload)
}
inline void Staking_Restake::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.Restake.payload)
}
inline void Staking_Restake::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.Restake.payload)
}
inline std::string* Staking_Restake::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_Restake::release_payload() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.Restake.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_Restake::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.Restake.payload)
}

// -------------------------------------------------------------------

// Staking_ChangeCandidate

// uint64 bucketIndex = 1;
inline void Staking_ChangeCandidate::clear_bucketindex() {
  bucketindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_ChangeCandidate::_internal_bucketindex() const {
  return bucketindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_ChangeCandidate::bucketindex() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.ChangeCandidate.bucketIndex)
  return _internal_bucketindex();
}
inline void Staking_ChangeCandidate::_internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bucketindex_ = value;
}
inline void Staking_ChangeCandidate::set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bucketindex(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.ChangeCandidate.bucketIndex)
}

// string candidateName = 2;
inline void Staking_ChangeCandidate::clear_candidatename() {
  candidatename_.ClearToEmpty();
}
inline const std::string& Staking_ChangeCandidate::candidatename() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName)
  return _internal_candidatename();
}
inline void Staking_ChangeCandidate::set_candidatename(const std::string& value) {
  _internal_set_candidatename(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName)
}
inline std::string* Staking_ChangeCandidate::mutable_candidatename() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName)
  return _internal_mutable_candidatename();
}
inline const std::string& Staking_ChangeCandidate::_internal_candidatename() const {
  return candidatename_.Get();
}
inline void Staking_ChangeCandidate::_internal_set_candidatename(const std::string& value) {
  
  candidatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_ChangeCandidate::set_candidatename(std::string&& value) {
  
  candidatename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName)
}
inline void Staking_ChangeCandidate::set_candidatename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName)
}
inline void Staking_ChangeCandidate::set_candidatename(const char* value,
    size_t size) {
  
  candidatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName)
}
inline std::string* Staking_ChangeCandidate::_internal_mutable_candidatename() {
  
  return candidatename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_ChangeCandidate::release_candidatename() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName)
  return candidatename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_ChangeCandidate::set_allocated_candidatename(std::string* candidatename) {
  if (candidatename != nullptr) {
    
  } else {
    
  }
  candidatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidatename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.ChangeCandidate.candidateName)
}

// bytes payload = 3;
inline void Staking_ChangeCandidate::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Staking_ChangeCandidate::payload() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.ChangeCandidate.payload)
  return _internal_payload();
}
inline void Staking_ChangeCandidate::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.ChangeCandidate.payload)
}
inline std::string* Staking_ChangeCandidate::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.ChangeCandidate.payload)
  return _internal_mutable_payload();
}
inline const std::string& Staking_ChangeCandidate::_internal_payload() const {
  return payload_.Get();
}
inline void Staking_ChangeCandidate::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_ChangeCandidate::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.ChangeCandidate.payload)
}
inline void Staking_ChangeCandidate::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.ChangeCandidate.payload)
}
inline void Staking_ChangeCandidate::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.ChangeCandidate.payload)
}
inline std::string* Staking_ChangeCandidate::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_ChangeCandidate::release_payload() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.ChangeCandidate.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_ChangeCandidate::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.ChangeCandidate.payload)
}

// -------------------------------------------------------------------

// Staking_TransferOwnership

// uint64 bucketIndex = 1;
inline void Staking_TransferOwnership::clear_bucketindex() {
  bucketindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_TransferOwnership::_internal_bucketindex() const {
  return bucketindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Staking_TransferOwnership::bucketindex() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.TransferOwnership.bucketIndex)
  return _internal_bucketindex();
}
inline void Staking_TransferOwnership::_internal_set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bucketindex_ = value;
}
inline void Staking_TransferOwnership::set_bucketindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bucketindex(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.TransferOwnership.bucketIndex)
}

// string voterAddress = 2;
inline void Staking_TransferOwnership::clear_voteraddress() {
  voteraddress_.ClearToEmpty();
}
inline const std::string& Staking_TransferOwnership::voteraddress() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress)
  return _internal_voteraddress();
}
inline void Staking_TransferOwnership::set_voteraddress(const std::string& value) {
  _internal_set_voteraddress(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress)
}
inline std::string* Staking_TransferOwnership::mutable_voteraddress() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress)
  return _internal_mutable_voteraddress();
}
inline const std::string& Staking_TransferOwnership::_internal_voteraddress() const {
  return voteraddress_.Get();
}
inline void Staking_TransferOwnership::_internal_set_voteraddress(const std::string& value) {
  
  voteraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_TransferOwnership::set_voteraddress(std::string&& value) {
  
  voteraddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress)
}
inline void Staking_TransferOwnership::set_voteraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voteraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress)
}
inline void Staking_TransferOwnership::set_voteraddress(const char* value,
    size_t size) {
  
  voteraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress)
}
inline std::string* Staking_TransferOwnership::_internal_mutable_voteraddress() {
  
  return voteraddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_TransferOwnership::release_voteraddress() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress)
  return voteraddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_TransferOwnership::set_allocated_voteraddress(std::string* voteraddress) {
  if (voteraddress != nullptr) {
    
  } else {
    
  }
  voteraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voteraddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.TransferOwnership.voterAddress)
}

// bytes payload = 3;
inline void Staking_TransferOwnership::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Staking_TransferOwnership::payload() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.TransferOwnership.payload)
  return _internal_payload();
}
inline void Staking_TransferOwnership::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.TransferOwnership.payload)
}
inline std::string* Staking_TransferOwnership::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.TransferOwnership.payload)
  return _internal_mutable_payload();
}
inline const std::string& Staking_TransferOwnership::_internal_payload() const {
  return payload_.Get();
}
inline void Staking_TransferOwnership::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_TransferOwnership::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.TransferOwnership.payload)
}
inline void Staking_TransferOwnership::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.TransferOwnership.payload)
}
inline void Staking_TransferOwnership::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.TransferOwnership.payload)
}
inline std::string* Staking_TransferOwnership::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_TransferOwnership::release_payload() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.TransferOwnership.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_TransferOwnership::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.TransferOwnership.payload)
}

// -------------------------------------------------------------------

// Staking_CandidateBasicInfo

// string name = 1;
inline void Staking_CandidateBasicInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Staking_CandidateBasicInfo::name() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.CandidateBasicInfo.name)
  return _internal_name();
}
inline void Staking_CandidateBasicInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.CandidateBasicInfo.name)
}
inline std::string* Staking_CandidateBasicInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.CandidateBasicInfo.name)
  return _internal_mutable_name();
}
inline const std::string& Staking_CandidateBasicInfo::_internal_name() const {
  return name_.Get();
}
inline void Staking_CandidateBasicInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_CandidateBasicInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.CandidateBasicInfo.name)
}
inline void Staking_CandidateBasicInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.CandidateBasicInfo.name)
}
inline void Staking_CandidateBasicInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.CandidateBasicInfo.name)
}
inline std::string* Staking_CandidateBasicInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_CandidateBasicInfo::release_name() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.CandidateBasicInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_CandidateBasicInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.CandidateBasicInfo.name)
}

// string operatorAddress = 2;
inline void Staking_CandidateBasicInfo::clear_operatoraddress() {
  operatoraddress_.ClearToEmpty();
}
inline const std::string& Staking_CandidateBasicInfo::operatoraddress() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress)
  return _internal_operatoraddress();
}
inline void Staking_CandidateBasicInfo::set_operatoraddress(const std::string& value) {
  _internal_set_operatoraddress(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress)
}
inline std::string* Staking_CandidateBasicInfo::mutable_operatoraddress() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress)
  return _internal_mutable_operatoraddress();
}
inline const std::string& Staking_CandidateBasicInfo::_internal_operatoraddress() const {
  return operatoraddress_.Get();
}
inline void Staking_CandidateBasicInfo::_internal_set_operatoraddress(const std::string& value) {
  
  operatoraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_CandidateBasicInfo::set_operatoraddress(std::string&& value) {
  
  operatoraddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress)
}
inline void Staking_CandidateBasicInfo::set_operatoraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operatoraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress)
}
inline void Staking_CandidateBasicInfo::set_operatoraddress(const char* value,
    size_t size) {
  
  operatoraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress)
}
inline std::string* Staking_CandidateBasicInfo::_internal_mutable_operatoraddress() {
  
  return operatoraddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_CandidateBasicInfo::release_operatoraddress() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress)
  return operatoraddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_CandidateBasicInfo::set_allocated_operatoraddress(std::string* operatoraddress) {
  if (operatoraddress != nullptr) {
    
  } else {
    
  }
  operatoraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operatoraddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.CandidateBasicInfo.operatorAddress)
}

// string rewardAddress = 3;
inline void Staking_CandidateBasicInfo::clear_rewardaddress() {
  rewardaddress_.ClearToEmpty();
}
inline const std::string& Staking_CandidateBasicInfo::rewardaddress() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress)
  return _internal_rewardaddress();
}
inline void Staking_CandidateBasicInfo::set_rewardaddress(const std::string& value) {
  _internal_set_rewardaddress(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress)
}
inline std::string* Staking_CandidateBasicInfo::mutable_rewardaddress() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress)
  return _internal_mutable_rewardaddress();
}
inline const std::string& Staking_CandidateBasicInfo::_internal_rewardaddress() const {
  return rewardaddress_.Get();
}
inline void Staking_CandidateBasicInfo::_internal_set_rewardaddress(const std::string& value) {
  
  rewardaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_CandidateBasicInfo::set_rewardaddress(std::string&& value) {
  
  rewardaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress)
}
inline void Staking_CandidateBasicInfo::set_rewardaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rewardaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress)
}
inline void Staking_CandidateBasicInfo::set_rewardaddress(const char* value,
    size_t size) {
  
  rewardaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress)
}
inline std::string* Staking_CandidateBasicInfo::_internal_mutable_rewardaddress() {
  
  return rewardaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_CandidateBasicInfo::release_rewardaddress() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress)
  return rewardaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_CandidateBasicInfo::set_allocated_rewardaddress(std::string* rewardaddress) {
  if (rewardaddress != nullptr) {
    
  } else {
    
  }
  rewardaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rewardaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.CandidateBasicInfo.rewardAddress)
}

// -------------------------------------------------------------------

// Staking_CandidateRegister

// .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidate = 1;
inline bool Staking_CandidateRegister::_internal_has_candidate() const {
  return this != internal_default_instance() && candidate_ != nullptr;
}
inline bool Staking_CandidateRegister::has_candidate() const {
  return _internal_has_candidate();
}
inline void Staking_CandidateRegister::clear_candidate() {
  if (GetArena() == nullptr && candidate_ != nullptr) {
    delete candidate_;
  }
  candidate_ = nullptr;
}
inline const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& Staking_CandidateRegister::_internal_candidate() const {
  const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* p = candidate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo&>(
      ::TW::IoTeX::Proto::_Staking_CandidateBasicInfo_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& Staking_CandidateRegister::candidate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.CandidateRegister.candidate)
  return _internal_candidate();
}
inline void Staking_CandidateRegister::unsafe_arena_set_allocated_candidate(
    ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_);
  }
  candidate_ = candidate;
  if (candidate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.CandidateRegister.candidate)
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Staking_CandidateRegister::release_candidate() {
  
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* temp = candidate_;
  candidate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Staking_CandidateRegister::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.CandidateRegister.candidate)
  
  ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* temp = candidate_;
  candidate_ = nullptr;
  return temp;
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Staking_CandidateRegister::_internal_mutable_candidate() {
  
  if (candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::IoTeX::Proto::Staking_CandidateBasicInfo>(GetArena());
    candidate_ = p;
  }
  return candidate_;
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Staking_CandidateRegister::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.CandidateRegister.candidate)
  return _internal_mutable_candidate();
}
inline void Staking_CandidateRegister::set_allocated_candidate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete candidate_;
  }
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidate);
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    
  } else {
    
  }
  candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.CandidateRegister.candidate)
}

// string stakedAmount = 2;
inline void Staking_CandidateRegister::clear_stakedamount() {
  stakedamount_.ClearToEmpty();
}
inline const std::string& Staking_CandidateRegister::stakedamount() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount)
  return _internal_stakedamount();
}
inline void Staking_CandidateRegister::set_stakedamount(const std::string& value) {
  _internal_set_stakedamount(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount)
}
inline std::string* Staking_CandidateRegister::mutable_stakedamount() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount)
  return _internal_mutable_stakedamount();
}
inline const std::string& Staking_CandidateRegister::_internal_stakedamount() const {
  return stakedamount_.Get();
}
inline void Staking_CandidateRegister::_internal_set_stakedamount(const std::string& value) {
  
  stakedamount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_CandidateRegister::set_stakedamount(std::string&& value) {
  
  stakedamount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount)
}
inline void Staking_CandidateRegister::set_stakedamount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stakedamount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount)
}
inline void Staking_CandidateRegister::set_stakedamount(const char* value,
    size_t size) {
  
  stakedamount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount)
}
inline std::string* Staking_CandidateRegister::_internal_mutable_stakedamount() {
  
  return stakedamount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_CandidateRegister::release_stakedamount() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount)
  return stakedamount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_CandidateRegister::set_allocated_stakedamount(std::string* stakedamount) {
  if (stakedamount != nullptr) {
    
  } else {
    
  }
  stakedamount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stakedamount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.CandidateRegister.stakedAmount)
}

// uint32 stakedDuration = 3;
inline void Staking_CandidateRegister::clear_stakedduration() {
  stakedduration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Staking_CandidateRegister::_internal_stakedduration() const {
  return stakedduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Staking_CandidateRegister::stakedduration() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.CandidateRegister.stakedDuration)
  return _internal_stakedduration();
}
inline void Staking_CandidateRegister::_internal_set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stakedduration_ = value;
}
inline void Staking_CandidateRegister::set_stakedduration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stakedduration(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.CandidateRegister.stakedDuration)
}

// bool autoStake = 4;
inline void Staking_CandidateRegister::clear_autostake() {
  autostake_ = false;
}
inline bool Staking_CandidateRegister::_internal_autostake() const {
  return autostake_;
}
inline bool Staking_CandidateRegister::autostake() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.CandidateRegister.autoStake)
  return _internal_autostake();
}
inline void Staking_CandidateRegister::_internal_set_autostake(bool value) {
  
  autostake_ = value;
}
inline void Staking_CandidateRegister::set_autostake(bool value) {
  _internal_set_autostake(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.CandidateRegister.autoStake)
}

// string ownerAddress = 5;
inline void Staking_CandidateRegister::clear_owneraddress() {
  owneraddress_.ClearToEmpty();
}
inline const std::string& Staking_CandidateRegister::owneraddress() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress)
  return _internal_owneraddress();
}
inline void Staking_CandidateRegister::set_owneraddress(const std::string& value) {
  _internal_set_owneraddress(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress)
}
inline std::string* Staking_CandidateRegister::mutable_owneraddress() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress)
  return _internal_mutable_owneraddress();
}
inline const std::string& Staking_CandidateRegister::_internal_owneraddress() const {
  return owneraddress_.Get();
}
inline void Staking_CandidateRegister::_internal_set_owneraddress(const std::string& value) {
  
  owneraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_CandidateRegister::set_owneraddress(std::string&& value) {
  
  owneraddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress)
}
inline void Staking_CandidateRegister::set_owneraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owneraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress)
}
inline void Staking_CandidateRegister::set_owneraddress(const char* value,
    size_t size) {
  
  owneraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress)
}
inline std::string* Staking_CandidateRegister::_internal_mutable_owneraddress() {
  
  return owneraddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_CandidateRegister::release_owneraddress() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress)
  return owneraddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_CandidateRegister::set_allocated_owneraddress(std::string* owneraddress) {
  if (owneraddress != nullptr) {
    
  } else {
    
  }
  owneraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owneraddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.CandidateRegister.ownerAddress)
}

// bytes payload = 6;
inline void Staking_CandidateRegister::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Staking_CandidateRegister::payload() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.CandidateRegister.payload)
  return _internal_payload();
}
inline void Staking_CandidateRegister::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Staking.CandidateRegister.payload)
}
inline std::string* Staking_CandidateRegister::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.CandidateRegister.payload)
  return _internal_mutable_payload();
}
inline const std::string& Staking_CandidateRegister::_internal_payload() const {
  return payload_.Get();
}
inline void Staking_CandidateRegister::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_CandidateRegister::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Staking.CandidateRegister.payload)
}
inline void Staking_CandidateRegister::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Staking.CandidateRegister.payload)
}
inline void Staking_CandidateRegister::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Staking.CandidateRegister.payload)
}
inline std::string* Staking_CandidateRegister::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_CandidateRegister::release_payload() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.CandidateRegister.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_CandidateRegister::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Staking.CandidateRegister.payload)
}

// -------------------------------------------------------------------

// Staking

// .TW.IoTeX.Proto.Staking.Create stakeCreate = 1;
inline bool Staking::_internal_has_stakecreate() const {
  return message_case() == kStakeCreate;
}
inline bool Staking::has_stakecreate() const {
  return _internal_has_stakecreate();
}
inline void Staking::set_has_stakecreate() {
  _oneof_case_[0] = kStakeCreate;
}
inline void Staking::clear_stakecreate() {
  if (_internal_has_stakecreate()) {
    if (GetArena() == nullptr) {
      delete message_.stakecreate_;
    }
    clear_has_message();
  }
}
inline ::TW::IoTeX::Proto::Staking_Create* Staking::release_stakecreate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.stakeCreate)
  if (_internal_has_stakecreate()) {
    clear_has_message();
      ::TW::IoTeX::Proto::Staking_Create* temp = message_.stakecreate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stakecreate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Create& Staking::_internal_stakecreate() const {
  return _internal_has_stakecreate()
      ? *message_.stakecreate_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Create&>(::TW::IoTeX::Proto::_Staking_Create_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Create& Staking::stakecreate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.stakeCreate)
  return _internal_stakecreate();
}
inline ::TW::IoTeX::Proto::Staking_Create* Staking::unsafe_arena_release_stakecreate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.Staking.stakeCreate)
  if (_internal_has_stakecreate()) {
    clear_has_message();
    ::TW::IoTeX::Proto::Staking_Create* temp = message_.stakecreate_;
    message_.stakecreate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_stakecreate(::TW::IoTeX::Proto::Staking_Create* stakecreate) {
  clear_message();
  if (stakecreate) {
    set_has_stakecreate();
    message_.stakecreate_ = stakecreate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.stakeCreate)
}
inline ::TW::IoTeX::Proto::Staking_Create* Staking::_internal_mutable_stakecreate() {
  if (!_internal_has_stakecreate()) {
    clear_message();
    set_has_stakecreate();
    message_.stakecreate_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Create >(GetArena());
  }
  return message_.stakecreate_;
}
inline ::TW::IoTeX::Proto::Staking_Create* Staking::mutable_stakecreate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.stakeCreate)
  return _internal_mutable_stakecreate();
}

// .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 2;
inline bool Staking::_internal_has_stakeunstake() const {
  return message_case() == kStakeUnstake;
}
inline bool Staking::has_stakeunstake() const {
  return _internal_has_stakeunstake();
}
inline void Staking::set_has_stakeunstake() {
  _oneof_case_[0] = kStakeUnstake;
}
inline void Staking::clear_stakeunstake() {
  if (_internal_has_stakeunstake()) {
    if (GetArena() == nullptr) {
      delete message_.stakeunstake_;
    }
    clear_has_message();
  }
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* Staking::release_stakeunstake() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.stakeUnstake)
  if (_internal_has_stakeunstake()) {
    clear_has_message();
      ::TW::IoTeX::Proto::Staking_Reclaim* temp = message_.stakeunstake_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stakeunstake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& Staking::_internal_stakeunstake() const {
  return _internal_has_stakeunstake()
      ? *message_.stakeunstake_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Reclaim&>(::TW::IoTeX::Proto::_Staking_Reclaim_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& Staking::stakeunstake() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.stakeUnstake)
  return _internal_stakeunstake();
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* Staking::unsafe_arena_release_stakeunstake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.Staking.stakeUnstake)
  if (_internal_has_stakeunstake()) {
    clear_has_message();
    ::TW::IoTeX::Proto::Staking_Reclaim* temp = message_.stakeunstake_;
    message_.stakeunstake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_stakeunstake(::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake) {
  clear_message();
  if (stakeunstake) {
    set_has_stakeunstake();
    message_.stakeunstake_ = stakeunstake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.stakeUnstake)
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* Staking::_internal_mutable_stakeunstake() {
  if (!_internal_has_stakeunstake()) {
    clear_message();
    set_has_stakeunstake();
    message_.stakeunstake_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Reclaim >(GetArena());
  }
  return message_.stakeunstake_;
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* Staking::mutable_stakeunstake() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.stakeUnstake)
  return _internal_mutable_stakeunstake();
}

// .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 3;
inline bool Staking::_internal_has_stakewithdraw() const {
  return message_case() == kStakeWithdraw;
}
inline bool Staking::has_stakewithdraw() const {
  return _internal_has_stakewithdraw();
}
inline void Staking::set_has_stakewithdraw() {
  _oneof_case_[0] = kStakeWithdraw;
}
inline void Staking::clear_stakewithdraw() {
  if (_internal_has_stakewithdraw()) {
    if (GetArena() == nullptr) {
      delete message_.stakewithdraw_;
    }
    clear_has_message();
  }
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* Staking::release_stakewithdraw() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.stakeWithdraw)
  if (_internal_has_stakewithdraw()) {
    clear_has_message();
      ::TW::IoTeX::Proto::Staking_Reclaim* temp = message_.stakewithdraw_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stakewithdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& Staking::_internal_stakewithdraw() const {
  return _internal_has_stakewithdraw()
      ? *message_.stakewithdraw_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Reclaim&>(::TW::IoTeX::Proto::_Staking_Reclaim_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& Staking::stakewithdraw() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.stakeWithdraw)
  return _internal_stakewithdraw();
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* Staking::unsafe_arena_release_stakewithdraw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.Staking.stakeWithdraw)
  if (_internal_has_stakewithdraw()) {
    clear_has_message();
    ::TW::IoTeX::Proto::Staking_Reclaim* temp = message_.stakewithdraw_;
    message_.stakewithdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_stakewithdraw(::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw) {
  clear_message();
  if (stakewithdraw) {
    set_has_stakewithdraw();
    message_.stakewithdraw_ = stakewithdraw;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.stakeWithdraw)
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* Staking::_internal_mutable_stakewithdraw() {
  if (!_internal_has_stakewithdraw()) {
    clear_message();
    set_has_stakewithdraw();
    message_.stakewithdraw_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Reclaim >(GetArena());
  }
  return message_.stakewithdraw_;
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* Staking::mutable_stakewithdraw() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.stakeWithdraw)
  return _internal_mutable_stakewithdraw();
}

// .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 4;
inline bool Staking::_internal_has_stakeadddeposit() const {
  return message_case() == kStakeAddDeposit;
}
inline bool Staking::has_stakeadddeposit() const {
  return _internal_has_stakeadddeposit();
}
inline void Staking::set_has_stakeadddeposit() {
  _oneof_case_[0] = kStakeAddDeposit;
}
inline void Staking::clear_stakeadddeposit() {
  if (_internal_has_stakeadddeposit()) {
    if (GetArena() == nullptr) {
      delete message_.stakeadddeposit_;
    }
    clear_has_message();
  }
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* Staking::release_stakeadddeposit() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.stakeAddDeposit)
  if (_internal_has_stakeadddeposit()) {
    clear_has_message();
      ::TW::IoTeX::Proto::Staking_AddDeposit* temp = message_.stakeadddeposit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stakeadddeposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_AddDeposit& Staking::_internal_stakeadddeposit() const {
  return _internal_has_stakeadddeposit()
      ? *message_.stakeadddeposit_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_AddDeposit&>(::TW::IoTeX::Proto::_Staking_AddDeposit_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_AddDeposit& Staking::stakeadddeposit() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.stakeAddDeposit)
  return _internal_stakeadddeposit();
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* Staking::unsafe_arena_release_stakeadddeposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.Staking.stakeAddDeposit)
  if (_internal_has_stakeadddeposit()) {
    clear_has_message();
    ::TW::IoTeX::Proto::Staking_AddDeposit* temp = message_.stakeadddeposit_;
    message_.stakeadddeposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_stakeadddeposit(::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit) {
  clear_message();
  if (stakeadddeposit) {
    set_has_stakeadddeposit();
    message_.stakeadddeposit_ = stakeadddeposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.stakeAddDeposit)
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* Staking::_internal_mutable_stakeadddeposit() {
  if (!_internal_has_stakeadddeposit()) {
    clear_message();
    set_has_stakeadddeposit();
    message_.stakeadddeposit_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_AddDeposit >(GetArena());
  }
  return message_.stakeadddeposit_;
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* Staking::mutable_stakeadddeposit() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.stakeAddDeposit)
  return _internal_mutable_stakeadddeposit();
}

// .TW.IoTeX.Proto.Staking.Restake stakeRestake = 5;
inline bool Staking::_internal_has_stakerestake() const {
  return message_case() == kStakeRestake;
}
inline bool Staking::has_stakerestake() const {
  return _internal_has_stakerestake();
}
inline void Staking::set_has_stakerestake() {
  _oneof_case_[0] = kStakeRestake;
}
inline void Staking::clear_stakerestake() {
  if (_internal_has_stakerestake()) {
    if (GetArena() == nullptr) {
      delete message_.stakerestake_;
    }
    clear_has_message();
  }
}
inline ::TW::IoTeX::Proto::Staking_Restake* Staking::release_stakerestake() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.stakeRestake)
  if (_internal_has_stakerestake()) {
    clear_has_message();
      ::TW::IoTeX::Proto::Staking_Restake* temp = message_.stakerestake_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stakerestake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Restake& Staking::_internal_stakerestake() const {
  return _internal_has_stakerestake()
      ? *message_.stakerestake_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Restake&>(::TW::IoTeX::Proto::_Staking_Restake_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Restake& Staking::stakerestake() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.stakeRestake)
  return _internal_stakerestake();
}
inline ::TW::IoTeX::Proto::Staking_Restake* Staking::unsafe_arena_release_stakerestake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.Staking.stakeRestake)
  if (_internal_has_stakerestake()) {
    clear_has_message();
    ::TW::IoTeX::Proto::Staking_Restake* temp = message_.stakerestake_;
    message_.stakerestake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_stakerestake(::TW::IoTeX::Proto::Staking_Restake* stakerestake) {
  clear_message();
  if (stakerestake) {
    set_has_stakerestake();
    message_.stakerestake_ = stakerestake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.stakeRestake)
}
inline ::TW::IoTeX::Proto::Staking_Restake* Staking::_internal_mutable_stakerestake() {
  if (!_internal_has_stakerestake()) {
    clear_message();
    set_has_stakerestake();
    message_.stakerestake_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Restake >(GetArena());
  }
  return message_.stakerestake_;
}
inline ::TW::IoTeX::Proto::Staking_Restake* Staking::mutable_stakerestake() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.stakeRestake)
  return _internal_mutable_stakerestake();
}

// .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 6;
inline bool Staking::_internal_has_stakechangecandidate() const {
  return message_case() == kStakeChangeCandidate;
}
inline bool Staking::has_stakechangecandidate() const {
  return _internal_has_stakechangecandidate();
}
inline void Staking::set_has_stakechangecandidate() {
  _oneof_case_[0] = kStakeChangeCandidate;
}
inline void Staking::clear_stakechangecandidate() {
  if (_internal_has_stakechangecandidate()) {
    if (GetArena() == nullptr) {
      delete message_.stakechangecandidate_;
    }
    clear_has_message();
  }
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* Staking::release_stakechangecandidate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.stakeChangeCandidate)
  if (_internal_has_stakechangecandidate()) {
    clear_has_message();
      ::TW::IoTeX::Proto::Staking_ChangeCandidate* temp = message_.stakechangecandidate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stakechangecandidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_ChangeCandidate& Staking::_internal_stakechangecandidate() const {
  return _internal_has_stakechangecandidate()
      ? *message_.stakechangecandidate_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_ChangeCandidate&>(::TW::IoTeX::Proto::_Staking_ChangeCandidate_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_ChangeCandidate& Staking::stakechangecandidate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.stakeChangeCandidate)
  return _internal_stakechangecandidate();
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* Staking::unsafe_arena_release_stakechangecandidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.Staking.stakeChangeCandidate)
  if (_internal_has_stakechangecandidate()) {
    clear_has_message();
    ::TW::IoTeX::Proto::Staking_ChangeCandidate* temp = message_.stakechangecandidate_;
    message_.stakechangecandidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_stakechangecandidate(::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate) {
  clear_message();
  if (stakechangecandidate) {
    set_has_stakechangecandidate();
    message_.stakechangecandidate_ = stakechangecandidate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.stakeChangeCandidate)
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* Staking::_internal_mutable_stakechangecandidate() {
  if (!_internal_has_stakechangecandidate()) {
    clear_message();
    set_has_stakechangecandidate();
    message_.stakechangecandidate_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_ChangeCandidate >(GetArena());
  }
  return message_.stakechangecandidate_;
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* Staking::mutable_stakechangecandidate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.stakeChangeCandidate)
  return _internal_mutable_stakechangecandidate();
}

// .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 7;
inline bool Staking::_internal_has_staketransferownership() const {
  return message_case() == kStakeTransferOwnership;
}
inline bool Staking::has_staketransferownership() const {
  return _internal_has_staketransferownership();
}
inline void Staking::set_has_staketransferownership() {
  _oneof_case_[0] = kStakeTransferOwnership;
}
inline void Staking::clear_staketransferownership() {
  if (_internal_has_staketransferownership()) {
    if (GetArena() == nullptr) {
      delete message_.staketransferownership_;
    }
    clear_has_message();
  }
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* Staking::release_staketransferownership() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.stakeTransferOwnership)
  if (_internal_has_staketransferownership()) {
    clear_has_message();
      ::TW::IoTeX::Proto::Staking_TransferOwnership* temp = message_.staketransferownership_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.staketransferownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_TransferOwnership& Staking::_internal_staketransferownership() const {
  return _internal_has_staketransferownership()
      ? *message_.staketransferownership_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_TransferOwnership&>(::TW::IoTeX::Proto::_Staking_TransferOwnership_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_TransferOwnership& Staking::staketransferownership() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.stakeTransferOwnership)
  return _internal_staketransferownership();
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* Staking::unsafe_arena_release_staketransferownership() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.Staking.stakeTransferOwnership)
  if (_internal_has_staketransferownership()) {
    clear_has_message();
    ::TW::IoTeX::Proto::Staking_TransferOwnership* temp = message_.staketransferownership_;
    message_.staketransferownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_staketransferownership(::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership) {
  clear_message();
  if (staketransferownership) {
    set_has_staketransferownership();
    message_.staketransferownership_ = staketransferownership;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.stakeTransferOwnership)
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* Staking::_internal_mutable_staketransferownership() {
  if (!_internal_has_staketransferownership()) {
    clear_message();
    set_has_staketransferownership();
    message_.staketransferownership_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_TransferOwnership >(GetArena());
  }
  return message_.staketransferownership_;
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* Staking::mutable_staketransferownership() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.stakeTransferOwnership)
  return _internal_mutable_staketransferownership();
}

// .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 8;
inline bool Staking::_internal_has_candidateregister() const {
  return message_case() == kCandidateRegister;
}
inline bool Staking::has_candidateregister() const {
  return _internal_has_candidateregister();
}
inline void Staking::set_has_candidateregister() {
  _oneof_case_[0] = kCandidateRegister;
}
inline void Staking::clear_candidateregister() {
  if (_internal_has_candidateregister()) {
    if (GetArena() == nullptr) {
      delete message_.candidateregister_;
    }
    clear_has_message();
  }
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* Staking::release_candidateregister() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.candidateRegister)
  if (_internal_has_candidateregister()) {
    clear_has_message();
      ::TW::IoTeX::Proto::Staking_CandidateRegister* temp = message_.candidateregister_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.candidateregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_CandidateRegister& Staking::_internal_candidateregister() const {
  return _internal_has_candidateregister()
      ? *message_.candidateregister_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_CandidateRegister&>(::TW::IoTeX::Proto::_Staking_CandidateRegister_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_CandidateRegister& Staking::candidateregister() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.candidateRegister)
  return _internal_candidateregister();
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* Staking::unsafe_arena_release_candidateregister() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.Staking.candidateRegister)
  if (_internal_has_candidateregister()) {
    clear_has_message();
    ::TW::IoTeX::Proto::Staking_CandidateRegister* temp = message_.candidateregister_;
    message_.candidateregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_candidateregister(::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister) {
  clear_message();
  if (candidateregister) {
    set_has_candidateregister();
    message_.candidateregister_ = candidateregister;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.candidateRegister)
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* Staking::_internal_mutable_candidateregister() {
  if (!_internal_has_candidateregister()) {
    clear_message();
    set_has_candidateregister();
    message_.candidateregister_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_CandidateRegister >(GetArena());
  }
  return message_.candidateregister_;
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* Staking::mutable_candidateregister() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.candidateRegister)
  return _internal_mutable_candidateregister();
}

// .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 9;
inline bool Staking::_internal_has_candidateupdate() const {
  return message_case() == kCandidateUpdate;
}
inline bool Staking::has_candidateupdate() const {
  return _internal_has_candidateupdate();
}
inline void Staking::set_has_candidateupdate() {
  _oneof_case_[0] = kCandidateUpdate;
}
inline void Staking::clear_candidateupdate() {
  if (_internal_has_candidateupdate()) {
    if (GetArena() == nullptr) {
      delete message_.candidateupdate_;
    }
    clear_has_message();
  }
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Staking::release_candidateupdate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Staking.candidateUpdate)
  if (_internal_has_candidateupdate()) {
    clear_has_message();
      ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* temp = message_.candidateupdate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.candidateupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& Staking::_internal_candidateupdate() const {
  return _internal_has_candidateupdate()
      ? *message_.candidateupdate_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_CandidateBasicInfo&>(::TW::IoTeX::Proto::_Staking_CandidateBasicInfo_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& Staking::candidateupdate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Staking.candidateUpdate)
  return _internal_candidateupdate();
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Staking::unsafe_arena_release_candidateupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.Staking.candidateUpdate)
  if (_internal_has_candidateupdate()) {
    clear_has_message();
    ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* temp = message_.candidateupdate_;
    message_.candidateupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_candidateupdate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate) {
  clear_message();
  if (candidateupdate) {
    set_has_candidateupdate();
    message_.candidateupdate_ = candidateupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Staking.candidateUpdate)
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Staking::_internal_mutable_candidateupdate() {
  if (!_internal_has_candidateupdate()) {
    clear_message();
    set_has_candidateupdate();
    message_.candidateupdate_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_CandidateBasicInfo >(GetArena());
  }
  return message_.candidateupdate_;
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* Staking::mutable_candidateupdate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Staking.candidateUpdate)
  return _internal_mutable_candidateupdate();
}

inline bool Staking::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Staking::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Staking::MessageCase Staking::message_case() const {
  return Staking::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ContractCall

// string amount = 1;
inline void ContractCall::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& ContractCall::amount() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ContractCall.amount)
  return _internal_amount();
}
inline void ContractCall::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.ContractCall.amount)
}
inline std::string* ContractCall::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ContractCall.amount)
  return _internal_mutable_amount();
}
inline const std::string& ContractCall::_internal_amount() const {
  return amount_.Get();
}
inline void ContractCall::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ContractCall::set_amount(std::string&& value) {
  
  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.ContractCall.amount)
}
inline void ContractCall::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.ContractCall.amount)
}
inline void ContractCall::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.ContractCall.amount)
}
inline std::string* ContractCall::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ContractCall::release_amount() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ContractCall.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractCall::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ContractCall.amount)
}

// string contract = 2;
inline void ContractCall::clear_contract() {
  contract_.ClearToEmpty();
}
inline const std::string& ContractCall::contract() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ContractCall.contract)
  return _internal_contract();
}
inline void ContractCall::set_contract(const std::string& value) {
  _internal_set_contract(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.ContractCall.contract)
}
inline std::string* ContractCall::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ContractCall.contract)
  return _internal_mutable_contract();
}
inline const std::string& ContractCall::_internal_contract() const {
  return contract_.Get();
}
inline void ContractCall::_internal_set_contract(const std::string& value) {
  
  contract_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ContractCall::set_contract(std::string&& value) {
  
  contract_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.ContractCall.contract)
}
inline void ContractCall::set_contract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.ContractCall.contract)
}
inline void ContractCall::set_contract(const char* value,
    size_t size) {
  
  contract_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.ContractCall.contract)
}
inline std::string* ContractCall::_internal_mutable_contract() {
  
  return contract_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ContractCall::release_contract() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ContractCall.contract)
  return contract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractCall::set_allocated_contract(std::string* contract) {
  if (contract != nullptr) {
    
  } else {
    
  }
  contract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ContractCall.contract)
}

// bytes data = 3;
inline void ContractCall::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ContractCall::data() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ContractCall.data)
  return _internal_data();
}
inline void ContractCall::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.ContractCall.data)
}
inline std::string* ContractCall::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ContractCall.data)
  return _internal_mutable_data();
}
inline const std::string& ContractCall::_internal_data() const {
  return data_.Get();
}
inline void ContractCall::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ContractCall::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.ContractCall.data)
}
inline void ContractCall::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.ContractCall.data)
}
inline void ContractCall::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.ContractCall.data)
}
inline std::string* ContractCall::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ContractCall::release_data() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ContractCall.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractCall::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ContractCall.data)
}

// -------------------------------------------------------------------

// SigningInput

// uint32 version = 1;
inline void SigningInput::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::version() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.version)
  return _internal_version();
}
inline void SigningInput::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void SigningInput::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.SigningInput.version)
}

// uint64 nonce = 2;
inline void SigningInput::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::nonce() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.nonce)
  return _internal_nonce();
}
inline void SigningInput::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void SigningInput::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.SigningInput.nonce)
}

// uint64 gasLimit = 3;
inline void SigningInput::clear_gaslimit() {
  gaslimit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_gaslimit() const {
  return gaslimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::gaslimit() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.gasLimit)
  return _internal_gaslimit();
}
inline void SigningInput::_internal_set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gaslimit_ = value;
}
inline void SigningInput::set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gaslimit(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.SigningInput.gasLimit)
}

// string gasPrice = 4;
inline void SigningInput::clear_gasprice() {
  gasprice_.ClearToEmpty();
}
inline const std::string& SigningInput::gasprice() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.gasPrice)
  return _internal_gasprice();
}
inline void SigningInput::set_gasprice(const std::string& value) {
  _internal_set_gasprice(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.SigningInput.gasPrice)
}
inline std::string* SigningInput::mutable_gasprice() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.gasPrice)
  return _internal_mutable_gasprice();
}
inline const std::string& SigningInput::_internal_gasprice() const {
  return gasprice_.Get();
}
inline void SigningInput::_internal_set_gasprice(const std::string& value) {
  
  gasprice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_gasprice(std::string&& value) {
  
  gasprice_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.SigningInput.gasPrice)
}
inline void SigningInput::set_gasprice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasprice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.SigningInput.gasPrice)
}
inline void SigningInput::set_gasprice(const char* value,
    size_t size) {
  
  gasprice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.SigningInput.gasPrice)
}
inline std::string* SigningInput::_internal_mutable_gasprice() {
  
  return gasprice_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_gasprice() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.gasPrice)
  return gasprice_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_gasprice(std::string* gasprice) {
  if (gasprice != nullptr) {
    
  } else {
    
  }
  gasprice_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasprice,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.gasPrice)
}

// bytes privateKey = 5;
inline void SigningInput::clear_privatekey() {
  privatekey_.ClearToEmpty();
}
inline const std::string& SigningInput::privatekey() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.privateKey)
  return _internal_privatekey();
}
inline void SigningInput::set_privatekey(const std::string& value) {
  _internal_set_privatekey(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.SigningInput.privateKey)
}
inline std::string* SigningInput::mutable_privatekey() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.privateKey)
  return _internal_mutable_privatekey();
}
inline const std::string& SigningInput::_internal_privatekey() const {
  return privatekey_.Get();
}
inline void SigningInput::_internal_set_privatekey(const std::string& value) {
  
  privatekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_privatekey(std::string&& value) {
  
  privatekey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.SigningInput.privateKey)
}
inline void SigningInput::set_privatekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  privatekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.SigningInput.privateKey)
}
inline void SigningInput::set_privatekey(const void* value,
    size_t size) {
  
  privatekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.SigningInput.privateKey)
}
inline std::string* SigningInput::_internal_mutable_privatekey() {
  
  return privatekey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_privatekey() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.privateKey)
  return privatekey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_privatekey(std::string* privatekey) {
  if (privatekey != nullptr) {
    
  } else {
    
  }
  privatekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privatekey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningInput.privateKey)
}

// .TW.IoTeX.Proto.Transfer transfer = 10;
inline bool SigningInput::_internal_has_transfer() const {
  return action_case() == kTransfer;
}
inline bool SigningInput::has_transfer() const {
  return _internal_has_transfer();
}
inline void SigningInput::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void SigningInput::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArena() == nullptr) {
      delete action_.transfer_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Transfer* SigningInput::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Transfer* temp = action_.transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Transfer& SigningInput::_internal_transfer() const {
  return _internal_has_transfer()
      ? *action_.transfer_
      : reinterpret_cast< ::TW::IoTeX::Proto::Transfer&>(::TW::IoTeX::Proto::_Transfer_default_instance_);
}
inline const ::TW::IoTeX::Proto::Transfer& SigningInput::transfer() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.transfer)
  return _internal_transfer();
}
inline ::TW::IoTeX::Proto::Transfer* SigningInput::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Transfer* temp = action_.transfer_;
    action_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transfer(::TW::IoTeX::Proto::Transfer* transfer) {
  clear_action();
  if (transfer) {
    set_has_transfer();
    action_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.transfer)
}
inline ::TW::IoTeX::Proto::Transfer* SigningInput::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_action();
    set_has_transfer();
    action_.transfer_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Transfer >(GetArena());
  }
  return action_.transfer_;
}
inline ::TW::IoTeX::Proto::Transfer* SigningInput::mutable_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.transfer)
  return _internal_mutable_transfer();
}

// .TW.IoTeX.Proto.ContractCall call = 12;
inline bool SigningInput::_internal_has_call() const {
  return action_case() == kCall;
}
inline bool SigningInput::has_call() const {
  return _internal_has_call();
}
inline void SigningInput::set_has_call() {
  _oneof_case_[0] = kCall;
}
inline void SigningInput::clear_call() {
  if (_internal_has_call()) {
    if (GetArena() == nullptr) {
      delete action_.call_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::ContractCall* SigningInput::release_call() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.call)
  if (_internal_has_call()) {
    clear_has_action();
      ::TW::IoTeX::Proto::ContractCall* temp = action_.call_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::ContractCall& SigningInput::_internal_call() const {
  return _internal_has_call()
      ? *action_.call_
      : reinterpret_cast< ::TW::IoTeX::Proto::ContractCall&>(::TW::IoTeX::Proto::_ContractCall_default_instance_);
}
inline const ::TW::IoTeX::Proto::ContractCall& SigningInput::call() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.call)
  return _internal_call();
}
inline ::TW::IoTeX::Proto::ContractCall* SigningInput::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.call)
  if (_internal_has_call()) {
    clear_has_action();
    ::TW::IoTeX::Proto::ContractCall* temp = action_.call_;
    action_.call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_call(::TW::IoTeX::Proto::ContractCall* call) {
  clear_action();
  if (call) {
    set_has_call();
    action_.call_ = call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.call)
}
inline ::TW::IoTeX::Proto::ContractCall* SigningInput::_internal_mutable_call() {
  if (!_internal_has_call()) {
    clear_action();
    set_has_call();
    action_.call_ = CreateMaybeMessage< ::TW::IoTeX::Proto::ContractCall >(GetArena());
  }
  return action_.call_;
}
inline ::TW::IoTeX::Proto::ContractCall* SigningInput::mutable_call() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.call)
  return _internal_mutable_call();
}

// .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
inline bool SigningInput::_internal_has_stakecreate() const {
  return action_case() == kStakeCreate;
}
inline bool SigningInput::has_stakecreate() const {
  return _internal_has_stakecreate();
}
inline void SigningInput::set_has_stakecreate() {
  _oneof_case_[0] = kStakeCreate;
}
inline void SigningInput::clear_stakecreate() {
  if (_internal_has_stakecreate()) {
    if (GetArena() == nullptr) {
      delete action_.stakecreate_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_Create* SigningInput::release_stakecreate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.stakeCreate)
  if (_internal_has_stakecreate()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_Create* temp = action_.stakecreate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakecreate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Create& SigningInput::_internal_stakecreate() const {
  return _internal_has_stakecreate()
      ? *action_.stakecreate_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Create&>(::TW::IoTeX::Proto::_Staking_Create_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Create& SigningInput::stakecreate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.stakeCreate)
  return _internal_stakecreate();
}
inline ::TW::IoTeX::Proto::Staking_Create* SigningInput::unsafe_arena_release_stakecreate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.stakeCreate)
  if (_internal_has_stakecreate()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_Create* temp = action_.stakecreate_;
    action_.stakecreate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_stakecreate(::TW::IoTeX::Proto::Staking_Create* stakecreate) {
  clear_action();
  if (stakecreate) {
    set_has_stakecreate();
    action_.stakecreate_ = stakecreate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.stakeCreate)
}
inline ::TW::IoTeX::Proto::Staking_Create* SigningInput::_internal_mutable_stakecreate() {
  if (!_internal_has_stakecreate()) {
    clear_action();
    set_has_stakecreate();
    action_.stakecreate_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Create >(GetArena());
  }
  return action_.stakecreate_;
}
inline ::TW::IoTeX::Proto::Staking_Create* SigningInput::mutable_stakecreate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.stakeCreate)
  return _internal_mutable_stakecreate();
}

// .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
inline bool SigningInput::_internal_has_stakeunstake() const {
  return action_case() == kStakeUnstake;
}
inline bool SigningInput::has_stakeunstake() const {
  return _internal_has_stakeunstake();
}
inline void SigningInput::set_has_stakeunstake() {
  _oneof_case_[0] = kStakeUnstake;
}
inline void SigningInput::clear_stakeunstake() {
  if (_internal_has_stakeunstake()) {
    if (GetArena() == nullptr) {
      delete action_.stakeunstake_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* SigningInput::release_stakeunstake() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.stakeUnstake)
  if (_internal_has_stakeunstake()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_Reclaim* temp = action_.stakeunstake_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakeunstake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& SigningInput::_internal_stakeunstake() const {
  return _internal_has_stakeunstake()
      ? *action_.stakeunstake_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Reclaim&>(::TW::IoTeX::Proto::_Staking_Reclaim_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& SigningInput::stakeunstake() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.stakeUnstake)
  return _internal_stakeunstake();
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* SigningInput::unsafe_arena_release_stakeunstake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.stakeUnstake)
  if (_internal_has_stakeunstake()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_Reclaim* temp = action_.stakeunstake_;
    action_.stakeunstake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_stakeunstake(::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake) {
  clear_action();
  if (stakeunstake) {
    set_has_stakeunstake();
    action_.stakeunstake_ = stakeunstake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.stakeUnstake)
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* SigningInput::_internal_mutable_stakeunstake() {
  if (!_internal_has_stakeunstake()) {
    clear_action();
    set_has_stakeunstake();
    action_.stakeunstake_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Reclaim >(GetArena());
  }
  return action_.stakeunstake_;
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* SigningInput::mutable_stakeunstake() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.stakeUnstake)
  return _internal_mutable_stakeunstake();
}

// .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
inline bool SigningInput::_internal_has_stakewithdraw() const {
  return action_case() == kStakeWithdraw;
}
inline bool SigningInput::has_stakewithdraw() const {
  return _internal_has_stakewithdraw();
}
inline void SigningInput::set_has_stakewithdraw() {
  _oneof_case_[0] = kStakeWithdraw;
}
inline void SigningInput::clear_stakewithdraw() {
  if (_internal_has_stakewithdraw()) {
    if (GetArena() == nullptr) {
      delete action_.stakewithdraw_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* SigningInput::release_stakewithdraw() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.stakeWithdraw)
  if (_internal_has_stakewithdraw()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_Reclaim* temp = action_.stakewithdraw_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakewithdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& SigningInput::_internal_stakewithdraw() const {
  return _internal_has_stakewithdraw()
      ? *action_.stakewithdraw_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Reclaim&>(::TW::IoTeX::Proto::_Staking_Reclaim_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& SigningInput::stakewithdraw() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.stakeWithdraw)
  return _internal_stakewithdraw();
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* SigningInput::unsafe_arena_release_stakewithdraw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.stakeWithdraw)
  if (_internal_has_stakewithdraw()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_Reclaim* temp = action_.stakewithdraw_;
    action_.stakewithdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_stakewithdraw(::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw) {
  clear_action();
  if (stakewithdraw) {
    set_has_stakewithdraw();
    action_.stakewithdraw_ = stakewithdraw;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.stakeWithdraw)
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* SigningInput::_internal_mutable_stakewithdraw() {
  if (!_internal_has_stakewithdraw()) {
    clear_action();
    set_has_stakewithdraw();
    action_.stakewithdraw_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Reclaim >(GetArena());
  }
  return action_.stakewithdraw_;
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* SigningInput::mutable_stakewithdraw() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.stakeWithdraw)
  return _internal_mutable_stakewithdraw();
}

// .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
inline bool SigningInput::_internal_has_stakeadddeposit() const {
  return action_case() == kStakeAddDeposit;
}
inline bool SigningInput::has_stakeadddeposit() const {
  return _internal_has_stakeadddeposit();
}
inline void SigningInput::set_has_stakeadddeposit() {
  _oneof_case_[0] = kStakeAddDeposit;
}
inline void SigningInput::clear_stakeadddeposit() {
  if (_internal_has_stakeadddeposit()) {
    if (GetArena() == nullptr) {
      delete action_.stakeadddeposit_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* SigningInput::release_stakeadddeposit() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.stakeAddDeposit)
  if (_internal_has_stakeadddeposit()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_AddDeposit* temp = action_.stakeadddeposit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakeadddeposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_AddDeposit& SigningInput::_internal_stakeadddeposit() const {
  return _internal_has_stakeadddeposit()
      ? *action_.stakeadddeposit_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_AddDeposit&>(::TW::IoTeX::Proto::_Staking_AddDeposit_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_AddDeposit& SigningInput::stakeadddeposit() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.stakeAddDeposit)
  return _internal_stakeadddeposit();
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* SigningInput::unsafe_arena_release_stakeadddeposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.stakeAddDeposit)
  if (_internal_has_stakeadddeposit()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_AddDeposit* temp = action_.stakeadddeposit_;
    action_.stakeadddeposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_stakeadddeposit(::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit) {
  clear_action();
  if (stakeadddeposit) {
    set_has_stakeadddeposit();
    action_.stakeadddeposit_ = stakeadddeposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.stakeAddDeposit)
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* SigningInput::_internal_mutable_stakeadddeposit() {
  if (!_internal_has_stakeadddeposit()) {
    clear_action();
    set_has_stakeadddeposit();
    action_.stakeadddeposit_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_AddDeposit >(GetArena());
  }
  return action_.stakeadddeposit_;
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* SigningInput::mutable_stakeadddeposit() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.stakeAddDeposit)
  return _internal_mutable_stakeadddeposit();
}

// .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
inline bool SigningInput::_internal_has_stakerestake() const {
  return action_case() == kStakeRestake;
}
inline bool SigningInput::has_stakerestake() const {
  return _internal_has_stakerestake();
}
inline void SigningInput::set_has_stakerestake() {
  _oneof_case_[0] = kStakeRestake;
}
inline void SigningInput::clear_stakerestake() {
  if (_internal_has_stakerestake()) {
    if (GetArena() == nullptr) {
      delete action_.stakerestake_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_Restake* SigningInput::release_stakerestake() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.stakeRestake)
  if (_internal_has_stakerestake()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_Restake* temp = action_.stakerestake_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakerestake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Restake& SigningInput::_internal_stakerestake() const {
  return _internal_has_stakerestake()
      ? *action_.stakerestake_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Restake&>(::TW::IoTeX::Proto::_Staking_Restake_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Restake& SigningInput::stakerestake() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.stakeRestake)
  return _internal_stakerestake();
}
inline ::TW::IoTeX::Proto::Staking_Restake* SigningInput::unsafe_arena_release_stakerestake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.stakeRestake)
  if (_internal_has_stakerestake()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_Restake* temp = action_.stakerestake_;
    action_.stakerestake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_stakerestake(::TW::IoTeX::Proto::Staking_Restake* stakerestake) {
  clear_action();
  if (stakerestake) {
    set_has_stakerestake();
    action_.stakerestake_ = stakerestake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.stakeRestake)
}
inline ::TW::IoTeX::Proto::Staking_Restake* SigningInput::_internal_mutable_stakerestake() {
  if (!_internal_has_stakerestake()) {
    clear_action();
    set_has_stakerestake();
    action_.stakerestake_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Restake >(GetArena());
  }
  return action_.stakerestake_;
}
inline ::TW::IoTeX::Proto::Staking_Restake* SigningInput::mutable_stakerestake() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.stakeRestake)
  return _internal_mutable_stakerestake();
}

// .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
inline bool SigningInput::_internal_has_stakechangecandidate() const {
  return action_case() == kStakeChangeCandidate;
}
inline bool SigningInput::has_stakechangecandidate() const {
  return _internal_has_stakechangecandidate();
}
inline void SigningInput::set_has_stakechangecandidate() {
  _oneof_case_[0] = kStakeChangeCandidate;
}
inline void SigningInput::clear_stakechangecandidate() {
  if (_internal_has_stakechangecandidate()) {
    if (GetArena() == nullptr) {
      delete action_.stakechangecandidate_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* SigningInput::release_stakechangecandidate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.stakeChangeCandidate)
  if (_internal_has_stakechangecandidate()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_ChangeCandidate* temp = action_.stakechangecandidate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakechangecandidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_ChangeCandidate& SigningInput::_internal_stakechangecandidate() const {
  return _internal_has_stakechangecandidate()
      ? *action_.stakechangecandidate_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_ChangeCandidate&>(::TW::IoTeX::Proto::_Staking_ChangeCandidate_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_ChangeCandidate& SigningInput::stakechangecandidate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.stakeChangeCandidate)
  return _internal_stakechangecandidate();
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* SigningInput::unsafe_arena_release_stakechangecandidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.stakeChangeCandidate)
  if (_internal_has_stakechangecandidate()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_ChangeCandidate* temp = action_.stakechangecandidate_;
    action_.stakechangecandidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_stakechangecandidate(::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate) {
  clear_action();
  if (stakechangecandidate) {
    set_has_stakechangecandidate();
    action_.stakechangecandidate_ = stakechangecandidate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.stakeChangeCandidate)
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* SigningInput::_internal_mutable_stakechangecandidate() {
  if (!_internal_has_stakechangecandidate()) {
    clear_action();
    set_has_stakechangecandidate();
    action_.stakechangecandidate_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_ChangeCandidate >(GetArena());
  }
  return action_.stakechangecandidate_;
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* SigningInput::mutable_stakechangecandidate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.stakeChangeCandidate)
  return _internal_mutable_stakechangecandidate();
}

// .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
inline bool SigningInput::_internal_has_staketransferownership() const {
  return action_case() == kStakeTransferOwnership;
}
inline bool SigningInput::has_staketransferownership() const {
  return _internal_has_staketransferownership();
}
inline void SigningInput::set_has_staketransferownership() {
  _oneof_case_[0] = kStakeTransferOwnership;
}
inline void SigningInput::clear_staketransferownership() {
  if (_internal_has_staketransferownership()) {
    if (GetArena() == nullptr) {
      delete action_.staketransferownership_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* SigningInput::release_staketransferownership() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.stakeTransferOwnership)
  if (_internal_has_staketransferownership()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_TransferOwnership* temp = action_.staketransferownership_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.staketransferownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_TransferOwnership& SigningInput::_internal_staketransferownership() const {
  return _internal_has_staketransferownership()
      ? *action_.staketransferownership_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_TransferOwnership&>(::TW::IoTeX::Proto::_Staking_TransferOwnership_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_TransferOwnership& SigningInput::staketransferownership() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.stakeTransferOwnership)
  return _internal_staketransferownership();
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* SigningInput::unsafe_arena_release_staketransferownership() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.stakeTransferOwnership)
  if (_internal_has_staketransferownership()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_TransferOwnership* temp = action_.staketransferownership_;
    action_.staketransferownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_staketransferownership(::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership) {
  clear_action();
  if (staketransferownership) {
    set_has_staketransferownership();
    action_.staketransferownership_ = staketransferownership;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.stakeTransferOwnership)
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* SigningInput::_internal_mutable_staketransferownership() {
  if (!_internal_has_staketransferownership()) {
    clear_action();
    set_has_staketransferownership();
    action_.staketransferownership_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_TransferOwnership >(GetArena());
  }
  return action_.staketransferownership_;
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* SigningInput::mutable_staketransferownership() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.stakeTransferOwnership)
  return _internal_mutable_staketransferownership();
}

// .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
inline bool SigningInput::_internal_has_candidateregister() const {
  return action_case() == kCandidateRegister;
}
inline bool SigningInput::has_candidateregister() const {
  return _internal_has_candidateregister();
}
inline void SigningInput::set_has_candidateregister() {
  _oneof_case_[0] = kCandidateRegister;
}
inline void SigningInput::clear_candidateregister() {
  if (_internal_has_candidateregister()) {
    if (GetArena() == nullptr) {
      delete action_.candidateregister_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* SigningInput::release_candidateregister() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.candidateRegister)
  if (_internal_has_candidateregister()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_CandidateRegister* temp = action_.candidateregister_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.candidateregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_CandidateRegister& SigningInput::_internal_candidateregister() const {
  return _internal_has_candidateregister()
      ? *action_.candidateregister_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_CandidateRegister&>(::TW::IoTeX::Proto::_Staking_CandidateRegister_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_CandidateRegister& SigningInput::candidateregister() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.candidateRegister)
  return _internal_candidateregister();
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* SigningInput::unsafe_arena_release_candidateregister() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.candidateRegister)
  if (_internal_has_candidateregister()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_CandidateRegister* temp = action_.candidateregister_;
    action_.candidateregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_candidateregister(::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister) {
  clear_action();
  if (candidateregister) {
    set_has_candidateregister();
    action_.candidateregister_ = candidateregister;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.candidateRegister)
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* SigningInput::_internal_mutable_candidateregister() {
  if (!_internal_has_candidateregister()) {
    clear_action();
    set_has_candidateregister();
    action_.candidateregister_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_CandidateRegister >(GetArena());
  }
  return action_.candidateregister_;
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* SigningInput::mutable_candidateregister() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.candidateRegister)
  return _internal_mutable_candidateregister();
}

// .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
inline bool SigningInput::_internal_has_candidateupdate() const {
  return action_case() == kCandidateUpdate;
}
inline bool SigningInput::has_candidateupdate() const {
  return _internal_has_candidateupdate();
}
inline void SigningInput::set_has_candidateupdate() {
  _oneof_case_[0] = kCandidateUpdate;
}
inline void SigningInput::clear_candidateupdate() {
  if (_internal_has_candidateupdate()) {
    if (GetArena() == nullptr) {
      delete action_.candidateupdate_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* SigningInput::release_candidateupdate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningInput.candidateUpdate)
  if (_internal_has_candidateupdate()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* temp = action_.candidateupdate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.candidateupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& SigningInput::_internal_candidateupdate() const {
  return _internal_has_candidateupdate()
      ? *action_.candidateupdate_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_CandidateBasicInfo&>(::TW::IoTeX::Proto::_Staking_CandidateBasicInfo_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& SigningInput::candidateupdate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningInput.candidateUpdate)
  return _internal_candidateupdate();
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* SigningInput::unsafe_arena_release_candidateupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.SigningInput.candidateUpdate)
  if (_internal_has_candidateupdate()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* temp = action_.candidateupdate_;
    action_.candidateupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_candidateupdate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate) {
  clear_action();
  if (candidateupdate) {
    set_has_candidateupdate();
    action_.candidateupdate_ = candidateupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.SigningInput.candidateUpdate)
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* SigningInput::_internal_mutable_candidateupdate() {
  if (!_internal_has_candidateupdate()) {
    clear_action();
    set_has_candidateupdate();
    action_.candidateupdate_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_CandidateBasicInfo >(GetArena());
  }
  return action_.candidateupdate_;
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* SigningInput::mutable_candidateupdate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningInput.candidateUpdate)
  return _internal_mutable_candidateupdate();
}

inline bool SigningInput::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void SigningInput::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline SigningInput::ActionCase SigningInput::action_case() const {
  return SigningInput::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningOutput.encoded)
}

// bytes hash = 2;
inline void SigningOutput::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& SigningOutput::hash() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.SigningOutput.hash)
  return _internal_hash();
}
inline void SigningOutput::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.SigningOutput.hash)
}
inline std::string* SigningOutput::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.SigningOutput.hash)
  return _internal_mutable_hash();
}
inline const std::string& SigningOutput::_internal_hash() const {
  return hash_.Get();
}
inline void SigningOutput::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.SigningOutput.hash)
}
inline void SigningOutput::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.SigningOutput.hash)
}
inline void SigningOutput::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.SigningOutput.hash)
}
inline std::string* SigningOutput::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_hash() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.SigningOutput.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.SigningOutput.hash)
}

// -------------------------------------------------------------------

// ActionCore

// uint32 version = 1;
inline void ActionCore::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionCore::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionCore::version() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.version)
  return _internal_version();
}
inline void ActionCore::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void ActionCore::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.ActionCore.version)
}

// uint64 nonce = 2;
inline void ActionCore::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ActionCore::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ActionCore::nonce() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.nonce)
  return _internal_nonce();
}
inline void ActionCore::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void ActionCore::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.ActionCore.nonce)
}

// uint64 gasLimit = 3;
inline void ActionCore::clear_gaslimit() {
  gaslimit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ActionCore::_internal_gaslimit() const {
  return gaslimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ActionCore::gaslimit() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.gasLimit)
  return _internal_gaslimit();
}
inline void ActionCore::_internal_set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gaslimit_ = value;
}
inline void ActionCore::set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gaslimit(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.ActionCore.gasLimit)
}

// string gasPrice = 4;
inline void ActionCore::clear_gasprice() {
  gasprice_.ClearToEmpty();
}
inline const std::string& ActionCore::gasprice() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.gasPrice)
  return _internal_gasprice();
}
inline void ActionCore::set_gasprice(const std::string& value) {
  _internal_set_gasprice(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.ActionCore.gasPrice)
}
inline std::string* ActionCore::mutable_gasprice() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.gasPrice)
  return _internal_mutable_gasprice();
}
inline const std::string& ActionCore::_internal_gasprice() const {
  return gasprice_.Get();
}
inline void ActionCore::_internal_set_gasprice(const std::string& value) {
  
  gasprice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActionCore::set_gasprice(std::string&& value) {
  
  gasprice_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.ActionCore.gasPrice)
}
inline void ActionCore::set_gasprice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasprice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.ActionCore.gasPrice)
}
inline void ActionCore::set_gasprice(const char* value,
    size_t size) {
  
  gasprice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.ActionCore.gasPrice)
}
inline std::string* ActionCore::_internal_mutable_gasprice() {
  
  return gasprice_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActionCore::release_gasprice() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.gasPrice)
  return gasprice_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionCore::set_allocated_gasprice(std::string* gasprice) {
  if (gasprice != nullptr) {
    
  } else {
    
  }
  gasprice_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasprice,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.ActionCore.gasPrice)
}

// .TW.IoTeX.Proto.Transfer transfer = 10;
inline bool ActionCore::_internal_has_transfer() const {
  return action_case() == kTransfer;
}
inline bool ActionCore::has_transfer() const {
  return _internal_has_transfer();
}
inline void ActionCore::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void ActionCore::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArena() == nullptr) {
      delete action_.transfer_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Transfer* ActionCore::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.transfer)
  if (_internal_has_transfer()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Transfer* temp = action_.transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Transfer& ActionCore::_internal_transfer() const {
  return _internal_has_transfer()
      ? *action_.transfer_
      : reinterpret_cast< ::TW::IoTeX::Proto::Transfer&>(::TW::IoTeX::Proto::_Transfer_default_instance_);
}
inline const ::TW::IoTeX::Proto::Transfer& ActionCore::transfer() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.transfer)
  return _internal_transfer();
}
inline ::TW::IoTeX::Proto::Transfer* ActionCore::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.transfer)
  if (_internal_has_transfer()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Transfer* temp = action_.transfer_;
    action_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_transfer(::TW::IoTeX::Proto::Transfer* transfer) {
  clear_action();
  if (transfer) {
    set_has_transfer();
    action_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.transfer)
}
inline ::TW::IoTeX::Proto::Transfer* ActionCore::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_action();
    set_has_transfer();
    action_.transfer_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Transfer >(GetArena());
  }
  return action_.transfer_;
}
inline ::TW::IoTeX::Proto::Transfer* ActionCore::mutable_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.transfer)
  return _internal_mutable_transfer();
}

// .TW.IoTeX.Proto.ContractCall execution = 12;
inline bool ActionCore::_internal_has_execution() const {
  return action_case() == kExecution;
}
inline bool ActionCore::has_execution() const {
  return _internal_has_execution();
}
inline void ActionCore::set_has_execution() {
  _oneof_case_[0] = kExecution;
}
inline void ActionCore::clear_execution() {
  if (_internal_has_execution()) {
    if (GetArena() == nullptr) {
      delete action_.execution_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::ContractCall* ActionCore::release_execution() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.execution)
  if (_internal_has_execution()) {
    clear_has_action();
      ::TW::IoTeX::Proto::ContractCall* temp = action_.execution_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.execution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::ContractCall& ActionCore::_internal_execution() const {
  return _internal_has_execution()
      ? *action_.execution_
      : reinterpret_cast< ::TW::IoTeX::Proto::ContractCall&>(::TW::IoTeX::Proto::_ContractCall_default_instance_);
}
inline const ::TW::IoTeX::Proto::ContractCall& ActionCore::execution() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.execution)
  return _internal_execution();
}
inline ::TW::IoTeX::Proto::ContractCall* ActionCore::unsafe_arena_release_execution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.execution)
  if (_internal_has_execution()) {
    clear_has_action();
    ::TW::IoTeX::Proto::ContractCall* temp = action_.execution_;
    action_.execution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_execution(::TW::IoTeX::Proto::ContractCall* execution) {
  clear_action();
  if (execution) {
    set_has_execution();
    action_.execution_ = execution;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.execution)
}
inline ::TW::IoTeX::Proto::ContractCall* ActionCore::_internal_mutable_execution() {
  if (!_internal_has_execution()) {
    clear_action();
    set_has_execution();
    action_.execution_ = CreateMaybeMessage< ::TW::IoTeX::Proto::ContractCall >(GetArena());
  }
  return action_.execution_;
}
inline ::TW::IoTeX::Proto::ContractCall* ActionCore::mutable_execution() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.execution)
  return _internal_mutable_execution();
}

// .TW.IoTeX.Proto.Staking.Create stakeCreate = 40;
inline bool ActionCore::_internal_has_stakecreate() const {
  return action_case() == kStakeCreate;
}
inline bool ActionCore::has_stakecreate() const {
  return _internal_has_stakecreate();
}
inline void ActionCore::set_has_stakecreate() {
  _oneof_case_[0] = kStakeCreate;
}
inline void ActionCore::clear_stakecreate() {
  if (_internal_has_stakecreate()) {
    if (GetArena() == nullptr) {
      delete action_.stakecreate_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_Create* ActionCore::release_stakecreate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.stakeCreate)
  if (_internal_has_stakecreate()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_Create* temp = action_.stakecreate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakecreate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Create& ActionCore::_internal_stakecreate() const {
  return _internal_has_stakecreate()
      ? *action_.stakecreate_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Create&>(::TW::IoTeX::Proto::_Staking_Create_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Create& ActionCore::stakecreate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.stakeCreate)
  return _internal_stakecreate();
}
inline ::TW::IoTeX::Proto::Staking_Create* ActionCore::unsafe_arena_release_stakecreate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.stakeCreate)
  if (_internal_has_stakecreate()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_Create* temp = action_.stakecreate_;
    action_.stakecreate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_stakecreate(::TW::IoTeX::Proto::Staking_Create* stakecreate) {
  clear_action();
  if (stakecreate) {
    set_has_stakecreate();
    action_.stakecreate_ = stakecreate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.stakeCreate)
}
inline ::TW::IoTeX::Proto::Staking_Create* ActionCore::_internal_mutable_stakecreate() {
  if (!_internal_has_stakecreate()) {
    clear_action();
    set_has_stakecreate();
    action_.stakecreate_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Create >(GetArena());
  }
  return action_.stakecreate_;
}
inline ::TW::IoTeX::Proto::Staking_Create* ActionCore::mutable_stakecreate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.stakeCreate)
  return _internal_mutable_stakecreate();
}

// .TW.IoTeX.Proto.Staking.Reclaim stakeUnstake = 41;
inline bool ActionCore::_internal_has_stakeunstake() const {
  return action_case() == kStakeUnstake;
}
inline bool ActionCore::has_stakeunstake() const {
  return _internal_has_stakeunstake();
}
inline void ActionCore::set_has_stakeunstake() {
  _oneof_case_[0] = kStakeUnstake;
}
inline void ActionCore::clear_stakeunstake() {
  if (_internal_has_stakeunstake()) {
    if (GetArena() == nullptr) {
      delete action_.stakeunstake_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* ActionCore::release_stakeunstake() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.stakeUnstake)
  if (_internal_has_stakeunstake()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_Reclaim* temp = action_.stakeunstake_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakeunstake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& ActionCore::_internal_stakeunstake() const {
  return _internal_has_stakeunstake()
      ? *action_.stakeunstake_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Reclaim&>(::TW::IoTeX::Proto::_Staking_Reclaim_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& ActionCore::stakeunstake() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.stakeUnstake)
  return _internal_stakeunstake();
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* ActionCore::unsafe_arena_release_stakeunstake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.stakeUnstake)
  if (_internal_has_stakeunstake()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_Reclaim* temp = action_.stakeunstake_;
    action_.stakeunstake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_stakeunstake(::TW::IoTeX::Proto::Staking_Reclaim* stakeunstake) {
  clear_action();
  if (stakeunstake) {
    set_has_stakeunstake();
    action_.stakeunstake_ = stakeunstake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.stakeUnstake)
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* ActionCore::_internal_mutable_stakeunstake() {
  if (!_internal_has_stakeunstake()) {
    clear_action();
    set_has_stakeunstake();
    action_.stakeunstake_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Reclaim >(GetArena());
  }
  return action_.stakeunstake_;
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* ActionCore::mutable_stakeunstake() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.stakeUnstake)
  return _internal_mutable_stakeunstake();
}

// .TW.IoTeX.Proto.Staking.Reclaim stakeWithdraw = 42;
inline bool ActionCore::_internal_has_stakewithdraw() const {
  return action_case() == kStakeWithdraw;
}
inline bool ActionCore::has_stakewithdraw() const {
  return _internal_has_stakewithdraw();
}
inline void ActionCore::set_has_stakewithdraw() {
  _oneof_case_[0] = kStakeWithdraw;
}
inline void ActionCore::clear_stakewithdraw() {
  if (_internal_has_stakewithdraw()) {
    if (GetArena() == nullptr) {
      delete action_.stakewithdraw_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* ActionCore::release_stakewithdraw() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.stakeWithdraw)
  if (_internal_has_stakewithdraw()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_Reclaim* temp = action_.stakewithdraw_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakewithdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& ActionCore::_internal_stakewithdraw() const {
  return _internal_has_stakewithdraw()
      ? *action_.stakewithdraw_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Reclaim&>(::TW::IoTeX::Proto::_Staking_Reclaim_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Reclaim& ActionCore::stakewithdraw() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.stakeWithdraw)
  return _internal_stakewithdraw();
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* ActionCore::unsafe_arena_release_stakewithdraw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.stakeWithdraw)
  if (_internal_has_stakewithdraw()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_Reclaim* temp = action_.stakewithdraw_;
    action_.stakewithdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_stakewithdraw(::TW::IoTeX::Proto::Staking_Reclaim* stakewithdraw) {
  clear_action();
  if (stakewithdraw) {
    set_has_stakewithdraw();
    action_.stakewithdraw_ = stakewithdraw;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.stakeWithdraw)
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* ActionCore::_internal_mutable_stakewithdraw() {
  if (!_internal_has_stakewithdraw()) {
    clear_action();
    set_has_stakewithdraw();
    action_.stakewithdraw_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Reclaim >(GetArena());
  }
  return action_.stakewithdraw_;
}
inline ::TW::IoTeX::Proto::Staking_Reclaim* ActionCore::mutable_stakewithdraw() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.stakeWithdraw)
  return _internal_mutable_stakewithdraw();
}

// .TW.IoTeX.Proto.Staking.AddDeposit stakeAddDeposit = 43;
inline bool ActionCore::_internal_has_stakeadddeposit() const {
  return action_case() == kStakeAddDeposit;
}
inline bool ActionCore::has_stakeadddeposit() const {
  return _internal_has_stakeadddeposit();
}
inline void ActionCore::set_has_stakeadddeposit() {
  _oneof_case_[0] = kStakeAddDeposit;
}
inline void ActionCore::clear_stakeadddeposit() {
  if (_internal_has_stakeadddeposit()) {
    if (GetArena() == nullptr) {
      delete action_.stakeadddeposit_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* ActionCore::release_stakeadddeposit() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.stakeAddDeposit)
  if (_internal_has_stakeadddeposit()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_AddDeposit* temp = action_.stakeadddeposit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakeadddeposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_AddDeposit& ActionCore::_internal_stakeadddeposit() const {
  return _internal_has_stakeadddeposit()
      ? *action_.stakeadddeposit_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_AddDeposit&>(::TW::IoTeX::Proto::_Staking_AddDeposit_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_AddDeposit& ActionCore::stakeadddeposit() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.stakeAddDeposit)
  return _internal_stakeadddeposit();
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* ActionCore::unsafe_arena_release_stakeadddeposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.stakeAddDeposit)
  if (_internal_has_stakeadddeposit()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_AddDeposit* temp = action_.stakeadddeposit_;
    action_.stakeadddeposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_stakeadddeposit(::TW::IoTeX::Proto::Staking_AddDeposit* stakeadddeposit) {
  clear_action();
  if (stakeadddeposit) {
    set_has_stakeadddeposit();
    action_.stakeadddeposit_ = stakeadddeposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.stakeAddDeposit)
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* ActionCore::_internal_mutable_stakeadddeposit() {
  if (!_internal_has_stakeadddeposit()) {
    clear_action();
    set_has_stakeadddeposit();
    action_.stakeadddeposit_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_AddDeposit >(GetArena());
  }
  return action_.stakeadddeposit_;
}
inline ::TW::IoTeX::Proto::Staking_AddDeposit* ActionCore::mutable_stakeadddeposit() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.stakeAddDeposit)
  return _internal_mutable_stakeadddeposit();
}

// .TW.IoTeX.Proto.Staking.Restake stakeRestake = 44;
inline bool ActionCore::_internal_has_stakerestake() const {
  return action_case() == kStakeRestake;
}
inline bool ActionCore::has_stakerestake() const {
  return _internal_has_stakerestake();
}
inline void ActionCore::set_has_stakerestake() {
  _oneof_case_[0] = kStakeRestake;
}
inline void ActionCore::clear_stakerestake() {
  if (_internal_has_stakerestake()) {
    if (GetArena() == nullptr) {
      delete action_.stakerestake_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_Restake* ActionCore::release_stakerestake() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.stakeRestake)
  if (_internal_has_stakerestake()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_Restake* temp = action_.stakerestake_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakerestake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_Restake& ActionCore::_internal_stakerestake() const {
  return _internal_has_stakerestake()
      ? *action_.stakerestake_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_Restake&>(::TW::IoTeX::Proto::_Staking_Restake_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_Restake& ActionCore::stakerestake() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.stakeRestake)
  return _internal_stakerestake();
}
inline ::TW::IoTeX::Proto::Staking_Restake* ActionCore::unsafe_arena_release_stakerestake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.stakeRestake)
  if (_internal_has_stakerestake()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_Restake* temp = action_.stakerestake_;
    action_.stakerestake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_stakerestake(::TW::IoTeX::Proto::Staking_Restake* stakerestake) {
  clear_action();
  if (stakerestake) {
    set_has_stakerestake();
    action_.stakerestake_ = stakerestake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.stakeRestake)
}
inline ::TW::IoTeX::Proto::Staking_Restake* ActionCore::_internal_mutable_stakerestake() {
  if (!_internal_has_stakerestake()) {
    clear_action();
    set_has_stakerestake();
    action_.stakerestake_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_Restake >(GetArena());
  }
  return action_.stakerestake_;
}
inline ::TW::IoTeX::Proto::Staking_Restake* ActionCore::mutable_stakerestake() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.stakeRestake)
  return _internal_mutable_stakerestake();
}

// .TW.IoTeX.Proto.Staking.ChangeCandidate stakeChangeCandidate = 45;
inline bool ActionCore::_internal_has_stakechangecandidate() const {
  return action_case() == kStakeChangeCandidate;
}
inline bool ActionCore::has_stakechangecandidate() const {
  return _internal_has_stakechangecandidate();
}
inline void ActionCore::set_has_stakechangecandidate() {
  _oneof_case_[0] = kStakeChangeCandidate;
}
inline void ActionCore::clear_stakechangecandidate() {
  if (_internal_has_stakechangecandidate()) {
    if (GetArena() == nullptr) {
      delete action_.stakechangecandidate_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* ActionCore::release_stakechangecandidate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.stakeChangeCandidate)
  if (_internal_has_stakechangecandidate()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_ChangeCandidate* temp = action_.stakechangecandidate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stakechangecandidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_ChangeCandidate& ActionCore::_internal_stakechangecandidate() const {
  return _internal_has_stakechangecandidate()
      ? *action_.stakechangecandidate_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_ChangeCandidate&>(::TW::IoTeX::Proto::_Staking_ChangeCandidate_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_ChangeCandidate& ActionCore::stakechangecandidate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.stakeChangeCandidate)
  return _internal_stakechangecandidate();
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* ActionCore::unsafe_arena_release_stakechangecandidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.stakeChangeCandidate)
  if (_internal_has_stakechangecandidate()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_ChangeCandidate* temp = action_.stakechangecandidate_;
    action_.stakechangecandidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_stakechangecandidate(::TW::IoTeX::Proto::Staking_ChangeCandidate* stakechangecandidate) {
  clear_action();
  if (stakechangecandidate) {
    set_has_stakechangecandidate();
    action_.stakechangecandidate_ = stakechangecandidate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.stakeChangeCandidate)
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* ActionCore::_internal_mutable_stakechangecandidate() {
  if (!_internal_has_stakechangecandidate()) {
    clear_action();
    set_has_stakechangecandidate();
    action_.stakechangecandidate_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_ChangeCandidate >(GetArena());
  }
  return action_.stakechangecandidate_;
}
inline ::TW::IoTeX::Proto::Staking_ChangeCandidate* ActionCore::mutable_stakechangecandidate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.stakeChangeCandidate)
  return _internal_mutable_stakechangecandidate();
}

// .TW.IoTeX.Proto.Staking.TransferOwnership stakeTransferOwnership = 46;
inline bool ActionCore::_internal_has_staketransferownership() const {
  return action_case() == kStakeTransferOwnership;
}
inline bool ActionCore::has_staketransferownership() const {
  return _internal_has_staketransferownership();
}
inline void ActionCore::set_has_staketransferownership() {
  _oneof_case_[0] = kStakeTransferOwnership;
}
inline void ActionCore::clear_staketransferownership() {
  if (_internal_has_staketransferownership()) {
    if (GetArena() == nullptr) {
      delete action_.staketransferownership_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* ActionCore::release_staketransferownership() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.stakeTransferOwnership)
  if (_internal_has_staketransferownership()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_TransferOwnership* temp = action_.staketransferownership_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.staketransferownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_TransferOwnership& ActionCore::_internal_staketransferownership() const {
  return _internal_has_staketransferownership()
      ? *action_.staketransferownership_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_TransferOwnership&>(::TW::IoTeX::Proto::_Staking_TransferOwnership_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_TransferOwnership& ActionCore::staketransferownership() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.stakeTransferOwnership)
  return _internal_staketransferownership();
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* ActionCore::unsafe_arena_release_staketransferownership() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.stakeTransferOwnership)
  if (_internal_has_staketransferownership()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_TransferOwnership* temp = action_.staketransferownership_;
    action_.staketransferownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_staketransferownership(::TW::IoTeX::Proto::Staking_TransferOwnership* staketransferownership) {
  clear_action();
  if (staketransferownership) {
    set_has_staketransferownership();
    action_.staketransferownership_ = staketransferownership;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.stakeTransferOwnership)
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* ActionCore::_internal_mutable_staketransferownership() {
  if (!_internal_has_staketransferownership()) {
    clear_action();
    set_has_staketransferownership();
    action_.staketransferownership_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_TransferOwnership >(GetArena());
  }
  return action_.staketransferownership_;
}
inline ::TW::IoTeX::Proto::Staking_TransferOwnership* ActionCore::mutable_staketransferownership() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.stakeTransferOwnership)
  return _internal_mutable_staketransferownership();
}

// .TW.IoTeX.Proto.Staking.CandidateRegister candidateRegister = 47;
inline bool ActionCore::_internal_has_candidateregister() const {
  return action_case() == kCandidateRegister;
}
inline bool ActionCore::has_candidateregister() const {
  return _internal_has_candidateregister();
}
inline void ActionCore::set_has_candidateregister() {
  _oneof_case_[0] = kCandidateRegister;
}
inline void ActionCore::clear_candidateregister() {
  if (_internal_has_candidateregister()) {
    if (GetArena() == nullptr) {
      delete action_.candidateregister_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* ActionCore::release_candidateregister() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.candidateRegister)
  if (_internal_has_candidateregister()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_CandidateRegister* temp = action_.candidateregister_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.candidateregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_CandidateRegister& ActionCore::_internal_candidateregister() const {
  return _internal_has_candidateregister()
      ? *action_.candidateregister_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_CandidateRegister&>(::TW::IoTeX::Proto::_Staking_CandidateRegister_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_CandidateRegister& ActionCore::candidateregister() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.candidateRegister)
  return _internal_candidateregister();
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* ActionCore::unsafe_arena_release_candidateregister() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.candidateRegister)
  if (_internal_has_candidateregister()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_CandidateRegister* temp = action_.candidateregister_;
    action_.candidateregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_candidateregister(::TW::IoTeX::Proto::Staking_CandidateRegister* candidateregister) {
  clear_action();
  if (candidateregister) {
    set_has_candidateregister();
    action_.candidateregister_ = candidateregister;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.candidateRegister)
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* ActionCore::_internal_mutable_candidateregister() {
  if (!_internal_has_candidateregister()) {
    clear_action();
    set_has_candidateregister();
    action_.candidateregister_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_CandidateRegister >(GetArena());
  }
  return action_.candidateregister_;
}
inline ::TW::IoTeX::Proto::Staking_CandidateRegister* ActionCore::mutable_candidateregister() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.candidateRegister)
  return _internal_mutable_candidateregister();
}

// .TW.IoTeX.Proto.Staking.CandidateBasicInfo candidateUpdate = 48;
inline bool ActionCore::_internal_has_candidateupdate() const {
  return action_case() == kCandidateUpdate;
}
inline bool ActionCore::has_candidateupdate() const {
  return _internal_has_candidateupdate();
}
inline void ActionCore::set_has_candidateupdate() {
  _oneof_case_[0] = kCandidateUpdate;
}
inline void ActionCore::clear_candidateupdate() {
  if (_internal_has_candidateupdate()) {
    if (GetArena() == nullptr) {
      delete action_.candidateupdate_;
    }
    clear_has_action();
  }
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* ActionCore::release_candidateupdate() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.ActionCore.candidateUpdate)
  if (_internal_has_candidateupdate()) {
    clear_has_action();
      ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* temp = action_.candidateupdate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.candidateupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& ActionCore::_internal_candidateupdate() const {
  return _internal_has_candidateupdate()
      ? *action_.candidateupdate_
      : reinterpret_cast< ::TW::IoTeX::Proto::Staking_CandidateBasicInfo&>(::TW::IoTeX::Proto::_Staking_CandidateBasicInfo_default_instance_);
}
inline const ::TW::IoTeX::Proto::Staking_CandidateBasicInfo& ActionCore::candidateupdate() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.ActionCore.candidateUpdate)
  return _internal_candidateupdate();
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* ActionCore::unsafe_arena_release_candidateupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.IoTeX.Proto.ActionCore.candidateUpdate)
  if (_internal_has_candidateupdate()) {
    clear_has_action();
    ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* temp = action_.candidateupdate_;
    action_.candidateupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ActionCore::unsafe_arena_set_allocated_candidateupdate(::TW::IoTeX::Proto::Staking_CandidateBasicInfo* candidateupdate) {
  clear_action();
  if (candidateupdate) {
    set_has_candidateupdate();
    action_.candidateupdate_ = candidateupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.ActionCore.candidateUpdate)
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* ActionCore::_internal_mutable_candidateupdate() {
  if (!_internal_has_candidateupdate()) {
    clear_action();
    set_has_candidateupdate();
    action_.candidateupdate_ = CreateMaybeMessage< ::TW::IoTeX::Proto::Staking_CandidateBasicInfo >(GetArena());
  }
  return action_.candidateupdate_;
}
inline ::TW::IoTeX::Proto::Staking_CandidateBasicInfo* ActionCore::mutable_candidateupdate() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.ActionCore.candidateUpdate)
  return _internal_mutable_candidateupdate();
}

inline bool ActionCore::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void ActionCore::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline ActionCore::ActionCase ActionCore::action_case() const {
  return ActionCore::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Action

// .TW.IoTeX.Proto.ActionCore core = 1;
inline bool Action::_internal_has_core() const {
  return this != internal_default_instance() && core_ != nullptr;
}
inline bool Action::has_core() const {
  return _internal_has_core();
}
inline void Action::clear_core() {
  if (GetArena() == nullptr && core_ != nullptr) {
    delete core_;
  }
  core_ = nullptr;
}
inline const ::TW::IoTeX::Proto::ActionCore& Action::_internal_core() const {
  const ::TW::IoTeX::Proto::ActionCore* p = core_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::IoTeX::Proto::ActionCore&>(
      ::TW::IoTeX::Proto::_ActionCore_default_instance_);
}
inline const ::TW::IoTeX::Proto::ActionCore& Action::core() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Action.core)
  return _internal_core();
}
inline void Action::unsafe_arena_set_allocated_core(
    ::TW::IoTeX::Proto::ActionCore* core) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(core_);
  }
  core_ = core;
  if (core) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IoTeX.Proto.Action.core)
}
inline ::TW::IoTeX::Proto::ActionCore* Action::release_core() {
  
  ::TW::IoTeX::Proto::ActionCore* temp = core_;
  core_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::IoTeX::Proto::ActionCore* Action::unsafe_arena_release_core() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Action.core)
  
  ::TW::IoTeX::Proto::ActionCore* temp = core_;
  core_ = nullptr;
  return temp;
}
inline ::TW::IoTeX::Proto::ActionCore* Action::_internal_mutable_core() {
  
  if (core_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::IoTeX::Proto::ActionCore>(GetArena());
    core_ = p;
  }
  return core_;
}
inline ::TW::IoTeX::Proto::ActionCore* Action::mutable_core() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Action.core)
  return _internal_mutable_core();
}
inline void Action::set_allocated_core(::TW::IoTeX::Proto::ActionCore* core) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete core_;
  }
  if (core) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(core);
    if (message_arena != submessage_arena) {
      core = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, core, submessage_arena);
    }
    
  } else {
    
  }
  core_ = core;
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Action.core)
}

// bytes senderPubKey = 2;
inline void Action::clear_senderpubkey() {
  senderpubkey_.ClearToEmpty();
}
inline const std::string& Action::senderpubkey() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Action.senderPubKey)
  return _internal_senderpubkey();
}
inline void Action::set_senderpubkey(const std::string& value) {
  _internal_set_senderpubkey(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Action.senderPubKey)
}
inline std::string* Action::mutable_senderpubkey() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Action.senderPubKey)
  return _internal_mutable_senderpubkey();
}
inline const std::string& Action::_internal_senderpubkey() const {
  return senderpubkey_.Get();
}
inline void Action::_internal_set_senderpubkey(const std::string& value) {
  
  senderpubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_senderpubkey(std::string&& value) {
  
  senderpubkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Action.senderPubKey)
}
inline void Action::set_senderpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  senderpubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Action.senderPubKey)
}
inline void Action::set_senderpubkey(const void* value,
    size_t size) {
  
  senderpubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Action.senderPubKey)
}
inline std::string* Action::_internal_mutable_senderpubkey() {
  
  return senderpubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_senderpubkey() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Action.senderPubKey)
  return senderpubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_senderpubkey(std::string* senderpubkey) {
  if (senderpubkey != nullptr) {
    
  } else {
    
  }
  senderpubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), senderpubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Action.senderPubKey)
}

// bytes signature = 3;
inline void Action::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& Action::signature() const {
  // @@protoc_insertion_point(field_get:TW.IoTeX.Proto.Action.signature)
  return _internal_signature();
}
inline void Action::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:TW.IoTeX.Proto.Action.signature)
}
inline std::string* Action::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:TW.IoTeX.Proto.Action.signature)
  return _internal_mutable_signature();
}
inline const std::string& Action::_internal_signature() const {
  return signature_.Get();
}
inline void Action::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.IoTeX.Proto.Action.signature)
}
inline void Action::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.IoTeX.Proto.Action.signature)
}
inline void Action::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.IoTeX.Proto.Action.signature)
}
inline std::string* Action::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_signature() {
  // @@protoc_insertion_point(field_release:TW.IoTeX.Proto.Action.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.IoTeX.Proto.Action.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace IoTeX
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IoTeX_2eproto
