// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Polkadot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Polkadot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Polkadot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Polkadot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Polkadot_2eproto;
namespace TW {
namespace Polkadot {
namespace Proto {
class Balance;
class BalanceDefaultTypeInternal;
extern BalanceDefaultTypeInternal _Balance_default_instance_;
class Balance_Transfer;
class Balance_TransferDefaultTypeInternal;
extern Balance_TransferDefaultTypeInternal _Balance_Transfer_default_instance_;
class Era;
class EraDefaultTypeInternal;
extern EraDefaultTypeInternal _Era_default_instance_;
class SigningInput;
class SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
class SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Staking;
class StakingDefaultTypeInternal;
extern StakingDefaultTypeInternal _Staking_default_instance_;
class Staking_Bond;
class Staking_BondDefaultTypeInternal;
extern Staking_BondDefaultTypeInternal _Staking_Bond_default_instance_;
class Staking_BondAndNominate;
class Staking_BondAndNominateDefaultTypeInternal;
extern Staking_BondAndNominateDefaultTypeInternal _Staking_BondAndNominate_default_instance_;
class Staking_BondExtra;
class Staking_BondExtraDefaultTypeInternal;
extern Staking_BondExtraDefaultTypeInternal _Staking_BondExtra_default_instance_;
class Staking_Chill;
class Staking_ChillDefaultTypeInternal;
extern Staking_ChillDefaultTypeInternal _Staking_Chill_default_instance_;
class Staking_Nominate;
class Staking_NominateDefaultTypeInternal;
extern Staking_NominateDefaultTypeInternal _Staking_Nominate_default_instance_;
class Staking_Unbond;
class Staking_UnbondDefaultTypeInternal;
extern Staking_UnbondDefaultTypeInternal _Staking_Unbond_default_instance_;
class Staking_WithdrawUnbonded;
class Staking_WithdrawUnbondedDefaultTypeInternal;
extern Staking_WithdrawUnbondedDefaultTypeInternal _Staking_WithdrawUnbonded_default_instance_;
}  // namespace Proto
}  // namespace Polkadot
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Polkadot::Proto::Balance* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Balance>(Arena*);
template<> ::TW::Polkadot::Proto::Balance_Transfer* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Balance_Transfer>(Arena*);
template<> ::TW::Polkadot::Proto::Era* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Era>(Arena*);
template<> ::TW::Polkadot::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::SigningInput>(Arena*);
template<> ::TW::Polkadot::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::SigningOutput>(Arena*);
template<> ::TW::Polkadot::Proto::Staking* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_Bond* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_Bond>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_BondAndNominate* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_BondAndNominate>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_BondExtra* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_BondExtra>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_Chill* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_Chill>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_Nominate* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_Nominate>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_Unbond* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_Unbond>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_WithdrawUnbonded>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Polkadot {
namespace Proto {

enum Network : int {
  POLKADOT = 0,
  KUSAMA = 2,
  Network_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Network_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Network_IsValid(int value);
constexpr Network Network_MIN = POLKADOT;
constexpr Network Network_MAX = KUSAMA;
constexpr int Network_ARRAYSIZE = Network_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Network_descriptor();
template<typename T>
inline const std::string& Network_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Network>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Network_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Network_descriptor(), enum_t_value);
}
inline bool Network_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Network* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Network>(
    Network_descriptor(), name, value);
}
enum RewardDestination : int {
  STAKED = 0,
  STASH = 1,
  CONTROLLER = 2,
  RewardDestination_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RewardDestination_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RewardDestination_IsValid(int value);
constexpr RewardDestination RewardDestination_MIN = STAKED;
constexpr RewardDestination RewardDestination_MAX = CONTROLLER;
constexpr int RewardDestination_ARRAYSIZE = RewardDestination_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardDestination_descriptor();
template<typename T>
inline const std::string& RewardDestination_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RewardDestination>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RewardDestination_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RewardDestination_descriptor(), enum_t_value);
}
inline bool RewardDestination_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RewardDestination* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RewardDestination>(
    RewardDestination_descriptor(), name, value);
}
// ===================================================================

class Era PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Era) */ {
 public:
  inline Era() : Era(nullptr) {}
  virtual ~Era();

  Era(const Era& from);
  Era(Era&& from) noexcept
    : Era() {
    *this = ::std::move(from);
  }

  inline Era& operator=(const Era& from) {
    CopyFrom(from);
    return *this;
  }
  inline Era& operator=(Era&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Era& default_instance();

  static inline const Era* internal_default_instance() {
    return reinterpret_cast<const Era*>(
               &_Era_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Era& a, Era& b) {
    a.Swap(&b);
  }
  inline void Swap(Era* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Era* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Era* New() const final {
    return CreateMaybeMessage<Era>(nullptr);
  }

  Era* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Era>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Era& from);
  void MergeFrom(const Era& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Era* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Era";
  }
  protected:
  explicit Era(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumberFieldNumber = 1,
    kPeriodFieldNumber = 2,
  };
  // uint64 block_number = 1;
  void clear_block_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number() const;
  void set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_number() const;
  void _internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 period = 2;
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint64 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Era)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Balance_Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Balance.Transfer) */ {
 public:
  inline Balance_Transfer() : Balance_Transfer(nullptr) {}
  virtual ~Balance_Transfer();

  Balance_Transfer(const Balance_Transfer& from);
  Balance_Transfer(Balance_Transfer&& from) noexcept
    : Balance_Transfer() {
    *this = ::std::move(from);
  }

  inline Balance_Transfer& operator=(const Balance_Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance_Transfer& operator=(Balance_Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Balance_Transfer& default_instance();

  static inline const Balance_Transfer* internal_default_instance() {
    return reinterpret_cast<const Balance_Transfer*>(
               &_Balance_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Balance_Transfer& a, Balance_Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance_Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance_Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Balance_Transfer* New() const final {
    return CreateMaybeMessage<Balance_Transfer>(nullptr);
  }

  Balance_Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Balance_Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Balance_Transfer& from);
  void MergeFrom(const Balance_Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance_Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Balance.Transfer";
  }
  protected:
  explicit Balance_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string to_address = 1;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Balance.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Balance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Balance) */ {
 public:
  inline Balance() : Balance(nullptr) {}
  virtual ~Balance();

  Balance(const Balance& from);
  Balance(Balance&& from) noexcept
    : Balance() {
    *this = ::std::move(from);
  }

  inline Balance& operator=(const Balance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance& operator=(Balance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Balance& default_instance();

  enum MessageOneofCase {
    kTransfer = 1,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Balance* internal_default_instance() {
    return reinterpret_cast<const Balance*>(
               &_Balance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Balance& a, Balance& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Balance* New() const final {
    return CreateMaybeMessage<Balance>(nullptr);
  }

  Balance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Balance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Balance& from);
  void MergeFrom(const Balance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Balance";
  }
  protected:
  explicit Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Balance_Transfer Transfer;

  // accessors -------------------------------------------------------

  enum : int {
    kTransferFieldNumber = 1,
  };
  // .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::Polkadot::Proto::Balance_Transfer& transfer() const;
  ::TW::Polkadot::Proto::Balance_Transfer* release_transfer();
  ::TW::Polkadot::Proto::Balance_Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::Polkadot::Proto::Balance_Transfer* transfer);
  private:
  const ::TW::Polkadot::Proto::Balance_Transfer& _internal_transfer() const;
  ::TW::Polkadot::Proto::Balance_Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::Polkadot::Proto::Balance_Transfer* transfer);
  ::TW::Polkadot::Proto::Balance_Transfer* unsafe_arena_release_transfer();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Balance)
 private:
  class _Internal;
  void set_has_transfer();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    MessageOneofUnion() {}
    ::TW::Polkadot::Proto::Balance_Transfer* transfer_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_Bond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.Bond) */ {
 public:
  inline Staking_Bond() : Staking_Bond(nullptr) {}
  virtual ~Staking_Bond();

  Staking_Bond(const Staking_Bond& from);
  Staking_Bond(Staking_Bond&& from) noexcept
    : Staking_Bond() {
    *this = ::std::move(from);
  }

  inline Staking_Bond& operator=(const Staking_Bond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Bond& operator=(Staking_Bond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_Bond& default_instance();

  static inline const Staking_Bond* internal_default_instance() {
    return reinterpret_cast<const Staking_Bond*>(
               &_Staking_Bond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Staking_Bond& a, Staking_Bond& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Bond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Bond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_Bond* New() const final {
    return CreateMaybeMessage<Staking_Bond>(nullptr);
  }

  Staking_Bond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_Bond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_Bond& from);
  void MergeFrom(const Staking_Bond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Bond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.Bond";
  }
  protected:
  explicit Staking_Bond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
    kValueFieldNumber = 2,
    kRewardDestinationFieldNumber = 3,
  };
  // string controller = 1;
  void clear_controller();
  const std::string& controller() const;
  void set_controller(const std::string& value);
  void set_controller(std::string&& value);
  void set_controller(const char* value);
  void set_controller(const char* value, size_t size);
  std::string* mutable_controller();
  std::string* release_controller();
  void set_allocated_controller(std::string* controller);
  private:
  const std::string& _internal_controller() const;
  void _internal_set_controller(const std::string& value);
  std::string* _internal_mutable_controller();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  void clear_reward_destination();
  ::TW::Polkadot::Proto::RewardDestination reward_destination() const;
  void set_reward_destination(::TW::Polkadot::Proto::RewardDestination value);
  private:
  ::TW::Polkadot::Proto::RewardDestination _internal_reward_destination() const;
  void _internal_set_reward_destination(::TW::Polkadot::Proto::RewardDestination value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.Bond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int reward_destination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_BondAndNominate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.BondAndNominate) */ {
 public:
  inline Staking_BondAndNominate() : Staking_BondAndNominate(nullptr) {}
  virtual ~Staking_BondAndNominate();

  Staking_BondAndNominate(const Staking_BondAndNominate& from);
  Staking_BondAndNominate(Staking_BondAndNominate&& from) noexcept
    : Staking_BondAndNominate() {
    *this = ::std::move(from);
  }

  inline Staking_BondAndNominate& operator=(const Staking_BondAndNominate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_BondAndNominate& operator=(Staking_BondAndNominate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_BondAndNominate& default_instance();

  static inline const Staking_BondAndNominate* internal_default_instance() {
    return reinterpret_cast<const Staking_BondAndNominate*>(
               &_Staking_BondAndNominate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Staking_BondAndNominate& a, Staking_BondAndNominate& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_BondAndNominate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_BondAndNominate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_BondAndNominate* New() const final {
    return CreateMaybeMessage<Staking_BondAndNominate>(nullptr);
  }

  Staking_BondAndNominate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_BondAndNominate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_BondAndNominate& from);
  void MergeFrom(const Staking_BondAndNominate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_BondAndNominate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.BondAndNominate";
  }
  protected:
  explicit Staking_BondAndNominate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNominatorsFieldNumber = 4,
    kControllerFieldNumber = 1,
    kValueFieldNumber = 2,
    kRewardDestinationFieldNumber = 3,
  };
  // repeated string nominators = 4;
  int nominators_size() const;
  private:
  int _internal_nominators_size() const;
  public:
  void clear_nominators();
  const std::string& nominators(int index) const;
  std::string* mutable_nominators(int index);
  void set_nominators(int index, const std::string& value);
  void set_nominators(int index, std::string&& value);
  void set_nominators(int index, const char* value);
  void set_nominators(int index, const char* value, size_t size);
  std::string* add_nominators();
  void add_nominators(const std::string& value);
  void add_nominators(std::string&& value);
  void add_nominators(const char* value);
  void add_nominators(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nominators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nominators();
  private:
  const std::string& _internal_nominators(int index) const;
  std::string* _internal_add_nominators();
  public:

  // string controller = 1;
  void clear_controller();
  const std::string& controller() const;
  void set_controller(const std::string& value);
  void set_controller(std::string&& value);
  void set_controller(const char* value);
  void set_controller(const char* value, size_t size);
  std::string* mutable_controller();
  std::string* release_controller();
  void set_allocated_controller(std::string* controller);
  private:
  const std::string& _internal_controller() const;
  void _internal_set_controller(const std::string& value);
  std::string* _internal_mutable_controller();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  void clear_reward_destination();
  ::TW::Polkadot::Proto::RewardDestination reward_destination() const;
  void set_reward_destination(::TW::Polkadot::Proto::RewardDestination value);
  private:
  ::TW::Polkadot::Proto::RewardDestination _internal_reward_destination() const;
  void _internal_set_reward_destination(::TW::Polkadot::Proto::RewardDestination value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.BondAndNominate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nominators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int reward_destination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_BondExtra PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.BondExtra) */ {
 public:
  inline Staking_BondExtra() : Staking_BondExtra(nullptr) {}
  virtual ~Staking_BondExtra();

  Staking_BondExtra(const Staking_BondExtra& from);
  Staking_BondExtra(Staking_BondExtra&& from) noexcept
    : Staking_BondExtra() {
    *this = ::std::move(from);
  }

  inline Staking_BondExtra& operator=(const Staking_BondExtra& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_BondExtra& operator=(Staking_BondExtra&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_BondExtra& default_instance();

  static inline const Staking_BondExtra* internal_default_instance() {
    return reinterpret_cast<const Staking_BondExtra*>(
               &_Staking_BondExtra_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Staking_BondExtra& a, Staking_BondExtra& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_BondExtra* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_BondExtra* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_BondExtra* New() const final {
    return CreateMaybeMessage<Staking_BondExtra>(nullptr);
  }

  Staking_BondExtra* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_BondExtra>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_BondExtra& from);
  void MergeFrom(const Staking_BondExtra& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_BondExtra* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.BondExtra";
  }
  protected:
  explicit Staking_BondExtra(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.BondExtra)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_Unbond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.Unbond) */ {
 public:
  inline Staking_Unbond() : Staking_Unbond(nullptr) {}
  virtual ~Staking_Unbond();

  Staking_Unbond(const Staking_Unbond& from);
  Staking_Unbond(Staking_Unbond&& from) noexcept
    : Staking_Unbond() {
    *this = ::std::move(from);
  }

  inline Staking_Unbond& operator=(const Staking_Unbond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Unbond& operator=(Staking_Unbond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_Unbond& default_instance();

  static inline const Staking_Unbond* internal_default_instance() {
    return reinterpret_cast<const Staking_Unbond*>(
               &_Staking_Unbond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Staking_Unbond& a, Staking_Unbond& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Unbond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Unbond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_Unbond* New() const final {
    return CreateMaybeMessage<Staking_Unbond>(nullptr);
  }

  Staking_Unbond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_Unbond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_Unbond& from);
  void MergeFrom(const Staking_Unbond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Unbond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.Unbond";
  }
  protected:
  explicit Staking_Unbond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.Unbond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_WithdrawUnbonded PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.WithdrawUnbonded) */ {
 public:
  inline Staking_WithdrawUnbonded() : Staking_WithdrawUnbonded(nullptr) {}
  virtual ~Staking_WithdrawUnbonded();

  Staking_WithdrawUnbonded(const Staking_WithdrawUnbonded& from);
  Staking_WithdrawUnbonded(Staking_WithdrawUnbonded&& from) noexcept
    : Staking_WithdrawUnbonded() {
    *this = ::std::move(from);
  }

  inline Staking_WithdrawUnbonded& operator=(const Staking_WithdrawUnbonded& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_WithdrawUnbonded& operator=(Staking_WithdrawUnbonded&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_WithdrawUnbonded& default_instance();

  static inline const Staking_WithdrawUnbonded* internal_default_instance() {
    return reinterpret_cast<const Staking_WithdrawUnbonded*>(
               &_Staking_WithdrawUnbonded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Staking_WithdrawUnbonded& a, Staking_WithdrawUnbonded& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_WithdrawUnbonded* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_WithdrawUnbonded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_WithdrawUnbonded* New() const final {
    return CreateMaybeMessage<Staking_WithdrawUnbonded>(nullptr);
  }

  Staking_WithdrawUnbonded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_WithdrawUnbonded>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_WithdrawUnbonded& from);
  void MergeFrom(const Staking_WithdrawUnbonded& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_WithdrawUnbonded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.WithdrawUnbonded";
  }
  protected:
  explicit Staking_WithdrawUnbonded(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlashingSpansFieldNumber = 1,
  };
  // int32 slashing_spans = 1;
  void clear_slashing_spans();
  ::PROTOBUF_NAMESPACE_ID::int32 slashing_spans() const;
  void set_slashing_spans(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slashing_spans() const;
  void _internal_set_slashing_spans(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 slashing_spans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_Nominate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.Nominate) */ {
 public:
  inline Staking_Nominate() : Staking_Nominate(nullptr) {}
  virtual ~Staking_Nominate();

  Staking_Nominate(const Staking_Nominate& from);
  Staking_Nominate(Staking_Nominate&& from) noexcept
    : Staking_Nominate() {
    *this = ::std::move(from);
  }

  inline Staking_Nominate& operator=(const Staking_Nominate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Nominate& operator=(Staking_Nominate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_Nominate& default_instance();

  static inline const Staking_Nominate* internal_default_instance() {
    return reinterpret_cast<const Staking_Nominate*>(
               &_Staking_Nominate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Staking_Nominate& a, Staking_Nominate& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Nominate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Nominate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_Nominate* New() const final {
    return CreateMaybeMessage<Staking_Nominate>(nullptr);
  }

  Staking_Nominate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_Nominate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_Nominate& from);
  void MergeFrom(const Staking_Nominate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Nominate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.Nominate";
  }
  protected:
  explicit Staking_Nominate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNominatorsFieldNumber = 1,
  };
  // repeated string nominators = 1;
  int nominators_size() const;
  private:
  int _internal_nominators_size() const;
  public:
  void clear_nominators();
  const std::string& nominators(int index) const;
  std::string* mutable_nominators(int index);
  void set_nominators(int index, const std::string& value);
  void set_nominators(int index, std::string&& value);
  void set_nominators(int index, const char* value);
  void set_nominators(int index, const char* value, size_t size);
  std::string* add_nominators();
  void add_nominators(const std::string& value);
  void add_nominators(std::string&& value);
  void add_nominators(const char* value);
  void add_nominators(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nominators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nominators();
  private:
  const std::string& _internal_nominators(int index) const;
  std::string* _internal_add_nominators();
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.Nominate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nominators_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_Chill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.Chill) */ {
 public:
  inline Staking_Chill() : Staking_Chill(nullptr) {}
  virtual ~Staking_Chill();

  Staking_Chill(const Staking_Chill& from);
  Staking_Chill(Staking_Chill&& from) noexcept
    : Staking_Chill() {
    *this = ::std::move(from);
  }

  inline Staking_Chill& operator=(const Staking_Chill& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Chill& operator=(Staking_Chill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking_Chill& default_instance();

  static inline const Staking_Chill* internal_default_instance() {
    return reinterpret_cast<const Staking_Chill*>(
               &_Staking_Chill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Staking_Chill& a, Staking_Chill& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Chill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Chill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking_Chill* New() const final {
    return CreateMaybeMessage<Staking_Chill>(nullptr);
  }

  Staking_Chill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking_Chill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking_Chill& from);
  void MergeFrom(const Staking_Chill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Chill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.Chill";
  }
  protected:
  explicit Staking_Chill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.Chill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking) */ {
 public:
  inline Staking() : Staking(nullptr) {}
  virtual ~Staking();

  Staking(const Staking& from);
  Staking(Staking&& from) noexcept
    : Staking() {
    *this = ::std::move(from);
  }

  inline Staking& operator=(const Staking& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking& operator=(Staking&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Staking& default_instance();

  enum MessageOneofCase {
    kBond = 1,
    kBondAndNominate = 2,
    kBondExtra = 3,
    kUnbond = 4,
    kWithdrawUnbonded = 5,
    kNominate = 6,
    kChill = 7,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Staking* internal_default_instance() {
    return reinterpret_cast<const Staking*>(
               &_Staking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Staking& a, Staking& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Staking* New() const final {
    return CreateMaybeMessage<Staking>(nullptr);
  }

  Staking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Staking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Staking& from);
  void MergeFrom(const Staking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking";
  }
  protected:
  explicit Staking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Staking_Bond Bond;
  typedef Staking_BondAndNominate BondAndNominate;
  typedef Staking_BondExtra BondExtra;
  typedef Staking_Unbond Unbond;
  typedef Staking_WithdrawUnbonded WithdrawUnbonded;
  typedef Staking_Nominate Nominate;
  typedef Staking_Chill Chill;

  // accessors -------------------------------------------------------

  enum : int {
    kBondFieldNumber = 1,
    kBondAndNominateFieldNumber = 2,
    kBondExtraFieldNumber = 3,
    kUnbondFieldNumber = 4,
    kWithdrawUnbondedFieldNumber = 5,
    kNominateFieldNumber = 6,
    kChillFieldNumber = 7,
  };
  // .TW.Polkadot.Proto.Staking.Bond bond = 1;
  bool has_bond() const;
  private:
  bool _internal_has_bond() const;
  public:
  void clear_bond();
  const ::TW::Polkadot::Proto::Staking_Bond& bond() const;
  ::TW::Polkadot::Proto::Staking_Bond* release_bond();
  ::TW::Polkadot::Proto::Staking_Bond* mutable_bond();
  void set_allocated_bond(::TW::Polkadot::Proto::Staking_Bond* bond);
  private:
  const ::TW::Polkadot::Proto::Staking_Bond& _internal_bond() const;
  ::TW::Polkadot::Proto::Staking_Bond* _internal_mutable_bond();
  public:
  void unsafe_arena_set_allocated_bond(
      ::TW::Polkadot::Proto::Staking_Bond* bond);
  ::TW::Polkadot::Proto::Staking_Bond* unsafe_arena_release_bond();

  // .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
  bool has_bond_and_nominate() const;
  private:
  bool _internal_has_bond_and_nominate() const;
  public:
  void clear_bond_and_nominate();
  const ::TW::Polkadot::Proto::Staking_BondAndNominate& bond_and_nominate() const;
  ::TW::Polkadot::Proto::Staking_BondAndNominate* release_bond_and_nominate();
  ::TW::Polkadot::Proto::Staking_BondAndNominate* mutable_bond_and_nominate();
  void set_allocated_bond_and_nominate(::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate);
  private:
  const ::TW::Polkadot::Proto::Staking_BondAndNominate& _internal_bond_and_nominate() const;
  ::TW::Polkadot::Proto::Staking_BondAndNominate* _internal_mutable_bond_and_nominate();
  public:
  void unsafe_arena_set_allocated_bond_and_nominate(
      ::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate);
  ::TW::Polkadot::Proto::Staking_BondAndNominate* unsafe_arena_release_bond_and_nominate();

  // .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
  bool has_bond_extra() const;
  private:
  bool _internal_has_bond_extra() const;
  public:
  void clear_bond_extra();
  const ::TW::Polkadot::Proto::Staking_BondExtra& bond_extra() const;
  ::TW::Polkadot::Proto::Staking_BondExtra* release_bond_extra();
  ::TW::Polkadot::Proto::Staking_BondExtra* mutable_bond_extra();
  void set_allocated_bond_extra(::TW::Polkadot::Proto::Staking_BondExtra* bond_extra);
  private:
  const ::TW::Polkadot::Proto::Staking_BondExtra& _internal_bond_extra() const;
  ::TW::Polkadot::Proto::Staking_BondExtra* _internal_mutable_bond_extra();
  public:
  void unsafe_arena_set_allocated_bond_extra(
      ::TW::Polkadot::Proto::Staking_BondExtra* bond_extra);
  ::TW::Polkadot::Proto::Staking_BondExtra* unsafe_arena_release_bond_extra();

  // .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
  bool has_unbond() const;
  private:
  bool _internal_has_unbond() const;
  public:
  void clear_unbond();
  const ::TW::Polkadot::Proto::Staking_Unbond& unbond() const;
  ::TW::Polkadot::Proto::Staking_Unbond* release_unbond();
  ::TW::Polkadot::Proto::Staking_Unbond* mutable_unbond();
  void set_allocated_unbond(::TW::Polkadot::Proto::Staking_Unbond* unbond);
  private:
  const ::TW::Polkadot::Proto::Staking_Unbond& _internal_unbond() const;
  ::TW::Polkadot::Proto::Staking_Unbond* _internal_mutable_unbond();
  public:
  void unsafe_arena_set_allocated_unbond(
      ::TW::Polkadot::Proto::Staking_Unbond* unbond);
  ::TW::Polkadot::Proto::Staking_Unbond* unsafe_arena_release_unbond();

  // .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
  bool has_withdraw_unbonded() const;
  private:
  bool _internal_has_withdraw_unbonded() const;
  public:
  void clear_withdraw_unbonded();
  const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& withdraw_unbonded() const;
  ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* release_withdraw_unbonded();
  ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* mutable_withdraw_unbonded();
  void set_allocated_withdraw_unbonded(::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded);
  private:
  const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& _internal_withdraw_unbonded() const;
  ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* _internal_mutable_withdraw_unbonded();
  public:
  void unsafe_arena_set_allocated_withdraw_unbonded(
      ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded);
  ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* unsafe_arena_release_withdraw_unbonded();

  // .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
  bool has_nominate() const;
  private:
  bool _internal_has_nominate() const;
  public:
  void clear_nominate();
  const ::TW::Polkadot::Proto::Staking_Nominate& nominate() const;
  ::TW::Polkadot::Proto::Staking_Nominate* release_nominate();
  ::TW::Polkadot::Proto::Staking_Nominate* mutable_nominate();
  void set_allocated_nominate(::TW::Polkadot::Proto::Staking_Nominate* nominate);
  private:
  const ::TW::Polkadot::Proto::Staking_Nominate& _internal_nominate() const;
  ::TW::Polkadot::Proto::Staking_Nominate* _internal_mutable_nominate();
  public:
  void unsafe_arena_set_allocated_nominate(
      ::TW::Polkadot::Proto::Staking_Nominate* nominate);
  ::TW::Polkadot::Proto::Staking_Nominate* unsafe_arena_release_nominate();

  // .TW.Polkadot.Proto.Staking.Chill chill = 7;
  bool has_chill() const;
  private:
  bool _internal_has_chill() const;
  public:
  void clear_chill();
  const ::TW::Polkadot::Proto::Staking_Chill& chill() const;
  ::TW::Polkadot::Proto::Staking_Chill* release_chill();
  ::TW::Polkadot::Proto::Staking_Chill* mutable_chill();
  void set_allocated_chill(::TW::Polkadot::Proto::Staking_Chill* chill);
  private:
  const ::TW::Polkadot::Proto::Staking_Chill& _internal_chill() const;
  ::TW::Polkadot::Proto::Staking_Chill* _internal_mutable_chill();
  public:
  void unsafe_arena_set_allocated_chill(
      ::TW::Polkadot::Proto::Staking_Chill* chill);
  ::TW::Polkadot::Proto::Staking_Chill* unsafe_arena_release_chill();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking)
 private:
  class _Internal;
  void set_has_bond();
  void set_has_bond_and_nominate();
  void set_has_bond_extra();
  void set_has_unbond();
  void set_has_withdraw_unbonded();
  void set_has_nominate();
  void set_has_chill();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    MessageOneofUnion() {}
    ::TW::Polkadot::Proto::Staking_Bond* bond_;
    ::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate_;
    ::TW::Polkadot::Proto::Staking_BondExtra* bond_extra_;
    ::TW::Polkadot::Proto::Staking_Unbond* unbond_;
    ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded_;
    ::TW::Polkadot::Proto::Staking_Nominate* nominate_;
    ::TW::Polkadot::Proto::Staking_Chill* chill_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class SigningInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  virtual ~SigningInput();

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningInput& default_instance();

  enum MessageOneofCase {
    kBalanceCall = 10,
    kStakingCall = 11,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningInput* New() const final {
    return CreateMaybeMessage<SigningInput>(nullptr);
  }

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningInput& from);
  void MergeFrom(const SigningInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashFieldNumber = 1,
    kGenesisHashFieldNumber = 2,
    kTipFieldNumber = 6,
    kPrivateKeyFieldNumber = 8,
    kEraFieldNumber = 7,
    kNonceFieldNumber = 3,
    kSpecVersionFieldNumber = 4,
    kTransactionVersionFieldNumber = 5,
    kNetworkFieldNumber = 9,
    kChainIdFieldNumber = 12,
    kBlockNumberFieldNumber = 13,
    kBalanceCallFieldNumber = 10,
    kStakingCallFieldNumber = 11,
  };
  // bytes block_hash = 1;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // bytes genesis_hash = 2;
  void clear_genesis_hash();
  const std::string& genesis_hash() const;
  void set_genesis_hash(const std::string& value);
  void set_genesis_hash(std::string&& value);
  void set_genesis_hash(const char* value);
  void set_genesis_hash(const void* value, size_t size);
  std::string* mutable_genesis_hash();
  std::string* release_genesis_hash();
  void set_allocated_genesis_hash(std::string* genesis_hash);
  private:
  const std::string& _internal_genesis_hash() const;
  void _internal_set_genesis_hash(const std::string& value);
  std::string* _internal_mutable_genesis_hash();
  public:

  // bytes tip = 6;
  void clear_tip();
  const std::string& tip() const;
  void set_tip(const std::string& value);
  void set_tip(std::string&& value);
  void set_tip(const char* value);
  void set_tip(const void* value, size_t size);
  std::string* mutable_tip();
  std::string* release_tip();
  void set_allocated_tip(std::string* tip);
  private:
  const std::string& _internal_tip() const;
  void _internal_set_tip(const std::string& value);
  std::string* _internal_mutable_tip();
  public:

  // bytes private_key = 8;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Polkadot.Proto.Era era = 7;
  bool has_era() const;
  private:
  bool _internal_has_era() const;
  public:
  void clear_era();
  const ::TW::Polkadot::Proto::Era& era() const;
  ::TW::Polkadot::Proto::Era* release_era();
  ::TW::Polkadot::Proto::Era* mutable_era();
  void set_allocated_era(::TW::Polkadot::Proto::Era* era);
  private:
  const ::TW::Polkadot::Proto::Era& _internal_era() const;
  ::TW::Polkadot::Proto::Era* _internal_mutable_era();
  public:
  void unsafe_arena_set_allocated_era(
      ::TW::Polkadot::Proto::Era* era);
  ::TW::Polkadot::Proto::Era* unsafe_arena_release_era();

  // uint64 nonce = 3;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 spec_version = 4;
  void clear_spec_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 spec_version() const;
  void set_spec_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spec_version() const;
  void _internal_set_spec_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 transaction_version = 5;
  void clear_transaction_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 transaction_version() const;
  void set_transaction_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_transaction_version() const;
  void _internal_set_transaction_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .TW.Polkadot.Proto.Network network = 9;
  void clear_network();
  ::TW::Polkadot::Proto::Network network() const;
  void set_network(::TW::Polkadot::Proto::Network value);
  private:
  ::TW::Polkadot::Proto::Network _internal_network() const;
  void _internal_set_network(::TW::Polkadot::Proto::Network value);
  public:

  // .TW.Polkadot.Proto.Network chain_id = 12;
  void clear_chain_id();
  ::TW::Polkadot::Proto::Network chain_id() const;
  void set_chain_id(::TW::Polkadot::Proto::Network value);
  private:
  ::TW::Polkadot::Proto::Network _internal_chain_id() const;
  void _internal_set_chain_id(::TW::Polkadot::Proto::Network value);
  public:

  // uint64 block_number = 13;
  void clear_block_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number() const;
  void set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_number() const;
  void _internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .TW.Polkadot.Proto.Balance balance_call = 10;
  bool has_balance_call() const;
  private:
  bool _internal_has_balance_call() const;
  public:
  void clear_balance_call();
  const ::TW::Polkadot::Proto::Balance& balance_call() const;
  ::TW::Polkadot::Proto::Balance* release_balance_call();
  ::TW::Polkadot::Proto::Balance* mutable_balance_call();
  void set_allocated_balance_call(::TW::Polkadot::Proto::Balance* balance_call);
  private:
  const ::TW::Polkadot::Proto::Balance& _internal_balance_call() const;
  ::TW::Polkadot::Proto::Balance* _internal_mutable_balance_call();
  public:
  void unsafe_arena_set_allocated_balance_call(
      ::TW::Polkadot::Proto::Balance* balance_call);
  ::TW::Polkadot::Proto::Balance* unsafe_arena_release_balance_call();

  // .TW.Polkadot.Proto.Staking staking_call = 11;
  bool has_staking_call() const;
  private:
  bool _internal_has_staking_call() const;
  public:
  void clear_staking_call();
  const ::TW::Polkadot::Proto::Staking& staking_call() const;
  ::TW::Polkadot::Proto::Staking* release_staking_call();
  ::TW::Polkadot::Proto::Staking* mutable_staking_call();
  void set_allocated_staking_call(::TW::Polkadot::Proto::Staking* staking_call);
  private:
  const ::TW::Polkadot::Proto::Staking& _internal_staking_call() const;
  ::TW::Polkadot::Proto::Staking* _internal_mutable_staking_call();
  public:
  void unsafe_arena_set_allocated_staking_call(
      ::TW::Polkadot::Proto::Staking* staking_call);
  ::TW::Polkadot::Proto::Staking* unsafe_arena_release_staking_call();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_balance_call();
  void set_has_staking_call();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genesis_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::TW::Polkadot::Proto::Era* era_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spec_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transaction_version_;
  int network_;
  int chain_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number_;
  union MessageOneofUnion {
    MessageOneofUnion() {}
    ::TW::Polkadot::Proto::Balance* balance_call_;
    ::TW::Polkadot::Proto::Staking* staking_call_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  virtual ~SigningOutput();

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningOutput& default_instance();

  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningOutput* New() const final {
    return CreateMaybeMessage<SigningOutput>(nullptr);
  }

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningOutput& from);
  void MergeFrom(const SigningOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Polkadot_2eproto);
    return ::descriptor_table_Polkadot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Era

// uint64 block_number = 1;
inline void Era::clear_block_number() {
  block_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Era::_internal_block_number() const {
  return block_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Era::block_number() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Era.block_number)
  return _internal_block_number();
}
inline void Era::_internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_number_ = value;
}
inline void Era::set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Era.block_number)
}

// uint64 period = 2;
inline void Era::clear_period() {
  period_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Era::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Era::period() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Era.period)
  return _internal_period();
}
inline void Era::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  period_ = value;
}
inline void Era::set_period(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Era.period)
}

// -------------------------------------------------------------------

// Balance_Transfer

// string to_address = 1;
inline void Balance_Transfer::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& Balance_Transfer::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.Transfer.to_address)
  return _internal_to_address();
}
inline void Balance_Transfer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.Transfer.to_address)
}
inline std::string* Balance_Transfer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.Transfer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& Balance_Transfer::_internal_to_address() const {
  return to_address_.Get();
}
inline void Balance_Transfer::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Balance_Transfer::set_to_address(std::string&& value) {
  
  to_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.Balance.Transfer.to_address)
}
inline void Balance_Transfer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Balance.Transfer.to_address)
}
inline void Balance_Transfer::set_to_address(const char* value,
    size_t size) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Balance.Transfer.to_address)
}
inline std::string* Balance_Transfer::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Balance_Transfer::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.Transfer.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Balance_Transfer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.Transfer.to_address)
}

// bytes value = 2;
inline void Balance_Transfer::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Balance_Transfer::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.Transfer.value)
  return _internal_value();
}
inline void Balance_Transfer::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.Transfer.value)
}
inline std::string* Balance_Transfer::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.Transfer.value)
  return _internal_mutable_value();
}
inline const std::string& Balance_Transfer::_internal_value() const {
  return value_.Get();
}
inline void Balance_Transfer::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Balance_Transfer::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.Balance.Transfer.value)
}
inline void Balance_Transfer::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Balance.Transfer.value)
}
inline void Balance_Transfer::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Balance.Transfer.value)
}
inline std::string* Balance_Transfer::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Balance_Transfer::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.Transfer.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Balance_Transfer::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.Transfer.value)
}

// -------------------------------------------------------------------

// Balance

// .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
inline bool Balance::_internal_has_transfer() const {
  return message_oneof_case() == kTransfer;
}
inline bool Balance::has_transfer() const {
  return _internal_has_transfer();
}
inline void Balance::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void Balance::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.transfer)
  if (_internal_has_transfer()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Balance_Transfer* temp = message_oneof_.transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Balance_Transfer& Balance::_internal_transfer() const {
  return _internal_has_transfer()
      ? *message_oneof_.transfer_
      : reinterpret_cast< ::TW::Polkadot::Proto::Balance_Transfer&>(::TW::Polkadot::Proto::_Balance_Transfer_default_instance_);
}
inline const ::TW::Polkadot::Proto::Balance_Transfer& Balance::transfer() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.transfer)
  return _internal_transfer();
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Balance.transfer)
  if (_internal_has_transfer()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Balance_Transfer* temp = message_oneof_.transfer_;
    message_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Balance::unsafe_arena_set_allocated_transfer(::TW::Polkadot::Proto::Balance_Transfer* transfer) {
  clear_message_oneof();
  if (transfer) {
    set_has_transfer();
    message_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Balance.transfer)
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_message_oneof();
    set_has_transfer();
    message_oneof_.transfer_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_Transfer >(GetArena());
  }
  return message_oneof_.transfer_;
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance::mutable_transfer() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.transfer)
  return _internal_mutable_transfer();
}

inline bool Balance::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Balance::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Balance::MessageOneofCase Balance::message_oneof_case() const {
  return Balance::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Staking_Bond

// string controller = 1;
inline void Staking_Bond::clear_controller() {
  controller_.ClearToEmpty();
}
inline const std::string& Staking_Bond::controller() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Bond.controller)
  return _internal_controller();
}
inline void Staking_Bond::set_controller(const std::string& value) {
  _internal_set_controller(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Bond.controller)
}
inline std::string* Staking_Bond::mutable_controller() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Bond.controller)
  return _internal_mutable_controller();
}
inline const std::string& Staking_Bond::_internal_controller() const {
  return controller_.Get();
}
inline void Staking_Bond::_internal_set_controller(const std::string& value) {
  
  controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_Bond::set_controller(std::string&& value) {
  
  controller_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.Staking.Bond.controller)
}
inline void Staking_Bond::set_controller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.Bond.controller)
}
inline void Staking_Bond::set_controller(const char* value,
    size_t size) {
  
  controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.Bond.controller)
}
inline std::string* Staking_Bond::_internal_mutable_controller() {
  
  return controller_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_Bond::release_controller() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Bond.controller)
  return controller_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_Bond::set_allocated_controller(std::string* controller) {
  if (controller != nullptr) {
    
  } else {
    
  }
  controller_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Bond.controller)
}

// bytes value = 2;
inline void Staking_Bond::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_Bond::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Bond.value)
  return _internal_value();
}
inline void Staking_Bond::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Bond.value)
}
inline std::string* Staking_Bond::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Bond.value)
  return _internal_mutable_value();
}
inline const std::string& Staking_Bond::_internal_value() const {
  return value_.Get();
}
inline void Staking_Bond::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_Bond::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.Staking.Bond.value)
}
inline void Staking_Bond::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.Bond.value)
}
inline void Staking_Bond::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.Bond.value)
}
inline std::string* Staking_Bond::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_Bond::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Bond.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_Bond::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Bond.value)
}

// .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
inline void Staking_Bond::clear_reward_destination() {
  reward_destination_ = 0;
}
inline ::TW::Polkadot::Proto::RewardDestination Staking_Bond::_internal_reward_destination() const {
  return static_cast< ::TW::Polkadot::Proto::RewardDestination >(reward_destination_);
}
inline ::TW::Polkadot::Proto::RewardDestination Staking_Bond::reward_destination() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Bond.reward_destination)
  return _internal_reward_destination();
}
inline void Staking_Bond::_internal_set_reward_destination(::TW::Polkadot::Proto::RewardDestination value) {
  
  reward_destination_ = value;
}
inline void Staking_Bond::set_reward_destination(::TW::Polkadot::Proto::RewardDestination value) {
  _internal_set_reward_destination(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Bond.reward_destination)
}

// -------------------------------------------------------------------

// Staking_BondAndNominate

// string controller = 1;
inline void Staking_BondAndNominate::clear_controller() {
  controller_.ClearToEmpty();
}
inline const std::string& Staking_BondAndNominate::controller() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
  return _internal_controller();
}
inline void Staking_BondAndNominate::set_controller(const std::string& value) {
  _internal_set_controller(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
}
inline std::string* Staking_BondAndNominate::mutable_controller() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
  return _internal_mutable_controller();
}
inline const std::string& Staking_BondAndNominate::_internal_controller() const {
  return controller_.Get();
}
inline void Staking_BondAndNominate::_internal_set_controller(const std::string& value) {
  
  controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_BondAndNominate::set_controller(std::string&& value) {
  
  controller_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
}
inline void Staking_BondAndNominate::set_controller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
}
inline void Staking_BondAndNominate::set_controller(const char* value,
    size_t size) {
  
  controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
}
inline std::string* Staking_BondAndNominate::_internal_mutable_controller() {
  
  return controller_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_BondAndNominate::release_controller() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
  return controller_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_BondAndNominate::set_allocated_controller(std::string* controller) {
  if (controller != nullptr) {
    
  } else {
    
  }
  controller_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
}

// bytes value = 2;
inline void Staking_BondAndNominate::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_BondAndNominate::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondAndNominate.value)
  return _internal_value();
}
inline void Staking_BondAndNominate::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.value)
}
inline std::string* Staking_BondAndNominate::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondAndNominate.value)
  return _internal_mutable_value();
}
inline const std::string& Staking_BondAndNominate::_internal_value() const {
  return value_.Get();
}
inline void Staking_BondAndNominate::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_BondAndNominate::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.Staking.BondAndNominate.value)
}
inline void Staking_BondAndNominate::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.BondAndNominate.value)
}
inline void Staking_BondAndNominate::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.BondAndNominate.value)
}
inline std::string* Staking_BondAndNominate::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_BondAndNominate::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.BondAndNominate.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_BondAndNominate::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.BondAndNominate.value)
}

// .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
inline void Staking_BondAndNominate::clear_reward_destination() {
  reward_destination_ = 0;
}
inline ::TW::Polkadot::Proto::RewardDestination Staking_BondAndNominate::_internal_reward_destination() const {
  return static_cast< ::TW::Polkadot::Proto::RewardDestination >(reward_destination_);
}
inline ::TW::Polkadot::Proto::RewardDestination Staking_BondAndNominate::reward_destination() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondAndNominate.reward_destination)
  return _internal_reward_destination();
}
inline void Staking_BondAndNominate::_internal_set_reward_destination(::TW::Polkadot::Proto::RewardDestination value) {
  
  reward_destination_ = value;
}
inline void Staking_BondAndNominate::set_reward_destination(::TW::Polkadot::Proto::RewardDestination value) {
  _internal_set_reward_destination(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.reward_destination)
}

// repeated string nominators = 4;
inline int Staking_BondAndNominate::_internal_nominators_size() const {
  return nominators_.size();
}
inline int Staking_BondAndNominate::nominators_size() const {
  return _internal_nominators_size();
}
inline void Staking_BondAndNominate::clear_nominators() {
  nominators_.Clear();
}
inline std::string* Staking_BondAndNominate::add_nominators() {
  // @@protoc_insertion_point(field_add_mutable:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return _internal_add_nominators();
}
inline const std::string& Staking_BondAndNominate::_internal_nominators(int index) const {
  return nominators_.Get(index);
}
inline const std::string& Staking_BondAndNominate::nominators(int index) const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return _internal_nominators(index);
}
inline std::string* Staking_BondAndNominate::mutable_nominators(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return nominators_.Mutable(index);
}
inline void Staking_BondAndNominate::set_nominators(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  nominators_.Mutable(index)->assign(value);
}
inline void Staking_BondAndNominate::set_nominators(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  nominators_.Mutable(index)->assign(std::move(value));
}
inline void Staking_BondAndNominate::set_nominators(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nominators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::set_nominators(int index, const char* value, size_t size) {
  nominators_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline std::string* Staking_BondAndNominate::_internal_add_nominators() {
  return nominators_.Add();
}
inline void Staking_BondAndNominate::add_nominators(const std::string& value) {
  nominators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::add_nominators(std::string&& value) {
  nominators_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::add_nominators(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nominators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::add_nominators(const char* value, size_t size) {
  nominators_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Staking_BondAndNominate::nominators() const {
  // @@protoc_insertion_point(field_list:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return nominators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Staking_BondAndNominate::mutable_nominators() {
  // @@protoc_insertion_point(field_mutable_list:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return &nominators_;
}

// -------------------------------------------------------------------

// Staking_BondExtra

// bytes value = 1;
inline void Staking_BondExtra::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_BondExtra::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondExtra.value)
  return _internal_value();
}
inline void Staking_BondExtra::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondExtra.value)
}
inline std::string* Staking_BondExtra::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondExtra.value)
  return _internal_mutable_value();
}
inline const std::string& Staking_BondExtra::_internal_value() const {
  return value_.Get();
}
inline void Staking_BondExtra::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_BondExtra::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.Staking.BondExtra.value)
}
inline void Staking_BondExtra::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.BondExtra.value)
}
inline void Staking_BondExtra::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.BondExtra.value)
}
inline std::string* Staking_BondExtra::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_BondExtra::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.BondExtra.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_BondExtra::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.BondExtra.value)
}

// -------------------------------------------------------------------

// Staking_Unbond

// bytes value = 1;
inline void Staking_Unbond::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_Unbond::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Unbond.value)
  return _internal_value();
}
inline void Staking_Unbond::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Unbond.value)
}
inline std::string* Staking_Unbond::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Unbond.value)
  return _internal_mutable_value();
}
inline const std::string& Staking_Unbond::_internal_value() const {
  return value_.Get();
}
inline void Staking_Unbond::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Staking_Unbond::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.Staking.Unbond.value)
}
inline void Staking_Unbond::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.Unbond.value)
}
inline void Staking_Unbond::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.Unbond.value)
}
inline std::string* Staking_Unbond::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Staking_Unbond::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Unbond.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Staking_Unbond::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Unbond.value)
}

// -------------------------------------------------------------------

// Staking_WithdrawUnbonded

// int32 slashing_spans = 1;
inline void Staking_WithdrawUnbonded::clear_slashing_spans() {
  slashing_spans_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Staking_WithdrawUnbonded::_internal_slashing_spans() const {
  return slashing_spans_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Staking_WithdrawUnbonded::slashing_spans() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.WithdrawUnbonded.slashing_spans)
  return _internal_slashing_spans();
}
inline void Staking_WithdrawUnbonded::_internal_set_slashing_spans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slashing_spans_ = value;
}
inline void Staking_WithdrawUnbonded::set_slashing_spans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slashing_spans(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.WithdrawUnbonded.slashing_spans)
}

// -------------------------------------------------------------------

// Staking_Nominate

// repeated string nominators = 1;
inline int Staking_Nominate::_internal_nominators_size() const {
  return nominators_.size();
}
inline int Staking_Nominate::nominators_size() const {
  return _internal_nominators_size();
}
inline void Staking_Nominate::clear_nominators() {
  nominators_.Clear();
}
inline std::string* Staking_Nominate::add_nominators() {
  // @@protoc_insertion_point(field_add_mutable:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return _internal_add_nominators();
}
inline const std::string& Staking_Nominate::_internal_nominators(int index) const {
  return nominators_.Get(index);
}
inline const std::string& Staking_Nominate::nominators(int index) const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return _internal_nominators(index);
}
inline std::string* Staking_Nominate::mutable_nominators(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return nominators_.Mutable(index);
}
inline void Staking_Nominate::set_nominators(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Nominate.nominators)
  nominators_.Mutable(index)->assign(value);
}
inline void Staking_Nominate::set_nominators(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Nominate.nominators)
  nominators_.Mutable(index)->assign(std::move(value));
}
inline void Staking_Nominate::set_nominators(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nominators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::set_nominators(int index, const char* value, size_t size) {
  nominators_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline std::string* Staking_Nominate::_internal_add_nominators() {
  return nominators_.Add();
}
inline void Staking_Nominate::add_nominators(const std::string& value) {
  nominators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::add_nominators(std::string&& value) {
  nominators_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::add_nominators(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nominators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::add_nominators(const char* value, size_t size) {
  nominators_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Staking_Nominate::nominators() const {
  // @@protoc_insertion_point(field_list:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return nominators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Staking_Nominate::mutable_nominators() {
  // @@protoc_insertion_point(field_mutable_list:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return &nominators_;
}

// -------------------------------------------------------------------

// Staking_Chill

// -------------------------------------------------------------------

// Staking

// .TW.Polkadot.Proto.Staking.Bond bond = 1;
inline bool Staking::_internal_has_bond() const {
  return message_oneof_case() == kBond;
}
inline bool Staking::has_bond() const {
  return _internal_has_bond();
}
inline void Staking::set_has_bond() {
  _oneof_case_[0] = kBond;
}
inline void Staking::clear_bond() {
  if (_internal_has_bond()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.bond_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_Bond* Staking::release_bond() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.bond)
  if (_internal_has_bond()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_Bond* temp = message_oneof_.bond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_Bond& Staking::_internal_bond() const {
  return _internal_has_bond()
      ? *message_oneof_.bond_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_Bond&>(::TW::Polkadot::Proto::_Staking_Bond_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_Bond& Staking::bond() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.bond)
  return _internal_bond();
}
inline ::TW::Polkadot::Proto::Staking_Bond* Staking::unsafe_arena_release_bond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.bond)
  if (_internal_has_bond()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_Bond* temp = message_oneof_.bond_;
    message_oneof_.bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_bond(::TW::Polkadot::Proto::Staking_Bond* bond) {
  clear_message_oneof();
  if (bond) {
    set_has_bond();
    message_oneof_.bond_ = bond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.bond)
}
inline ::TW::Polkadot::Proto::Staking_Bond* Staking::_internal_mutable_bond() {
  if (!_internal_has_bond()) {
    clear_message_oneof();
    set_has_bond();
    message_oneof_.bond_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Bond >(GetArena());
  }
  return message_oneof_.bond_;
}
inline ::TW::Polkadot::Proto::Staking_Bond* Staking::mutable_bond() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.bond)
  return _internal_mutable_bond();
}

// .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
inline bool Staking::_internal_has_bond_and_nominate() const {
  return message_oneof_case() == kBondAndNominate;
}
inline bool Staking::has_bond_and_nominate() const {
  return _internal_has_bond_and_nominate();
}
inline void Staking::set_has_bond_and_nominate() {
  _oneof_case_[0] = kBondAndNominate;
}
inline void Staking::clear_bond_and_nominate() {
  if (_internal_has_bond_and_nominate()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.bond_and_nominate_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_BondAndNominate* Staking::release_bond_and_nominate() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.bond_and_nominate)
  if (_internal_has_bond_and_nominate()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_BondAndNominate* temp = message_oneof_.bond_and_nominate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.bond_and_nominate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_BondAndNominate& Staking::_internal_bond_and_nominate() const {
  return _internal_has_bond_and_nominate()
      ? *message_oneof_.bond_and_nominate_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_BondAndNominate&>(::TW::Polkadot::Proto::_Staking_BondAndNominate_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_BondAndNominate& Staking::bond_and_nominate() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.bond_and_nominate)
  return _internal_bond_and_nominate();
}
inline ::TW::Polkadot::Proto::Staking_BondAndNominate* Staking::unsafe_arena_release_bond_and_nominate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.bond_and_nominate)
  if (_internal_has_bond_and_nominate()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_BondAndNominate* temp = message_oneof_.bond_and_nominate_;
    message_oneof_.bond_and_nominate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_bond_and_nominate(::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate) {
  clear_message_oneof();
  if (bond_and_nominate) {
    set_has_bond_and_nominate();
    message_oneof_.bond_and_nominate_ = bond_and_nominate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.bond_and_nominate)
}
inline ::TW::Polkadot::Proto::Staking_BondAndNominate* Staking::_internal_mutable_bond_and_nominate() {
  if (!_internal_has_bond_and_nominate()) {
    clear_message_oneof();
    set_has_bond_and_nominate();
    message_oneof_.bond_and_nominate_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_BondAndNominate >(GetArena());
  }
  return message_oneof_.bond_and_nominate_;
}
inline ::TW::Polkadot::Proto::Staking_BondAndNominate* Staking::mutable_bond_and_nominate() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.bond_and_nominate)
  return _internal_mutable_bond_and_nominate();
}

// .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
inline bool Staking::_internal_has_bond_extra() const {
  return message_oneof_case() == kBondExtra;
}
inline bool Staking::has_bond_extra() const {
  return _internal_has_bond_extra();
}
inline void Staking::set_has_bond_extra() {
  _oneof_case_[0] = kBondExtra;
}
inline void Staking::clear_bond_extra() {
  if (_internal_has_bond_extra()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.bond_extra_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_BondExtra* Staking::release_bond_extra() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.bond_extra)
  if (_internal_has_bond_extra()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_BondExtra* temp = message_oneof_.bond_extra_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.bond_extra_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_BondExtra& Staking::_internal_bond_extra() const {
  return _internal_has_bond_extra()
      ? *message_oneof_.bond_extra_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_BondExtra&>(::TW::Polkadot::Proto::_Staking_BondExtra_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_BondExtra& Staking::bond_extra() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.bond_extra)
  return _internal_bond_extra();
}
inline ::TW::Polkadot::Proto::Staking_BondExtra* Staking::unsafe_arena_release_bond_extra() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.bond_extra)
  if (_internal_has_bond_extra()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_BondExtra* temp = message_oneof_.bond_extra_;
    message_oneof_.bond_extra_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_bond_extra(::TW::Polkadot::Proto::Staking_BondExtra* bond_extra) {
  clear_message_oneof();
  if (bond_extra) {
    set_has_bond_extra();
    message_oneof_.bond_extra_ = bond_extra;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.bond_extra)
}
inline ::TW::Polkadot::Proto::Staking_BondExtra* Staking::_internal_mutable_bond_extra() {
  if (!_internal_has_bond_extra()) {
    clear_message_oneof();
    set_has_bond_extra();
    message_oneof_.bond_extra_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_BondExtra >(GetArena());
  }
  return message_oneof_.bond_extra_;
}
inline ::TW::Polkadot::Proto::Staking_BondExtra* Staking::mutable_bond_extra() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.bond_extra)
  return _internal_mutable_bond_extra();
}

// .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
inline bool Staking::_internal_has_unbond() const {
  return message_oneof_case() == kUnbond;
}
inline bool Staking::has_unbond() const {
  return _internal_has_unbond();
}
inline void Staking::set_has_unbond() {
  _oneof_case_[0] = kUnbond;
}
inline void Staking::clear_unbond() {
  if (_internal_has_unbond()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.unbond_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_Unbond* Staking::release_unbond() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.unbond)
  if (_internal_has_unbond()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_Unbond* temp = message_oneof_.unbond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.unbond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_Unbond& Staking::_internal_unbond() const {
  return _internal_has_unbond()
      ? *message_oneof_.unbond_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_Unbond&>(::TW::Polkadot::Proto::_Staking_Unbond_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_Unbond& Staking::unbond() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.unbond)
  return _internal_unbond();
}
inline ::TW::Polkadot::Proto::Staking_Unbond* Staking::unsafe_arena_release_unbond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.unbond)
  if (_internal_has_unbond()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_Unbond* temp = message_oneof_.unbond_;
    message_oneof_.unbond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_unbond(::TW::Polkadot::Proto::Staking_Unbond* unbond) {
  clear_message_oneof();
  if (unbond) {
    set_has_unbond();
    message_oneof_.unbond_ = unbond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.unbond)
}
inline ::TW::Polkadot::Proto::Staking_Unbond* Staking::_internal_mutable_unbond() {
  if (!_internal_has_unbond()) {
    clear_message_oneof();
    set_has_unbond();
    message_oneof_.unbond_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Unbond >(GetArena());
  }
  return message_oneof_.unbond_;
}
inline ::TW::Polkadot::Proto::Staking_Unbond* Staking::mutable_unbond() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.unbond)
  return _internal_mutable_unbond();
}

// .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
inline bool Staking::_internal_has_withdraw_unbonded() const {
  return message_oneof_case() == kWithdrawUnbonded;
}
inline bool Staking::has_withdraw_unbonded() const {
  return _internal_has_withdraw_unbonded();
}
inline void Staking::set_has_withdraw_unbonded() {
  _oneof_case_[0] = kWithdrawUnbonded;
}
inline void Staking::clear_withdraw_unbonded() {
  if (_internal_has_withdraw_unbonded()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.withdraw_unbonded_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Staking::release_withdraw_unbonded() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.withdraw_unbonded)
  if (_internal_has_withdraw_unbonded()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* temp = message_oneof_.withdraw_unbonded_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.withdraw_unbonded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& Staking::_internal_withdraw_unbonded() const {
  return _internal_has_withdraw_unbonded()
      ? *message_oneof_.withdraw_unbonded_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_WithdrawUnbonded&>(::TW::Polkadot::Proto::_Staking_WithdrawUnbonded_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& Staking::withdraw_unbonded() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.withdraw_unbonded)
  return _internal_withdraw_unbonded();
}
inline ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Staking::unsafe_arena_release_withdraw_unbonded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.withdraw_unbonded)
  if (_internal_has_withdraw_unbonded()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* temp = message_oneof_.withdraw_unbonded_;
    message_oneof_.withdraw_unbonded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_withdraw_unbonded(::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded) {
  clear_message_oneof();
  if (withdraw_unbonded) {
    set_has_withdraw_unbonded();
    message_oneof_.withdraw_unbonded_ = withdraw_unbonded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.withdraw_unbonded)
}
inline ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Staking::_internal_mutable_withdraw_unbonded() {
  if (!_internal_has_withdraw_unbonded()) {
    clear_message_oneof();
    set_has_withdraw_unbonded();
    message_oneof_.withdraw_unbonded_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_WithdrawUnbonded >(GetArena());
  }
  return message_oneof_.withdraw_unbonded_;
}
inline ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Staking::mutable_withdraw_unbonded() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.withdraw_unbonded)
  return _internal_mutable_withdraw_unbonded();
}

// .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
inline bool Staking::_internal_has_nominate() const {
  return message_oneof_case() == kNominate;
}
inline bool Staking::has_nominate() const {
  return _internal_has_nominate();
}
inline void Staking::set_has_nominate() {
  _oneof_case_[0] = kNominate;
}
inline void Staking::clear_nominate() {
  if (_internal_has_nominate()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.nominate_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_Nominate* Staking::release_nominate() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.nominate)
  if (_internal_has_nominate()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_Nominate* temp = message_oneof_.nominate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.nominate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_Nominate& Staking::_internal_nominate() const {
  return _internal_has_nominate()
      ? *message_oneof_.nominate_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_Nominate&>(::TW::Polkadot::Proto::_Staking_Nominate_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_Nominate& Staking::nominate() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.nominate)
  return _internal_nominate();
}
inline ::TW::Polkadot::Proto::Staking_Nominate* Staking::unsafe_arena_release_nominate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.nominate)
  if (_internal_has_nominate()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_Nominate* temp = message_oneof_.nominate_;
    message_oneof_.nominate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_nominate(::TW::Polkadot::Proto::Staking_Nominate* nominate) {
  clear_message_oneof();
  if (nominate) {
    set_has_nominate();
    message_oneof_.nominate_ = nominate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.nominate)
}
inline ::TW::Polkadot::Proto::Staking_Nominate* Staking::_internal_mutable_nominate() {
  if (!_internal_has_nominate()) {
    clear_message_oneof();
    set_has_nominate();
    message_oneof_.nominate_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Nominate >(GetArena());
  }
  return message_oneof_.nominate_;
}
inline ::TW::Polkadot::Proto::Staking_Nominate* Staking::mutable_nominate() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.nominate)
  return _internal_mutable_nominate();
}

// .TW.Polkadot.Proto.Staking.Chill chill = 7;
inline bool Staking::_internal_has_chill() const {
  return message_oneof_case() == kChill;
}
inline bool Staking::has_chill() const {
  return _internal_has_chill();
}
inline void Staking::set_has_chill() {
  _oneof_case_[0] = kChill;
}
inline void Staking::clear_chill() {
  if (_internal_has_chill()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.chill_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_Chill* Staking::release_chill() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.chill)
  if (_internal_has_chill()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_Chill* temp = message_oneof_.chill_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.chill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_Chill& Staking::_internal_chill() const {
  return _internal_has_chill()
      ? *message_oneof_.chill_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_Chill&>(::TW::Polkadot::Proto::_Staking_Chill_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_Chill& Staking::chill() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.chill)
  return _internal_chill();
}
inline ::TW::Polkadot::Proto::Staking_Chill* Staking::unsafe_arena_release_chill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.chill)
  if (_internal_has_chill()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_Chill* temp = message_oneof_.chill_;
    message_oneof_.chill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_chill(::TW::Polkadot::Proto::Staking_Chill* chill) {
  clear_message_oneof();
  if (chill) {
    set_has_chill();
    message_oneof_.chill_ = chill;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.chill)
}
inline ::TW::Polkadot::Proto::Staking_Chill* Staking::_internal_mutable_chill() {
  if (!_internal_has_chill()) {
    clear_message_oneof();
    set_has_chill();
    message_oneof_.chill_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Chill >(GetArena());
  }
  return message_oneof_.chill_;
}
inline ::TW::Polkadot::Proto::Staking_Chill* Staking::mutable_chill() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.chill)
  return _internal_mutable_chill();
}

inline bool Staking::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Staking::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Staking::MessageOneofCase Staking::message_oneof_case() const {
  return Staking::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// bytes block_hash = 1;
inline void SigningInput::clear_block_hash() {
  block_hash_.ClearToEmpty();
}
inline const std::string& SigningInput::block_hash() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.block_hash)
  return _internal_block_hash();
}
inline void SigningInput::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.block_hash)
}
inline std::string* SigningInput::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& SigningInput::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void SigningInput::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_block_hash(std::string&& value) {
  
  block_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.SigningInput.block_hash)
}
inline void SigningInput::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.SigningInput.block_hash)
}
inline void SigningInput::set_block_hash(const void* value,
    size_t size) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.SigningInput.block_hash)
}
inline std::string* SigningInput::_internal_mutable_block_hash() {
  
  return block_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_block_hash() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.block_hash)
}

// bytes genesis_hash = 2;
inline void SigningInput::clear_genesis_hash() {
  genesis_hash_.ClearToEmpty();
}
inline const std::string& SigningInput::genesis_hash() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.genesis_hash)
  return _internal_genesis_hash();
}
inline void SigningInput::set_genesis_hash(const std::string& value) {
  _internal_set_genesis_hash(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.genesis_hash)
}
inline std::string* SigningInput::mutable_genesis_hash() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.genesis_hash)
  return _internal_mutable_genesis_hash();
}
inline const std::string& SigningInput::_internal_genesis_hash() const {
  return genesis_hash_.Get();
}
inline void SigningInput::_internal_set_genesis_hash(const std::string& value) {
  
  genesis_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_genesis_hash(std::string&& value) {
  
  genesis_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.SigningInput.genesis_hash)
}
inline void SigningInput::set_genesis_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  genesis_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.SigningInput.genesis_hash)
}
inline void SigningInput::set_genesis_hash(const void* value,
    size_t size) {
  
  genesis_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.SigningInput.genesis_hash)
}
inline std::string* SigningInput::_internal_mutable_genesis_hash() {
  
  return genesis_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_genesis_hash() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.genesis_hash)
  return genesis_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_genesis_hash(std::string* genesis_hash) {
  if (genesis_hash != nullptr) {
    
  } else {
    
  }
  genesis_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genesis_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.genesis_hash)
}

// uint64 nonce = 3;
inline void SigningInput::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.nonce)
  return _internal_nonce();
}
inline void SigningInput::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void SigningInput::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.nonce)
}

// uint32 spec_version = 4;
inline void SigningInput::clear_spec_version() {
  spec_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_spec_version() const {
  return spec_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::spec_version() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.spec_version)
  return _internal_spec_version();
}
inline void SigningInput::_internal_set_spec_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  spec_version_ = value;
}
inline void SigningInput::set_spec_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spec_version(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.spec_version)
}

// uint32 transaction_version = 5;
inline void SigningInput::clear_transaction_version() {
  transaction_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::_internal_transaction_version() const {
  return transaction_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigningInput::transaction_version() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.transaction_version)
  return _internal_transaction_version();
}
inline void SigningInput::_internal_set_transaction_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  transaction_version_ = value;
}
inline void SigningInput::set_transaction_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_transaction_version(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.transaction_version)
}

// bytes tip = 6;
inline void SigningInput::clear_tip() {
  tip_.ClearToEmpty();
}
inline const std::string& SigningInput::tip() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.tip)
  return _internal_tip();
}
inline void SigningInput::set_tip(const std::string& value) {
  _internal_set_tip(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.tip)
}
inline std::string* SigningInput::mutable_tip() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.tip)
  return _internal_mutable_tip();
}
inline const std::string& SigningInput::_internal_tip() const {
  return tip_.Get();
}
inline void SigningInput::_internal_set_tip(const std::string& value) {
  
  tip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_tip(std::string&& value) {
  
  tip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.SigningInput.tip)
}
inline void SigningInput::set_tip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.SigningInput.tip)
}
inline void SigningInput::set_tip(const void* value,
    size_t size) {
  
  tip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.SigningInput.tip)
}
inline std::string* SigningInput::_internal_mutable_tip() {
  
  return tip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_tip() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.tip)
  return tip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_tip(std::string* tip) {
  if (tip != nullptr) {
    
  } else {
    
  }
  tip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.tip)
}

// .TW.Polkadot.Proto.Era era = 7;
inline bool SigningInput::_internal_has_era() const {
  return this != internal_default_instance() && era_ != nullptr;
}
inline bool SigningInput::has_era() const {
  return _internal_has_era();
}
inline void SigningInput::clear_era() {
  if (GetArena() == nullptr && era_ != nullptr) {
    delete era_;
  }
  era_ = nullptr;
}
inline const ::TW::Polkadot::Proto::Era& SigningInput::_internal_era() const {
  const ::TW::Polkadot::Proto::Era* p = era_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::Era&>(
      ::TW::Polkadot::Proto::_Era_default_instance_);
}
inline const ::TW::Polkadot::Proto::Era& SigningInput::era() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.era)
  return _internal_era();
}
inline void SigningInput::unsafe_arena_set_allocated_era(
    ::TW::Polkadot::Proto::Era* era) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(era_);
  }
  era_ = era;
  if (era) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.SigningInput.era)
}
inline ::TW::Polkadot::Proto::Era* SigningInput::release_era() {
  
  ::TW::Polkadot::Proto::Era* temp = era_;
  era_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TW::Polkadot::Proto::Era* SigningInput::unsafe_arena_release_era() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.era)
  
  ::TW::Polkadot::Proto::Era* temp = era_;
  era_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::Era* SigningInput::_internal_mutable_era() {
  
  if (era_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::Era>(GetArena());
    era_ = p;
  }
  return era_;
}
inline ::TW::Polkadot::Proto::Era* SigningInput::mutable_era() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.era)
  return _internal_mutable_era();
}
inline void SigningInput::set_allocated_era(::TW::Polkadot::Proto::Era* era) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete era_;
  }
  if (era) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(era);
    if (message_arena != submessage_arena) {
      era = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, era, submessage_arena);
    }
    
  } else {
    
  }
  era_ = era;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.era)
}

// bytes private_key = 8;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.private_key)
  return _internal_private_key();
}
inline void SigningInput::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningInput::set_private_key(std::string&& value) {
  
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(const void* value,
    size_t size) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.private_key)
}

// .TW.Polkadot.Proto.Network network = 9;
inline void SigningInput::clear_network() {
  network_ = 0;
}
inline ::TW::Polkadot::Proto::Network SigningInput::_internal_network() const {
  return static_cast< ::TW::Polkadot::Proto::Network >(network_);
}
inline ::TW::Polkadot::Proto::Network SigningInput::network() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.network)
  return _internal_network();
}
inline void SigningInput::_internal_set_network(::TW::Polkadot::Proto::Network value) {
  
  network_ = value;
}
inline void SigningInput::set_network(::TW::Polkadot::Proto::Network value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.network)
}

// .TW.Polkadot.Proto.Balance balance_call = 10;
inline bool SigningInput::_internal_has_balance_call() const {
  return message_oneof_case() == kBalanceCall;
}
inline bool SigningInput::has_balance_call() const {
  return _internal_has_balance_call();
}
inline void SigningInput::set_has_balance_call() {
  _oneof_case_[0] = kBalanceCall;
}
inline void SigningInput::clear_balance_call() {
  if (_internal_has_balance_call()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.balance_call_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Balance* SigningInput::release_balance_call() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.balance_call)
  if (_internal_has_balance_call()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Balance* temp = message_oneof_.balance_call_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.balance_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Balance& SigningInput::_internal_balance_call() const {
  return _internal_has_balance_call()
      ? *message_oneof_.balance_call_
      : reinterpret_cast< ::TW::Polkadot::Proto::Balance&>(::TW::Polkadot::Proto::_Balance_default_instance_);
}
inline const ::TW::Polkadot::Proto::Balance& SigningInput::balance_call() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.balance_call)
  return _internal_balance_call();
}
inline ::TW::Polkadot::Proto::Balance* SigningInput::unsafe_arena_release_balance_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.SigningInput.balance_call)
  if (_internal_has_balance_call()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Balance* temp = message_oneof_.balance_call_;
    message_oneof_.balance_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_balance_call(::TW::Polkadot::Proto::Balance* balance_call) {
  clear_message_oneof();
  if (balance_call) {
    set_has_balance_call();
    message_oneof_.balance_call_ = balance_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.SigningInput.balance_call)
}
inline ::TW::Polkadot::Proto::Balance* SigningInput::_internal_mutable_balance_call() {
  if (!_internal_has_balance_call()) {
    clear_message_oneof();
    set_has_balance_call();
    message_oneof_.balance_call_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Balance >(GetArena());
  }
  return message_oneof_.balance_call_;
}
inline ::TW::Polkadot::Proto::Balance* SigningInput::mutable_balance_call() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.balance_call)
  return _internal_mutable_balance_call();
}

// .TW.Polkadot.Proto.Staking staking_call = 11;
inline bool SigningInput::_internal_has_staking_call() const {
  return message_oneof_case() == kStakingCall;
}
inline bool SigningInput::has_staking_call() const {
  return _internal_has_staking_call();
}
inline void SigningInput::set_has_staking_call() {
  _oneof_case_[0] = kStakingCall;
}
inline void SigningInput::clear_staking_call() {
  if (_internal_has_staking_call()) {
    if (GetArena() == nullptr) {
      delete message_oneof_.staking_call_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking* SigningInput::release_staking_call() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.staking_call)
  if (_internal_has_staking_call()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking* temp = message_oneof_.staking_call_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.staking_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking& SigningInput::_internal_staking_call() const {
  return _internal_has_staking_call()
      ? *message_oneof_.staking_call_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking&>(::TW::Polkadot::Proto::_Staking_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking& SigningInput::staking_call() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.staking_call)
  return _internal_staking_call();
}
inline ::TW::Polkadot::Proto::Staking* SigningInput::unsafe_arena_release_staking_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.SigningInput.staking_call)
  if (_internal_has_staking_call()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking* temp = message_oneof_.staking_call_;
    message_oneof_.staking_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_staking_call(::TW::Polkadot::Proto::Staking* staking_call) {
  clear_message_oneof();
  if (staking_call) {
    set_has_staking_call();
    message_oneof_.staking_call_ = staking_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.SigningInput.staking_call)
}
inline ::TW::Polkadot::Proto::Staking* SigningInput::_internal_mutable_staking_call() {
  if (!_internal_has_staking_call()) {
    clear_message_oneof();
    set_has_staking_call();
    message_oneof_.staking_call_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking >(GetArena());
  }
  return message_oneof_.staking_call_;
}
inline ::TW::Polkadot::Proto::Staking* SigningInput::mutable_staking_call() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.staking_call)
  return _internal_mutable_staking_call();
}

// .TW.Polkadot.Proto.Network chain_id = 12;
inline void SigningInput::clear_chain_id() {
  chain_id_ = 0;
}
inline ::TW::Polkadot::Proto::Network SigningInput::_internal_chain_id() const {
  return static_cast< ::TW::Polkadot::Proto::Network >(chain_id_);
}
inline ::TW::Polkadot::Proto::Network SigningInput::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.chain_id)
  return _internal_chain_id();
}
inline void SigningInput::_internal_set_chain_id(::TW::Polkadot::Proto::Network value) {
  
  chain_id_ = value;
}
inline void SigningInput::set_chain_id(::TW::Polkadot::Proto::Network value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.chain_id)
}

// uint64 block_number = 13;
inline void SigningInput::clear_block_number() {
  block_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::_internal_block_number() const {
  return block_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SigningInput::block_number() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.block_number)
  return _internal_block_number();
}
inline void SigningInput::_internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_number_ = value;
}
inline void SigningInput::set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.block_number)
}

inline bool SigningInput::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline SigningInput::MessageOneofCase SigningInput::message_oneof_case() const {
  return SigningInput::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
inline void SigningOutput::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningOutput.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SigningOutput::set_encoded(std::string&& value) {
  
  encoded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TW.Polkadot.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.SigningOutput.encoded)
}
inline void SigningOutput::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningOutput.encoded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Polkadot
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::Polkadot::Proto::Network> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Polkadot::Proto::Network>() {
  return ::TW::Polkadot::Proto::Network_descriptor();
}
template <> struct is_proto_enum< ::TW::Polkadot::Proto::RewardDestination> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Polkadot::Proto::RewardDestination>() {
  return ::TW::Polkadot::Proto::RewardDestination_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Polkadot_2eproto
