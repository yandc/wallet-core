// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TronInternal.proto

#include "TronInternal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TronInternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_raw_TronInternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TronInternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_Contract_TronInternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TronInternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_raw_TronInternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TronInternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteWitnessContract_Vote_TronInternal_2eproto;
namespace protocol {
class Transaction_ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_Contract> _instance;
} _Transaction_Contract_default_instance_;
class Transaction_rawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_raw> _instance;
} _Transaction_raw_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class BlockHeader_rawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockHeader_raw> _instance;
} _BlockHeader_raw_default_instance_;
class BlockHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockHeader> _instance;
} _BlockHeader_default_instance_;
class TransferContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferContract> _instance;
} _TransferContract_default_instance_;
class TransferAssetContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferAssetContract> _instance;
} _TransferAssetContract_default_instance_;
class FreezeBalanceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreezeBalanceContract> _instance;
} _FreezeBalanceContract_default_instance_;
class FreezeBalanceV2ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreezeBalanceV2Contract> _instance;
} _FreezeBalanceV2Contract_default_instance_;
class UnfreezeBalanceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnfreezeBalanceContract> _instance;
} _UnfreezeBalanceContract_default_instance_;
class UnfreezeBalanceV2ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnfreezeBalanceV2Contract> _instance;
} _UnfreezeBalanceV2Contract_default_instance_;
class WithdrawExpireUnfreezeContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawExpireUnfreezeContract> _instance;
} _WithdrawExpireUnfreezeContract_default_instance_;
class DelegateResourceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegateResourceContract> _instance;
} _DelegateResourceContract_default_instance_;
class UnDelegateResourceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnDelegateResourceContract> _instance;
} _UnDelegateResourceContract_default_instance_;
class UnfreezeAssetContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnfreezeAssetContract> _instance;
} _UnfreezeAssetContract_default_instance_;
class VoteAssetContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteAssetContract> _instance;
} _VoteAssetContract_default_instance_;
class VoteWitnessContract_VoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteWitnessContract_Vote> _instance;
} _VoteWitnessContract_Vote_default_instance_;
class VoteWitnessContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteWitnessContract> _instance;
} _VoteWitnessContract_default_instance_;
class WithdrawBalanceContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawBalanceContract> _instance;
} _WithdrawBalanceContract_default_instance_;
class TriggerSmartContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TriggerSmartContract> _instance;
} _TriggerSmartContract_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_BlockHeader_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_BlockHeader_default_instance_;
    new (ptr) ::protocol::BlockHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlockHeader_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlockHeader_TronInternal_2eproto}, {
      &scc_info_BlockHeader_raw_TronInternal_2eproto.base,}};

static void InitDefaultsscc_info_BlockHeader_raw_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_BlockHeader_raw_default_instance_;
    new (ptr) ::protocol::BlockHeader_raw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_raw_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockHeader_raw_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_DelegateResourceContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_DelegateResourceContract_default_instance_;
    new (ptr) ::protocol::DelegateResourceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateResourceContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelegateResourceContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_FreezeBalanceContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_FreezeBalanceContract_default_instance_;
    new (ptr) ::protocol::FreezeBalanceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreezeBalanceContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FreezeBalanceContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_FreezeBalanceV2Contract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_FreezeBalanceV2Contract_default_instance_;
    new (ptr) ::protocol::FreezeBalanceV2Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreezeBalanceV2Contract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FreezeBalanceV2Contract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Transaction_default_instance_;
    new (ptr) ::protocol::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transaction_TronInternal_2eproto}, {
      &scc_info_Transaction_raw_TronInternal_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_Contract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Transaction_Contract_default_instance_;
    new (ptr) ::protocol::Transaction_Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_Contract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transaction_Contract_TronInternal_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_raw_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Transaction_raw_default_instance_;
    new (ptr) ::protocol::Transaction_raw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_raw_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transaction_raw_TronInternal_2eproto}, {
      &scc_info_Transaction_Contract_TronInternal_2eproto.base,}};

static void InitDefaultsscc_info_TransferAssetContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TransferAssetContract_default_instance_;
    new (ptr) ::protocol::TransferAssetContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferAssetContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferAssetContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_TransferContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TransferContract_default_instance_;
    new (ptr) ::protocol::TransferContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_TriggerSmartContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TriggerSmartContract_default_instance_;
    new (ptr) ::protocol::TriggerSmartContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TriggerSmartContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TriggerSmartContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_UnDelegateResourceContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_UnDelegateResourceContract_default_instance_;
    new (ptr) ::protocol::UnDelegateResourceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnDelegateResourceContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnDelegateResourceContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_UnfreezeAssetContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_UnfreezeAssetContract_default_instance_;
    new (ptr) ::protocol::UnfreezeAssetContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnfreezeAssetContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnfreezeAssetContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_UnfreezeBalanceContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_UnfreezeBalanceContract_default_instance_;
    new (ptr) ::protocol::UnfreezeBalanceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnfreezeBalanceContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnfreezeBalanceContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_UnfreezeBalanceV2Contract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_UnfreezeBalanceV2Contract_default_instance_;
    new (ptr) ::protocol::UnfreezeBalanceV2Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnfreezeBalanceV2Contract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnfreezeBalanceV2Contract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_VoteAssetContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_VoteAssetContract_default_instance_;
    new (ptr) ::protocol::VoteAssetContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteAssetContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoteAssetContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_VoteWitnessContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_VoteWitnessContract_default_instance_;
    new (ptr) ::protocol::VoteWitnessContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoteWitnessContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VoteWitnessContract_TronInternal_2eproto}, {
      &scc_info_VoteWitnessContract_Vote_TronInternal_2eproto.base,}};

static void InitDefaultsscc_info_VoteWitnessContract_Vote_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_VoteWitnessContract_Vote_default_instance_;
    new (ptr) ::protocol::VoteWitnessContract_Vote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteWitnessContract_Vote_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoteWitnessContract_Vote_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawBalanceContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_WithdrawBalanceContract_default_instance_;
    new (ptr) ::protocol::WithdrawBalanceContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawBalanceContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WithdrawBalanceContract_TronInternal_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawExpireUnfreezeContract_TronInternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_WithdrawExpireUnfreezeContract_default_instance_;
    new (ptr) ::protocol::WithdrawExpireUnfreezeContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawExpireUnfreezeContract_TronInternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WithdrawExpireUnfreezeContract_TronInternal_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TronInternal_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TronInternal_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TronInternal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TronInternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, parameter_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, provider_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, ref_block_bytes_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, ref_block_num_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, ref_block_hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, expiration_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, data_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, contract_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, fee_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, raw_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, tx_trie_root_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, parent_hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, number_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, witness_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, witness_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader, raw_data_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader, witness_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransferContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransferContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransferContract, to_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransferContract, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransferAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransferAssetContract, asset_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransferAssetContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransferAssetContract, to_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransferAssetContract, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, frozen_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, frozen_duration_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, receiver_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceV2Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceV2Contract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceV2Contract, frozen_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceV2Contract, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceContract, receiver_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceV2Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceV2Contract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceV2Contract, unfreeze_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceV2Contract, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::WithdrawExpireUnfreezeContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::WithdrawExpireUnfreezeContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegateResourceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegateResourceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegateResourceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegateResourceContract, balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegateResourceContract, receiver_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegateResourceContract, lock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::UnDelegateResourceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::UnDelegateResourceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnDelegateResourceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnDelegateResourceContract, balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnDelegateResourceContract, receiver_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeAssetContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteAssetContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteAssetContract, vote_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteAssetContract, support_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteAssetContract, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract_Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract_Vote, vote_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract_Vote, vote_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, votes_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, support_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::WithdrawBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::WithdrawBalanceContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TriggerSmartContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TriggerSmartContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TriggerSmartContract, contract_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TriggerSmartContract, call_value_),
  PROTOBUF_FIELD_OFFSET(::protocol::TriggerSmartContract, data_),
  PROTOBUF_FIELD_OFFSET(::protocol::TriggerSmartContract, call_token_value_),
  PROTOBUF_FIELD_OFFSET(::protocol::TriggerSmartContract, token_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::Transaction_Contract)},
  { 8, -1, sizeof(::protocol::Transaction_raw)},
  { 21, -1, sizeof(::protocol::Transaction)},
  { 27, -1, sizeof(::protocol::BlockHeader_raw)},
  { 39, -1, sizeof(::protocol::BlockHeader)},
  { 46, -1, sizeof(::protocol::TransferContract)},
  { 54, -1, sizeof(::protocol::TransferAssetContract)},
  { 63, -1, sizeof(::protocol::FreezeBalanceContract)},
  { 73, -1, sizeof(::protocol::FreezeBalanceV2Contract)},
  { 81, -1, sizeof(::protocol::UnfreezeBalanceContract)},
  { 89, -1, sizeof(::protocol::UnfreezeBalanceV2Contract)},
  { 97, -1, sizeof(::protocol::WithdrawExpireUnfreezeContract)},
  { 103, -1, sizeof(::protocol::DelegateResourceContract)},
  { 113, -1, sizeof(::protocol::UnDelegateResourceContract)},
  { 122, -1, sizeof(::protocol::UnfreezeAssetContract)},
  { 128, -1, sizeof(::protocol::VoteAssetContract)},
  { 137, -1, sizeof(::protocol::VoteWitnessContract_Vote)},
  { 144, -1, sizeof(::protocol::VoteWitnessContract)},
  { 152, -1, sizeof(::protocol::WithdrawBalanceContract)},
  { 158, -1, sizeof(::protocol::TriggerSmartContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_raw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockHeader_raw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransferContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransferAssetContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_FreezeBalanceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_FreezeBalanceV2Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_UnfreezeBalanceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_UnfreezeBalanceV2Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_WithdrawExpireUnfreezeContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DelegateResourceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_UnDelegateResourceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_UnfreezeAssetContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_VoteAssetContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_VoteWitnessContract_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_VoteWitnessContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_WithdrawBalanceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TriggerSmartContract_default_instance_),
};

const char descriptor_table_protodef_TronInternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TronInternal.proto\022\010protocol\032\031google/p"
  "rotobuf/any.proto\"\274\006\n\013Transaction\022+\n\010raw"
  "_data\030\001 \001(\0132\031.protocol.Transaction.raw\032\265"
  "\004\n\010Contract\0229\n\004type\030\001 \001(\0162+.protocol.Tra"
  "nsaction.Contract.ContractType\022\'\n\tparame"
  "ter\030\002 \001(\0132\024.google.protobuf.Any\022\020\n\010provi"
  "der\030\003 \001(\014\"\262\003\n\014ContractType\022\031\n\025AccountCre"
  "ateContract\020\000\022\024\n\020TransferContract\020\001\022\031\n\025T"
  "ransferAssetContract\020\002\022\025\n\021VoteAssetContr"
  "act\020\003\022\027\n\023VoteWitnessContract\020\004\022\031\n\025Freeze"
  "BalanceContract\020\013\022\033\n\027UnfreezeBalanceCont"
  "ract\020\014\022\033\n\027WithdrawBalanceContract\020\r\022\031\n\025U"
  "nfreezeAssetContract\020\016\022\030\n\024TriggerSmartCo"
  "ntract\020\037\022\033\n\027FreezeBalanceV2Contract\0206\022\035\n"
  "\031UnfreezeBalanceV2Contract\0207\022\"\n\036Withdraw"
  "ExpireUnfreezeContract\0208\022\034\n\030DelegateReso"
  "urceContract\0209\022\036\n\032UnDelegateResourceCont"
  "ract\020:\032\307\001\n\003raw\022\027\n\017ref_block_bytes\030\001 \001(\014\022"
  "\025\n\rref_block_num\030\003 \001(\003\022\026\n\016ref_block_hash"
  "\030\004 \001(\014\022\022\n\nexpiration\030\010 \001(\003\022\014\n\004data\030\n \001(\014"
  "\0220\n\010contract\030\013 \003(\0132\036.protocol.Transactio"
  "n.Contract\022\021\n\ttimestamp\030\016 \001(\003\022\021\n\tfee_lim"
  "it\030\022 \001(\003\"\351\001\n\013BlockHeader\022+\n\010raw_data\030\001 \001"
  "(\0132\031.protocol.BlockHeader.raw\022\031\n\021witness"
  "_signature\030\002 \001(\014\032\221\001\n\003raw\022\021\n\ttimestamp\030\001 "
  "\001(\003\022\024\n\014tx_trie_root\030\002 \001(\014\022\023\n\013parent_hash"
  "\030\003 \001(\014\022\016\n\006number\030\007 \001(\003\022\022\n\nwitness_id\030\010 \001"
  "(\003\022\027\n\017witness_address\030\t \001(\014\022\017\n\007version\030\n"
  " \001(\005\"M\n\020TransferContract\022\025\n\rowner_addres"
  "s\030\001 \001(\014\022\022\n\nto_address\030\002 \001(\014\022\016\n\006amount\030\003 "
  "\001(\003\"f\n\025TransferAssetContract\022\022\n\nasset_na"
  "me\030\001 \001(\014\022\025\n\rowner_address\030\002 \001(\014\022\022\n\nto_ad"
  "dress\030\003 \001(\014\022\016\n\006amount\030\004 \001(\003\"\243\001\n\025FreezeBa"
  "lanceContract\022\025\n\rowner_address\030\001 \001(\014\022\026\n\016"
  "frozen_balance\030\002 \001(\003\022\027\n\017frozen_duration\030"
  "\003 \001(\003\022(\n\010resource\030\n \001(\0162\026.protocol.Resou"
  "rceCode\022\030\n\020receiver_address\030\017 \001(\014\"r\n\027Fre"
  "ezeBalanceV2Contract\022\025\n\rowner_address\030\001 "
  "\001(\014\022\026\n\016frozen_balance\030\002 \001(\003\022(\n\010resource\030"
  "\003 \001(\0162\026.protocol.ResourceCode\"t\n\027Unfreez"
  "eBalanceContract\022\025\n\rowner_address\030\001 \001(\014\022"
  "(\n\010resource\030\n \001(\0162\026.protocol.ResourceCod"
  "e\022\030\n\020receiver_address\030\017 \001(\014\"v\n\031UnfreezeB"
  "alanceV2Contract\022\025\n\rowner_address\030\001 \001(\014\022"
  "\030\n\020unfreeze_balance\030\002 \001(\003\022(\n\010resource\030\003 "
  "\001(\0162\026.protocol.ResourceCode\"7\n\036WithdrawE"
  "xpireUnfreezeContract\022\025\n\rowner_address\030\001"
  " \001(\014\"\224\001\n\030DelegateResourceContract\022\025\n\rown"
  "er_address\030\001 \001(\014\022(\n\010resource\030\002 \001(\0162\026.pro"
  "tocol.ResourceCode\022\017\n\007balance\030\003 \001(\003\022\030\n\020r"
  "eceiver_address\030\004 \001(\014\022\014\n\004lock\030\005 \001(\010\"\210\001\n\032"
  "UnDelegateResourceContract\022\025\n\rowner_addr"
  "ess\030\001 \001(\014\022(\n\010resource\030\002 \001(\0162\026.protocol.R"
  "esourceCode\022\017\n\007balance\030\003 \001(\003\022\030\n\020receiver"
  "_address\030\004 \001(\014\".\n\025UnfreezeAssetContract\022"
  "\025\n\rowner_address\030\001 \001(\014\"`\n\021VoteAssetContr"
  "act\022\025\n\rowner_address\030\001 \001(\014\022\024\n\014vote_addre"
  "ss\030\002 \003(\014\022\017\n\007support\030\003 \001(\010\022\r\n\005count\030\005 \001(\005"
  "\"\242\001\n\023VoteWitnessContract\022\025\n\rowner_addres"
  "s\030\001 \001(\014\0221\n\005votes\030\002 \003(\0132\".protocol.VoteWi"
  "tnessContract.Vote\022\017\n\007support\030\003 \001(\010\0320\n\004V"
  "ote\022\024\n\014vote_address\030\001 \001(\014\022\022\n\nvote_count\030"
  "\002 \001(\003\"0\n\027WithdrawBalanceContract\022\025\n\rowne"
  "r_address\030\001 \001(\014\"\225\001\n\024TriggerSmartContract"
  "\022\025\n\rowner_address\030\001 \001(\014\022\030\n\020contract_addr"
  "ess\030\002 \001(\014\022\022\n\ncall_value\030\003 \001(\003\022\014\n\004data\030\004 "
  "\001(\014\022\030\n\020call_token_value\030\005 \001(\003\022\020\n\010token_i"
  "d\030\006 \001(\003*)\n\014ResourceCode\022\r\n\tBANDWIDTH\020\000\022\n"
  "\n\006ENERGY\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TronInternal_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TronInternal_2eproto_sccs[20] = {
  &scc_info_BlockHeader_TronInternal_2eproto.base,
  &scc_info_BlockHeader_raw_TronInternal_2eproto.base,
  &scc_info_DelegateResourceContract_TronInternal_2eproto.base,
  &scc_info_FreezeBalanceContract_TronInternal_2eproto.base,
  &scc_info_FreezeBalanceV2Contract_TronInternal_2eproto.base,
  &scc_info_Transaction_TronInternal_2eproto.base,
  &scc_info_Transaction_Contract_TronInternal_2eproto.base,
  &scc_info_Transaction_raw_TronInternal_2eproto.base,
  &scc_info_TransferAssetContract_TronInternal_2eproto.base,
  &scc_info_TransferContract_TronInternal_2eproto.base,
  &scc_info_TriggerSmartContract_TronInternal_2eproto.base,
  &scc_info_UnDelegateResourceContract_TronInternal_2eproto.base,
  &scc_info_UnfreezeAssetContract_TronInternal_2eproto.base,
  &scc_info_UnfreezeBalanceContract_TronInternal_2eproto.base,
  &scc_info_UnfreezeBalanceV2Contract_TronInternal_2eproto.base,
  &scc_info_VoteAssetContract_TronInternal_2eproto.base,
  &scc_info_VoteWitnessContract_TronInternal_2eproto.base,
  &scc_info_VoteWitnessContract_Vote_TronInternal_2eproto.base,
  &scc_info_WithdrawBalanceContract_TronInternal_2eproto.base,
  &scc_info_WithdrawExpireUnfreezeContract_TronInternal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TronInternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TronInternal_2eproto = {
  false, false, descriptor_table_protodef_TronInternal_2eproto, "TronInternal.proto", 2738,
  &descriptor_table_TronInternal_2eproto_once, descriptor_table_TronInternal_2eproto_sccs, descriptor_table_TronInternal_2eproto_deps, 20, 1,
  schemas, file_default_instances, TableStruct_TronInternal_2eproto::offsets,
  file_level_metadata_TronInternal_2eproto, 20, file_level_enum_descriptors_TronInternal_2eproto, file_level_service_descriptors_TronInternal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TronInternal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TronInternal_2eproto)), true);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Contract_ContractType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TronInternal_2eproto);
  return file_level_enum_descriptors_TronInternal_2eproto[0];
}
bool Transaction_Contract_ContractType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 11:
    case 12:
    case 13:
    case 14:
    case 31:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Transaction_Contract_ContractType Transaction_Contract::AccountCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::TransferContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::TransferAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::VoteAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::VoteWitnessContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::FreezeBalanceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UnfreezeBalanceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::WithdrawBalanceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UnfreezeAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::TriggerSmartContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::FreezeBalanceV2Contract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UnfreezeBalanceV2Contract;
constexpr Transaction_Contract_ContractType Transaction_Contract::WithdrawExpireUnfreezeContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::DelegateResourceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UnDelegateResourceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ContractType_MIN;
constexpr Transaction_Contract_ContractType Transaction_Contract::ContractType_MAX;
constexpr int Transaction_Contract::ContractType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TronInternal_2eproto);
  return file_level_enum_descriptors_TronInternal_2eproto[1];
}
bool ResourceCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Transaction_Contract::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& parameter(const Transaction_Contract* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Transaction_Contract::_Internal::parameter(const Transaction_Contract* msg) {
  return *msg->parameter_;
}
void Transaction_Contract::clear_parameter() {
  if (GetArena() == nullptr && parameter_ != nullptr) {
    delete parameter_;
  }
  parameter_ = nullptr;
}
Transaction_Contract::Transaction_Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.Transaction.Contract)
}
Transaction_Contract::Transaction_Contract(const Transaction_Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider(), 
      GetArena());
  }
  if (from._internal_has_parameter()) {
    parameter_ = new PROTOBUF_NAMESPACE_ID::Any(*from.parameter_);
  } else {
    parameter_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction.Contract)
}

void Transaction_Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Contract_TronInternal_2eproto.base);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&parameter_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&parameter_)) + sizeof(type_));
}

Transaction_Contract::~Transaction_Contract() {
  // @@protoc_insertion_point(destructor:protocol.Transaction.Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parameter_;
}

void Transaction_Contract::ArenaDtor(void* object) {
  Transaction_Contract* _this = reinterpret_cast< Transaction_Contract* >(object);
  (void)_this;
}
void Transaction_Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_Contract& Transaction_Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Contract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void Transaction_Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_.ClearToEmpty();
  if (GetArena() == nullptr && parameter_ != nullptr) {
    delete parameter_;
  }
  parameter_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.Transaction.Contract.ContractType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protocol::Transaction_Contract_ContractType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes provider = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction.Contract.ContractType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Any parameter = 2;
  if (this->has_parameter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parameter(this), target, stream);
  }

  // bytes provider = 3;
  if (this->provider().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_provider(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction.Contract)
  return target;
}

size_t Transaction_Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction.Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes provider = 3;
  if (this->provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_provider());
  }

  // .google.protobuf.Any parameter = 2;
  if (this->has_parameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameter_);
  }

  // .protocol.Transaction.Contract.ContractType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Transaction.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Transaction.Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Transaction.Contract)
    MergeFrom(*source);
  }
}

void Transaction_Contract::MergeFrom(const Transaction_Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider().size() > 0) {
    _internal_set_provider(from._internal_provider());
  }
  if (from.has_parameter()) {
    _internal_mutable_parameter()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_parameter());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Transaction_Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Transaction.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Contract::CopyFrom(const Transaction_Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Contract::IsInitialized() const {
  return true;
}

void Transaction_Contract::InternalSwap(Transaction_Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction_Contract, type_)
      + sizeof(Transaction_Contract::type_)
      - PROTOBUF_FIELD_OFFSET(Transaction_Contract, parameter_)>(
          reinterpret_cast<char*>(&parameter_),
          reinterpret_cast<char*>(&other->parameter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction_raw::_Internal {
 public:
};

Transaction_raw::Transaction_raw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contract_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.Transaction.raw)
}
Transaction_raw::Transaction_raw(const Transaction_raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contract_(from.contract_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ref_block_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref_block_bytes().empty()) {
    ref_block_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ref_block_bytes(), 
      GetArena());
  }
  ref_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref_block_hash().empty()) {
    ref_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ref_block_hash(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&ref_block_num_, &from.ref_block_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&fee_limit_) -
    reinterpret_cast<char*>(&ref_block_num_)) + sizeof(fee_limit_));
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction.raw)
}

void Transaction_raw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_raw_TronInternal_2eproto.base);
  ref_block_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ref_block_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fee_limit_) -
      reinterpret_cast<char*>(&ref_block_num_)) + sizeof(fee_limit_));
}

Transaction_raw::~Transaction_raw() {
  // @@protoc_insertion_point(destructor:protocol.Transaction.raw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_raw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ref_block_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_raw::ArenaDtor(void* object) {
  Transaction_raw* _this = reinterpret_cast< Transaction_raw* >(object);
  (void)_this;
}
void Transaction_raw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_raw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_raw& Transaction_raw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_raw_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void Transaction_raw::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_.Clear();
  ref_block_bytes_.ClearToEmpty();
  ref_block_hash_.ClearToEmpty();
  data_.ClearToEmpty();
  ::memset(&ref_block_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_limit_) -
      reinterpret_cast<char*>(&ref_block_num_)) + sizeof(fee_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_raw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes ref_block_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ref_block_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ref_block_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ref_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ref_block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ref_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Transaction.Contract contract = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_limit = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          fee_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_raw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ref_block_bytes = 1;
  if (this->ref_block_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ref_block_bytes(), target);
  }

  // int64 ref_block_num = 3;
  if (this->ref_block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ref_block_num(), target);
  }

  // bytes ref_block_hash = 4;
  if (this->ref_block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ref_block_hash(), target);
  }

  // int64 expiration = 8;
  if (this->expiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_expiration(), target);
  }

  // bytes data = 10;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_data(), target);
  }

  // repeated .protocol.Transaction.Contract contract = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contract_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_contract(i), target, stream);
  }

  // int64 timestamp = 14;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_timestamp(), target);
  }

  // int64 fee_limit = 18;
  if (this->fee_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_fee_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction.raw)
  return target;
}

size_t Transaction_raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction.raw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Transaction.Contract contract = 11;
  total_size += 1UL * this->_internal_contract_size();
  for (const auto& msg : this->contract_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes ref_block_bytes = 1;
  if (this->ref_block_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ref_block_bytes());
  }

  // bytes ref_block_hash = 4;
  if (this->ref_block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ref_block_hash());
  }

  // bytes data = 10;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 ref_block_num = 3;
  if (this->ref_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ref_block_num());
  }

  // int64 expiration = 8;
  if (this->expiration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiration());
  }

  // int64 timestamp = 14;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 fee_limit = 18;
  if (this->fee_limit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_raw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Transaction.raw)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_raw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_raw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Transaction.raw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Transaction.raw)
    MergeFrom(*source);
  }
}

void Transaction_raw::MergeFrom(const Transaction_raw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction.raw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contract_.MergeFrom(from.contract_);
  if (from.ref_block_bytes().size() > 0) {
    _internal_set_ref_block_bytes(from._internal_ref_block_bytes());
  }
  if (from.ref_block_hash().size() > 0) {
    _internal_set_ref_block_hash(from._internal_ref_block_hash());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.ref_block_num() != 0) {
    _internal_set_ref_block_num(from._internal_ref_block_num());
  }
  if (from.expiration() != 0) {
    _internal_set_expiration(from._internal_expiration());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.fee_limit() != 0) {
    _internal_set_fee_limit(from._internal_fee_limit());
  }
}

void Transaction_raw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Transaction.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_raw::CopyFrom(const Transaction_raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_raw::IsInitialized() const {
  return true;
}

void Transaction_raw::InternalSwap(Transaction_raw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_.InternalSwap(&other->contract_);
  ref_block_bytes_.Swap(&other->ref_block_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ref_block_hash_.Swap(&other->ref_block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction_raw, fee_limit_)
      + sizeof(Transaction_raw::fee_limit_)
      - PROTOBUF_FIELD_OFFSET(Transaction_raw, ref_block_num_)>(
          reinterpret_cast<char*>(&ref_block_num_),
          reinterpret_cast<char*>(&other->ref_block_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_raw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction::_Internal {
 public:
  static const ::protocol::Transaction_raw& raw_data(const Transaction* msg);
};

const ::protocol::Transaction_raw&
Transaction::_Internal::raw_data(const Transaction* msg) {
  return *msg->raw_data_;
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_raw_data()) {
    raw_data_ = new ::protocol::Transaction_raw(*from.raw_data_);
  } else {
    raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_TronInternal_2eproto.base);
  raw_data_ = nullptr;
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:protocol.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete raw_data_;
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.Transaction.raw raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction.raw raw_data = 1;
  if (this->has_raw_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raw_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Transaction.raw raw_data = 1;
  if (this->has_raw_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_raw_data()) {
    _internal_mutable_raw_data()->::protocol::Transaction_raw::MergeFrom(from._internal_raw_data());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(raw_data_, other->raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockHeader_raw::_Internal {
 public:
};

BlockHeader_raw::BlockHeader_raw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.BlockHeader.raw)
}
BlockHeader_raw::BlockHeader_raw(const BlockHeader_raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_trie_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_trie_root().empty()) {
    tx_trie_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_trie_root(), 
      GetArena());
  }
  parent_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_hash().empty()) {
    parent_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_hash(), 
      GetArena());
  }
  witness_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witness_address().empty()) {
    witness_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witness_address(), 
      GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:protocol.BlockHeader.raw)
}

void BlockHeader_raw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockHeader_raw_TronInternal_2eproto.base);
  tx_trie_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witness_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
}

BlockHeader_raw::~BlockHeader_raw() {
  // @@protoc_insertion_point(destructor:protocol.BlockHeader.raw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockHeader_raw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_trie_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witness_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockHeader_raw::ArenaDtor(void* object) {
  BlockHeader_raw* _this = reinterpret_cast< BlockHeader_raw* >(object);
  (void)_this;
}
void BlockHeader_raw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader_raw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeader_raw& BlockHeader_raw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockHeader_raw_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void BlockHeader_raw::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockHeader.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_trie_root_.ClearToEmpty();
  parent_hash_.ClearToEmpty();
  witness_address_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader_raw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_trie_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tx_trie_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parent_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_parent_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 witness_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          witness_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witness_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_witness_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader_raw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockHeader.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // bytes tx_trie_root = 2;
  if (this->tx_trie_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_trie_root(), target);
  }

  // bytes parent_hash = 3;
  if (this->parent_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_parent_hash(), target);
  }

  // int64 number = 7;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_number(), target);
  }

  // int64 witness_id = 8;
  if (this->witness_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_witness_id(), target);
  }

  // bytes witness_address = 9;
  if (this->witness_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_witness_address(), target);
  }

  // int32 version = 10;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockHeader.raw)
  return target;
}

size_t BlockHeader_raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockHeader.raw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_trie_root = 2;
  if (this->tx_trie_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_trie_root());
  }

  // bytes parent_hash = 3;
  if (this->parent_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_hash());
  }

  // bytes witness_address = 9;
  if (this->witness_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witness_address());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 number = 7;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  // int64 witness_id = 8;
  if (this->witness_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_witness_id());
  }

  // int32 version = 10;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader_raw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.BlockHeader.raw)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader_raw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader_raw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.BlockHeader.raw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.BlockHeader.raw)
    MergeFrom(*source);
  }
}

void BlockHeader_raw::MergeFrom(const BlockHeader_raw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockHeader.raw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_trie_root().size() > 0) {
    _internal_set_tx_trie_root(from._internal_tx_trie_root());
  }
  if (from.parent_hash().size() > 0) {
    _internal_set_parent_hash(from._internal_parent_hash());
  }
  if (from.witness_address().size() > 0) {
    _internal_set_witness_address(from._internal_witness_address());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.witness_id() != 0) {
    _internal_set_witness_id(from._internal_witness_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void BlockHeader_raw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.BlockHeader.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader_raw::CopyFrom(const BlockHeader_raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockHeader.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader_raw::IsInitialized() const {
  return true;
}

void BlockHeader_raw::InternalSwap(BlockHeader_raw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_trie_root_.Swap(&other->tx_trie_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parent_hash_.Swap(&other->parent_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  witness_address_.Swap(&other->witness_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockHeader_raw, version_)
      + sizeof(BlockHeader_raw::version_)
      - PROTOBUF_FIELD_OFFSET(BlockHeader_raw, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader_raw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockHeader::_Internal {
 public:
  static const ::protocol::BlockHeader_raw& raw_data(const BlockHeader* msg);
};

const ::protocol::BlockHeader_raw&
BlockHeader::_Internal::raw_data(const BlockHeader* msg) {
  return *msg->raw_data_;
}
BlockHeader::BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witness_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witness_signature().empty()) {
    witness_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witness_signature(), 
      GetArena());
  }
  if (from._internal_has_raw_data()) {
    raw_data_ = new ::protocol::BlockHeader_raw(*from.raw_data_);
  } else {
    raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.BlockHeader)
}

void BlockHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockHeader_TronInternal_2eproto.base);
  witness_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_data_ = nullptr;
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:protocol.BlockHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  witness_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete raw_data_;
}

void BlockHeader::ArenaDtor(void* object) {
  BlockHeader* _this = reinterpret_cast< BlockHeader* >(object);
  (void)_this;
}
void BlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeader& BlockHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockHeader_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witness_signature_.ClearToEmpty();
  if (GetArena() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.BlockHeader.raw raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witness_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witness_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.BlockHeader.raw raw_data = 1;
  if (this->has_raw_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raw_data(this), target, stream);
  }

  // bytes witness_signature = 2;
  if (this->witness_signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witness_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witness_signature = 2;
  if (this->witness_signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witness_signature());
  }

  // .protocol.BlockHeader.raw raw_data = 1;
  if (this->has_raw_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.BlockHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.witness_signature().size() > 0) {
    _internal_set_witness_signature(from._internal_witness_signature());
  }
  if (from.has_raw_data()) {
    _internal_mutable_raw_data()->::protocol::BlockHeader_raw::MergeFrom(from._internal_raw_data());
  }
}

void BlockHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  witness_signature_.Swap(&other->witness_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(raw_data_, other->raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferContract::_Internal {
 public:
};

TransferContract::TransferContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.TransferContract)
}
TransferContract::TransferContract(const TransferContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:protocol.TransferContract)
}

void TransferContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TransferContract::~TransferContract() {
  // @@protoc_insertion_point(destructor:protocol.TransferContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferContract::ArenaDtor(void* object) {
  TransferContract* _this = reinterpret_cast< TransferContract* >(object);
  (void)_this;
}
void TransferContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferContract& TransferContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void TransferContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  to_address_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // bytes to_address = 2;
  if (this->to_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to_address(), target);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransferContract)
  return target;
}

size_t TransferContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransferContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes to_address = 2;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_address());
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransferContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransferContract)
    MergeFrom(*source);
  }
}

void TransferContract::MergeFrom(const TransferContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransferContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferContract::CopyFrom(const TransferContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferContract::IsInitialized() const {
  return true;
}

void TransferContract::InternalSwap(TransferContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferAssetContract::_Internal {
 public:
};

TransferAssetContract::TransferAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.TransferAssetContract)
}
TransferAssetContract::TransferAssetContract(const TransferAssetContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_name().empty()) {
    asset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_name(), 
      GetArena());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:protocol.TransferAssetContract)
}

void TransferAssetContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferAssetContract_TronInternal_2eproto.base);
  asset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

TransferAssetContract::~TransferAssetContract() {
  // @@protoc_insertion_point(destructor:protocol.TransferAssetContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferAssetContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferAssetContract::ArenaDtor(void* object) {
  TransferAssetContract* _this = reinterpret_cast< TransferAssetContract* >(object);
  (void)_this;
}
void TransferAssetContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferAssetContract& TransferAssetContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferAssetContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void TransferAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransferAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_name_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  to_address_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferAssetContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes asset_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferAssetContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransferAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes asset_name = 1;
  if (this->asset_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_asset_name(), target);
  }

  // bytes owner_address = 2;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_owner_address(), target);
  }

  // bytes to_address = 3;
  if (this->to_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_to_address(), target);
  }

  // int64 amount = 4;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransferAssetContract)
  return target;
}

size_t TransferAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransferAssetContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes asset_name = 1;
  if (this->asset_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_asset_name());
  }

  // bytes owner_address = 2;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes to_address = 3;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_address());
  }

  // int64 amount = 4;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferAssetContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransferAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferAssetContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferAssetContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransferAssetContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransferAssetContract)
    MergeFrom(*source);
  }
}

void TransferAssetContract::MergeFrom(const TransferAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransferAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_name().size() > 0) {
    _internal_set_asset_name(from._internal_asset_name());
  }
  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.to_address().size() > 0) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransferAssetContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransferAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferAssetContract::CopyFrom(const TransferAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransferAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferAssetContract::IsInitialized() const {
  return true;
}

void TransferAssetContract::InternalSwap(TransferAssetContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_name_.Swap(&other->asset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferAssetContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FreezeBalanceContract::_Internal {
 public:
};

FreezeBalanceContract::FreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.FreezeBalanceContract)
}
FreezeBalanceContract::FreezeBalanceContract(const FreezeBalanceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArena());
  }
  ::memcpy(&frozen_balance_, &from.frozen_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(resource_));
  // @@protoc_insertion_point(copy_constructor:protocol.FreezeBalanceContract)
}

void FreezeBalanceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FreezeBalanceContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_balance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(resource_));
}

FreezeBalanceContract::~FreezeBalanceContract() {
  // @@protoc_insertion_point(destructor:protocol.FreezeBalanceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreezeBalanceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FreezeBalanceContract::ArenaDtor(void* object) {
  FreezeBalanceContract* _this = reinterpret_cast< FreezeBalanceContract* >(object);
  (void)_this;
}
void FreezeBalanceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreezeBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreezeBalanceContract& FreezeBalanceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreezeBalanceContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void FreezeBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.FreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  ::memset(&frozen_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(resource_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreezeBalanceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frozen_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frozen_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceCode resource = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::protocol::ResourceCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes receiver_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreezeBalanceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.FreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 frozen_balance = 2;
  if (this->frozen_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_frozen_balance(), target);
  }

  // int64 frozen_duration = 3;
  if (this->frozen_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_frozen_duration(), target);
  }

  // .protocol.ResourceCode resource = 10;
  if (this->resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_resource(), target);
  }

  // bytes receiver_address = 15;
  if (this->receiver_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_receiver_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.FreezeBalanceContract)
  return target;
}

size_t FreezeBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.FreezeBalanceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes receiver_address = 15;
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_address());
  }

  // int64 frozen_balance = 2;
  if (this->frozen_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_balance());
  }

  // int64 frozen_duration = 3;
  if (this->frozen_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_duration());
  }

  // .protocol.ResourceCode resource = 10;
  if (this->resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreezeBalanceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.FreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const FreezeBalanceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreezeBalanceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.FreezeBalanceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.FreezeBalanceContract)
    MergeFrom(*source);
  }
}

void FreezeBalanceContract::MergeFrom(const FreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.FreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.receiver_address().size() > 0) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (from.frozen_balance() != 0) {
    _internal_set_frozen_balance(from._internal_frozen_balance());
  }
  if (from.frozen_duration() != 0) {
    _internal_set_frozen_duration(from._internal_frozen_duration());
  }
  if (from.resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
}

void FreezeBalanceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.FreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreezeBalanceContract::CopyFrom(const FreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.FreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreezeBalanceContract::IsInitialized() const {
  return true;
}

void FreezeBalanceContract::InternalSwap(FreezeBalanceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreezeBalanceContract, resource_)
      + sizeof(FreezeBalanceContract::resource_)
      - PROTOBUF_FIELD_OFFSET(FreezeBalanceContract, frozen_balance_)>(
          reinterpret_cast<char*>(&frozen_balance_),
          reinterpret_cast<char*>(&other->frozen_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreezeBalanceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FreezeBalanceV2Contract::_Internal {
 public:
};

FreezeBalanceV2Contract::FreezeBalanceV2Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.FreezeBalanceV2Contract)
}
FreezeBalanceV2Contract::FreezeBalanceV2Contract(const FreezeBalanceV2Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  ::memcpy(&frozen_balance_, &from.frozen_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(resource_));
  // @@protoc_insertion_point(copy_constructor:protocol.FreezeBalanceV2Contract)
}

void FreezeBalanceV2Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FreezeBalanceV2Contract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_balance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(resource_));
}

FreezeBalanceV2Contract::~FreezeBalanceV2Contract() {
  // @@protoc_insertion_point(destructor:protocol.FreezeBalanceV2Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreezeBalanceV2Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FreezeBalanceV2Contract::ArenaDtor(void* object) {
  FreezeBalanceV2Contract* _this = reinterpret_cast< FreezeBalanceV2Contract* >(object);
  (void)_this;
}
void FreezeBalanceV2Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreezeBalanceV2Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreezeBalanceV2Contract& FreezeBalanceV2Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreezeBalanceV2Contract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void FreezeBalanceV2Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.FreezeBalanceV2Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  ::memset(&frozen_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(resource_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreezeBalanceV2Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frozen_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceCode resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::protocol::ResourceCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreezeBalanceV2Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.FreezeBalanceV2Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 frozen_balance = 2;
  if (this->frozen_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_frozen_balance(), target);
  }

  // .protocol.ResourceCode resource = 3;
  if (this->resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_resource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.FreezeBalanceV2Contract)
  return target;
}

size_t FreezeBalanceV2Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.FreezeBalanceV2Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // int64 frozen_balance = 2;
  if (this->frozen_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_balance());
  }

  // .protocol.ResourceCode resource = 3;
  if (this->resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreezeBalanceV2Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.FreezeBalanceV2Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const FreezeBalanceV2Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreezeBalanceV2Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.FreezeBalanceV2Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.FreezeBalanceV2Contract)
    MergeFrom(*source);
  }
}

void FreezeBalanceV2Contract::MergeFrom(const FreezeBalanceV2Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.FreezeBalanceV2Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.frozen_balance() != 0) {
    _internal_set_frozen_balance(from._internal_frozen_balance());
  }
  if (from.resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
}

void FreezeBalanceV2Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.FreezeBalanceV2Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreezeBalanceV2Contract::CopyFrom(const FreezeBalanceV2Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.FreezeBalanceV2Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreezeBalanceV2Contract::IsInitialized() const {
  return true;
}

void FreezeBalanceV2Contract::InternalSwap(FreezeBalanceV2Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreezeBalanceV2Contract, resource_)
      + sizeof(FreezeBalanceV2Contract::resource_)
      - PROTOBUF_FIELD_OFFSET(FreezeBalanceV2Contract, frozen_balance_)>(
          reinterpret_cast<char*>(&frozen_balance_),
          reinterpret_cast<char*>(&other->frozen_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreezeBalanceV2Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnfreezeBalanceContract::_Internal {
 public:
};

UnfreezeBalanceContract::UnfreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.UnfreezeBalanceContract)
}
UnfreezeBalanceContract::UnfreezeBalanceContract(const UnfreezeBalanceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArena());
  }
  resource_ = from.resource_;
  // @@protoc_insertion_point(copy_constructor:protocol.UnfreezeBalanceContract)
}

void UnfreezeBalanceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnfreezeBalanceContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_ = 0;
}

UnfreezeBalanceContract::~UnfreezeBalanceContract() {
  // @@protoc_insertion_point(destructor:protocol.UnfreezeBalanceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnfreezeBalanceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnfreezeBalanceContract::ArenaDtor(void* object) {
  UnfreezeBalanceContract* _this = reinterpret_cast< UnfreezeBalanceContract* >(object);
  (void)_this;
}
void UnfreezeBalanceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnfreezeBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnfreezeBalanceContract& UnfreezeBalanceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnfreezeBalanceContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void UnfreezeBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UnfreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  resource_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnfreezeBalanceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceCode resource = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::protocol::ResourceCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes receiver_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnfreezeBalanceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UnfreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // .protocol.ResourceCode resource = 10;
  if (this->resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_resource(), target);
  }

  // bytes receiver_address = 15;
  if (this->receiver_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_receiver_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UnfreezeBalanceContract)
  return target;
}

size_t UnfreezeBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UnfreezeBalanceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes receiver_address = 15;
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_address());
  }

  // .protocol.ResourceCode resource = 10;
  if (this->resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnfreezeBalanceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.UnfreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const UnfreezeBalanceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnfreezeBalanceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.UnfreezeBalanceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.UnfreezeBalanceContract)
    MergeFrom(*source);
  }
}

void UnfreezeBalanceContract::MergeFrom(const UnfreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UnfreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.receiver_address().size() > 0) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (from.resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
}

void UnfreezeBalanceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.UnfreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnfreezeBalanceContract::CopyFrom(const UnfreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UnfreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfreezeBalanceContract::IsInitialized() const {
  return true;
}

void UnfreezeBalanceContract::InternalSwap(UnfreezeBalanceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(resource_, other->resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnfreezeBalanceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnfreezeBalanceV2Contract::_Internal {
 public:
};

UnfreezeBalanceV2Contract::UnfreezeBalanceV2Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.UnfreezeBalanceV2Contract)
}
UnfreezeBalanceV2Contract::UnfreezeBalanceV2Contract(const UnfreezeBalanceV2Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  ::memcpy(&unfreeze_balance_, &from.unfreeze_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&unfreeze_balance_)) + sizeof(resource_));
  // @@protoc_insertion_point(copy_constructor:protocol.UnfreezeBalanceV2Contract)
}

void UnfreezeBalanceV2Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnfreezeBalanceV2Contract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&unfreeze_balance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&unfreeze_balance_)) + sizeof(resource_));
}

UnfreezeBalanceV2Contract::~UnfreezeBalanceV2Contract() {
  // @@protoc_insertion_point(destructor:protocol.UnfreezeBalanceV2Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnfreezeBalanceV2Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnfreezeBalanceV2Contract::ArenaDtor(void* object) {
  UnfreezeBalanceV2Contract* _this = reinterpret_cast< UnfreezeBalanceV2Contract* >(object);
  (void)_this;
}
void UnfreezeBalanceV2Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnfreezeBalanceV2Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnfreezeBalanceV2Contract& UnfreezeBalanceV2Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnfreezeBalanceV2Contract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void UnfreezeBalanceV2Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UnfreezeBalanceV2Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  ::memset(&unfreeze_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&unfreeze_balance_)) + sizeof(resource_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnfreezeBalanceV2Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unfreeze_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unfreeze_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceCode resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::protocol::ResourceCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnfreezeBalanceV2Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UnfreezeBalanceV2Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 unfreeze_balance = 2;
  if (this->unfreeze_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_unfreeze_balance(), target);
  }

  // .protocol.ResourceCode resource = 3;
  if (this->resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_resource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UnfreezeBalanceV2Contract)
  return target;
}

size_t UnfreezeBalanceV2Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UnfreezeBalanceV2Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // int64 unfreeze_balance = 2;
  if (this->unfreeze_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unfreeze_balance());
  }

  // .protocol.ResourceCode resource = 3;
  if (this->resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnfreezeBalanceV2Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.UnfreezeBalanceV2Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const UnfreezeBalanceV2Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnfreezeBalanceV2Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.UnfreezeBalanceV2Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.UnfreezeBalanceV2Contract)
    MergeFrom(*source);
  }
}

void UnfreezeBalanceV2Contract::MergeFrom(const UnfreezeBalanceV2Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UnfreezeBalanceV2Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.unfreeze_balance() != 0) {
    _internal_set_unfreeze_balance(from._internal_unfreeze_balance());
  }
  if (from.resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
}

void UnfreezeBalanceV2Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.UnfreezeBalanceV2Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnfreezeBalanceV2Contract::CopyFrom(const UnfreezeBalanceV2Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UnfreezeBalanceV2Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfreezeBalanceV2Contract::IsInitialized() const {
  return true;
}

void UnfreezeBalanceV2Contract::InternalSwap(UnfreezeBalanceV2Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnfreezeBalanceV2Contract, resource_)
      + sizeof(UnfreezeBalanceV2Contract::resource_)
      - PROTOBUF_FIELD_OFFSET(UnfreezeBalanceV2Contract, unfreeze_balance_)>(
          reinterpret_cast<char*>(&unfreeze_balance_),
          reinterpret_cast<char*>(&other->unfreeze_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnfreezeBalanceV2Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawExpireUnfreezeContract::_Internal {
 public:
};

WithdrawExpireUnfreezeContract::WithdrawExpireUnfreezeContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.WithdrawExpireUnfreezeContract)
}
WithdrawExpireUnfreezeContract::WithdrawExpireUnfreezeContract(const WithdrawExpireUnfreezeContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.WithdrawExpireUnfreezeContract)
}

void WithdrawExpireUnfreezeContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawExpireUnfreezeContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WithdrawExpireUnfreezeContract::~WithdrawExpireUnfreezeContract() {
  // @@protoc_insertion_point(destructor:protocol.WithdrawExpireUnfreezeContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawExpireUnfreezeContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawExpireUnfreezeContract::ArenaDtor(void* object) {
  WithdrawExpireUnfreezeContract* _this = reinterpret_cast< WithdrawExpireUnfreezeContract* >(object);
  (void)_this;
}
void WithdrawExpireUnfreezeContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawExpireUnfreezeContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawExpireUnfreezeContract& WithdrawExpireUnfreezeContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawExpireUnfreezeContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void WithdrawExpireUnfreezeContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.WithdrawExpireUnfreezeContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawExpireUnfreezeContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawExpireUnfreezeContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.WithdrawExpireUnfreezeContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.WithdrawExpireUnfreezeContract)
  return target;
}

size_t WithdrawExpireUnfreezeContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.WithdrawExpireUnfreezeContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawExpireUnfreezeContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.WithdrawExpireUnfreezeContract)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawExpireUnfreezeContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawExpireUnfreezeContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.WithdrawExpireUnfreezeContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.WithdrawExpireUnfreezeContract)
    MergeFrom(*source);
  }
}

void WithdrawExpireUnfreezeContract::MergeFrom(const WithdrawExpireUnfreezeContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.WithdrawExpireUnfreezeContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
}

void WithdrawExpireUnfreezeContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.WithdrawExpireUnfreezeContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawExpireUnfreezeContract::CopyFrom(const WithdrawExpireUnfreezeContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.WithdrawExpireUnfreezeContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawExpireUnfreezeContract::IsInitialized() const {
  return true;
}

void WithdrawExpireUnfreezeContract::InternalSwap(WithdrawExpireUnfreezeContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawExpireUnfreezeContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DelegateResourceContract::_Internal {
 public:
};

DelegateResourceContract::DelegateResourceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.DelegateResourceContract)
}
DelegateResourceContract::DelegateResourceContract(const DelegateResourceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArena());
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(lock_));
  // @@protoc_insertion_point(copy_constructor:protocol.DelegateResourceContract)
}

void DelegateResourceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegateResourceContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lock_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(lock_));
}

DelegateResourceContract::~DelegateResourceContract() {
  // @@protoc_insertion_point(destructor:protocol.DelegateResourceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegateResourceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegateResourceContract::ArenaDtor(void* object) {
  DelegateResourceContract* _this = reinterpret_cast< DelegateResourceContract* >(object);
  (void)_this;
}
void DelegateResourceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegateResourceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegateResourceContract& DelegateResourceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegateResourceContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void DelegateResourceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DelegateResourceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(lock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateResourceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceCode resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::protocol::ResourceCode>(val));
        } else goto handle_unusual;
        continue;
      // int64 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes receiver_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegateResourceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DelegateResourceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // .protocol.ResourceCode resource = 2;
  if (this->resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resource(), target);
  }

  // int64 balance = 3;
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_balance(), target);
  }

  // bytes receiver_address = 4;
  if (this->receiver_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_receiver_address(), target);
  }

  // bool lock = 5;
  if (this->lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_lock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DelegateResourceContract)
  return target;
}

size_t DelegateResourceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DelegateResourceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes receiver_address = 4;
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_address());
  }

  // int64 balance = 3;
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  // .protocol.ResourceCode resource = 2;
  if (this->resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource());
  }

  // bool lock = 5;
  if (this->lock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegateResourceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.DelegateResourceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegateResourceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegateResourceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.DelegateResourceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.DelegateResourceContract)
    MergeFrom(*source);
  }
}

void DelegateResourceContract::MergeFrom(const DelegateResourceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DelegateResourceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.receiver_address().size() > 0) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from.resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
  if (from.lock() != 0) {
    _internal_set_lock(from._internal_lock());
  }
}

void DelegateResourceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.DelegateResourceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegateResourceContract::CopyFrom(const DelegateResourceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DelegateResourceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateResourceContract::IsInitialized() const {
  return true;
}

void DelegateResourceContract::InternalSwap(DelegateResourceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelegateResourceContract, lock_)
      + sizeof(DelegateResourceContract::lock_)
      - PROTOBUF_FIELD_OFFSET(DelegateResourceContract, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateResourceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnDelegateResourceContract::_Internal {
 public:
};

UnDelegateResourceContract::UnDelegateResourceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.UnDelegateResourceContract)
}
UnDelegateResourceContract::UnDelegateResourceContract(const UnDelegateResourceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArena());
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(resource_));
  // @@protoc_insertion_point(copy_constructor:protocol.UnDelegateResourceContract)
}

void UnDelegateResourceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnDelegateResourceContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(resource_));
}

UnDelegateResourceContract::~UnDelegateResourceContract() {
  // @@protoc_insertion_point(destructor:protocol.UnDelegateResourceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnDelegateResourceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnDelegateResourceContract::ArenaDtor(void* object) {
  UnDelegateResourceContract* _this = reinterpret_cast< UnDelegateResourceContract* >(object);
  (void)_this;
}
void UnDelegateResourceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnDelegateResourceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnDelegateResourceContract& UnDelegateResourceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnDelegateResourceContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void UnDelegateResourceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UnDelegateResourceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(resource_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnDelegateResourceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceCode resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::protocol::ResourceCode>(val));
        } else goto handle_unusual;
        continue;
      // int64 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes receiver_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnDelegateResourceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UnDelegateResourceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // .protocol.ResourceCode resource = 2;
  if (this->resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resource(), target);
  }

  // int64 balance = 3;
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_balance(), target);
  }

  // bytes receiver_address = 4;
  if (this->receiver_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_receiver_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UnDelegateResourceContract)
  return target;
}

size_t UnDelegateResourceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UnDelegateResourceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes receiver_address = 4;
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_address());
  }

  // int64 balance = 3;
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  // .protocol.ResourceCode resource = 2;
  if (this->resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnDelegateResourceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.UnDelegateResourceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const UnDelegateResourceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnDelegateResourceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.UnDelegateResourceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.UnDelegateResourceContract)
    MergeFrom(*source);
  }
}

void UnDelegateResourceContract::MergeFrom(const UnDelegateResourceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UnDelegateResourceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.receiver_address().size() > 0) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from.resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
}

void UnDelegateResourceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.UnDelegateResourceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnDelegateResourceContract::CopyFrom(const UnDelegateResourceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UnDelegateResourceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnDelegateResourceContract::IsInitialized() const {
  return true;
}

void UnDelegateResourceContract::InternalSwap(UnDelegateResourceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnDelegateResourceContract, resource_)
      + sizeof(UnDelegateResourceContract::resource_)
      - PROTOBUF_FIELD_OFFSET(UnDelegateResourceContract, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnDelegateResourceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnfreezeAssetContract::_Internal {
 public:
};

UnfreezeAssetContract::UnfreezeAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.UnfreezeAssetContract)
}
UnfreezeAssetContract::UnfreezeAssetContract(const UnfreezeAssetContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.UnfreezeAssetContract)
}

void UnfreezeAssetContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnfreezeAssetContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnfreezeAssetContract::~UnfreezeAssetContract() {
  // @@protoc_insertion_point(destructor:protocol.UnfreezeAssetContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnfreezeAssetContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnfreezeAssetContract::ArenaDtor(void* object) {
  UnfreezeAssetContract* _this = reinterpret_cast< UnfreezeAssetContract* >(object);
  (void)_this;
}
void UnfreezeAssetContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnfreezeAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnfreezeAssetContract& UnfreezeAssetContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnfreezeAssetContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void UnfreezeAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UnfreezeAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnfreezeAssetContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnfreezeAssetContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UnfreezeAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UnfreezeAssetContract)
  return target;
}

size_t UnfreezeAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UnfreezeAssetContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnfreezeAssetContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.UnfreezeAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  const UnfreezeAssetContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnfreezeAssetContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.UnfreezeAssetContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.UnfreezeAssetContract)
    MergeFrom(*source);
  }
}

void UnfreezeAssetContract::MergeFrom(const UnfreezeAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UnfreezeAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
}

void UnfreezeAssetContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.UnfreezeAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnfreezeAssetContract::CopyFrom(const UnfreezeAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UnfreezeAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfreezeAssetContract::IsInitialized() const {
  return true;
}

void UnfreezeAssetContract::InternalSwap(UnfreezeAssetContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnfreezeAssetContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteAssetContract::_Internal {
 public:
};

VoteAssetContract::VoteAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vote_address_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.VoteAssetContract)
}
VoteAssetContract::VoteAssetContract(const VoteAssetContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vote_address_(from.vote_address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  ::memcpy(&support_, &from.support_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&support_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:protocol.VoteAssetContract)
}

void VoteAssetContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteAssetContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&support_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&support_)) + sizeof(count_));
}

VoteAssetContract::~VoteAssetContract() {
  // @@protoc_insertion_point(destructor:protocol.VoteAssetContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteAssetContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteAssetContract::ArenaDtor(void* object) {
  VoteAssetContract* _this = reinterpret_cast< VoteAssetContract* >(object);
  (void)_this;
}
void VoteAssetContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteAssetContract& VoteAssetContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteAssetContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void VoteAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.VoteAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vote_address_.Clear();
  owner_address_.ClearToEmpty();
  ::memset(&support_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&support_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteAssetContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes vote_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vote_address();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool support = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteAssetContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.VoteAssetContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // repeated bytes vote_address = 2;
  for (int i = 0, n = this->_internal_vote_address_size(); i < n; i++) {
    const auto& s = this->_internal_vote_address(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bool support = 3;
  if (this->support() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_support(), target);
  }

  // int32 count = 5;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.VoteAssetContract)
  return target;
}

size_t VoteAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.VoteAssetContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes vote_address = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(vote_address_.size());
  for (int i = 0, n = vote_address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      vote_address_.Get(i));
  }

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bool support = 3;
  if (this->support() != 0) {
    total_size += 1 + 1;
  }

  // int32 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteAssetContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.VoteAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteAssetContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteAssetContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.VoteAssetContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.VoteAssetContract)
    MergeFrom(*source);
  }
}

void VoteAssetContract::MergeFrom(const VoteAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.VoteAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vote_address_.MergeFrom(from.vote_address_);
  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.support() != 0) {
    _internal_set_support(from._internal_support());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void VoteAssetContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.VoteAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteAssetContract::CopyFrom(const VoteAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.VoteAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteAssetContract::IsInitialized() const {
  return true;
}

void VoteAssetContract::InternalSwap(VoteAssetContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vote_address_.InternalSwap(&other->vote_address_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteAssetContract, count_)
      + sizeof(VoteAssetContract::count_)
      - PROTOBUF_FIELD_OFFSET(VoteAssetContract, support_)>(
          reinterpret_cast<char*>(&support_),
          reinterpret_cast<char*>(&other->support_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteAssetContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteWitnessContract_Vote::_Internal {
 public:
};

VoteWitnessContract_Vote::VoteWitnessContract_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.VoteWitnessContract.Vote)
}
VoteWitnessContract_Vote::VoteWitnessContract_Vote(const VoteWitnessContract_Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_address().empty()) {
    vote_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_address(), 
      GetArena());
  }
  vote_count_ = from.vote_count_;
  // @@protoc_insertion_point(copy_constructor:protocol.VoteWitnessContract.Vote)
}

void VoteWitnessContract_Vote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteWitnessContract_Vote_TronInternal_2eproto.base);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_count_ = PROTOBUF_LONGLONG(0);
}

VoteWitnessContract_Vote::~VoteWitnessContract_Vote() {
  // @@protoc_insertion_point(destructor:protocol.VoteWitnessContract.Vote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteWitnessContract_Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vote_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteWitnessContract_Vote::ArenaDtor(void* object) {
  VoteWitnessContract_Vote* _this = reinterpret_cast< VoteWitnessContract_Vote* >(object);
  (void)_this;
}
void VoteWitnessContract_Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteWitnessContract_Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteWitnessContract_Vote& VoteWitnessContract_Vote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteWitnessContract_Vote_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void VoteWitnessContract_Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.VoteWitnessContract.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vote_address_.ClearToEmpty();
  vote_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteWitnessContract_Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes vote_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vote_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vote_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteWitnessContract_Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.VoteWitnessContract.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (this->vote_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_vote_address(), target);
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_vote_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.VoteWitnessContract.Vote)
  return target;
}

size_t VoteWitnessContract_Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.VoteWitnessContract.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (this->vote_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vote_address());
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vote_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteWitnessContract_Vote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.VoteWitnessContract.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteWitnessContract_Vote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteWitnessContract_Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.VoteWitnessContract.Vote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.VoteWitnessContract.Vote)
    MergeFrom(*source);
  }
}

void VoteWitnessContract_Vote::MergeFrom(const VoteWitnessContract_Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.VoteWitnessContract.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vote_address().size() > 0) {
    _internal_set_vote_address(from._internal_vote_address());
  }
  if (from.vote_count() != 0) {
    _internal_set_vote_count(from._internal_vote_count());
  }
}

void VoteWitnessContract_Vote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.VoteWitnessContract.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteWitnessContract_Vote::CopyFrom(const VoteWitnessContract_Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.VoteWitnessContract.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteWitnessContract_Vote::IsInitialized() const {
  return true;
}

void VoteWitnessContract_Vote::InternalSwap(VoteWitnessContract_Vote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vote_address_.Swap(&other->vote_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(vote_count_, other->vote_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteWitnessContract_Vote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteWitnessContract::_Internal {
 public:
};

VoteWitnessContract::VoteWitnessContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.VoteWitnessContract)
}
VoteWitnessContract::VoteWitnessContract(const VoteWitnessContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  support_ = from.support_;
  // @@protoc_insertion_point(copy_constructor:protocol.VoteWitnessContract)
}

void VoteWitnessContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteWitnessContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_ = false;
}

VoteWitnessContract::~VoteWitnessContract() {
  // @@protoc_insertion_point(destructor:protocol.VoteWitnessContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteWitnessContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteWitnessContract::ArenaDtor(void* object) {
  VoteWitnessContract* _this = reinterpret_cast< VoteWitnessContract* >(object);
  (void)_this;
}
void VoteWitnessContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteWitnessContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteWitnessContract& VoteWitnessContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteWitnessContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void VoteWitnessContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.VoteWitnessContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  owner_address_.ClearToEmpty();
  support_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteWitnessContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.VoteWitnessContract.Vote votes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool support = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteWitnessContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.VoteWitnessContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // repeated .protocol.VoteWitnessContract.Vote votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_votes(i), target, stream);
  }

  // bool support = 3;
  if (this->support() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_support(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.VoteWitnessContract)
  return target;
}

size_t VoteWitnessContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.VoteWitnessContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.VoteWitnessContract.Vote votes = 2;
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bool support = 3;
  if (this->support() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteWitnessContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.VoteWitnessContract)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteWitnessContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteWitnessContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.VoteWitnessContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.VoteWitnessContract)
    MergeFrom(*source);
  }
}

void VoteWitnessContract::MergeFrom(const VoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.VoteWitnessContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.support() != 0) {
    _internal_set_support(from._internal_support());
  }
}

void VoteWitnessContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.VoteWitnessContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteWitnessContract::CopyFrom(const VoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.VoteWitnessContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteWitnessContract::IsInitialized() const {
  return true;
}

void VoteWitnessContract::InternalSwap(VoteWitnessContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(support_, other->support_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteWitnessContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawBalanceContract::_Internal {
 public:
};

WithdrawBalanceContract::WithdrawBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.WithdrawBalanceContract)
}
WithdrawBalanceContract::WithdrawBalanceContract(const WithdrawBalanceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.WithdrawBalanceContract)
}

void WithdrawBalanceContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawBalanceContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WithdrawBalanceContract::~WithdrawBalanceContract() {
  // @@protoc_insertion_point(destructor:protocol.WithdrawBalanceContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawBalanceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawBalanceContract::ArenaDtor(void* object) {
  WithdrawBalanceContract* _this = reinterpret_cast< WithdrawBalanceContract* >(object);
  (void)_this;
}
void WithdrawBalanceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawBalanceContract& WithdrawBalanceContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawBalanceContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void WithdrawBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.WithdrawBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawBalanceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawBalanceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.WithdrawBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.WithdrawBalanceContract)
  return target;
}

size_t WithdrawBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.WithdrawBalanceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawBalanceContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.WithdrawBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawBalanceContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawBalanceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.WithdrawBalanceContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.WithdrawBalanceContract)
    MergeFrom(*source);
  }
}

void WithdrawBalanceContract::MergeFrom(const WithdrawBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.WithdrawBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
}

void WithdrawBalanceContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.WithdrawBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawBalanceContract::CopyFrom(const WithdrawBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.WithdrawBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawBalanceContract::IsInitialized() const {
  return true;
}

void WithdrawBalanceContract::InternalSwap(WithdrawBalanceContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawBalanceContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TriggerSmartContract::_Internal {
 public:
};

TriggerSmartContract::TriggerSmartContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.TriggerSmartContract)
}
TriggerSmartContract::TriggerSmartContract(const TriggerSmartContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArena());
  }
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_address().empty()) {
    contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_address(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&call_value_, &from.call_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_id_) -
    reinterpret_cast<char*>(&call_value_)) + sizeof(token_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.TriggerSmartContract)
}

void TriggerSmartContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TriggerSmartContract_TronInternal_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&call_value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&token_id_) -
      reinterpret_cast<char*>(&call_value_)) + sizeof(token_id_));
}

TriggerSmartContract::~TriggerSmartContract() {
  // @@protoc_insertion_point(destructor:protocol.TriggerSmartContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TriggerSmartContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TriggerSmartContract::ArenaDtor(void* object) {
  TriggerSmartContract* _this = reinterpret_cast< TriggerSmartContract* >(object);
  (void)_this;
}
void TriggerSmartContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TriggerSmartContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerSmartContract& TriggerSmartContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TriggerSmartContract_TronInternal_2eproto.base);
  return *internal_default_instance();
}


void TriggerSmartContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TriggerSmartContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  contract_address_.ClearToEmpty();
  data_.ClearToEmpty();
  ::memset(&call_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_id_) -
      reinterpret_cast<char*>(&call_value_)) + sizeof(token_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TriggerSmartContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes contract_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 call_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          call_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 call_token_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          call_token_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 token_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          token_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TriggerSmartContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TriggerSmartContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // bytes contract_address = 2;
  if (this->contract_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contract_address(), target);
  }

  // int64 call_value = 3;
  if (this->call_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_call_value(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // int64 call_token_value = 5;
  if (this->call_token_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_call_token_value(), target);
  }

  // int64 token_id = 6;
  if (this->token_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TriggerSmartContract)
  return target;
}

size_t TriggerSmartContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TriggerSmartContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes contract_address = 2;
  if (this->contract_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_address());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 call_value = 3;
  if (this->call_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_call_value());
  }

  // int64 call_token_value = 5;
  if (this->call_token_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_call_token_value());
  }

  // int64 token_id = 6;
  if (this->token_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerSmartContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TriggerSmartContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerSmartContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TriggerSmartContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TriggerSmartContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TriggerSmartContract)
    MergeFrom(*source);
  }
}

void TriggerSmartContract::MergeFrom(const TriggerSmartContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TriggerSmartContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from.contract_address().size() > 0) {
    _internal_set_contract_address(from._internal_contract_address());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.call_value() != 0) {
    _internal_set_call_value(from._internal_call_value());
  }
  if (from.call_token_value() != 0) {
    _internal_set_call_token_value(from._internal_call_token_value());
  }
  if (from.token_id() != 0) {
    _internal_set_token_id(from._internal_token_id());
  }
}

void TriggerSmartContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TriggerSmartContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerSmartContract::CopyFrom(const TriggerSmartContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TriggerSmartContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerSmartContract::IsInitialized() const {
  return true;
}

void TriggerSmartContract::InternalSwap(TriggerSmartContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_address_.Swap(&other->contract_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TriggerSmartContract, token_id_)
      + sizeof(TriggerSmartContract::token_id_)
      - PROTOBUF_FIELD_OFFSET(TriggerSmartContract, call_value_)>(
          reinterpret_cast<char*>(&call_value_),
          reinterpret_cast<char*>(&other->call_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TriggerSmartContract::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::Transaction_Contract* Arena::CreateMaybeMessage< ::protocol::Transaction_Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Transaction_Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction_raw* Arena::CreateMaybeMessage< ::protocol::Transaction_raw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Transaction_raw >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction* Arena::CreateMaybeMessage< ::protocol::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockHeader_raw* Arena::CreateMaybeMessage< ::protocol::BlockHeader_raw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockHeader_raw >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockHeader* Arena::CreateMaybeMessage< ::protocol::BlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransferContract* Arena::CreateMaybeMessage< ::protocol::TransferContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransferContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransferAssetContract* Arena::CreateMaybeMessage< ::protocol::TransferAssetContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransferAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::FreezeBalanceContract* Arena::CreateMaybeMessage< ::protocol::FreezeBalanceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::FreezeBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::FreezeBalanceV2Contract* Arena::CreateMaybeMessage< ::protocol::FreezeBalanceV2Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::FreezeBalanceV2Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::UnfreezeBalanceContract* Arena::CreateMaybeMessage< ::protocol::UnfreezeBalanceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::UnfreezeBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::UnfreezeBalanceV2Contract* Arena::CreateMaybeMessage< ::protocol::UnfreezeBalanceV2Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::UnfreezeBalanceV2Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::WithdrawExpireUnfreezeContract* Arena::CreateMaybeMessage< ::protocol::WithdrawExpireUnfreezeContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::WithdrawExpireUnfreezeContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DelegateResourceContract* Arena::CreateMaybeMessage< ::protocol::DelegateResourceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DelegateResourceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::UnDelegateResourceContract* Arena::CreateMaybeMessage< ::protocol::UnDelegateResourceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::UnDelegateResourceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::UnfreezeAssetContract* Arena::CreateMaybeMessage< ::protocol::UnfreezeAssetContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::UnfreezeAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::VoteAssetContract* Arena::CreateMaybeMessage< ::protocol::VoteAssetContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::VoteAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::VoteWitnessContract_Vote* Arena::CreateMaybeMessage< ::protocol::VoteWitnessContract_Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::VoteWitnessContract_Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::VoteWitnessContract* Arena::CreateMaybeMessage< ::protocol::VoteWitnessContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::VoteWitnessContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::WithdrawBalanceContract* Arena::CreateMaybeMessage< ::protocol::WithdrawBalanceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::WithdrawBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TriggerSmartContract* Arena::CreateMaybeMessage< ::protocol::TriggerSmartContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TriggerSmartContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
