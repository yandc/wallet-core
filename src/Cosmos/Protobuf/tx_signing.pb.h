// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tx_signing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tx_5fsigning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tx_5fsigning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "crypto_multisig.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tx_5fsigning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tx_5fsigning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tx_5fsigning_2eproto;
namespace cosmos {
namespace signing {
namespace v1beta1 {
class SignatureDescriptor;
class SignatureDescriptorDefaultTypeInternal;
extern SignatureDescriptorDefaultTypeInternal _SignatureDescriptor_default_instance_;
class SignatureDescriptor_Data;
class SignatureDescriptor_DataDefaultTypeInternal;
extern SignatureDescriptor_DataDefaultTypeInternal _SignatureDescriptor_Data_default_instance_;
class SignatureDescriptor_Data_Multi;
class SignatureDescriptor_Data_MultiDefaultTypeInternal;
extern SignatureDescriptor_Data_MultiDefaultTypeInternal _SignatureDescriptor_Data_Multi_default_instance_;
class SignatureDescriptor_Data_Single;
class SignatureDescriptor_Data_SingleDefaultTypeInternal;
extern SignatureDescriptor_Data_SingleDefaultTypeInternal _SignatureDescriptor_Data_Single_default_instance_;
class SignatureDescriptors;
class SignatureDescriptorsDefaultTypeInternal;
extern SignatureDescriptorsDefaultTypeInternal _SignatureDescriptors_default_instance_;
}  // namespace v1beta1
}  // namespace signing
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> ::cosmos::signing::v1beta1::SignatureDescriptor* Arena::CreateMaybeMessage<::cosmos::signing::v1beta1::SignatureDescriptor>(Arena*);
template<> ::cosmos::signing::v1beta1::SignatureDescriptor_Data* Arena::CreateMaybeMessage<::cosmos::signing::v1beta1::SignatureDescriptor_Data>(Arena*);
template<> ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* Arena::CreateMaybeMessage<::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi>(Arena*);
template<> ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* Arena::CreateMaybeMessage<::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single>(Arena*);
template<> ::cosmos::signing::v1beta1::SignatureDescriptors* Arena::CreateMaybeMessage<::cosmos::signing::v1beta1::SignatureDescriptors>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cosmos {
namespace signing {
namespace v1beta1 {

enum SignMode : int {
  SIGN_MODE_UNSPECIFIED = 0,
  SIGN_MODE_DIRECT = 1,
  SIGN_MODE_TEXTUAL = 2,
  SIGN_MODE_DIRECT_AUX = 3,
  SIGN_MODE_AMINO_AUX = 4,
  SIGN_MODE_LEGACY_AMINO_JSON = 127,
  SignMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SignMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SignMode_IsValid(int value);
constexpr SignMode SignMode_MIN = SIGN_MODE_UNSPECIFIED;
constexpr SignMode SignMode_MAX = SIGN_MODE_LEGACY_AMINO_JSON;
constexpr int SignMode_ARRAYSIZE = SignMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignMode_descriptor();
template<typename T>
inline const std::string& SignMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SignMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SignMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SignMode_descriptor(), enum_t_value);
}
inline bool SignMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SignMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignMode>(
    SignMode_descriptor(), name, value);
}
// ===================================================================

class SignatureDescriptors PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.signing.v1beta1.SignatureDescriptors) */ {
 public:
  inline SignatureDescriptors() : SignatureDescriptors(nullptr) {}
  virtual ~SignatureDescriptors();

  SignatureDescriptors(const SignatureDescriptors& from);
  SignatureDescriptors(SignatureDescriptors&& from) noexcept
    : SignatureDescriptors() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptors& operator=(const SignatureDescriptors& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptors& operator=(SignatureDescriptors&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureDescriptors& default_instance();

  static inline const SignatureDescriptors* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptors*>(
               &_SignatureDescriptors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignatureDescriptors& a, SignatureDescriptors& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptors* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureDescriptors* New() const final {
    return CreateMaybeMessage<SignatureDescriptors>(nullptr);
  }

  SignatureDescriptors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureDescriptors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureDescriptors& from);
  void MergeFrom(const SignatureDescriptors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.signing.v1beta1.SignatureDescriptors";
  }
  protected:
  explicit SignatureDescriptors(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tx_5fsigning_2eproto);
    return ::descriptor_table_tx_5fsigning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 1,
  };
  // repeated .cosmos.signing.v1beta1.SignatureDescriptor signatures = 1;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::cosmos::signing::v1beta1::SignatureDescriptor* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor >*
      mutable_signatures();
  private:
  const ::cosmos::signing::v1beta1::SignatureDescriptor& _internal_signatures(int index) const;
  ::cosmos::signing::v1beta1::SignatureDescriptor* _internal_add_signatures();
  public:
  const ::cosmos::signing::v1beta1::SignatureDescriptor& signatures(int index) const;
  ::cosmos::signing::v1beta1::SignatureDescriptor* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor >&
      signatures() const;

  // @@protoc_insertion_point(class_scope:cosmos.signing.v1beta1.SignatureDescriptors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor > signatures_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tx_5fsigning_2eproto;
};
// -------------------------------------------------------------------

class SignatureDescriptor_Data_Single PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single) */ {
 public:
  inline SignatureDescriptor_Data_Single() : SignatureDescriptor_Data_Single(nullptr) {}
  virtual ~SignatureDescriptor_Data_Single();

  SignatureDescriptor_Data_Single(const SignatureDescriptor_Data_Single& from);
  SignatureDescriptor_Data_Single(SignatureDescriptor_Data_Single&& from) noexcept
    : SignatureDescriptor_Data_Single() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptor_Data_Single& operator=(const SignatureDescriptor_Data_Single& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor_Data_Single& operator=(SignatureDescriptor_Data_Single&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureDescriptor_Data_Single& default_instance();

  static inline const SignatureDescriptor_Data_Single* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor_Data_Single*>(
               &_SignatureDescriptor_Data_Single_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignatureDescriptor_Data_Single& a, SignatureDescriptor_Data_Single& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptor_Data_Single* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor_Data_Single* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureDescriptor_Data_Single* New() const final {
    return CreateMaybeMessage<SignatureDescriptor_Data_Single>(nullptr);
  }

  SignatureDescriptor_Data_Single* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureDescriptor_Data_Single>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureDescriptor_Data_Single& from);
  void MergeFrom(const SignatureDescriptor_Data_Single& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptor_Data_Single* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.signing.v1beta1.SignatureDescriptor.Data.Single";
  }
  protected:
  explicit SignatureDescriptor_Data_Single(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tx_5fsigning_2eproto);
    return ::descriptor_table_tx_5fsigning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .cosmos.signing.v1beta1.SignMode mode = 1;
  void clear_mode();
  ::cosmos::signing::v1beta1::SignMode mode() const;
  void set_mode(::cosmos::signing::v1beta1::SignMode value);
  private:
  ::cosmos::signing::v1beta1::SignMode _internal_mode() const;
  void _internal_set_mode(::cosmos::signing::v1beta1::SignMode value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tx_5fsigning_2eproto;
};
// -------------------------------------------------------------------

class SignatureDescriptor_Data_Multi PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi) */ {
 public:
  inline SignatureDescriptor_Data_Multi() : SignatureDescriptor_Data_Multi(nullptr) {}
  virtual ~SignatureDescriptor_Data_Multi();

  SignatureDescriptor_Data_Multi(const SignatureDescriptor_Data_Multi& from);
  SignatureDescriptor_Data_Multi(SignatureDescriptor_Data_Multi&& from) noexcept
    : SignatureDescriptor_Data_Multi() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptor_Data_Multi& operator=(const SignatureDescriptor_Data_Multi& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor_Data_Multi& operator=(SignatureDescriptor_Data_Multi&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureDescriptor_Data_Multi& default_instance();

  static inline const SignatureDescriptor_Data_Multi* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor_Data_Multi*>(
               &_SignatureDescriptor_Data_Multi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SignatureDescriptor_Data_Multi& a, SignatureDescriptor_Data_Multi& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptor_Data_Multi* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor_Data_Multi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureDescriptor_Data_Multi* New() const final {
    return CreateMaybeMessage<SignatureDescriptor_Data_Multi>(nullptr);
  }

  SignatureDescriptor_Data_Multi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureDescriptor_Data_Multi>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureDescriptor_Data_Multi& from);
  void MergeFrom(const SignatureDescriptor_Data_Multi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptor_Data_Multi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi";
  }
  protected:
  explicit SignatureDescriptor_Data_Multi(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tx_5fsigning_2eproto);
    return ::descriptor_table_tx_5fsigning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 2,
    kBitarrayFieldNumber = 1,
  };
  // repeated .cosmos.signing.v1beta1.SignatureDescriptor.Data signatures = 2;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor_Data >*
      mutable_signatures();
  private:
  const ::cosmos::signing::v1beta1::SignatureDescriptor_Data& _internal_signatures(int index) const;
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* _internal_add_signatures();
  public:
  const ::cosmos::signing::v1beta1::SignatureDescriptor_Data& signatures(int index) const;
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor_Data >&
      signatures() const;

  // .cosmos.multisig.v1beta1.CompactBitArray bitarray = 1;
  bool has_bitarray() const;
  private:
  bool _internal_has_bitarray() const;
  public:
  void clear_bitarray();
  const ::cosmos::multisig::v1beta1::CompactBitArray& bitarray() const;
  ::cosmos::multisig::v1beta1::CompactBitArray* release_bitarray();
  ::cosmos::multisig::v1beta1::CompactBitArray* mutable_bitarray();
  void set_allocated_bitarray(::cosmos::multisig::v1beta1::CompactBitArray* bitarray);
  private:
  const ::cosmos::multisig::v1beta1::CompactBitArray& _internal_bitarray() const;
  ::cosmos::multisig::v1beta1::CompactBitArray* _internal_mutable_bitarray();
  public:
  void unsafe_arena_set_allocated_bitarray(
      ::cosmos::multisig::v1beta1::CompactBitArray* bitarray);
  ::cosmos::multisig::v1beta1::CompactBitArray* unsafe_arena_release_bitarray();

  // @@protoc_insertion_point(class_scope:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor_Data > signatures_;
  ::cosmos::multisig::v1beta1::CompactBitArray* bitarray_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tx_5fsigning_2eproto;
};
// -------------------------------------------------------------------

class SignatureDescriptor_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.signing.v1beta1.SignatureDescriptor.Data) */ {
 public:
  inline SignatureDescriptor_Data() : SignatureDescriptor_Data(nullptr) {}
  virtual ~SignatureDescriptor_Data();

  SignatureDescriptor_Data(const SignatureDescriptor_Data& from);
  SignatureDescriptor_Data(SignatureDescriptor_Data&& from) noexcept
    : SignatureDescriptor_Data() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptor_Data& operator=(const SignatureDescriptor_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor_Data& operator=(SignatureDescriptor_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureDescriptor_Data& default_instance();

  enum SumCase {
    kSingle = 1,
    kMulti = 2,
    SUM_NOT_SET = 0,
  };

  static inline const SignatureDescriptor_Data* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor_Data*>(
               &_SignatureDescriptor_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SignatureDescriptor_Data& a, SignatureDescriptor_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptor_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureDescriptor_Data* New() const final {
    return CreateMaybeMessage<SignatureDescriptor_Data>(nullptr);
  }

  SignatureDescriptor_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureDescriptor_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureDescriptor_Data& from);
  void MergeFrom(const SignatureDescriptor_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptor_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.signing.v1beta1.SignatureDescriptor.Data";
  }
  protected:
  explicit SignatureDescriptor_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tx_5fsigning_2eproto);
    return ::descriptor_table_tx_5fsigning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SignatureDescriptor_Data_Single Single;
  typedef SignatureDescriptor_Data_Multi Multi;

  // accessors -------------------------------------------------------

  enum : int {
    kSingleFieldNumber = 1,
    kMultiFieldNumber = 2,
  };
  // .cosmos.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;
  bool has_single() const;
  private:
  bool _internal_has_single() const;
  public:
  void clear_single();
  const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single& single() const;
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* release_single();
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* mutable_single();
  void set_allocated_single(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* single);
  private:
  const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single& _internal_single() const;
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* _internal_mutable_single();
  public:
  void unsafe_arena_set_allocated_single(
      ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* single);
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* unsafe_arena_release_single();

  // .cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;
  bool has_multi() const;
  private:
  bool _internal_has_multi() const;
  public:
  void clear_multi();
  const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi& multi() const;
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* release_multi();
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* mutable_multi();
  void set_allocated_multi(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* multi);
  private:
  const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi& _internal_multi() const;
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* _internal_mutable_multi();
  public:
  void unsafe_arena_set_allocated_multi(
      ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* multi);
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* unsafe_arena_release_multi();

  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.signing.v1beta1.SignatureDescriptor.Data)
 private:
  class _Internal;
  void set_has_single();
  void set_has_multi();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SumUnion {
    SumUnion() {}
    ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* single_;
    ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* multi_;
  } sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tx_5fsigning_2eproto;
};
// -------------------------------------------------------------------

class SignatureDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.signing.v1beta1.SignatureDescriptor) */ {
 public:
  inline SignatureDescriptor() : SignatureDescriptor(nullptr) {}
  virtual ~SignatureDescriptor();

  SignatureDescriptor(const SignatureDescriptor& from);
  SignatureDescriptor(SignatureDescriptor&& from) noexcept
    : SignatureDescriptor() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptor& operator=(const SignatureDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor& operator=(SignatureDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureDescriptor& default_instance();

  static inline const SignatureDescriptor* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor*>(
               &_SignatureDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SignatureDescriptor& a, SignatureDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureDescriptor* New() const final {
    return CreateMaybeMessage<SignatureDescriptor>(nullptr);
  }

  SignatureDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureDescriptor& from);
  void MergeFrom(const SignatureDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.signing.v1beta1.SignatureDescriptor";
  }
  protected:
  explicit SignatureDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tx_5fsigning_2eproto);
    return ::descriptor_table_tx_5fsigning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SignatureDescriptor_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kDataFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // .google.protobuf.Any public_key = 1;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const PROTOBUF_NAMESPACE_ID::Any& public_key() const;
  PROTOBUF_NAMESPACE_ID::Any* release_public_key();
  PROTOBUF_NAMESPACE_ID::Any* mutable_public_key();
  void set_allocated_public_key(PROTOBUF_NAMESPACE_ID::Any* public_key);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_public_key() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      PROTOBUF_NAMESPACE_ID::Any* public_key);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_public_key();

  // .cosmos.signing.v1beta1.SignatureDescriptor.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::cosmos::signing::v1beta1::SignatureDescriptor_Data& data() const;
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* release_data();
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* mutable_data();
  void set_allocated_data(::cosmos::signing::v1beta1::SignatureDescriptor_Data* data);
  private:
  const ::cosmos::signing::v1beta1::SignatureDescriptor_Data& _internal_data() const;
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::cosmos::signing::v1beta1::SignatureDescriptor_Data* data);
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* unsafe_arena_release_data();

  // uint64 sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.signing.v1beta1.SignatureDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* public_key_;
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tx_5fsigning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignatureDescriptors

// repeated .cosmos.signing.v1beta1.SignatureDescriptor signatures = 1;
inline int SignatureDescriptors::_internal_signatures_size() const {
  return signatures_.size();
}
inline int SignatureDescriptors::signatures_size() const {
  return _internal_signatures_size();
}
inline void SignatureDescriptors::clear_signatures() {
  signatures_.Clear();
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor* SignatureDescriptors::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.signing.v1beta1.SignatureDescriptors.signatures)
  return signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor >*
SignatureDescriptors::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.signing.v1beta1.SignatureDescriptors.signatures)
  return &signatures_;
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor& SignatureDescriptors::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor& SignatureDescriptors::signatures(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptors.signatures)
  return _internal_signatures(index);
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor* SignatureDescriptors::_internal_add_signatures() {
  return signatures_.Add();
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor* SignatureDescriptors::add_signatures() {
  // @@protoc_insertion_point(field_add:cosmos.signing.v1beta1.SignatureDescriptors.signatures)
  return _internal_add_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor >&
SignatureDescriptors::signatures() const {
  // @@protoc_insertion_point(field_list:cosmos.signing.v1beta1.SignatureDescriptors.signatures)
  return signatures_;
}

// -------------------------------------------------------------------

// SignatureDescriptor_Data_Single

// .cosmos.signing.v1beta1.SignMode mode = 1;
inline void SignatureDescriptor_Data_Single::clear_mode() {
  mode_ = 0;
}
inline ::cosmos::signing::v1beta1::SignMode SignatureDescriptor_Data_Single::_internal_mode() const {
  return static_cast< ::cosmos::signing::v1beta1::SignMode >(mode_);
}
inline ::cosmos::signing::v1beta1::SignMode SignatureDescriptor_Data_Single::mode() const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.mode)
  return _internal_mode();
}
inline void SignatureDescriptor_Data_Single::_internal_set_mode(::cosmos::signing::v1beta1::SignMode value) {
  
  mode_ = value;
}
inline void SignatureDescriptor_Data_Single::set_mode(::cosmos::signing::v1beta1::SignMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.mode)
}

// bytes signature = 2;
inline void SignatureDescriptor_Data_Single::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SignatureDescriptor_Data_Single::signature() const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
  return _internal_signature();
}
inline void SignatureDescriptor_Data_Single::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
}
inline std::string* SignatureDescriptor_Data_Single::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
  return _internal_mutable_signature();
}
inline const std::string& SignatureDescriptor_Data_Single::_internal_signature() const {
  return signature_.Get();
}
inline void SignatureDescriptor_Data_Single::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignatureDescriptor_Data_Single::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
}
inline void SignatureDescriptor_Data_Single::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
}
inline void SignatureDescriptor_Data_Single::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
}
inline std::string* SignatureDescriptor_Data_Single::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignatureDescriptor_Data_Single::release_signature() {
  // @@protoc_insertion_point(field_release:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignatureDescriptor_Data_Single::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
}

// -------------------------------------------------------------------

// SignatureDescriptor_Data_Multi

// .cosmos.multisig.v1beta1.CompactBitArray bitarray = 1;
inline bool SignatureDescriptor_Data_Multi::_internal_has_bitarray() const {
  return this != internal_default_instance() && bitarray_ != nullptr;
}
inline bool SignatureDescriptor_Data_Multi::has_bitarray() const {
  return _internal_has_bitarray();
}
inline const ::cosmos::multisig::v1beta1::CompactBitArray& SignatureDescriptor_Data_Multi::_internal_bitarray() const {
  const ::cosmos::multisig::v1beta1::CompactBitArray* p = bitarray_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::multisig::v1beta1::CompactBitArray&>(
      ::cosmos::multisig::v1beta1::_CompactBitArray_default_instance_);
}
inline const ::cosmos::multisig::v1beta1::CompactBitArray& SignatureDescriptor_Data_Multi::bitarray() const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
  return _internal_bitarray();
}
inline void SignatureDescriptor_Data_Multi::unsafe_arena_set_allocated_bitarray(
    ::cosmos::multisig::v1beta1::CompactBitArray* bitarray) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bitarray_);
  }
  bitarray_ = bitarray;
  if (bitarray) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
}
inline ::cosmos::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::release_bitarray() {
  
  ::cosmos::multisig::v1beta1::CompactBitArray* temp = bitarray_;
  bitarray_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cosmos::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::unsafe_arena_release_bitarray() {
  // @@protoc_insertion_point(field_release:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
  
  ::cosmos::multisig::v1beta1::CompactBitArray* temp = bitarray_;
  bitarray_ = nullptr;
  return temp;
}
inline ::cosmos::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::_internal_mutable_bitarray() {
  
  if (bitarray_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::multisig::v1beta1::CompactBitArray>(GetArena());
    bitarray_ = p;
  }
  return bitarray_;
}
inline ::cosmos::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::mutable_bitarray() {
  // @@protoc_insertion_point(field_mutable:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
  return _internal_mutable_bitarray();
}
inline void SignatureDescriptor_Data_Multi::set_allocated_bitarray(::cosmos::multisig::v1beta1::CompactBitArray* bitarray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bitarray_);
  }
  if (bitarray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bitarray)->GetArena();
    if (message_arena != submessage_arena) {
      bitarray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitarray, submessage_arena);
    }
    
  } else {
    
  }
  bitarray_ = bitarray;
  // @@protoc_insertion_point(field_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
}

// repeated .cosmos.signing.v1beta1.SignatureDescriptor.Data signatures = 2;
inline int SignatureDescriptor_Data_Multi::_internal_signatures_size() const {
  return signatures_.size();
}
inline int SignatureDescriptor_Data_Multi::signatures_size() const {
  return _internal_signatures_size();
}
inline void SignatureDescriptor_Data_Multi::clear_signatures() {
  signatures_.Clear();
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor_Data_Multi::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor_Data >*
SignatureDescriptor_Data_Multi::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return &signatures_;
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor_Data_Multi::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor_Data_Multi::signatures(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _internal_signatures(index);
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor_Data_Multi::_internal_add_signatures() {
  return signatures_.Add();
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor_Data_Multi::add_signatures() {
  // @@protoc_insertion_point(field_add:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _internal_add_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::signing::v1beta1::SignatureDescriptor_Data >&
SignatureDescriptor_Data_Multi::signatures() const {
  // @@protoc_insertion_point(field_list:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return signatures_;
}

// -------------------------------------------------------------------

// SignatureDescriptor_Data

// .cosmos.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;
inline bool SignatureDescriptor_Data::_internal_has_single() const {
  return sum_case() == kSingle;
}
inline bool SignatureDescriptor_Data::has_single() const {
  return _internal_has_single();
}
inline void SignatureDescriptor_Data::set_has_single() {
  _oneof_case_[0] = kSingle;
}
inline void SignatureDescriptor_Data::clear_single() {
  if (_internal_has_single()) {
    if (GetArena() == nullptr) {
      delete sum_.single_;
    }
    clear_has_sum();
  }
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::release_single() {
  // @@protoc_insertion_point(field_release:cosmos.signing.v1beta1.SignatureDescriptor.Data.single)
  if (_internal_has_single()) {
    clear_has_sum();
      ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* temp = sum_.single_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single& SignatureDescriptor_Data::_internal_single() const {
  return _internal_has_single()
      ? *sum_.single_
      : reinterpret_cast< ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single&>(::cosmos::signing::v1beta1::_SignatureDescriptor_Data_Single_default_instance_);
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single& SignatureDescriptor_Data::single() const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptor.Data.single)
  return _internal_single();
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::unsafe_arena_release_single() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.signing.v1beta1.SignatureDescriptor.Data.single)
  if (_internal_has_single()) {
    clear_has_sum();
    ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* temp = sum_.single_;
    sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignatureDescriptor_Data::unsafe_arena_set_allocated_single(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* single) {
  clear_sum();
  if (single) {
    set_has_single();
    sum_.single_ = single;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.Data.single)
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::_internal_mutable_single() {
  if (!_internal_has_single()) {
    clear_sum();
    set_has_single();
    sum_.single_ = CreateMaybeMessage< ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single >(GetArena());
  }
  return sum_.single_;
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::mutable_single() {
  // @@protoc_insertion_point(field_mutable:cosmos.signing.v1beta1.SignatureDescriptor.Data.single)
  return _internal_mutable_single();
}

// .cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;
inline bool SignatureDescriptor_Data::_internal_has_multi() const {
  return sum_case() == kMulti;
}
inline bool SignatureDescriptor_Data::has_multi() const {
  return _internal_has_multi();
}
inline void SignatureDescriptor_Data::set_has_multi() {
  _oneof_case_[0] = kMulti;
}
inline void SignatureDescriptor_Data::clear_multi() {
  if (_internal_has_multi()) {
    if (GetArena() == nullptr) {
      delete sum_.multi_;
    }
    clear_has_sum();
  }
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::release_multi() {
  // @@protoc_insertion_point(field_release:cosmos.signing.v1beta1.SignatureDescriptor.Data.multi)
  if (_internal_has_multi()) {
    clear_has_sum();
      ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* temp = sum_.multi_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi& SignatureDescriptor_Data::_internal_multi() const {
  return _internal_has_multi()
      ? *sum_.multi_
      : reinterpret_cast< ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi&>(::cosmos::signing::v1beta1::_SignatureDescriptor_Data_Multi_default_instance_);
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi& SignatureDescriptor_Data::multi() const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptor.Data.multi)
  return _internal_multi();
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::unsafe_arena_release_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.signing.v1beta1.SignatureDescriptor.Data.multi)
  if (_internal_has_multi()) {
    clear_has_sum();
    ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* temp = sum_.multi_;
    sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignatureDescriptor_Data::unsafe_arena_set_allocated_multi(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* multi) {
  clear_sum();
  if (multi) {
    set_has_multi();
    sum_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.Data.multi)
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::_internal_mutable_multi() {
  if (!_internal_has_multi()) {
    clear_sum();
    set_has_multi();
    sum_.multi_ = CreateMaybeMessage< ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi >(GetArena());
  }
  return sum_.multi_;
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::mutable_multi() {
  // @@protoc_insertion_point(field_mutable:cosmos.signing.v1beta1.SignatureDescriptor.Data.multi)
  return _internal_mutable_multi();
}

inline bool SignatureDescriptor_Data::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void SignatureDescriptor_Data::clear_has_sum() {
  _oneof_case_[0] = SUM_NOT_SET;
}
inline SignatureDescriptor_Data::SumCase SignatureDescriptor_Data::sum_case() const {
  return SignatureDescriptor_Data::SumCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SignatureDescriptor

// .google.protobuf.Any public_key = 1;
inline bool SignatureDescriptor::_internal_has_public_key() const {
  return this != internal_default_instance() && public_key_ != nullptr;
}
inline bool SignatureDescriptor::has_public_key() const {
  return _internal_has_public_key();
}
inline const PROTOBUF_NAMESPACE_ID::Any& SignatureDescriptor::_internal_public_key() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = public_key_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& SignatureDescriptor::public_key() const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptor.public_key)
  return _internal_public_key();
}
inline void SignatureDescriptor::unsafe_arena_set_allocated_public_key(
    PROTOBUF_NAMESPACE_ID::Any* public_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  public_key_ = public_key;
  if (public_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.public_key)
}
inline PROTOBUF_NAMESPACE_ID::Any* SignatureDescriptor::release_public_key() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = public_key_;
  public_key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* SignatureDescriptor::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:cosmos.signing.v1beta1.SignatureDescriptor.public_key)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* SignatureDescriptor::_internal_mutable_public_key() {
  
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    public_key_ = p;
  }
  return public_key_;
}
inline PROTOBUF_NAMESPACE_ID::Any* SignatureDescriptor::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:cosmos.signing.v1beta1.SignatureDescriptor.public_key)
  return _internal_mutable_public_key();
}
inline void SignatureDescriptor::set_allocated_public_key(PROTOBUF_NAMESPACE_ID::Any* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key)->GetArena();
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    
  } else {
    
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.public_key)
}

// .cosmos.signing.v1beta1.SignatureDescriptor.Data data = 2;
inline bool SignatureDescriptor::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SignatureDescriptor::has_data() const {
  return _internal_has_data();
}
inline void SignatureDescriptor::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor::_internal_data() const {
  const ::cosmos::signing::v1beta1::SignatureDescriptor_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::signing::v1beta1::SignatureDescriptor_Data&>(
      ::cosmos::signing::v1beta1::_SignatureDescriptor_Data_default_instance_);
}
inline const ::cosmos::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor::data() const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptor.data)
  return _internal_data();
}
inline void SignatureDescriptor::unsafe_arena_set_allocated_data(
    ::cosmos::signing::v1beta1::SignatureDescriptor_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.data)
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::release_data() {
  
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:cosmos.signing.v1beta1.SignatureDescriptor.data)
  
  ::cosmos::signing::v1beta1::SignatureDescriptor_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::signing::v1beta1::SignatureDescriptor_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::cosmos::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::mutable_data() {
  // @@protoc_insertion_point(field_mutable:cosmos.signing.v1beta1.SignatureDescriptor.data)
  return _internal_mutable_data();
}
inline void SignatureDescriptor::set_allocated_data(::cosmos::signing::v1beta1::SignatureDescriptor_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.data)
}

// uint64 sequence = 3;
inline void SignatureDescriptor::clear_sequence() {
  sequence_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignatureDescriptor::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignatureDescriptor::sequence() const {
  // @@protoc_insertion_point(field_get:cosmos.signing.v1beta1.SignatureDescriptor.sequence)
  return _internal_sequence();
}
inline void SignatureDescriptor::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_ = value;
}
inline void SignatureDescriptor::set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cosmos.signing.v1beta1.SignatureDescriptor.sequence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace signing
}  // namespace cosmos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cosmos::signing::v1beta1::SignMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmos::signing::v1beta1::SignMode>() {
  return ::cosmos::signing::v1beta1::SignMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tx_5fsigning_2eproto
