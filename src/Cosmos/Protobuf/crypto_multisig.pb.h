// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_multisig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fmultisig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fmultisig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fmultisig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fmultisig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5fmultisig_2eproto;
namespace cosmos {
namespace multisig {
namespace v1beta1 {
class CompactBitArray;
class CompactBitArrayDefaultTypeInternal;
extern CompactBitArrayDefaultTypeInternal _CompactBitArray_default_instance_;
}  // namespace v1beta1
}  // namespace multisig
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> ::cosmos::multisig::v1beta1::CompactBitArray* Arena::CreateMaybeMessage<::cosmos::multisig::v1beta1::CompactBitArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cosmos {
namespace multisig {
namespace v1beta1 {

// ===================================================================

class CompactBitArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.multisig.v1beta1.CompactBitArray) */ {
 public:
  inline CompactBitArray() : CompactBitArray(nullptr) {}
  virtual ~CompactBitArray();

  CompactBitArray(const CompactBitArray& from);
  CompactBitArray(CompactBitArray&& from) noexcept
    : CompactBitArray() {
    *this = ::std::move(from);
  }

  inline CompactBitArray& operator=(const CompactBitArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactBitArray& operator=(CompactBitArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompactBitArray& default_instance();

  static inline const CompactBitArray* internal_default_instance() {
    return reinterpret_cast<const CompactBitArray*>(
               &_CompactBitArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CompactBitArray& a, CompactBitArray& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactBitArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactBitArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompactBitArray* New() const final {
    return CreateMaybeMessage<CompactBitArray>(nullptr);
  }

  CompactBitArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompactBitArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompactBitArray& from);
  void MergeFrom(const CompactBitArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactBitArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.multisig.v1beta1.CompactBitArray";
  }
  protected:
  explicit CompactBitArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_crypto_5fmultisig_2eproto);
    return ::descriptor_table_crypto_5fmultisig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 2,
    kExtraBitsStoredFieldNumber = 1,
  };
  // bytes elems = 2;
  void clear_elems();
  const std::string& elems() const;
  void set_elems(const std::string& value);
  void set_elems(std::string&& value);
  void set_elems(const char* value);
  void set_elems(const void* value, size_t size);
  std::string* mutable_elems();
  std::string* release_elems();
  void set_allocated_elems(std::string* elems);
  private:
  const std::string& _internal_elems() const;
  void _internal_set_elems(const std::string& value);
  std::string* _internal_mutable_elems();
  public:

  // uint32 extra_bits_stored = 1;
  void clear_extra_bits_stored();
  ::PROTOBUF_NAMESPACE_ID::uint32 extra_bits_stored() const;
  void set_extra_bits_stored(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extra_bits_stored() const;
  void _internal_set_extra_bits_stored(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.multisig.v1beta1.CompactBitArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr elems_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extra_bits_stored_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_crypto_5fmultisig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompactBitArray

// uint32 extra_bits_stored = 1;
inline void CompactBitArray::clear_extra_bits_stored() {
  extra_bits_stored_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompactBitArray::_internal_extra_bits_stored() const {
  return extra_bits_stored_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompactBitArray::extra_bits_stored() const {
  // @@protoc_insertion_point(field_get:cosmos.multisig.v1beta1.CompactBitArray.extra_bits_stored)
  return _internal_extra_bits_stored();
}
inline void CompactBitArray::_internal_set_extra_bits_stored(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  extra_bits_stored_ = value;
}
inline void CompactBitArray::set_extra_bits_stored(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extra_bits_stored(value);
  // @@protoc_insertion_point(field_set:cosmos.multisig.v1beta1.CompactBitArray.extra_bits_stored)
}

// bytes elems = 2;
inline void CompactBitArray::clear_elems() {
  elems_.ClearToEmpty();
}
inline const std::string& CompactBitArray::elems() const {
  // @@protoc_insertion_point(field_get:cosmos.multisig.v1beta1.CompactBitArray.elems)
  return _internal_elems();
}
inline void CompactBitArray::set_elems(const std::string& value) {
  _internal_set_elems(value);
  // @@protoc_insertion_point(field_set:cosmos.multisig.v1beta1.CompactBitArray.elems)
}
inline std::string* CompactBitArray::mutable_elems() {
  // @@protoc_insertion_point(field_mutable:cosmos.multisig.v1beta1.CompactBitArray.elems)
  return _internal_mutable_elems();
}
inline const std::string& CompactBitArray::_internal_elems() const {
  return elems_.Get();
}
inline void CompactBitArray::_internal_set_elems(const std::string& value) {
  
  elems_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompactBitArray::set_elems(std::string&& value) {
  
  elems_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cosmos.multisig.v1beta1.CompactBitArray.elems)
}
inline void CompactBitArray::set_elems(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  elems_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:cosmos.multisig.v1beta1.CompactBitArray.elems)
}
inline void CompactBitArray::set_elems(const void* value,
    size_t size) {
  
  elems_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cosmos.multisig.v1beta1.CompactBitArray.elems)
}
inline std::string* CompactBitArray::_internal_mutable_elems() {
  
  return elems_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompactBitArray::release_elems() {
  // @@protoc_insertion_point(field_release:cosmos.multisig.v1beta1.CompactBitArray.elems)
  return elems_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompactBitArray::set_allocated_elems(std::string* elems) {
  if (elems != nullptr) {
    
  } else {
    
  }
  elems_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), elems,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cosmos.multisig.v1beta1.CompactBitArray.elems)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace multisig
}  // namespace cosmos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fmultisig_2eproto
