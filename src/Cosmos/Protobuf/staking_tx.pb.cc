// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: staking_tx.proto

#include "staking_tx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_coin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coin_coin_2eproto;
namespace cosmos {
namespace staking {
namespace v1beta1 {
class MsgDelegateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDelegate> _instance;
} _MsgDelegate_default_instance_;
class MsgUndelegateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgUndelegate> _instance;
} _MsgUndelegate_default_instance_;
class MsgBeginRedelegateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBeginRedelegate> _instance;
} _MsgBeginRedelegate_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
static void InitDefaultsscc_info_MsgBeginRedelegate_staking_5ftx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cosmos::staking::v1beta1::_MsgBeginRedelegate_default_instance_;
    new (ptr) ::cosmos::staking::v1beta1::MsgBeginRedelegate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBeginRedelegate_staking_5ftx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBeginRedelegate_staking_5ftx_2eproto}, {
      &scc_info_Coin_coin_2eproto.base,}};

static void InitDefaultsscc_info_MsgDelegate_staking_5ftx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cosmos::staking::v1beta1::_MsgDelegate_default_instance_;
    new (ptr) ::cosmos::staking::v1beta1::MsgDelegate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgDelegate_staking_5ftx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgDelegate_staking_5ftx_2eproto}, {
      &scc_info_Coin_coin_2eproto.base,}};

static void InitDefaultsscc_info_MsgUndelegate_staking_5ftx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cosmos::staking::v1beta1::_MsgUndelegate_default_instance_;
    new (ptr) ::cosmos::staking::v1beta1::MsgUndelegate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgUndelegate_staking_5ftx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgUndelegate_staking_5ftx_2eproto}, {
      &scc_info_Coin_coin_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_staking_5ftx_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_staking_5ftx_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_staking_5ftx_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_staking_5ftx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgDelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgDelegate, delegator_address_),
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgDelegate, validator_address_),
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgDelegate, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgUndelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgUndelegate, delegator_address_),
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgUndelegate, validator_address_),
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgUndelegate, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgBeginRedelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgBeginRedelegate, delegator_address_),
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgBeginRedelegate, validator_src_address_),
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgBeginRedelegate, validator_dst_address_),
  PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::MsgBeginRedelegate, amount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cosmos::staking::v1beta1::MsgDelegate)},
  { 8, -1, sizeof(::cosmos::staking::v1beta1::MsgUndelegate)},
  { 16, -1, sizeof(::cosmos::staking::v1beta1::MsgBeginRedelegate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::staking::v1beta1::_MsgDelegate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::staking::v1beta1::_MsgUndelegate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::staking::v1beta1::_MsgBeginRedelegate_default_instance_),
};

const char descriptor_table_protodef_staking_5ftx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020staking_tx.proto\022\026cosmos.staking.v1bet"
  "a1\032\ncoin.proto\"n\n\013MsgDelegate\022\031\n\021delegat"
  "or_address\030\001 \001(\t\022\031\n\021validator_address\030\002 "
  "\001(\t\022)\n\006amount\030\003 \001(\0132\031.cosmos.base.v1beta"
  "1.Coin\"p\n\rMsgUndelegate\022\031\n\021delegator_add"
  "ress\030\001 \001(\t\022\031\n\021validator_address\030\002 \001(\t\022)\n"
  "\006amount\030\003 \001(\0132\031.cosmos.base.v1beta1.Coin"
  "\"\230\001\n\022MsgBeginRedelegate\022\031\n\021delegator_add"
  "ress\030\001 \001(\t\022\035\n\025validator_src_address\030\002 \001("
  "\t\022\035\n\025validator_dst_address\030\003 \001(\t\022)\n\006amou"
  "nt\030\004 \001(\0132\031.cosmos.base.v1beta1.Coinb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_staking_5ftx_2eproto_deps[1] = {
  &::descriptor_table_coin_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_staking_5ftx_2eproto_sccs[3] = {
  &scc_info_MsgBeginRedelegate_staking_5ftx_2eproto.base,
  &scc_info_MsgDelegate_staking_5ftx_2eproto.base,
  &scc_info_MsgUndelegate_staking_5ftx_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_staking_5ftx_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_staking_5ftx_2eproto = {
  false, false, descriptor_table_protodef_staking_5ftx_2eproto, "staking_tx.proto", 443,
  &descriptor_table_staking_5ftx_2eproto_once, descriptor_table_staking_5ftx_2eproto_sccs, descriptor_table_staking_5ftx_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_staking_5ftx_2eproto::offsets,
  file_level_metadata_staking_5ftx_2eproto, 3, file_level_enum_descriptors_staking_5ftx_2eproto, file_level_service_descriptors_staking_5ftx_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_staking_5ftx_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_staking_5ftx_2eproto)), true);
namespace cosmos {
namespace staking {
namespace v1beta1 {

// ===================================================================

class MsgDelegate::_Internal {
 public:
  static const ::cosmos::base::v1beta1::Coin& amount(const MsgDelegate* msg);
};

const ::cosmos::base::v1beta1::Coin&
MsgDelegate::_Internal::amount(const MsgDelegate* msg) {
  return *msg->amount_;
}
void MsgDelegate::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
MsgDelegate::MsgDelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.MsgDelegate)
}
MsgDelegate::MsgDelegate(const MsgDelegate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegator_address().empty()) {
    delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegator_address(), 
      GetArena());
  }
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_address().empty()) {
    validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_address(), 
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::cosmos::base::v1beta1::Coin(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.MsgDelegate)
}

void MsgDelegate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDelegate_staking_5ftx_2eproto.base);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

MsgDelegate::~MsgDelegate() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.MsgDelegate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDelegate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void MsgDelegate::ArenaDtor(void* object) {
  MsgDelegate* _this = reinterpret_cast< MsgDelegate* >(object);
  (void)_this;
}
void MsgDelegate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDelegate& MsgDelegate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDelegate_staking_5ftx_2eproto.base);
  return *internal_default_instance();
}


void MsgDelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.MsgDelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegator_address_.ClearToEmpty();
  validator_address_.ClearToEmpty();
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDelegate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string delegator_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.staking.v1beta1.MsgDelegate.delegator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.staking.v1beta1.MsgDelegate.validator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cosmos.base.v1beta1.Coin amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDelegate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.MsgDelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegator_address().data(), static_cast<int>(this->_internal_delegator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.staking.v1beta1.MsgDelegate.delegator_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegator_address(), target);
  }

  // string validator_address = 2;
  if (this->validator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_address().data(), static_cast<int>(this->_internal_validator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.staking.v1beta1.MsgDelegate.validator_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_validator_address(), target);
  }

  // .cosmos.base.v1beta1.Coin amount = 3;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.MsgDelegate)
  return target;
}

size_t MsgDelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.MsgDelegate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegator_address());
  }

  // string validator_address = 2;
  if (this->validator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_address());
  }

  // .cosmos.base.v1beta1.Coin amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDelegate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmos.staking.v1beta1.MsgDelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDelegate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmos.staking.v1beta1.MsgDelegate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmos.staking.v1beta1.MsgDelegate)
    MergeFrom(*source);
  }
}

void MsgDelegate::MergeFrom(const MsgDelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.MsgDelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegator_address().size() > 0) {
    _internal_set_delegator_address(from._internal_delegator_address());
  }
  if (from.validator_address().size() > 0) {
    _internal_set_validator_address(from._internal_validator_address());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(from._internal_amount());
  }
}

void MsgDelegate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmos.staking.v1beta1.MsgDelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDelegate::CopyFrom(const MsgDelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.MsgDelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDelegate::IsInitialized() const {
  return true;
}

void MsgDelegate::InternalSwap(MsgDelegate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegator_address_.Swap(&other->delegator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_address_.Swap(&other->validator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDelegate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgUndelegate::_Internal {
 public:
  static const ::cosmos::base::v1beta1::Coin& amount(const MsgUndelegate* msg);
};

const ::cosmos::base::v1beta1::Coin&
MsgUndelegate::_Internal::amount(const MsgUndelegate* msg) {
  return *msg->amount_;
}
void MsgUndelegate::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
MsgUndelegate::MsgUndelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.MsgUndelegate)
}
MsgUndelegate::MsgUndelegate(const MsgUndelegate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegator_address().empty()) {
    delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegator_address(), 
      GetArena());
  }
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_address().empty()) {
    validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_address(), 
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::cosmos::base::v1beta1::Coin(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.MsgUndelegate)
}

void MsgUndelegate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgUndelegate_staking_5ftx_2eproto.base);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

MsgUndelegate::~MsgUndelegate() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.MsgUndelegate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgUndelegate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void MsgUndelegate::ArenaDtor(void* object) {
  MsgUndelegate* _this = reinterpret_cast< MsgUndelegate* >(object);
  (void)_this;
}
void MsgUndelegate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgUndelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgUndelegate& MsgUndelegate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgUndelegate_staking_5ftx_2eproto.base);
  return *internal_default_instance();
}


void MsgUndelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.MsgUndelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegator_address_.ClearToEmpty();
  validator_address_.ClearToEmpty();
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUndelegate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string delegator_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.staking.v1beta1.MsgUndelegate.delegator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.staking.v1beta1.MsgUndelegate.validator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cosmos.base.v1beta1.Coin amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgUndelegate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.MsgUndelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegator_address().data(), static_cast<int>(this->_internal_delegator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.staking.v1beta1.MsgUndelegate.delegator_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegator_address(), target);
  }

  // string validator_address = 2;
  if (this->validator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_address().data(), static_cast<int>(this->_internal_validator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.staking.v1beta1.MsgUndelegate.validator_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_validator_address(), target);
  }

  // .cosmos.base.v1beta1.Coin amount = 3;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.MsgUndelegate)
  return target;
}

size_t MsgUndelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.MsgUndelegate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegator_address());
  }

  // string validator_address = 2;
  if (this->validator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_address());
  }

  // .cosmos.base.v1beta1.Coin amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgUndelegate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmos.staking.v1beta1.MsgUndelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgUndelegate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgUndelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmos.staking.v1beta1.MsgUndelegate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmos.staking.v1beta1.MsgUndelegate)
    MergeFrom(*source);
  }
}

void MsgUndelegate::MergeFrom(const MsgUndelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.MsgUndelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegator_address().size() > 0) {
    _internal_set_delegator_address(from._internal_delegator_address());
  }
  if (from.validator_address().size() > 0) {
    _internal_set_validator_address(from._internal_validator_address());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(from._internal_amount());
  }
}

void MsgUndelegate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmos.staking.v1beta1.MsgUndelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUndelegate::CopyFrom(const MsgUndelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.MsgUndelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUndelegate::IsInitialized() const {
  return true;
}

void MsgUndelegate::InternalSwap(MsgUndelegate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegator_address_.Swap(&other->delegator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_address_.Swap(&other->validator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUndelegate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBeginRedelegate::_Internal {
 public:
  static const ::cosmos::base::v1beta1::Coin& amount(const MsgBeginRedelegate* msg);
};

const ::cosmos::base::v1beta1::Coin&
MsgBeginRedelegate::_Internal::amount(const MsgBeginRedelegate* msg) {
  return *msg->amount_;
}
void MsgBeginRedelegate::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
MsgBeginRedelegate::MsgBeginRedelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.MsgBeginRedelegate)
}
MsgBeginRedelegate::MsgBeginRedelegate(const MsgBeginRedelegate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegator_address().empty()) {
    delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegator_address(), 
      GetArena());
  }
  validator_src_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_src_address().empty()) {
    validator_src_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_src_address(), 
      GetArena());
  }
  validator_dst_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_dst_address().empty()) {
    validator_dst_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_dst_address(), 
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::cosmos::base::v1beta1::Coin(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.MsgBeginRedelegate)
}

void MsgBeginRedelegate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBeginRedelegate_staking_5ftx_2eproto.base);
  delegator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_src_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_dst_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

MsgBeginRedelegate::~MsgBeginRedelegate() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.MsgBeginRedelegate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBeginRedelegate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delegator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_src_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_dst_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void MsgBeginRedelegate::ArenaDtor(void* object) {
  MsgBeginRedelegate* _this = reinterpret_cast< MsgBeginRedelegate* >(object);
  (void)_this;
}
void MsgBeginRedelegate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBeginRedelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBeginRedelegate& MsgBeginRedelegate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBeginRedelegate_staking_5ftx_2eproto.base);
  return *internal_default_instance();
}


void MsgBeginRedelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.MsgBeginRedelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegator_address_.ClearToEmpty();
  validator_src_address_.ClearToEmpty();
  validator_dst_address_.ClearToEmpty();
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBeginRedelegate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string delegator_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_src_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_validator_src_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_dst_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_validator_dst_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cosmos.base.v1beta1.Coin amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBeginRedelegate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.MsgBeginRedelegate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegator_address().data(), static_cast<int>(this->_internal_delegator_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegator_address(), target);
  }

  // string validator_src_address = 2;
  if (this->validator_src_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_src_address().data(), static_cast<int>(this->_internal_validator_src_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_validator_src_address(), target);
  }

  // string validator_dst_address = 3;
  if (this->validator_dst_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_dst_address().data(), static_cast<int>(this->_internal_validator_dst_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_validator_dst_address(), target);
  }

  // .cosmos.base.v1beta1.Coin amount = 4;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.MsgBeginRedelegate)
  return target;
}

size_t MsgBeginRedelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.MsgBeginRedelegate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1;
  if (this->delegator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegator_address());
  }

  // string validator_src_address = 2;
  if (this->validator_src_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_src_address());
  }

  // string validator_dst_address = 3;
  if (this->validator_dst_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_dst_address());
  }

  // .cosmos.base.v1beta1.Coin amount = 4;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBeginRedelegate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmos.staking.v1beta1.MsgBeginRedelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBeginRedelegate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBeginRedelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmos.staking.v1beta1.MsgBeginRedelegate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmos.staking.v1beta1.MsgBeginRedelegate)
    MergeFrom(*source);
  }
}

void MsgBeginRedelegate::MergeFrom(const MsgBeginRedelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.MsgBeginRedelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delegator_address().size() > 0) {
    _internal_set_delegator_address(from._internal_delegator_address());
  }
  if (from.validator_src_address().size() > 0) {
    _internal_set_validator_src_address(from._internal_validator_src_address());
  }
  if (from.validator_dst_address().size() > 0) {
    _internal_set_validator_dst_address(from._internal_validator_dst_address());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(from._internal_amount());
  }
}

void MsgBeginRedelegate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmos.staking.v1beta1.MsgBeginRedelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBeginRedelegate::CopyFrom(const MsgBeginRedelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.MsgBeginRedelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBeginRedelegate::IsInitialized() const {
  return true;
}

void MsgBeginRedelegate::InternalSwap(MsgBeginRedelegate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegator_address_.Swap(&other->delegator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_src_address_.Swap(&other->validator_src_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_dst_address_.Swap(&other->validator_dst_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBeginRedelegate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::MsgDelegate* Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::MsgDelegate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::MsgDelegate >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::MsgUndelegate* Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::MsgUndelegate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::MsgUndelegate >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::MsgBeginRedelegate* Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::MsgBeginRedelegate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::MsgBeginRedelegate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
