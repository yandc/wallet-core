// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tx_signing.proto

#include "tx_signing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_crypto_5fmultisig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactBitArray_crypto_5fmultisig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tx_5fsigning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignatureDescriptor_tx_5fsigning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tx_5fsigning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tx_5fsigning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignatureDescriptor_Data_Single_tx_5fsigning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace cosmos {
namespace signing {
namespace v1beta1 {
class SignatureDescriptorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDescriptors> _instance;
} _SignatureDescriptors_default_instance_;
class SignatureDescriptor_Data_SingleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDescriptor_Data_Single> _instance;
} _SignatureDescriptor_Data_Single_default_instance_;
class SignatureDescriptor_Data_MultiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDescriptor_Data_Multi> _instance;
} _SignatureDescriptor_Data_Multi_default_instance_;
class SignatureDescriptor_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDescriptor_Data> _instance;
} _SignatureDescriptor_Data_default_instance_;
class SignatureDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDescriptor> _instance;
} _SignatureDescriptor_default_instance_;
}  // namespace v1beta1
}  // namespace signing
}  // namespace cosmos
static void InitDefaultsscc_info_SignatureDescriptor_tx_5fsigning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cosmos::signing::v1beta1::_SignatureDescriptor_default_instance_;
    new (ptr) ::cosmos::signing::v1beta1::SignatureDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignatureDescriptor_tx_5fsigning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SignatureDescriptor_tx_5fsigning_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto.base,}};

static void InitDefaultsscc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cosmos::signing::v1beta1::_SignatureDescriptor_Data_Multi_default_instance_;
    new (ptr) ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::cosmos::signing::v1beta1::_SignatureDescriptor_Data_default_instance_;
    new (ptr) ::cosmos::signing::v1beta1::SignatureDescriptor_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto}, {
      &scc_info_SignatureDescriptor_Data_Single_tx_5fsigning_2eproto.base,
      &scc_info_CompactBitArray_crypto_5fmultisig_2eproto.base,}};

static void InitDefaultsscc_info_SignatureDescriptor_Data_Single_tx_5fsigning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cosmos::signing::v1beta1::_SignatureDescriptor_Data_Single_default_instance_;
    new (ptr) ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignatureDescriptor_Data_Single_tx_5fsigning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignatureDescriptor_Data_Single_tx_5fsigning_2eproto}, {}};

static void InitDefaultsscc_info_SignatureDescriptors_tx_5fsigning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cosmos::signing::v1beta1::_SignatureDescriptors_default_instance_;
    new (ptr) ::cosmos::signing::v1beta1::SignatureDescriptors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignatureDescriptors_tx_5fsigning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignatureDescriptors_tx_5fsigning_2eproto}, {
      &scc_info_SignatureDescriptor_tx_5fsigning_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tx_5fsigning_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tx_5fsigning_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tx_5fsigning_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tx_5fsigning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptors, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single, mode_),
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi, bitarray_),
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor_Data, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor_Data, sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor, public_key_),
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor, data_),
  PROTOBUF_FIELD_OFFSET(::cosmos::signing::v1beta1::SignatureDescriptor, sequence_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cosmos::signing::v1beta1::SignatureDescriptors)},
  { 6, -1, sizeof(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single)},
  { 13, -1, sizeof(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi)},
  { 20, -1, sizeof(::cosmos::signing::v1beta1::SignatureDescriptor_Data)},
  { 28, -1, sizeof(::cosmos::signing::v1beta1::SignatureDescriptor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::signing::v1beta1::_SignatureDescriptors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::signing::v1beta1::_SignatureDescriptor_Data_Single_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::signing::v1beta1::_SignatureDescriptor_Data_Multi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::signing::v1beta1::_SignatureDescriptor_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::signing::v1beta1::_SignatureDescriptor_default_instance_),
};

const char descriptor_table_protodef_tx_5fsigning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020tx_signing.proto\022\026cosmos.signing.v1bet"
  "a1\032\025crypto_multisig.proto\032\031google/protob"
  "uf/any.proto\"W\n\024SignatureDescriptors\022\?\n\n"
  "signatures\030\001 \003(\0132+.cosmos.signing.v1beta"
  "1.SignatureDescriptor\"\216\004\n\023SignatureDescr"
  "iptor\022(\n\npublic_key\030\001 \001(\0132\024.google.proto"
  "buf.Any\022>\n\004data\030\002 \001(\01320.cosmos.signing.v"
  "1beta1.SignatureDescriptor.Data\022\020\n\010seque"
  "nce\030\003 \001(\004\032\372\002\n\004Data\022I\n\006single\030\001 \001(\01327.cos"
  "mos.signing.v1beta1.SignatureDescriptor."
  "Data.SingleH\000\022G\n\005multi\030\002 \001(\01326.cosmos.si"
  "gning.v1beta1.SignatureDescriptor.Data.M"
  "ultiH\000\032K\n\006Single\022.\n\004mode\030\001 \001(\0162 .cosmos."
  "signing.v1beta1.SignMode\022\021\n\tsignature\030\002 "
  "\001(\014\032\211\001\n\005Multi\022:\n\010bitarray\030\001 \001(\0132(.cosmos"
  ".multisig.v1beta1.CompactBitArray\022D\n\nsig"
  "natures\030\002 \003(\01320.cosmos.signing.v1beta1.S"
  "ignatureDescriptor.DataB\005\n\003sum*\246\001\n\010SignM"
  "ode\022\031\n\025SIGN_MODE_UNSPECIFIED\020\000\022\024\n\020SIGN_M"
  "ODE_DIRECT\020\001\022\025\n\021SIGN_MODE_TEXTUAL\020\002\022\030\n\024S"
  "IGN_MODE_DIRECT_AUX\020\003\022\027\n\023SIGN_MODE_AMINO"
  "_AUX\020\004\022\037\n\033SIGN_MODE_LEGACY_AMINO_JSON\020\177b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tx_5fsigning_2eproto_deps[2] = {
  &::descriptor_table_crypto_5fmultisig_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tx_5fsigning_2eproto_sccs[4] = {
  &scc_info_SignatureDescriptor_tx_5fsigning_2eproto.base,
  &scc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto.base,
  &scc_info_SignatureDescriptor_Data_Single_tx_5fsigning_2eproto.base,
  &scc_info_SignatureDescriptors_tx_5fsigning_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tx_5fsigning_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tx_5fsigning_2eproto = {
  false, false, descriptor_table_protodef_tx_5fsigning_2eproto, "tx_signing.proto", 887,
  &descriptor_table_tx_5fsigning_2eproto_once, descriptor_table_tx_5fsigning_2eproto_sccs, descriptor_table_tx_5fsigning_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_tx_5fsigning_2eproto::offsets,
  file_level_metadata_tx_5fsigning_2eproto, 5, file_level_enum_descriptors_tx_5fsigning_2eproto, file_level_service_descriptors_tx_5fsigning_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tx_5fsigning_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tx_5fsigning_2eproto)), true);
namespace cosmos {
namespace signing {
namespace v1beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tx_5fsigning_2eproto);
  return file_level_enum_descriptors_tx_5fsigning_2eproto[0];
}
bool SignMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 127:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SignatureDescriptors::_Internal {
 public:
};

SignatureDescriptors::SignatureDescriptors(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.signing.v1beta1.SignatureDescriptors)
}
SignatureDescriptors::SignatureDescriptors(const SignatureDescriptors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.signing.v1beta1.SignatureDescriptors)
}

void SignatureDescriptors::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureDescriptors_tx_5fsigning_2eproto.base);
}

SignatureDescriptors::~SignatureDescriptors() {
  // @@protoc_insertion_point(destructor:cosmos.signing.v1beta1.SignatureDescriptors)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignatureDescriptors::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignatureDescriptors::ArenaDtor(void* object) {
  SignatureDescriptors* _this = reinterpret_cast< SignatureDescriptors* >(object);
  (void)_this;
}
void SignatureDescriptors::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureDescriptors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureDescriptors& SignatureDescriptors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureDescriptors_tx_5fsigning_2eproto.base);
  return *internal_default_instance();
}


void SignatureDescriptors::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.signing.v1beta1.SignatureDescriptors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cosmos.signing.v1beta1.SignatureDescriptor signatures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureDescriptors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.signing.v1beta1.SignatureDescriptors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.signing.v1beta1.SignatureDescriptor signatures = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.signing.v1beta1.SignatureDescriptors)
  return target;
}

size_t SignatureDescriptors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.signing.v1beta1.SignatureDescriptors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.signing.v1beta1.SignatureDescriptor signatures = 1;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureDescriptors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptors)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureDescriptors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureDescriptors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmos.signing.v1beta1.SignatureDescriptors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmos.signing.v1beta1.SignatureDescriptors)
    MergeFrom(*source);
  }
}

void SignatureDescriptors::MergeFrom(const SignatureDescriptors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
}

void SignatureDescriptors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureDescriptors::CopyFrom(const SignatureDescriptors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptors::IsInitialized() const {
  return true;
}

void SignatureDescriptors::InternalSwap(SignatureDescriptors* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignatureDescriptor_Data_Single::_Internal {
 public:
};

SignatureDescriptor_Data_Single::SignatureDescriptor_Data_Single(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
}
SignatureDescriptor_Data_Single::SignatureDescriptor_Data_Single(const SignatureDescriptor_Data_Single& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
}

void SignatureDescriptor_Data_Single::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureDescriptor_Data_Single_tx_5fsigning_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

SignatureDescriptor_Data_Single::~SignatureDescriptor_Data_Single() {
  // @@protoc_insertion_point(destructor:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignatureDescriptor_Data_Single::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignatureDescriptor_Data_Single::ArenaDtor(void* object) {
  SignatureDescriptor_Data_Single* _this = reinterpret_cast< SignatureDescriptor_Data_Single* >(object);
  (void)_this;
}
void SignatureDescriptor_Data_Single::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureDescriptor_Data_Single::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureDescriptor_Data_Single& SignatureDescriptor_Data_Single::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureDescriptor_Data_Single_tx_5fsigning_2eproto.base);
  return *internal_default_instance();
}


void SignatureDescriptor_Data_Single::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptor_Data_Single::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cosmos.signing.v1beta1.SignMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::cosmos::signing::v1beta1::SignMode>(val));
        } else goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureDescriptor_Data_Single::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.signing.v1beta1.SignMode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
  return target;
}

size_t SignatureDescriptor_Data_Single::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .cosmos.signing.v1beta1.SignMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureDescriptor_Data_Single::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureDescriptor_Data_Single* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureDescriptor_Data_Single>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
    MergeFrom(*source);
  }
}

void SignatureDescriptor_Data_Single::MergeFrom(const SignatureDescriptor_Data_Single& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void SignatureDescriptor_Data_Single::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureDescriptor_Data_Single::CopyFrom(const SignatureDescriptor_Data_Single& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Single)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptor_Data_Single::IsInitialized() const {
  return true;
}

void SignatureDescriptor_Data_Single::InternalSwap(SignatureDescriptor_Data_Single* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptor_Data_Single::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignatureDescriptor_Data_Multi::_Internal {
 public:
  static const ::cosmos::multisig::v1beta1::CompactBitArray& bitarray(const SignatureDescriptor_Data_Multi* msg);
};

const ::cosmos::multisig::v1beta1::CompactBitArray&
SignatureDescriptor_Data_Multi::_Internal::bitarray(const SignatureDescriptor_Data_Multi* msg) {
  return *msg->bitarray_;
}
void SignatureDescriptor_Data_Multi::clear_bitarray() {
  if (GetArena() == nullptr && bitarray_ != nullptr) {
    delete bitarray_;
  }
  bitarray_ = nullptr;
}
SignatureDescriptor_Data_Multi::SignatureDescriptor_Data_Multi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
}
SignatureDescriptor_Data_Multi::SignatureDescriptor_Data_Multi(const SignatureDescriptor_Data_Multi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bitarray()) {
    bitarray_ = new ::cosmos::multisig::v1beta1::CompactBitArray(*from.bitarray_);
  } else {
    bitarray_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
}

void SignatureDescriptor_Data_Multi::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto.base);
  bitarray_ = nullptr;
}

SignatureDescriptor_Data_Multi::~SignatureDescriptor_Data_Multi() {
  // @@protoc_insertion_point(destructor:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignatureDescriptor_Data_Multi::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bitarray_;
}

void SignatureDescriptor_Data_Multi::ArenaDtor(void* object) {
  SignatureDescriptor_Data_Multi* _this = reinterpret_cast< SignatureDescriptor_Data_Multi* >(object);
  (void)_this;
}
void SignatureDescriptor_Data_Multi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureDescriptor_Data_Multi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureDescriptor_Data_Multi& SignatureDescriptor_Data_Multi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto.base);
  return *internal_default_instance();
}


void SignatureDescriptor_Data_Multi::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  if (GetArena() == nullptr && bitarray_ != nullptr) {
    delete bitarray_;
  }
  bitarray_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptor_Data_Multi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cosmos.multisig.v1beta1.CompactBitArray bitarray = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitarray(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cosmos.signing.v1beta1.SignatureDescriptor.Data signatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureDescriptor_Data_Multi::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.multisig.v1beta1.CompactBitArray bitarray = 1;
  if (this->has_bitarray()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bitarray(this), target, stream);
  }

  // repeated .cosmos.signing.v1beta1.SignatureDescriptor.Data signatures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
  return target;
}

size_t SignatureDescriptor_Data_Multi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.signing.v1beta1.SignatureDescriptor.Data signatures = 2;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.multisig.v1beta1.CompactBitArray bitarray = 1;
  if (this->has_bitarray()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bitarray_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureDescriptor_Data_Multi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureDescriptor_Data_Multi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureDescriptor_Data_Multi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
    MergeFrom(*source);
  }
}

void SignatureDescriptor_Data_Multi::MergeFrom(const SignatureDescriptor_Data_Multi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  if (from.has_bitarray()) {
    _internal_mutable_bitarray()->::cosmos::multisig::v1beta1::CompactBitArray::MergeFrom(from._internal_bitarray());
  }
}

void SignatureDescriptor_Data_Multi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureDescriptor_Data_Multi::CopyFrom(const SignatureDescriptor_Data_Multi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptor_Data_Multi::IsInitialized() const {
  return true;
}

void SignatureDescriptor_Data_Multi::InternalSwap(SignatureDescriptor_Data_Multi* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
  swap(bitarray_, other->bitarray_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptor_Data_Multi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignatureDescriptor_Data::_Internal {
 public:
  static const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single& single(const SignatureDescriptor_Data* msg);
  static const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi& multi(const SignatureDescriptor_Data* msg);
};

const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single&
SignatureDescriptor_Data::_Internal::single(const SignatureDescriptor_Data* msg) {
  return *msg->sum_.single_;
}
const ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi&
SignatureDescriptor_Data::_Internal::multi(const SignatureDescriptor_Data* msg) {
  return *msg->sum_.multi_;
}
void SignatureDescriptor_Data::set_allocated_single(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* single) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_sum();
  if (single) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(single);
    if (message_arena != submessage_arena) {
      single = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single, submessage_arena);
    }
    set_has_single();
    sum_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.Data.single)
}
void SignatureDescriptor_Data::set_allocated_multi(::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_sum();
  if (multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multi);
    if (message_arena != submessage_arena) {
      multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi, submessage_arena);
    }
    set_has_multi();
    sum_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.signing.v1beta1.SignatureDescriptor.Data.multi)
}
SignatureDescriptor_Data::SignatureDescriptor_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.signing.v1beta1.SignatureDescriptor.Data)
}
SignatureDescriptor_Data::SignatureDescriptor_Data(const SignatureDescriptor_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kSingle: {
      _internal_mutable_single()->::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single::MergeFrom(from._internal_single());
      break;
    }
    case kMulti: {
      _internal_mutable_multi()->::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi::MergeFrom(from._internal_multi());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.signing.v1beta1.SignatureDescriptor.Data)
}

void SignatureDescriptor_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto.base);
  clear_has_sum();
}

SignatureDescriptor_Data::~SignatureDescriptor_Data() {
  // @@protoc_insertion_point(destructor:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignatureDescriptor_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void SignatureDescriptor_Data::ArenaDtor(void* object) {
  SignatureDescriptor_Data* _this = reinterpret_cast< SignatureDescriptor_Data* >(object);
  (void)_this;
}
void SignatureDescriptor_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureDescriptor_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureDescriptor_Data& SignatureDescriptor_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureDescriptor_Data_tx_5fsigning_2eproto.base);
  return *internal_default_instance();
}


void SignatureDescriptor_Data::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  switch (sum_case()) {
    case kSingle: {
      if (GetArena() == nullptr) {
        delete sum_.single_;
      }
      break;
    }
    case kMulti: {
      if (GetArena() == nullptr) {
        delete sum_.multi_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUM_NOT_SET;
}


void SignatureDescriptor_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptor_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cosmos.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureDescriptor_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;
  if (_internal_has_single()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::single(this), target, stream);
  }

  // .cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;
  if (_internal_has_multi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::multi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  return target;
}

size_t SignatureDescriptor_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .cosmos.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;
    case kSingle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.single_);
      break;
    }
    // .cosmos.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;
    case kMulti: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.multi_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureDescriptor_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureDescriptor_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureDescriptor_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmos.signing.v1beta1.SignatureDescriptor.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmos.signing.v1beta1.SignatureDescriptor.Data)
    MergeFrom(*source);
  }
}

void SignatureDescriptor_Data::MergeFrom(const SignatureDescriptor_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kSingle: {
      _internal_mutable_single()->::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single::MergeFrom(from._internal_single());
      break;
    }
    case kMulti: {
      _internal_mutable_multi()->::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi::MergeFrom(from._internal_multi());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
}

void SignatureDescriptor_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureDescriptor_Data::CopyFrom(const SignatureDescriptor_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptor.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptor_Data::IsInitialized() const {
  return true;
}

void SignatureDescriptor_Data::InternalSwap(SignatureDescriptor_Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sum_, other->sum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptor_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignatureDescriptor::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& public_key(const SignatureDescriptor* msg);
  static const ::cosmos::signing::v1beta1::SignatureDescriptor_Data& data(const SignatureDescriptor* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
SignatureDescriptor::_Internal::public_key(const SignatureDescriptor* msg) {
  return *msg->public_key_;
}
const ::cosmos::signing::v1beta1::SignatureDescriptor_Data&
SignatureDescriptor::_Internal::data(const SignatureDescriptor* msg) {
  return *msg->data_;
}
void SignatureDescriptor::clear_public_key() {
  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
SignatureDescriptor::SignatureDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.signing.v1beta1.SignatureDescriptor)
}
SignatureDescriptor::SignatureDescriptor(const SignatureDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_key()) {
    public_key_ = new PROTOBUF_NAMESPACE_ID::Any(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::cosmos::signing::v1beta1::SignatureDescriptor_Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:cosmos.signing.v1beta1.SignatureDescriptor)
}

void SignatureDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureDescriptor_tx_5fsigning_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&public_key_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&public_key_)) + sizeof(sequence_));
}

SignatureDescriptor::~SignatureDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.signing.v1beta1.SignatureDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignatureDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete public_key_;
  if (this != internal_default_instance()) delete data_;
}

void SignatureDescriptor::ArenaDtor(void* object) {
  SignatureDescriptor* _this = reinterpret_cast< SignatureDescriptor* >(object);
  (void)_this;
}
void SignatureDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureDescriptor& SignatureDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureDescriptor_tx_5fsigning_2eproto.base);
  return *internal_default_instance();
}


void SignatureDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.signing.v1beta1.SignatureDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  sequence_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cosmos.signing.v1beta1.SignatureDescriptor.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.signing.v1beta1.SignatureDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any public_key = 1;
  if (this->has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  // .cosmos.signing.v1beta1.SignatureDescriptor.Data data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // uint64 sequence = 3;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.signing.v1beta1.SignatureDescriptor)
  return target;
}

size_t SignatureDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.signing.v1beta1.SignatureDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any public_key = 1;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // .cosmos.signing.v1beta1.SignatureDescriptor.Data data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmos.signing.v1beta1.SignatureDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmos.signing.v1beta1.SignatureDescriptor)
    MergeFrom(*source);
  }
}

void SignatureDescriptor::MergeFrom(const SignatureDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.signing.v1beta1.SignatureDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_key()) {
    _internal_mutable_public_key()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_public_key());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::cosmos::signing::v1beta1::SignatureDescriptor_Data::MergeFrom(from._internal_data());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void SignatureDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureDescriptor::CopyFrom(const SignatureDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.signing.v1beta1.SignatureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptor::IsInitialized() const {
  return true;
}

void SignatureDescriptor::InternalSwap(SignatureDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignatureDescriptor, sequence_)
      + sizeof(SignatureDescriptor::sequence_)
      - PROTOBUF_FIELD_OFFSET(SignatureDescriptor, public_key_)>(
          reinterpret_cast<char*>(&public_key_),
          reinterpret_cast<char*>(&other->public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace signing
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::signing::v1beta1::SignatureDescriptors* Arena::CreateMaybeMessage< ::cosmos::signing::v1beta1::SignatureDescriptors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::signing::v1beta1::SignatureDescriptors >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single* Arena::CreateMaybeMessage< ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Single >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi* Arena::CreateMaybeMessage< ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::signing::v1beta1::SignatureDescriptor_Data_Multi >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::signing::v1beta1::SignatureDescriptor_Data* Arena::CreateMaybeMessage< ::cosmos::signing::v1beta1::SignatureDescriptor_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::signing::v1beta1::SignatureDescriptor_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::signing::v1beta1::SignatureDescriptor* Arena::CreateMaybeMessage< ::cosmos::signing::v1beta1::SignatureDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::signing::v1beta1::SignatureDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
