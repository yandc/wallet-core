// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gov_tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gov_5ftx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gov_5ftx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gov_5ftx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gov_5ftx_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gov_5ftx_2eproto;
namespace cosmos {
namespace gov {
namespace v1beta1 {
class MsgVote;
class MsgVoteDefaultTypeInternal;
extern MsgVoteDefaultTypeInternal _MsgVote_default_instance_;
}  // namespace v1beta1
}  // namespace gov
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> ::cosmos::gov::v1beta1::MsgVote* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::MsgVote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cosmos {
namespace gov {
namespace v1beta1 {

enum VoteOption : int {
  VOTE_OPTION_UNSPECIFIED = 0,
  VOTE_OPTION_YES = 1,
  VOTE_OPTION_ABSTAIN = 2,
  VOTE_OPTION_NO = 3,
  VOTE_OPTION_NO_WITH_VETO = 4,
  VoteOption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VoteOption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VoteOption_IsValid(int value);
constexpr VoteOption VoteOption_MIN = VOTE_OPTION_UNSPECIFIED;
constexpr VoteOption VoteOption_MAX = VOTE_OPTION_NO_WITH_VETO;
constexpr int VoteOption_ARRAYSIZE = VoteOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoteOption_descriptor();
template<typename T>
inline const std::string& VoteOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoteOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoteOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoteOption_descriptor(), enum_t_value);
}
inline bool VoteOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VoteOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoteOption>(
    VoteOption_descriptor(), name, value);
}
// ===================================================================

class MsgVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.MsgVote) */ {
 public:
  inline MsgVote() : MsgVote(nullptr) {}
  virtual ~MsgVote();

  MsgVote(const MsgVote& from);
  MsgVote(MsgVote&& from) noexcept
    : MsgVote() {
    *this = ::std::move(from);
  }

  inline MsgVote& operator=(const MsgVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgVote& operator=(MsgVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgVote& default_instance();

  static inline const MsgVote* internal_default_instance() {
    return reinterpret_cast<const MsgVote*>(
               &_MsgVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgVote& a, MsgVote& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgVote* New() const final {
    return CreateMaybeMessage<MsgVote>(nullptr);
  }

  MsgVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgVote& from);
  void MergeFrom(const MsgVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.gov.v1beta1.MsgVote";
  }
  protected:
  explicit MsgVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gov_5ftx_2eproto);
    return ::descriptor_table_gov_5ftx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoterFieldNumber = 2,
    kProposalIdFieldNumber = 1,
    kOptionFieldNumber = 3,
  };
  // string voter = 2;
  void clear_voter();
  const std::string& voter() const;
  void set_voter(const std::string& value);
  void set_voter(std::string&& value);
  void set_voter(const char* value);
  void set_voter(const char* value, size_t size);
  std::string* mutable_voter();
  std::string* release_voter();
  void set_allocated_voter(std::string* voter);
  private:
  const std::string& _internal_voter() const;
  void _internal_set_voter(const std::string& value);
  std::string* _internal_mutable_voter();
  public:

  // uint64 proposal_id = 1;
  void clear_proposal_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 proposal_id() const;
  void set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_proposal_id() const;
  void _internal_set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .cosmos.gov.v1beta1.VoteOption option = 3;
  void clear_option();
  ::cosmos::gov::v1beta1::VoteOption option() const;
  void set_option(::cosmos::gov::v1beta1::VoteOption value);
  private:
  ::cosmos::gov::v1beta1::VoteOption _internal_option() const;
  void _internal_set_option(::cosmos::gov::v1beta1::VoteOption value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.MsgVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_;
  ::PROTOBUF_NAMESPACE_ID::uint64 proposal_id_;
  int option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gov_5ftx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgVote

// uint64 proposal_id = 1;
inline void MsgVote::clear_proposal_id() {
  proposal_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgVote::_internal_proposal_id() const {
  return proposal_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgVote::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.MsgVote.proposal_id)
  return _internal_proposal_id();
}
inline void MsgVote::_internal_set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  proposal_id_ = value;
}
inline void MsgVote::set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.MsgVote.proposal_id)
}

// string voter = 2;
inline void MsgVote::clear_voter() {
  voter_.ClearToEmpty();
}
inline const std::string& MsgVote::voter() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.MsgVote.voter)
  return _internal_voter();
}
inline void MsgVote::set_voter(const std::string& value) {
  _internal_set_voter(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.MsgVote.voter)
}
inline std::string* MsgVote::mutable_voter() {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.MsgVote.voter)
  return _internal_mutable_voter();
}
inline const std::string& MsgVote::_internal_voter() const {
  return voter_.Get();
}
inline void MsgVote::_internal_set_voter(const std::string& value) {
  
  voter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgVote::set_voter(std::string&& value) {
  
  voter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cosmos.gov.v1beta1.MsgVote.voter)
}
inline void MsgVote::set_voter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:cosmos.gov.v1beta1.MsgVote.voter)
}
inline void MsgVote::set_voter(const char* value,
    size_t size) {
  
  voter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cosmos.gov.v1beta1.MsgVote.voter)
}
inline std::string* MsgVote::_internal_mutable_voter() {
  
  return voter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgVote::release_voter() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.MsgVote.voter)
  return voter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgVote::set_allocated_voter(std::string* voter) {
  if (voter != nullptr) {
    
  } else {
    
  }
  voter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.MsgVote.voter)
}

// .cosmos.gov.v1beta1.VoteOption option = 3;
inline void MsgVote::clear_option() {
  option_ = 0;
}
inline ::cosmos::gov::v1beta1::VoteOption MsgVote::_internal_option() const {
  return static_cast< ::cosmos::gov::v1beta1::VoteOption >(option_);
}
inline ::cosmos::gov::v1beta1::VoteOption MsgVote::option() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.MsgVote.option)
  return _internal_option();
}
inline void MsgVote::_internal_set_option(::cosmos::gov::v1beta1::VoteOption value) {
  
  option_ = value;
}
inline void MsgVote::set_option(::cosmos::gov::v1beta1::VoteOption value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.MsgVote.option)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace gov
}  // namespace cosmos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cosmos::gov::v1beta1::VoteOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmos::gov::v1beta1::VoteOption>() {
  return ::cosmos::gov::v1beta1::VoteOption_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gov_5ftx_2eproto
